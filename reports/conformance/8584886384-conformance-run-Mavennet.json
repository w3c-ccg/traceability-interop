{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0dbc3255-d272-4fd7-866b-7ba8c6c1fb1e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "747f5b74-f822-474c-9dcb-436676b4c84b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9837637-2573-4192-b408-91844f1d2ff0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "74407ec5-d203-4b2d-948f-46e4c18d127f"
                }
              }
            ]
          },
          {
            "id": "f180f048-f6bb-4301-9c53-7759ecede628",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddbfa21b-b294-4e6b-9f9c-f55594429d86",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "af1555ca-9478-41fe-be72-126bdd4d4386"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13dd1e99-9f6a-4e3b-b267-a406de293669",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "881406e4-6e48-4a70-b4c5-78ba21e7f3f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "860bd5ce-8fc0-4240-9bd1-cb508ac3036c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71d4086b-e974-4c58-bb5d-899467a130b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a8df99a-4d6a-4e3a-9c66-eb15a17141f6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "835e4b75-47ac-4520-b64e-e4f62f9701fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ff639a6-0bf6-40a9-b41c-59a653d5e473"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73ff5fb6-4d8b-431c-be89-6df191c145eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a6017a8-3604-48d4-b5af-45021bac61c8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1e55f02-17c7-4672-a461-50dc324f3a87",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c1a0c185-7c5b-4332-8a21-11be8ad21b9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7282cbef-9c4a-499f-8cf6-8e1839f09853",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fde6689-39c7-4606-a20e-4c598a01c4ab"
            }
          }
        ]
      },
      {
        "id": "e30c7461-b794-4736-9771-8850e645f468",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "25f9258b-8e33-46c2-8ef5-2a32208ddf8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad3cf5e8-c2c8-49b2-9488-9f8138a1c58e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0012929d-40de-47d9-8a81-a193785507f7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9b6e33-f73f-4294-9dec-795aab44634a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bce9ee50-be10-4de0-973b-40cb5b8e5fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ded55d-b748-405f-891f-d1da396ab726",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aed622-a2c8-480b-877f-ccd34b840a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d7e94af-ae88-4359-ab9a-856e26cb136d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149aacaa-f2ce-44ca-a127-6bb491b1bbe2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b58529-d842-43a5-ab89-6f5477a7edcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0851c8d8-6283-4e06-81c0-6f7d1deecff2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6c5c4b78-e906-4e0e-82a6-c3d97b47fbba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33160bf9-614d-4237-9c85-24b2245bb018",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d0c0db-2ca2-4464-84d1-55ca02f56683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84d6f2d6-ff75-4c0e-a0be-1d779a4019e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995643a5-900b-46f1-bb07-3bd53079da18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906f8c72-6863-4d3d-915b-cbf1a4302a62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "66fb600d-5260-4647-bd61-35e162f346f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8462e5e-e67c-492f-9c15-df4ba3de13bb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "520b45e4-cb3e-4b9b-811d-da568dd7d334",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0772edd2-014a-4d8e-9305-3a1eb1d5b389"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c8c502c-3ccb-4e01-8bda-8cfd53288be2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "79edc428-5413-4c2a-990f-203bfef29f51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec62e56-0dbf-4c10-9bf3-28b23c71644e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c0edc9d-9723-48bc-9325-482c11dded41"
            }
          }
        ]
      },
      {
        "id": "8953749d-8cfc-41b8-b8f5-f074efe04967",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "71e5ca0e-6a06-409c-bf43-65ce34e3da62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c22398da-0a44-4a3a-b271-0767ba688966",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f38d3503-9374-4f13-8dff-6c3094c5c629",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430313c1-a2e1-4e44-b29f-dca55d743d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd5d4f9-06db-40d4-a531-f684402f2e5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613da850-086c-4949-8db3-ddfc4888e31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4191855f-271b-490a-90e2-8b76a5b6fb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f089f3e7-90d0-46ff-965b-8a7bda92d221",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa94188-9a60-45e0-b8da-8427fe35f477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f13f385-d518-4bc0-bdc4-297ad041e95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5e10a8-92f1-4ea8-ae7a-9c5ec40e220c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48be6991-ba68-4d64-909e-4c1227479cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc83b93-683b-4aa4-8c92-1ae71a200b93",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47865a2-3986-43ab-989d-a68ce93a222b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2986cee-7173-4abc-9a0a-67167a47a146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eada3b4-7486-4eb9-a39e-50c89f0fadd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35a45440-fa83-4ce1-b42f-5991cc383ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc99a3a3-1343-4773-a10d-38c941f500eb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79790b0a-7353-49e1-947a-2c0c9986162e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be16414b-cb00-4cd6-98b2-4ca3c3d79f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd954cf-8f6f-4f5e-8741-ed4c43a1a937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06b9aecd-d33c-4c66-aff1-9be0df0d7ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c467bba-9c9a-413f-aad7-b5c285a0aace",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f247c02b-a90d-49a8-b416-4f259d09e5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028124e0-19d4-439d-b13e-de82d30bece6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc555b1-b208-404c-8aae-77a65f426ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d38dc197-3cef-47bd-bf35-ef7f63a48562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1317686-3681-487d-a0e6-26eb8cb88eff",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0b47d5-a882-4a26-a405-cab049c16938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde51096-5a6c-434c-bdde-088f4d3bde6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05c1b62-1354-4528-a243-cda47cdcfb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28c43d1a-51ab-44c6-9b3a-e329c83440f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071589d6-cdc0-43a6-8128-06c6a7bc91c9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764fcb4f-3b8c-4a8b-82f5-5d1ab9bed7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5781eb0c-d9cb-42d3-9051-083d9e0c3b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6755532f-2c5a-4525-8ec3-3d434d528742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710fc8ec-6b49-4193-ae52-872d9b65eda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179a66eb-bc37-4f81-aa19-42d045144045",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf826b2a-f68f-4d24-8b5d-4db04b90aba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59dfab29-e390-4f65-910c-d1c59158679e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f50c3fb-c4cf-49df-adc1-ea0b9177d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f4922a9-2a3f-44c7-b1cf-057accbc800c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78433890-2e2d-458b-b9d2-625880379ace",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdf7309-b3bb-4fb7-ac7b-dbce11538dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ff8a8c-96a1-49d0-8d13-f39c536b9379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9a0638-9f15-447e-a605-2a172bde1cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16ec0060-0dbb-4c28-9ecb-fac843777a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04922905-c9d3-421e-959c-a6977852b2d8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c25ec25-78e2-4f52-806b-51eb8e7a3a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fba20bb-317e-433f-bfbd-0d5845acb6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8af2dc-d505-4715-9615-626cf1503ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c26e5ba-088e-49d3-a9bb-63a35725fb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6056aa-e5bd-4e71-8a53-88a6dd8a8254",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3766264f-4e5b-4933-a2ce-e999dfee27cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2b834d-d2d5-4a46-a38c-726fe1bcdd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807f7452-0c15-4f49-99ce-89520fa864ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b074991-e3b8-485d-a0d5-8374515f06ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a211092-e01a-4e1e-a1dc-eab54fed3de4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092ed804-c716-4245-bdfd-ebcb15fb710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd98141-5f5d-485b-a44f-7d91fd27dac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4fa0d3-3087-4c73-93c8-f116e6790352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd829156-9b80-44dc-a2e9-c678a7f595fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a01f96e-261a-4226-931d-1ae627e14a02",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ef5723-0f2a-4526-8b6d-ac4cb90e5664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fa4595-3dfa-4976-87fd-40c88309d519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5c0275-f28c-43da-82c2-31b6f281b545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a9ee357-fb78-42ef-bd89-ac3ad086d631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a502f6-8718-4231-9f8c-f287c5b06630",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dad711-f11b-4627-b4bf-dce012dd3704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8ed841-a29f-45bc-98f9-0a33e8fba4b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb494f74-434c-40a5-b8e3-1fdf9f6b820f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43db5236-22e6-4b11-9584-39365c7e14a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d967e48-f6ca-4cc9-b2cc-3003db873ef5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3386e2-0c83-42d0-a6a1-908fb8a50597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bd706d-cf2a-4ee8-95f6-52e7f14ab1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9480dbb-ddc3-487a-9691-0c511730f822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ea07a6f-09ff-44ed-bf33-c8119456348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d5f659-f42e-4636-b392-716493103068",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a560c0e-e583-4060-a12e-7ecb0c2e9165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a94b2cc-e620-4ebc-9a3c-53001bfad6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c06c84-a89e-4ea4-98bd-ff52d1041678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "587f02aa-efeb-4f9a-9dd5-a1ab04243229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c32bbd-1a13-4e6c-8cd2-ee5a634606e8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf247edc-fd1e-4cf9-bc01-08d306f7fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e468e5-e98a-46d1-94be-9872647396e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aa2b8e-1be3-4e90-90ad-3f52e91355f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1944f199-2031-4403-803b-a8d7c7910665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dac32b-bab9-4ca1-8919-a3b38460431e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4649bbf7-fde9-4418-af02-54792e2db9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe89b2d-fcc7-4715-b629-24651e3ea38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604c9961-3231-4606-bddb-a1468b9ee17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f04169f7-8a83-4c21-82b5-787f401af0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a8371f-7a06-4c2d-a1a4-2df6af0b4cd5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e966ce2a-9057-4a40-bb83-3f10438729dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f73c6d-14b0-4fa2-b126-85edc3fb272b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f99cd2-b8b7-4565-b2ee-5c5b4acfccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e88c5486-c759-4499-9543-2985292308d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d331fa8a-6915-4c17-bd94-9c00927084de",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0f2fb6-2095-41fb-b933-b21b24ab3d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdf4a1d-49d2-4aba-9c45-e2f4bf67d27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089ef1ac-ef73-4db1-81c1-309d07c051c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb2050-441e-4165-a6de-4c53a5a36e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b792f4-d194-421e-a1e6-3e0751e5c1b8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28a752f-75ee-4bbf-934f-06864305d7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce61681-f279-4335-9d66-20c22fea8d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a1e363-5fca-4849-8695-7c4cd5a46d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91cb4288-a0b2-419c-8a63-39e64c346fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b401c18-691a-4d39-ba54-c1e24f6ede9e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7da46e3-b8b2-408b-aa2e-6a1931cd04aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d64fd9-ed6c-4f0c-879b-bc94fcd2619f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaacdf5-8e2e-4c8a-8b4c-f77b6cf010ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14d3bc11-c7d6-44ff-9b58-087ad418e949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f278700-5359-41c5-a8c2-1a31231718dc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5695881c-845a-4050-adae-348dae9f25a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7dcf82-622b-4609-b483-d31565a1f42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43259a53-d3ef-4ac7-9289-be4810746897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9af76dfc-4245-4c60-9da3-bd1684698093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59aaa47-ed3a-44a2-91e3-7727d92f32f9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc239c58-e651-4fa7-a655-d34fee17b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d735d0-2e8b-4fa3-a4e7-4b1109637cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599e248f-056b-414b-90bb-6ffeb41d1792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd00eac-7174-43e2-9492-7bafbc17a85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891c07ed-7a94-48c9-a60a-6cbcefd4fb00",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5f5967-1ff6-48dc-b596-e1f94fa9003f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561a1769-18cd-4aaf-a9e1-f54f1b9a2b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce11388-0a86-48b8-8572-01b0ceb7895c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "358380d7-5c34-4262-972c-c289c93a55d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833df066-9dd6-4235-ae81-083b6ff64387",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575db06b-fd85-4b16-a11b-84ada0ea0958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e04a4f-dc6f-4044-aad0-b78a3683675a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cec6e7-0b92-44cc-bb4c-158e85f1c87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0e8a83-43dc-4c00-876f-2b8bc9221be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70884005-d18c-4332-a488-a5c7a0dd9762",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c54f315-54eb-4ea6-8f82-701f2b3d90bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba9e4e3-f0bc-4b6d-9211-10adeaa30cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273c43b3-dc8b-4ace-b87b-d9c3dd5a93cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e322c8-a8db-4749-ba83-00c0818747ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b32187-b84a-48d9-a1c0-6db4b8349372",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd49844-9c8f-4e6b-9009-bcb2509da619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90eca0e-8be2-4b72-987d-0b23b3278955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131cd161-1f83-49de-9743-b14aed21e7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fc4a6d-50e9-40b8-b6c6-a303d024d761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4521a8-255a-4f97-b846-e2cf6f608a92",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15276420-b5bc-4014-b871-0a897ded2d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf77f6ca-4705-434f-a691-0ca1b03c7984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7303f321-0a4e-4af1-8eef-753a8dc64a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "748ac820-c3d2-461d-8ddf-56a385da7db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5c9071-e562-4bf7-8a5d-12e53b37e48d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1e899b-1e27-44ea-811a-2179e288482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d722e376-2ac1-480f-b57a-31b173c1633f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7d1157-21a8-4c60-9a3f-d560ee9678bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "53dc51cf-ee3a-46a3-ae13-b5f5efd26bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60d54f3-f522-481b-994c-3afcba6943fe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4beb3e2-557b-4e77-ba45-0b22efebfb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5711c017-cd28-448e-8922-cdb6817ccdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60afd5d9-de74-406f-8b01-c45e0e839d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "450653f2-7b1d-4e5e-8a96-d98440990996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a01a44-7c5c-4d89-9531-9ddca92352a9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f8856d-cfc1-4a11-b73c-c148102bd46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bbe94be-2523-439d-a94c-580b579acd52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8aed11a-bfca-4c57-9b81-702606236404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad18ac8-478c-418a-925f-3ab6c7caccc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5690b3d4-4ef1-4f48-b310-e989e5bd6c6b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea81588-c79e-4d27-a052-c670b8ddb577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f353f8f0-e10e-41a7-8132-0dab6ce808d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcebe071-1ca2-4696-b44a-8658f08c6a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5da3f6-f759-4a01-a44c-079b002d2883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e591bf19-83c8-4189-83df-3de72f1e6661",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dcecb7-225b-4d83-b73a-39afa7a88a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5187436-a02f-42ba-99cb-cbcf0ee2fe73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeceb40-bd77-4d40-8099-fa5fe13e2305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ba0cf3-c6c0-4f8b-9e20-9a579b7209eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20df1bc-85bd-4364-b049-293b3da78939",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990e8c7d-6d36-440d-a32d-9860d895c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9490e2e6-211f-45bd-aaec-0f741182ba2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccac1d80-796f-4948-8226-a7aebec37131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f91f36a1-4d4d-4415-91a9-7f37db906c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219ff68d-35a0-4e5d-a774-86839decc845",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643643c5-3b57-4caa-931b-d7110f562361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f669055-e431-4fdb-ada2-48186f44c223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef73691-f270-4f12-9214-169e276073f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c6171d-de39-4491-a60d-0f3d6f2d92c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1457151b-5d9b-4de8-9083-e52b9cce8c2c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa3ce54-804c-48cd-aa4f-2ac9922ea801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26383c9b-c70e-480f-879a-e56ebb8b3cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b826cb-6eaf-4bca-be54-5facfbc1774b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a370a880-ce62-4efe-914a-9e53167b2209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf9def4-149f-4498-908e-e07ee2c73975",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0be6b5-b321-4ad3-bb0e-cbed761c23bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d88da3-5673-436a-b4ca-e74886331a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520c0217-5f97-4dbb-8cfe-d56cec825fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a298d5b7-6b11-4952-80d2-dddf3dfa738f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d039283-a213-4871-9ccc-ed2c49a2a35c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16bf8c4-4129-4509-a288-d2af01a90605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7661bc-e13c-4feb-9157-43b101689df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcd1922-8ee2-4a05-95a9-e2e89e3bc250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7403ede-89f7-4d21-a2a9-18305157f0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b62b7c-d947-4c2e-a98f-96bf4259ede4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20622f9-3ed1-4858-8a94-4b2960beec6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46bf3a0-5c81-48e5-b991-78071b1dc70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72e3853-2232-4f10-aab3-efdbc73b03ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96669df3-5d7e-4036-90e4-979fca9d56fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd0b8fa-4365-4932-9104-85b527685ac5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52c5908-2436-490a-85df-291ba2917399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22dd219-4e7d-4b6e-ad4a-6d413ca37dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c48f1a-0b49-4e4a-8d46-b7d751177a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "631552ec-3d08-43ae-b4df-14fc27552589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ddadce-9c2f-4988-8491-95a019b3b7f3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d270524-44b8-4e96-ba73-9be22d5ec431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2600d1c1-a0b9-4177-9950-4dbb75413ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdffe1b5-19c8-439c-ad89-53226d54231f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6949e3cb-e3f2-4fb6-9cf1-669977aa4b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d11d36-69ad-4049-b7b8-53c4fbeca444",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5119901-2e75-43ac-98d6-62a12dd0fb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8ad29e-d83d-4451-bfe3-926b7158da35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c75692-62f6-4a16-b170-2507bd979102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ecd80c-08c7-4ae0-b1e0-0c6634d955e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b95754c-b26a-4363-a4be-479098fc6645",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411edd9d-caf7-4fad-99df-feb569569711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc57b3cb-8e63-487e-b3ac-00c0094a9605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04cbd9e3-ecde-479d-bc58-781e915695ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c30fcaa-1035-4256-ab73-b407c0e17bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cdd510-fdfc-46ce-8e08-0fc150341dd4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc508d8d-4000-4fbe-b1cb-ac9c91f1f2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bcd69b-f2c7-492c-a1f9-524b828a13bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0b324e-ce3d-4714-bcaa-4c91238e8239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d78320b-b097-4c9c-a2f7-c70b6bbc975c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e369c4-adb5-413d-ada6-a066a87fd2cf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7902cf-cfdd-453a-8bed-95115116857b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8ef74c-1ebb-4f96-aa44-e147d067a5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f6f0f3-a9f1-4a17-80b6-bec53329769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "866f300c-b5a9-4276-8548-be373350fd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4900cb-3419-4750-bb11-f67b0ac7c68e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b9e974-f534-435e-8f1b-e9dcc67dba04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08106301-743f-4fe4-82b7-e02f02bbf335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5792ff-dd26-4d20-9dc3-1e2adf895caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8be96e-9358-4000-85b1-a3884f1e0562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3600895-7770-4be7-b3e4-73738e0d7904",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e716bb1-c980-43bf-80ad-79b1894da448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5a8af9-2e84-4214-9667-ba986dce1306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79f4e5b-0e2c-4550-a74b-204ed0218708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "014cf80b-fa00-4026-a372-59b3d24a81b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103cdc07-2118-4441-93f9-e6a83f182df8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8632d7c0-ce8a-472e-88a5-7cae0db4ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52977096-bc34-43a6-a756-f658d8fe60cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c04ca7-dbdd-4d32-99ef-a2e1d68ae693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce540b3f-ba5a-4660-9379-e4ca1b2fce75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d4f81d-b781-4557-8699-2f20b2c0f3a1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed04a0a-1465-4a3d-b402-506ce2ad4e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bc9250-cebe-4a91-8b91-fa78a48950c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717aa0dd-1e9e-4287-bf05-25af327474bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab91e84-9c0b-408d-8819-0c130c03846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc030ab8-f178-4fe7-a778-c5bdb3622d5e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d052dd-e915-4c70-91af-8ac864547928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea80123-9541-4d38-a6fd-e9a1e1eb93f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cc6bd7-a3e5-436b-b48e-b16c5da889f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "49f1414c-24f0-4981-9eb4-262ebd1761b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7999319f-2a31-45c2-b03b-daff31768622",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10433419-30d4-4808-bb90-606523fb47c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30329c2-0a92-417e-b3fd-bf456acac5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331ae793-808f-426a-bcef-4f4bce91de46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "617bf908-b329-4b20-b99b-cd140cac45dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aff498-77aa-42f1-b890-2c58e371d0cb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d889adc-ee85-4e79-a81c-88b74843036c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3d1f6a-93a2-469f-818a-6ddd32d8dd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aecb3e-d741-40ef-862c-c090ec2d284a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63bbf3d1-dc28-415e-8412-e95bcd938582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ebc72a-36e5-42d1-bb95-fcea73b6bd92",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e673cd16-e1f0-4981-bb88-5eb4324c9055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f68a93-1df5-4f66-a730-c165e069a0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69f8391-0c79-4a91-b7d6-1aafd81c3e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c763cbb7-ff5a-4fbe-b333-c2bfe1229b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8449e1c0-673c-417d-9a4a-a528e35aee97",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c0a8e6-60e9-47d7-a7b0-460093de506d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf055df7-dacd-4b57-aaf0-6c3e6c101da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42823478-247e-4279-b6e1-42c7bc77fe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5b6b09-6760-430b-8579-3bcedb1ef5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae509d21-3f67-45c6-b260-66242b317a41",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bf8968-fbac-4891-8962-efe426286d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dac51d7-8a3e-4c93-8df1-043ff6c17628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb03f57-d886-4805-bfd6-332556ed01cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6a74cf4d-d043-4f96-bb45-7f13e38a8258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8d7945-44d4-458c-bfa5-7e5add33b41b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a07d6e-0f42-42eb-9e27-2aa772775f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31b0501-7bf3-4fad-9cf1-ca7f32f3b3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d25227-eb3a-439d-93a5-48190cc756ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e14b935-ad61-4d43-a2b5-1c7ac8357bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b808e231-c344-4557-bd55-200c117c7088",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f4df1-c47f-44e9-ac69-2ad687240acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b5ecbf-22f4-43a1-95f0-7e0dee810329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0881a5c-f9de-4d46-92de-69fb5a192baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bab3929-7db7-4a08-97d8-729a6e4f5d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f6e150-5bd1-4ab7-bc6f-f60335d74384",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc8e513-67d3-4f0a-afca-66383bb294e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1731988-d9a4-4b3f-b039-2790b670e799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186778fb-8515-4e66-843e-da58b5171dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfcbe022-219a-423e-ac27-f9164bd1f5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49eb930-dab0-420a-a02b-26f6569af826",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de696224-b82a-4216-8b9e-cae2ee038f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cb8695-a63a-458c-8de1-a1dd3ab33e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f17c90-44bf-49cb-b9a2-43e0ed4cad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "489f6640-54db-4df1-a2ec-976078fac186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e6214c-2d35-4356-9f5e-a21f74e1b73d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d94fc4-6604-4c7f-9c47-b276c3a3b798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d24a6f5-fd4a-4b02-ab13-b97fa1074cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7035b8fd-48b1-4e56-a2de-2b770c0823cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c9cec0-335e-4177-8545-50c84e0852b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceda3955-f995-4986-87c6-7f25521bc245",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae1e1fe-c027-4f35-93c6-dfedb1fc44d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b58b02b-fd60-4906-91b7-83dc500bab1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c399f04c-33b9-4de9-b160-bfeaf0c16b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a06982-be29-4d1f-baff-6d733521f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e3a146-465d-4d8a-8314-5256bec603af",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655155f1-4c41-458d-b696-0c2713a82af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc20ada-9025-4601-95a1-f70ebf1850f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07473e94-58bf-4192-9159-4b47c87d05a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b99977-0f45-434c-ae2a-3ef1a0ccc2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04103cb-2199-485b-96fe-26e0ed102437",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea064f94-afba-406d-8809-7d241cf9f4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a50d27a-aa12-471f-b5db-eac6cd13d606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b294b4-d265-45e8-8de8-4fd2060968b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83825969-fc5e-4018-99ff-ec048f777e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5465b7-8505-4541-bde9-30d5c2972644",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52ca167-edc9-490a-868c-5aba2873b63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c712b9b-d190-4045-8dbb-f336cb0c9c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed620b9-9f32-4a8d-8a54-4b62961690fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb1ef55-07ee-4e69-b423-fd5d76889f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866bdb94-c3d2-4713-a901-f41e1552d37e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17494b5-53e2-4cab-83eb-560471790e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2971596a-05dd-4c50-979a-b5b8b0ea63eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85a3c91-133b-4fd7-83bc-1d8242461474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a00fb7a-ceb1-4933-89a8-f539529f6927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc701a7d-48a4-4b37-a2a0-f7f38d484762",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bbdf15-9966-4696-9811-587473a78882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3fa7fa-5c8c-4895-af58-8f997dde018d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cf8f71-90e5-4ab1-ae46-9ee45caa1b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e46172b-330b-4bb3-b480-f61d39f2a436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a00c14-8e41-4d3b-b6ad-0d97449e7b81",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88ff7a5-9cbe-4c14-acba-9dd1e8662931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd39bfd2-d06e-47d8-bb10-f7cf1cedce31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10de3701-3e76-4cad-8d53-02ef6f6bf2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "becb57bc-00d9-40dc-b3f8-ab82c9637cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2a2bbd-07d0-4763-92ab-e6083f4898f3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c81552-8124-4f24-a69a-aea3c3594de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d777f60d-d95f-4f95-be46-2168c0debf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db1ff08-94aa-4390-80f6-bfb32d54a1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f75cf50-f6e3-441b-bcce-8b04417e65d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74b7abb-0647-4757-ba2e-8557733232e6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d332a61b-7bf5-44c9-8c92-942860030d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c395ab-5b79-4b94-86f6-1f5389f86c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b637df7-7e43-45bd-9a69-67960335d9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc4a94d-dc42-452d-887c-7db84ac83ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533a5052-2742-4783-9904-949fb5983df6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33d1fed-1086-4c76-91e0-83c29354d0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd93807-8feb-4bdc-8bcd-e9bd6296ad3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d41dbf-3e28-4942-b370-d091cc0653ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a180699c-bfea-4ccb-a6d7-266c3375cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c76d8b-ae1f-4882-9d05-daae4e7abd88",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cb68c0-cac3-417e-9354-d282085e9863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e83d65-8352-40da-a275-9739004d4794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fe3156-7ab3-4a53-a2ed-13dc4ad08678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f23d963-2c02-4a3d-8e94-2f79669b35d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52cd54e-0aa3-4f64-bf70-bae6f89f8f5e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651b4686-ea9e-4fbb-9575-2f8a1297c4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d419ad6-8f98-4aa5-bba3-209482f2e018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff09409-9772-4616-ba23-75e97a84cbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f5b279-8786-43f1-a31b-bce748b6080b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bb1a23-b2b0-4541-912b-9e4215290f02",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6ee697-fe0b-43a4-904d-f1acfe930494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a82d79f-9468-49ab-bb41-fef17b31331e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff413af2-d713-4f04-8da4-c173b584ff85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e47b6b43-f3e9-420a-baa6-f7e7766ed51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0118863-aacf-4895-b288-121bc27209be",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfff00dc-7d00-43fc-b6ea-8689b69941e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cd9718-a2c0-429d-b6e4-b0414a467064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5222c98d-4e5a-4f04-9dab-33feb9c00149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6628b664-59c1-4ba4-a867-1cdd414e9829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04aeb7f-c2b2-47a7-8d90-7cf5a004fe35",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e14098-b4e5-4f57-8724-df44654b9e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2229655c-b1b5-40ba-9830-4d2fe9ae0c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a62fe97-56cd-4c69-af47-9ba8f17bc128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1469fb52-c5ff-4eb7-a678-2bc590beab4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a3a676-34b7-478f-8cb8-ba4bf14930c9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03f7c76-c4a3-41a6-9744-2245f11a6d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cd3693-4cc4-47db-b298-e6e88512c36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7980266-3c0a-41f5-92d5-b671dfaf28d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1aa337-65bf-47e5-89ff-e1484651157a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82a048a-62a7-49b1-a004-00fc9529ef55",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b6a417-154a-444f-8892-705852f2f170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f557ca-f721-49ec-8916-6e13c111a4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b880ced5-8a2d-434f-bb45-ff85425a80e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f08b15e-7801-42d3-a91d-b855d7c792ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f2e471-1324-4a3b-bd77-dec80a6c4f22",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ac318a-3d52-4a1c-b90a-7db8f2985781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f2568f-fa3e-4625-bedd-621be34c7bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b63ac8b-8665-4083-93c3-60991cb4f67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a66610d8-f90f-4da2-aa63-1afadf46faba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a848477-3eb6-4a8d-9bbd-d13309f43116",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff95dd94-f458-405d-b0b0-bc8420f1ef34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d56d75-180b-4610-9aaa-d2ae5e34c565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e49b71a-da7c-4a86-b2bb-7b99e1736d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "235e6a32-9828-4581-ad17-2ed3a6bff098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d318291-0131-4a71-b68b-9631d8a51f56",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c51e55-c511-4585-9f74-115653369d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046ad0d5-26b5-4e34-aabb-fd18e3058782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc8e5ae-12a0-4686-84da-f9fc636a8d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb8cf5e-3383-4caa-a34e-8a3119903c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cf21f1-4ff3-4662-b02c-157803511ea4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829e4471-f624-42d5-b5ed-bb67641a8259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911a293e-1dc7-44fc-bccb-e0bf3dce3e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adb47d1-a513-4a3b-ab33-7daea8e98590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3c224b-7285-49a9-8f50-f60b3ca8c59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5b302c-dc33-44cb-99af-f70d50529f9b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137fb7e5-82a7-4550-9da7-ba4f597a6494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f1a7c4-35a3-4d39-beaa-5915f5af48bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9efc9d-7d5a-4ccc-a391-15a1f03177a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02a1eda1-f854-4b45-89e7-b7182c82e827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220728e5-8f46-4fdf-b698-55cf7151c89b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e887ba-5e63-4944-8050-5b6a156a0e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc46d68-48c7-4c53-8ba9-4b7a4f75a2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c373b9e-0161-4d7f-b6f0-46107af89d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee8ab39-9315-4e61-b398-76e7001c0224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de54b82-e578-4186-9621-814db3bd2983",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638175ed-89b5-4578-bbc3-d386173b66ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30564d6a-36ed-48bb-84ec-1c94ed4a3924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3942dc-0d57-4e27-b08a-4e560e0edb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a65698c-2258-44d4-914a-03b3baab9fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cf3bb6-f8ba-4bd4-84a5-b4f841bb8e8e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc8d65f-7cf6-49f3-ad08-1e5ad49c48c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bb1990-ce75-438c-8f26-40943677f604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7889d346-858e-4c75-b3bb-10b06aca511e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad23506-b412-42da-b684-92e04db92eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040ea33e-0217-4183-b0e3-8653b68cd5a1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2590c9-519c-4a42-b0cf-971ecc61f4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e8d3ab-6cd7-409a-804f-94712a496e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b238fd65-74ba-4c6d-b141-daa6c1f2e656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a054a184-63bf-4de2-8624-5c1a48d072d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b126cb5-1560-4b1c-9285-580bb1be4411",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27528a1a-8266-4ff3-a283-b7ddf86ff608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7cf0e82-771e-4345-bcb8-e53c9005d807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e2a8f6-bb9c-46b8-93a1-2389d4e68473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a45d70f-8c31-44ad-8644-afdc4d1a94d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5283230-0004-417b-ba44-72ede5443d36",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ddc73a-d0ac-4bf0-b37b-0a98eda9643b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66b2d12-51d5-4e1b-9547-b5ee2aa1bea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ca285d-170b-4b9d-a19a-9c6cb8c93a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "724f4726-df78-4ac8-84cd-b3d75108973f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea88112-394b-44e7-b2c2-d4473cb58542",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50dd84ec-debc-40bb-ad84-2c58361a141c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb49c9d-44a8-4807-9858-f779debc254f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ecd117-d65c-4f5b-afeb-117ff29541b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a808d3e-f1e0-4303-86f0-4dc980e29d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67549a9c-e937-450e-91b7-9d22165efc93",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ba5e9b-77b2-4f2a-a0c5-42a27c411eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bc6f48-a607-4e18-92c0-8cbc0b87f2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fda4557-ef05-46ca-bb7b-752fcfe147ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "21fa32a1-34bc-45a5-91a3-86674a934e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fef1da-ca2b-4742-ab00-88a6f1f45af7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e648de-0cbd-40d7-ab53-1b65f2609826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "50ff7ba4-012c-49d4-9169-31fe44b0aed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de74f2bd-bf2b-4ee9-b8d1-3b8145332ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde1d0ba-cc82-45d3-ba86-947c0a245892"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67124752-6d98-4cc4-99cc-35148dc414ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f95c5739-33a1-4309-b995-90d444a5d4d6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617601c1-855f-434f-8e63-01cd47a45816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccf9efc6-2991-4c93-ade5-0ee3e3ff87bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32464dab-86b7-4ce3-97af-1f9adcd583e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62764b55-1ebe-483e-b4d0-2b663264f218"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57cb3901-4695-4827-ae3f-7f5d897141eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b16dd025-2d8a-440b-9b25-c7601eb1ba16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "054f85f1-8bb2-4eb2-a1bc-7f5a98f4e213",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "035484cb-c755-4d6d-a447-a816e78469ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3f4a483-3517-4584-814b-7626e9814e26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95c1504e-730c-44bd-b945-90a998870bf8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f85aaec6-e657-485d-ba19-43bde8335ae4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bbb2d9d2-33b5-4286-9720-bc0258de907b"
                }
              }
            ]
          },
          {
            "id": "d06edde7-cb9e-47fc-8c1f-b959a3e78450",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3cb7dd6b-fac7-4d94-b22c-91ed89d61462",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1c5e54df-cc08-4c84-85d7-9246f056ed1a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b017b7-e5a3-4959-9df6-762c1923ada8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e978d8dd-1b8b-4319-bb14-1ab85bc2c30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f15914-e89a-495f-95df-41419e262102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db96a228-bfd7-423b-8ab5-6d4888be5520"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6bc576c-d633-438b-960e-59ffa1af8dcb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5af776bc-0904-4329-a833-e72513cfcc64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a90bdc4d-33f2-4bcf-952d-59fb2bbabc15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "832385a0-89cb-45e3-b7af-c991e66ffc67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9706fa06-fe48-4d92-8224-5f886c8513e6"
                    }
                  }
                ]
              },
              {
                "id": "1c3fa22c-218f-445d-8eb6-36bb04d62956",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a03ff581-0d8a-4508-9b23-8e2c5de50fc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89d4e6f5-03b6-4421-b419-4acd652e70e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3aa4e0c-86ad-460f-9d35-f377f45d2ea7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4cd28dd5-377f-4483-9a6a-401a2a93a522"
                    }
                  }
                ]
              },
              {
                "id": "730415f7-4546-43d5-ba8f-a9427096bf3e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c28650be-e9ee-4a36-b5b9-1c0ae2e8221b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ce0368d-332d-4304-ac25-4420443b0206"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac67a354-9ab8-4ec4-bc0c-d8387cfa9a14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "adc4b83e-9dcc-4917-9720-008d1954d665"
                    }
                  }
                ]
              },
              {
                "id": "819371f6-db8e-43a3-92bd-352db384bdbd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9655569a-e057-4888-83a7-3e65918ef598",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68e311d9-3640-4858-9642-991a921feeaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18c8aea3-7a7c-48ff-90f4-630b17d39229",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c96eee2d-7b0f-4187-a33a-840c501405ca"
                    }
                  }
                ]
              },
              {
                "id": "a58850a0-be99-4e2c-b6b3-da515d223dcb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fee2c722-3fb9-418e-8b52-aa4920561d4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6af518e2-5d81-4d23-bf79-3e23313599c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a8a917-75ee-4702-a91f-495bebf54220",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6254741a-3e1c-44cd-ac66-50fdae1fbb8f"
                    }
                  }
                ]
              },
              {
                "id": "5c0df3cd-8f55-409a-a6e4-35c1fe583f9e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f146f62-1a79-44d1-8b0d-6edc6616c59c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7d37f1b-aa5d-4ee6-9d9b-4e314ed31a78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fc370f9-7f49-4d12-8793-6f34c92b91fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c162fe3e-e32a-4dd8-a282-f7bd5423ca0f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9719762-0d4b-4174-8b85-44f553d09f6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8a4ac1d-d8b9-4080-84d1-9c1a2c8a7121"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f804f0a5-457a-4ec5-8222-84ba8bd0b3b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e59775d-16d1-4885-b384-e7c41a37ac14"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bba56669-aaea-4c2a-9aa1-c4ffbb1e94ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6c8c6712-7d3d-4c3b-95e4-3d39580e29dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4874ff2-8ac3-4dca-88c2-6ed5165ef1a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c31a9a7-c2b7-4cfd-8e97-88fae51012e7"
            }
          }
        ]
      },
      {
        "id": "170ad639-cc29-4bcd-9d3b-411353a067a0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "69102d44-d6a4-4aa1-a71e-72f4efe25191",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f999303-2d13-4556-8623-c329050bc23a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de62acf8-2aff-4a36-911b-bc170fa6c3cd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abe5383-92a6-49fd-95f1-0be2b34f527a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81cd1d75-7fee-485a-a43f-a3776e78896a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e9776a-3b4f-4030-bf6a-66739c3f0db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "58b3871c-966a-47f6-9a2c-1900eb65a630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a592905-a3c9-46a9-970f-e47cd9d079f4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489ef5b0-f354-49c9-8557-2c23cb9f6b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b3b111-5eb4-487d-af93-625826657102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518a9bec-3b7e-4be9-a5e7-7f12f395b56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed81565-a995-467e-ac93-7c3d9ecb20fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3351f421-9f77-49c5-b02d-2663f6731e4a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b25903-ce40-4f9f-b7ad-aa2db5ab74d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c7354c-7df9-49ca-8214-0b24fbf3e68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e226abda-52b8-4981-a7a6-7508cb0f35d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d69e4c1-3c7a-48a8-af63-1ec84eebfa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75707c3d-42bd-4f38-b254-51039b081a9e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64caa63-b726-409c-9b30-b204587301b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef014ba4-ae81-4536-a223-2691c78f6b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ec0c58-a96b-454c-9e91-8095fa5fd553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbcb36b7-d623-4283-8f0a-74d1f3422f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2d36e4-cb3f-4a95-bfc2-d6e3c1826f6f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2371f6e4-9df7-4710-b369-25498c7ec8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd576d5f-f111-4976-8def-abcee6259308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1060634c-d6f5-4a4f-9c83-5a2899b5ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee64a95-047b-4040-9fa8-caebd06e0470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977c530e-9127-4ad0-b448-12d4f784dd2c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eb85e0-515f-4ff2-9510-06545906f4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735dcdeb-b3e4-42d5-92b5-31e76415bd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9821045a-103d-4401-989b-d80c51c8377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6bcea3-b5fd-4af4-92f2-62c0961d76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caddbd25-75cd-495b-91fa-10d541008e95",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec9c75a-2f2c-4aed-b3f5-6ecd6b32a2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09580202-5113-4621-b731-024661695297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d169e1da-db28-4354-8662-2c59831c2a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa27e15-3561-4a91-b674-c462a881ba1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0b4797-b6cd-4af8-b7fb-cf565d127aa8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28981ca-674b-4b95-aa4e-49824fe7a8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081874a1-9814-494f-9b85-4a37774b3701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3383a9f3-4c5a-48e2-b4f7-3a4d4977e802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d6a776-1277-4f1a-9cd8-872dc729b40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40045f5a-d757-48cc-bb3a-82dd73762340",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab0604e-6be9-4e13-a634-29dbcf1f86f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22181cb7-c8dd-4861-b572-0ff2f907c091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775bc42e-7ac7-44ca-a694-430add77e209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dcb9814-d31d-43e4-9bb8-05a8e57aec13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5578675f-e1b5-4796-a227-be539d4b144f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62a8ec1-b982-4bb7-b8e0-3f69f4477f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ec234e-5a91-4c22-a96f-d10f7d935be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447840cb-33b1-4e7b-8e11-bce5d4b84c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c94f77-973e-4688-9817-97c0dafebfb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fc0a26-9e8b-4c1b-a696-103b2b840e6e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e73d167-9499-437a-a773-ac659fead9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732b7ed3-2d59-4b52-aea5-3e5b4e8d5d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf3b1d1-308d-406b-9031-1c623c272096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c688f2e2-fe59-4b03-8095-7e38322445c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f956b749-23a8-410c-9a81-8789641efc21",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97a42c5-4d6f-4136-8870-c53b48a5dede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344157ec-0e10-443c-9012-61c943b9c2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de4952d-6578-49b2-8367-0b5a9fe0e799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07368e0b-afa9-4ee8-90dc-16abe579b753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f7aa7b-581b-4ae2-b22d-27c08396dc71",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46ef027-e5d3-43fb-a21f-9507f4be5e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025608b3-7df7-404b-a9b2-d3342a9bd22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d610c1-0e7f-4d33-8eb3-c64b617fb0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c00178d-8467-4baf-9a94-8aaea23152a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c792fe-d1b0-4bba-a3a8-436451afc0af",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc99aa6-9ed9-4b83-928c-a84d7061017e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c78cb8-5f32-4a79-9c52-f820f552b951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b67e79-337c-46c4-b715-ecc30fce97a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3581fbc9-9cb4-483a-b7f3-4564af3160d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3603b404-41ec-408d-9c30-705efd4a0eed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee5f846-fb79-4baf-8ec3-d6f05f2979cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607640c8-1259-4c7c-9bd3-0adf97aaa8cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894e3be9-62be-4110-9ede-4b30235e5c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1629930e-2679-4314-bdb0-2038f75a80a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b31febf-fd4f-4bd3-a28d-5c9b52b03055",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437f8c87-63a8-400a-a4bd-301d8fb4ce09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48881b69-d307-41b6-806b-246ee2d9720b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9bd105-c3f8-4dd4-bbe1-a5906ead01df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff4e8ca0-2847-4ce3-90ab-57303d8723e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed80d4e-6162-4f72-905e-28b474124e6d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837dd678-1055-4685-b59c-21e3af938d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9877d599-ae2a-447f-a253-f5a0ae04d1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d60933-a0f9-490c-9591-23fd9bf8f363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d4646e-2b25-4cb5-b5d7-88216e10387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2124b45a-5906-4f89-9182-3520be0a0d29",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a481f98f-2865-4be7-a9ee-d540aeb4bde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1120643b-3ad0-47e1-a535-8ea0b5d14d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4abaf9-977c-410f-bebb-89f43d729212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d098a229-71ef-47be-bdfc-8d1285c41510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e317fcc-d11e-4d29-908b-7e6d915c3641",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d99850-d8dd-4877-9006-0a218c5622ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdec829f-4284-4c13-9195-9b6931358265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3862d436-c994-4e37-8698-3d16dcb786af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "322ce069-f338-421f-ba2e-986dc2cc6ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cce61f-7ac0-401a-b1bd-6e4aecf2aa3e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d4099b-dfed-4e1f-97ff-578f46f3dd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23faef26-55b7-4021-b221-637f8c521ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b920617-017a-41ef-a10c-9921c0a039bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71b363df-7e08-4320-9e1e-4db49fdb45a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a611df-ecd8-492e-b1e0-2f3c1aeabd3d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c10c7-3b04-4537-8ce2-6d7721ceec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d132f4b-5ed0-478c-b6bc-95f8b39b75f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fc5302-4933-438a-8e26-7a1cfdbb95da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08ceb51-2b73-4238-94e0-2381370734e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688d50f0-e4a3-4183-85d9-d151852e9b2f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9bbf5f-209e-469c-8f7c-5be70de9a819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b340d7e-e3b0-41bb-9aed-a07e8a0f063c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcff18b-451d-4a4f-a1a3-f2e99de2ea19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55f3d97b-87ff-4331-b060-8f1ccda61c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a4c940-cb8c-4373-815f-bb79d44718c8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7a7992-6f5f-4960-8c50-cef4787382d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513cf699-9935-498a-b33b-b1a5195143fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c46b4d-e878-400a-9575-8a67b91a50e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4365f22-95c5-421f-837b-6290d99eebf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fe62ab-048e-4097-8c20-a2699e5d2b61",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a98ece5-6eb6-4bf9-ad54-1e27a579c102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8f30f3-3fa1-4516-928a-960794de05f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a501e2fc-1c87-42e9-a2de-02a0804f5e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a02e7ba-d421-426e-aa1a-6442ab96d9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9051b7c4-9eae-4a0d-8ffb-3b964ef365f5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276a2b0b-b5e9-48c0-8016-f70131bbb771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762dded9-c700-43c1-9f83-4860db09e736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c6baa7-1a77-4839-af6c-afdca23eb3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08887366-98f0-4c5a-93c8-b2b14abdffa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75bcaef-54d3-4d57-bbab-7543d8fc0cb0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f672e9-815b-4532-a971-1efa59c9b59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd66ec8-621b-4125-ade9-0df9a500fbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e6c732-f5c8-461e-b379-f830a6c0a692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3655f3-e37f-47df-88aa-1ebdab7b833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b7309b-ff22-4b00-8278-cb090d01f095",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae89198d-1b54-4e4f-88a9-edcac6410a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6810e4e-1735-48ce-bb48-062f1fde31d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79a0ac-6983-4a8c-8089-5ab42208662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f9ed0e-4aaa-41b6-b939-84b3b5b02e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15a42f8-eeac-47da-b1d6-ad738c7a7969",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d3ffdd-650a-4b3e-8116-4b00d80e763c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb046f77-3f7f-4f4a-a98c-df09ba55d1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5437d5a4-e3b3-431b-96aa-463bfcbc6378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ae5680-287b-4524-a203-8b5efecbef8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054163ae-8914-439d-b4d2-de443d9b903a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a056448-544d-4187-81fc-4831885365a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393b5eda-9f2a-4c45-9e68-c1e62e599e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6876fe44-e251-490c-b2ff-1fbaf40dff4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "026dd930-bd36-4764-a6f8-dbf009681be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3082a4f4-bafc-442a-adf1-011b1208da74",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71243034-8ccd-45b5-a85e-7d072228e95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32454700-510d-4e23-ab73-897238ea13c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e0dffc-4934-459d-81eb-d4da3a7556f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16479fb-06f4-44fd-bfe6-1555f2eeaaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1956578f-3f8e-46a2-aa0e-af0735332e09",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116bfbf4-9ed9-4b95-8861-a1b3493bf9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04ac819-3cfc-4e4a-bf40-ac6feba5a9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2b8e6e-88d4-435f-a052-77b124f17c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "118e2e02-a542-4bf5-a550-a2ae56bb887d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc23d609-7312-46d4-af42-642b2a3089b8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be0776f-9ba5-4c52-8065-444391254e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40610607-3dbd-4675-ad48-fc9076a97620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fc1788-0a9c-4eff-8804-6bdd72ea9a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b7fbdc-87a0-4609-8cd1-fd64873ee3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed54570-5f88-4754-8411-996426825564",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da896d94-c25e-41c5-af1b-2fa677017a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e3b622-7e12-4292-87ac-04de7e84b5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ec76bf-a4cd-43ff-bb77-757696ffa248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ac2e7b-721e-437b-bd72-4ca9bfd55d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82d4a60-d0f9-479b-a7b7-3bf24a3f0cf2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b4a1a-8c82-4a51-8168-99b73ec58dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1377c0-bdfe-44d9-aaf2-3e5d89ae8f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c2f68c-49e0-4e5a-aa4b-df9845187843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50c2cbb5-9f45-4c83-89c7-94352185b9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8378362-d943-44ea-a5a9-ab1bdb84fb85",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bd81eb-5767-4751-9e28-bb2036cd2080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7906125e-dd81-4983-9222-e50b6a35ad90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d62ea1-3782-4faf-a4e3-ac907cc132f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d376d8-da29-464e-8455-0d760a7eefcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b6f4cc-903a-4b83-9cce-953de14f7b50",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae0c967-4a19-46a0-94e3-2e3d849f4f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8392edc-cddb-415e-829e-5734ff02f9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc13494-3a43-4734-b631-32fd0f2091e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba89df2d-c901-41d8-9d1e-c1f87ab2b508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0677bf2-9b68-4116-9a53-4ef01bcd3ed7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa465090-929e-4037-8e54-2e67fed2b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd81e8e8-957a-48d2-a31f-6c66da5669a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee298c0-2120-4ae9-a454-f1bb579bf608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f2fbfd-b89d-47ce-9c15-55cc65fe4a22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f32421d-131f-44bd-8277-6ffb10e7bce2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1da3920-d0ed-4cab-9c04-d74b8b114266",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01f6804-67d3-45b7-80e8-c734f5c8c2ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c19bab-2016-43f2-a8ac-6b7b386c3d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4347f75-4cae-40b5-bdc0-d6caacb0db11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "236b788b-256d-46b4-831d-dd4e41a8a3a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a20a9b3e-b44d-4791-9e89-688af32b09a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca22fa1f-388c-4135-a574-8b70a7cab1bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "648c081e-a290-4699-a2a1-f6b6d6267685",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29dbe46d-da8c-42ad-aced-acefbaade531"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30e791a2-13e4-491a-b676-3dadde588d44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e427c362-8a5e-4ebc-956f-ce25d3252772"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59237b39-168a-44ba-8d95-e3af9a621ebc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1b9a809-27d1-4a7c-af86-8d60baed5388"
            }
          }
        ]
      },
      {
        "id": "32f1db98-6664-44be-bbad-dcefc18ece21",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "749951f7-2482-454d-af62-3280cf7351ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2aedc5d2-85c0-4e0c-9dd7-22c7824fb52c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46cf5c22-6fc2-4636-81e4-dc260ab8a2a7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c946c5-c270-4e94-a0d3-dc77216d3d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7834672d-430b-4a4d-b5ac-cc94ee739383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97ed0c4-fd59-498a-b4dc-d6dbab16d720",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474a5ac1-4cb7-47f4-8fde-52fc139ac8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd77cd76-3515-4774-9001-62c70da8ba10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e164ad-f937-4f7f-8adf-38ca7f982e52",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479f8847-15e1-4d98-afa0-2000d128a5b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504d983d-b149-4104-b454-ecb49aee842e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92290bf-fd97-46ca-893c-5e5d649ea996",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2094be1-cf2a-46f2-a8bd-6e4abd8e6ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d3391c-cc4e-4ac4-8942-ee49aa58a2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b2d7e5-0cdf-480d-b403-489476d0e156",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a0627a-1b70-43ea-93d8-3ef411087f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe0a08f-f72e-4068-8bfa-159b35b10ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc9bc4d-79f3-4e91-a039-1f2f66f40005",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f065935-018d-4045-8e89-8828821fea45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f79f9e3-c102-4256-9e5e-40f1578a6629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f307269-3ab2-4d81-9e6f-ff80f7b28b1f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f187f4e-eae1-4a8e-a536-3a91b44f9f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cea940-2ce5-4b79-8262-97744b2dbf8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5c3467-50d6-4c69-87aa-cc86a6d5800b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ede1a8a-6b74-4f98-993d-31973f44368e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf166a0b-5948-487c-8e97-e6fd6df8fc3f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff64596-976a-492a-bacd-e44e997056dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff3f939-5fb0-4887-a2fd-70858cf7d367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dcbd20-5d69-4a90-8bf8-8674453201d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ad2f96-a4ed-4fba-8da8-b622bb5cd6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252c7c43-e8bd-4c7a-88be-9f4997abc91a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d699e58-9ec8-4b70-90d1-b69cdeb92707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6226eac-e273-4bd4-a3d0-121ed5c51c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0223c0-fb84-46ee-bed0-fe5227b56324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444d8717-814e-47b7-b734-32cf87bafd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b17be48-bf53-4f82-8f8d-eee6eaaa26ae",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d2df7d-3f04-40fc-9b85-85c584e5334d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc150b2d-70db-4248-8c1a-bda64bc715d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c40c61-f891-4925-8294-f8247ab8a4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade5c73c-9505-4572-adaa-493e81d51700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e317a3-e1e2-49b3-a91f-b0f27d0eaac4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd921ae-1827-42e1-ba0c-445e02a3b9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e232a7-0503-454d-9f7f-aa53a2f373eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065331a6-57fc-406f-9be5-762a1d29a328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf73620-4979-40c4-96e0-85f5d51d80c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655e5e95-32d8-444e-ab49-7e622698b1c4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14c71f3-af64-4c9a-9b98-b5a4bdabc09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f08f457-6528-4270-add7-6f01d7942693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1829e9c-eb10-43d0-86ca-ea4123508f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7666c606-a18e-40d5-a9bb-23046ad30104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9acc439-04a5-4c71-8854-e70ea06fbf94",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f499439e-1c19-4452-b87c-d5e52ed1912f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8793852-9986-45e5-9f75-c8a0f837e899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0405c360-9e54-41ff-ae75-29a45a0dc7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc3d6ab-e481-44e8-84ce-1a51175862f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffe4e9d-dcdf-45ad-b68f-9e1a7852e3db",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ac3645-790a-4a77-aeef-26dd1d6a84ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5422fa2c-c497-4e00-8832-f263775a98e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdf7128-61e4-4dad-94ef-f15d6a6fe0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff269d0e-e567-44ef-babb-e5126438c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7ef301-3b52-46f3-ae70-94a217424ffe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fb37e2-559e-4366-adb6-e3ff95e880d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d346ac2f-607b-46cf-b1df-026979e4d734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8645d1-086b-49d2-84ba-bdf906ca962f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61cd7951-e89f-407a-b86f-c3f8e9d52dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7baa9e48-0694-4ce4-98f1-529f42be1101",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7e2a49-ef48-40eb-9cd8-985bd086b76a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7145bd3-0a28-447a-b0dc-1ad5895eb74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2325e6-22d3-423f-9be5-61d6232ad215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203f7d86-d9e6-437b-bde4-3c55389c8ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abc57bd-76ea-43d6-995e-cbbf58bbe0a9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cceadc91-f158-4be2-952b-599d34de947f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4cea30-c99b-4d46-85f2-b221f14b8276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e772b0-f02a-4264-8914-578be887da4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5060d43a-9f16-455c-85cd-0cfedf27cb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c0d090-a3c3-4f60-b2aa-6a72e723a0d9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58bc764-4778-47f4-980b-4292088b688d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb867852-e2c6-4a07-8cd6-8c3a9485f23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20bc6ff-79eb-4e50-ad4a-aaf438e053c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8080800d-d777-4e42-a36d-e757f7eccc37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000a4799-badd-4579-962b-cd166c3583a3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6d5a1b-991b-4886-87f0-1c9b844d1eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb631f0-e7a3-4f15-ba7c-095e5083f121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96da90f-18d9-4e7c-a78c-0318bfdab017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f4edba-aafc-4654-a5f8-a1aab977c6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb8be33-3066-4d12-a2b7-dd1fc9b0ff53",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e016a97-9d0b-4eea-b088-a4a2857fd352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6555c10c-6b92-4188-9c69-08c76be58cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea40ec9-822a-4dd6-94fe-2691c79b78bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02f9c36-23ba-4eab-b0cc-9ab31ce90ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01978f53-491b-4916-8abd-9b295ef5a139",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053ed07a-f585-4bb4-ae62-a90211a846a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99919228-0467-43b3-83cd-ad6d726ed8b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c1ad82-ddd5-407f-baaa-2a829d4c6839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ac0ca7-a3a6-4651-b41b-2645c3fcb92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f84d74-91ae-43e8-98e3-967b02cb5d14",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a3e3c6-e554-44d1-bbc8-8d1baf183148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c27ab61-5e26-498a-83fb-8120acff8bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdebbdf-9bb9-4c80-a13a-54afd7ce6a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa4c4ae-db17-48cd-8c43-f27e6b462a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7596bf-41a7-4b5a-b329-0c991d1e66fb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd741d18-3d8a-41e7-a7c6-39b7cc032cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911eb849-3ee8-406b-9e0d-75cd35cf1f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f232754-8781-4fb8-b2c3-6fbb58793355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cd0738-6248-41ee-8f14-d95b1616077d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5804ad4-6e9e-4b03-b2fd-0110ea144994",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75863387-14c9-493a-b77a-e5faac85bbd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abe3fa4-61e4-483b-8640-e07319f75859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68c91f1-376e-4746-8356-90bd89664789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5340946a-5acc-42df-9f42-43b1dbb1355b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0abf5e-9b10-4bae-8dde-a931da38f34c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708e0953-3cb7-409d-9adc-bcc60b700dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deca4a5b-9b20-4a3f-8f4e-58f117ef5188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddacede-2982-4c11-bf72-767bd13fa064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc50276-d3dd-42ba-89f2-1a701adcefaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64225e52-5dee-4edc-bc3b-f519c5ae2ad4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e766f2-02d7-4a60-a5ba-dbb40182a2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73500622-9c46-4f5a-9563-2624127069aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72dbf38-d137-4838-8259-4cf6bad9e427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ad3869-f282-417f-9566-8169e9176dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f11287-5acf-4232-a51f-e8cd68677511",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f2547a-d07c-4901-a16e-066a517a741c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fef4d3-1e28-4004-bedb-01d33636cd36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31824a3-2914-458a-8fea-15f199892d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a32b7a-f14d-40e2-9b19-a0277eb29406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6867afe-3e2f-4b13-ba28-ef2c2378e80a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640d8d53-c732-47d2-bcfa-1fd912983c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0d5dbe-e3e2-4afb-89f1-00186b7fdf8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f9305f-7d85-4047-b088-72c4eec8cd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cd50be-1148-4efd-9f72-3ef746e4ed22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898a3957-4464-4e6e-b1ab-21d2f3b116d5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c7c281-a683-43f2-8bdd-ef42d9d68618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd47acb-20d3-4281-9c86-53bc0dc77e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1048fa0e-e444-4ef0-b6f0-027cf08e7901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af67f52d-224d-45dd-9d3f-9bdbacf7c211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66085bba-d0d4-4146-86ec-9f49cb201b04",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d881859a-b2df-45e3-a3b2-b95782a738e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "330bdc35-6486-4d32-b1c4-7edd90b4852d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "123cff3b-101c-48fb-b999-d572bbc27a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3135053a-d2ea-4a58-b1d8-1d1ce5427b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3b9dae-59ab-4cac-b74d-e65ec2c81cba",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f8eb55-5807-46b4-9329-ac4380095396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b4ac0c4-3704-456c-9591-e846d750a619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3547ffc3-e350-421b-9003-fb80b38efe55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcddc05-d714-4ebb-bbff-b92bb74feb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4762debe-3c3c-4373-8ae8-5ddb894d4e1a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83466a8c-f93b-486a-b0de-7bfa9b022c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18199b9-6159-46c6-b23c-033c9dfdaa16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a764275-ffbd-4a0a-a47f-e9404fe7efe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d58c78e-ef4f-48d3-b68b-8b01379c5884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f041b0f7-e4dd-46cc-b471-1395967512c1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51320308-c4fd-462b-b2b2-035ecc97afb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f74bbee-2a80-450c-99ce-9cab9cec803f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70c3285-1a8a-4787-a9d1-e003c6bccbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357744f8-ddc0-4a30-8001-681b0376d12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193c9f3d-64cc-4fd9-bdc7-523f6953b8a9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398a1795-98ce-4cf9-b240-05042e199522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd55a0af-a3dc-452c-99c9-63f38601f2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00350330-0b90-49c4-8403-91cb199be880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b1f2fd-4554-407c-8bc4-67875bb56ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed42deb5-ba69-41a2-9086-0034eb59c9c3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeda0af-f202-43b5-b356-144daea3a4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ef4deb-4c87-4c1f-81c7-c3b667d40574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9590d651-7920-4d79-b818-0ece94ca4d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277a6761-9ad4-482e-998c-49e18ce747ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37933107-c935-4c20-a63e-d5df1fdd671d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e639a0a-33c6-43c5-ae7f-67fa7d358ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b05cdf-046c-463e-81a9-db0e5f756dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bb7edb-2037-4236-9faf-ed3132f3c9b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65f2e4a-383f-435d-98c6-33a7196a70fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c80424a-7873-43b7-be27-c92dc60b8bf8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16ed13c-f0be-4268-bb3c-58dadadeee86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8eb3e1-df79-4f7a-bd68-e6a17c131da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "254221cc-cfd0-4286-903d-b7b82e5c7b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555d310e-84fe-4d86-bb24-b13981750ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b2618f-0de1-4d8c-9e1f-127936647b29",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e44bb9-3a4e-452d-93ec-4520ab6a7878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbab2002-af22-42fa-8833-964d75ec9e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5b321b-22c5-41b2-b7ac-89d96a218f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e415e314-0cd2-409a-a138-9f68fe0b5713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de46f2d-b2e8-4549-bd01-0ef9e9cc77fa",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c574c7-6330-4495-830a-85b0b7f09640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffffbe2-9a9f-4551-a485-f85963f526ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6342b98-926f-40ff-8ac3-4752f3c77cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97857c6e-85b6-4817-9a24-1016026314a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6f8846-5624-465e-b33c-56811d8849b5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcb6167-8e0b-4024-a105-7465004cec4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a800866c-7c19-400a-8ec6-385a0b5d69ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba78339-378e-4f07-8eaa-2e9ff21fa162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7e81dc-d78d-4834-9f9d-b447cd98bc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec28b663-14b6-4ee8-a101-e68af5c4b5cc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fd20c0-51df-4149-a87b-0dc45968e73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096c11d8-e278-44a5-aeda-5d9d752da9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bc0574-dc42-4e95-9d35-b2541d985c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96da512-8df3-4a84-b3b2-e44aa46131b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4edf9a-081e-4617-b558-eef44b2f1d93",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b160baf-b325-49f6-bd6f-064ee2fa56d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3115a33e-9807-4985-8390-f85a458cf179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497a9f54-d01b-48e0-a39e-e7d04eacd186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f26056-0655-4bfe-8eac-2eb88513b3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808c0f18-4573-40f9-a946-7f3d72e0ec15",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfda810-23be-40c7-9731-5aa0661c5b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12c8fe3-279e-4e29-84b2-f5845bc108bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "416ac611-1109-4763-a194-785ad1432834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874f96a5-209a-41fa-9371-2b03b54107e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0d3b08-0bc0-4887-b5f4-cc720e58d99b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7e7aec-b0ff-45a6-ad50-3954cd4b230d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdf1d1e-6936-44e4-8b6f-9a44078b00c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7e4450-25c4-4e5f-aa1e-934b424a25dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae7bbd3-4764-4c12-869d-f77cf000cf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db45abd-1a2d-4afb-938c-b000a662ce81",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa511cb-e0b3-4cef-8d7f-a2e8559d4324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9302d39a-2db1-497e-ad5d-4d1eacb73e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9980d53-46d2-4884-97fd-d0e91aa22de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39793764-d138-4c41-9e77-eed8ef996a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72cf1d9-3016-4d56-aa41-3c404398dfb6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740f163d-f415-4388-a88b-c4397964d1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d773adb-d245-4105-b20e-c1a378218b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec69b8db-ed35-4bae-a753-298c058f92b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51833acd-f4a5-446b-a2b0-435bad12e106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ce9422-9c3e-4728-83f1-4eb49a76ed11",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff88c6f-3bd1-40dc-93c6-a25ff6b3cecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7ba5b5-0373-4698-846b-935a14c4a40f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3ce021-7309-4ba8-a45d-c8915d1b9bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b625c46d-e82d-4fae-bfaa-5f74be1031b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52d3d27-d784-415d-ac7e-badf2d4161ea",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce989d53-83b1-40c6-8f4e-11e5baf99649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab4924d-5495-4d3d-bece-7c0d5ea3e0d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaa134a-cbfc-4827-b827-a01267cfa456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b050bab-b99b-46e7-a924-0963070314ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a466da-7ffa-4cec-9013-2e93fa1eedec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec671e7b-ca9d-4e28-b169-006f8e7a83d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69c9efd-be91-4e39-b0e7-5947cb7b3aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3a4f62-1f94-4844-9b5f-49a9907a992e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f4bc8f-9fb2-4a60-b002-c52a9d8cec79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0090b4-526e-49b5-8629-8b7bdc388884",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1048b0-1264-43f5-aaf4-572579ff02f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e07714-f815-4546-b8ae-99a98b4c759a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bed7b9-d741-4c1b-af6c-127198eca4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a69b3d-1fde-49f8-87b8-d802d080d104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46990b8e-69c3-4415-9561-4e65d60b1c6b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb0fdd-daa6-45ba-8de1-efbd6c551de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27dadba-ceb2-4c97-831e-f97e64758a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21187fd0-9545-4bac-91a7-c751b65c435a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa951e9-7308-4511-9b10-121fb512326f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62db3b4-7e29-44e3-85fd-7237952330df",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7d847e-ae58-4931-9721-c71ccad794ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f7a50c-dce0-4ddc-9dfd-b4960a8f6f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23c92c8-fb66-4d0e-b2df-7171cfb46765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86aad5e3-f7f2-4198-9eaa-d7e267e6960d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d649e1-e621-4712-9846-c6448b388265",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e042ecc-2d43-4b5c-815a-24bd3e70f2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d821c9-1c27-484a-8c7e-796b5c6a13ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadd1408-3ee7-4305-bbb8-adc4dc30aac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902ae33b-ab8c-4cce-b55c-90bee8cb1942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15297a71-5b49-4e8c-ae6c-23ab18896fde",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f598cdd-06b1-4e67-bca2-7149c12029a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5748401a-44aa-4c5d-860b-e3458d4aafc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b83c604-1c14-463f-a2d1-6323fbeb5fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec21aa91-5eac-41a1-80d1-051b84ba20ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0311480-a987-4db0-b767-2b8aaeaf5d38",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80337ae8-fb4a-4796-934f-771f7b8368b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf22dd3c-eaa0-4dfb-b982-ad50bb14ac3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eddcc82-feae-4ac1-9410-9bf4212a0204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfcc489-d7b1-4669-8b92-3df3b2f0f45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4a8f79-90ac-401d-ab00-e12045c3276a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e75f68f-5007-459f-8b53-21d98b7120ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126bd89a-d0bf-45bc-a321-84812052c376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac34aed0-bc9a-44a3-8899-ed10718f2e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e447dfc4-774c-49bc-9c72-3481e43c181e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4889758f-6147-4e39-9258-a5febbffe312",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db006d-8b50-49d6-bb87-4d4c578b8743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436ccecb-ad16-487e-a0c6-07f357dc5651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87feeb46-a8af-4a17-a205-31b999cb47d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7701b1df-5490-43c0-bc19-83259a817d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b11681a-b7cb-437e-a620-37f2e8983f3b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2221058a-ba69-4afc-aa37-b3708aae4ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214b065c-98cf-41dc-91c7-e897c1d66c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0794a1d2-9f87-4a16-83c7-06c995775d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b58c6f8-b335-4b28-bb64-a8e01885b992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efb4663-66b8-43cf-a0a0-a6de70259e3a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35e5ce6-8074-47a7-962b-905854e240ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693a3eb7-ee84-4354-aaad-bfcdfd6a307a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d737bcf3-3d9b-4288-86e8-523af24941cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4468b747-21e7-4a64-9011-a34f152108ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236cf9bf-1879-47ed-994d-3ff2dec92d7c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af40c230-fe30-42c8-9846-f9e24c64f483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f475594-fe0c-4d62-8e81-4a0e4fc01e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c33134-cf5f-41e9-b88b-9ef3d85a62eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8397c565-d246-4855-8acd-31211ccfd90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2eeab64-d23e-4f33-8080-96c0f81b7e44",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714d0ede-1d23-4f60-bf6f-4230d35c0c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655e7644-9a90-47a6-8e1c-3b7bdc80f458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfc0b37-9f96-4ab2-ac23-d7437c3d2b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e98cd3-f954-4675-b5eb-13604c80ebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9a174b-11eb-44a7-8d5b-7df98f76e59c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1e4416-67b3-4686-8073-e261860e9b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae9f06a-230c-4981-b400-40f3dd8c90a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1cdf40-c7f8-4c24-9a6a-970778a75a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a900b5cf-d95e-4c67-a6f9-791039b27b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4161ef1f-628c-4d4d-936f-e825df3deb49",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b294c4b0-ad52-4951-99ad-3923b7504a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c674a75e-c822-4207-a29b-9aa6507ebdfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7480dab5-c163-4f7d-b89f-4c743b888411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d100e71-1f0d-4b05-b29c-ae3b63bffa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd91e315-58eb-4466-8b52-0140155ddb67",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f94c21-0f39-4832-8d52-64d5be65718f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091b7ed8-b447-4f40-b35c-92a292866e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbca4681-9ba1-4f49-a232-a3be9b1742ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d975d6c-83bc-4617-a6c5-de1fea505571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba54c1c-8e94-4ba4-8fde-1d3b45d2fb55",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1f687d-ca89-4f4b-b009-51b56cfa412b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4e606e-a70b-4f29-9065-8eb1da5d1f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bff700-e1b0-46fa-a79d-2d16825ddf5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f50fea-711c-4bbb-83ef-47fdb8af6531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98efa07a-ffa9-4be4-8b65-d671db04d149",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb22b42-d6af-4e7a-81aa-7334c1ed1d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091d4609-e61a-46f5-af16-f1fb77b6636b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94488e08-2244-469f-8daf-ad3797d87521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ae5b83-817e-48a4-ac8f-4dc54fd9796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83050af-42f0-46d7-bce1-b56045ec18f7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5eaccf6-03a0-4958-93d2-a9dcfe995af0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6bd01e4-f0fa-4715-8307-99622a22dba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d46f23-c6e3-4fb3-9888-e5f372d3f3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93158a0c-1ca3-4c17-aac6-2d072350cb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3c5d91-e009-4b73-a418-d24c971ce115",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216b4c3f-010e-4422-a747-87cf5deccd2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fbc8ef4-982d-417a-b162-3d675d4abc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597f890f-f173-4069-9101-bfa68752c4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397eeb59-bb76-48fa-abca-727c12e5af19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dc5330-a468-414e-8089-4f46e279eee8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748ee023-e5b4-4f13-933e-ea73a1a5da28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a534a5fd-d1f7-4487-b1fb-92ebd236a1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d22aa54-39ba-4065-8e26-7e66553d8cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310b18d5-a062-4efa-b2c0-ded1863c9906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2167d7-7ea4-4af2-841d-a449a6471647",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c803a765-1e17-4ae1-974e-43f2ad83dd63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4120ea82-3608-4ceb-bc88-a1b2e84fee49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8ae5c3-57b1-4a64-9fab-67c1d5f643b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d63971b-05ba-4894-8bdc-a589807c6df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090bc252-5456-46f0-833b-0f1a8c0884b2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19820747-0ce0-4481-9164-45c7a8d8187b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53a6d98-828c-4572-ac95-051abfcf509b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74e422e-d411-4ba3-879b-1b7e260cdc65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebda405-8754-4599-ba6e-530a9f0af58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a124b9-c7e7-4567-bccf-20c415464fb7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f8578c-51cf-4406-a2cd-ae3812e3fe17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a562fd2-d703-4943-9422-8e6c98669365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85daa0e5-8abc-42dd-ba5f-2303357543d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd3971-239f-476c-a223-daad526accd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d289c4-cd53-4e10-8475-728c71d0c6c4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e046b13-fb9f-4d37-9ab5-9a09c721d36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea87dde3-e0c2-42a7-ac95-1af5b7bd9ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea79be7e-0b01-4fa9-aec3-246110b3e855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3bc0fe-a96b-4c37-b633-adb19979c021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9d53a4-e936-412b-925a-8383e761cf68",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13741468-ab34-47cb-9494-495b0ce5a63d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8cca7fb-ca72-42c1-b92d-fbe69f5304bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11cf5b0-9346-4b17-9a97-f0bad1d38f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29719221-96a5-4e7e-8204-1a91620591e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872abd5e-d4b8-413d-8225-0a9cf4458ecb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f0287d-f197-400e-af7a-e67048f19f17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b2caaeb-fb0f-456f-a9e5-f4059d2603b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a4bb7a-cfef-44ad-bd00-2e320fdfddbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d4f4a3-89ff-41db-b7b7-370de335a80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec4e82a-de43-40d9-9c77-f28b462ece1b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e9fa91-60ae-424c-8315-509b84293f9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2342d9-aa5d-44fb-93c9-543e26379fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d1a354-6079-4b3b-98d6-df5b0b317c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea7472d-1dc5-4c79-84eb-ef4ad41a102f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38f84e8-48f8-464d-ae3f-056b3ea6a469",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8974fcb-94c9-4e4a-a1d9-323d3d988dd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c258ab-1a4a-420e-9b98-128321bea8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bf7653-aec8-4c92-92c5-750e66270f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c2b399-c5d7-4b37-9501-51046733e85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828ee4cc-4eaf-4a21-91a8-bf33d403fca6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e68f3d-7509-4efc-95ef-55266321d320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0594cfcc-c399-45ea-b801-333a9079fa6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdddce7a-fed1-4222-96a3-055119c0b532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a3c0eb-1505-43a9-b394-29f8027286ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971d314d-4552-4735-b1a6-01163fbd2ab5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27b30cb-57b0-401b-8555-b0d2c6574478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bccf1a85-23b3-4e24-82b8-35b7e91aca3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3c8c21-bfd1-4ecd-9589-e09291fef386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b66acb-7af4-4d8f-ae53-b0b6818a9815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f89934a-7df6-4f28-abb2-b913ab8d88a4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6c79a1-2d02-476f-876c-215aa9cbb93d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eca9a3d-db68-42a9-9d86-e4cde7bcdaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bd95c9-d8f5-48fc-b877-d687ee1abf89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53f4f50-a494-4616-9a85-0cbaf1614212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2c2211-1d36-4d69-bd93-817403bf3814",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11af14fc-1979-4cea-8a80-7d3687dd343f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7bd3b0-9213-49a5-bb02-a713bab45dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cda4abf-a661-4868-bab8-a4b70c76ec27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf77254-128a-477b-b549-fba666159a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a8d7b-0f54-4f86-b9f0-891a90c43e61",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0bf461-e36d-413f-aa53-1c6cf778fbcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e0defb6-3b9b-4f0a-9b17-cc703529385d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa68862-06e5-4ae5-b4f5-ece69a0a172d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870b244e-7113-4bf1-b3ed-e675ff7e9291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59211f8-7ca5-433e-9b4f-6a0286055e18",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99097d2f-11c1-44e1-aabd-79f81575106c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d95f4b-1f81-4f7b-a24a-49c756431448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c520580-e80e-43ac-a523-7cf14daf2ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0b25be-5f3b-498b-8d4a-7c76b3fbe3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c21dc16-74ab-4d71-817d-c9e415100363",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33d0e99-dd48-40e5-9738-b5fcd165fbb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffec56c9-5fe2-4efc-90fd-99330a1e9af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df10659-5ab7-4917-8fcd-fb9af0b03219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7683d67-9814-4ac1-95f3-3ca818362d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad18321-a45c-451c-b489-47ce4fd34a22",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25724823-a774-4f6e-ad49-21bcfcd6def7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e00acb7f-1a67-4871-9176-3fda45112cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4877ae54-4c41-470f-98da-0247c5f82940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f26a58-d8b6-4539-a012-1d9c340c2d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a18a969-1a93-492b-aaa3-8e887a955dce",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482b7ac9-cfd1-435a-b6b6-f03c946918c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb8d8cef-2f21-4db8-8843-f073a5903e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f017b0a2-ccf9-4c60-acd1-d15b26c6e615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a7a755-4efa-47da-a2e2-930e68f09409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309f1328-ee14-47a9-a395-e636e1790142",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270114be-890d-40b8-b877-99733c8dc776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e55ed7e-a818-436a-8f83-a82eb3581f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e2b6aa-3367-4a5d-a584-a6601780d0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df310a0f-eb5d-4cdd-9835-84440d94d6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98218117-ca32-4f11-8726-29c6ce82e143",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3d92bf-af36-47a1-85b0-866c50e3dc0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f20a932-a8a3-4700-a277-43fab21a93d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1e5745-0a78-40d2-915d-f1d0e2c3b6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03afc41-1683-401a-8659-b0345a961726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90913226-518e-49cb-bb71-22065671e873",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32947e53-18e9-4656-85cb-b04e4535146d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f56f003-4df5-4283-9678-279c7eea541e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb579965-fcf9-4eb2-b245-94012497b10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a645ec98-01c1-4705-a6f1-36fca7d99577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66000e10-22cc-4c49-a427-f94840397f8d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56bb0c4-0a09-42e0-95f0-83d620f6faea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d3632fa-7af0-40a2-8606-805721581af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbadc09-234b-4bec-a570-fc1b7ef09f9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95a08df-80f9-424f-86b9-5a314d214ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3914ef-015c-431d-8e8a-77bbe2e4ea28",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ddabf5-0a3f-4f40-87f5-f37041f2cc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893da4aa-c6ac-46fc-a8d1-c4d38166aabe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907e16e7-719b-42df-a660-6a3845a3724a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9768c1e-ea26-47ce-985c-a27e6eca7db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb99716-61ba-4fef-a22e-4a9c3d8bf4c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d97cdd-4595-4c3a-8e9f-3d81491d5737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6427dfa1-07f1-4ee1-a323-a4c6a9c44324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2cde72-1545-4adf-9a1a-c7e66979e5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f53010-a1c9-4573-b6bd-51db3653f858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b649a102-d6cb-430a-a1fb-4fe8f9dc4618",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac8641f-274f-457c-9f17-91abd0b263f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1506d30f-5204-4b01-88a1-cb3188dd6df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65280a48-37d1-4005-a185-78e037104958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b5fc1b-130a-42a2-968b-245a1e8941a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e906ad2-51a3-4f5c-a6c3-1325a49a4801",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3596da6-3ed2-40ee-ace9-6dd2c3ce4e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e4adbe-c98c-4190-ac3b-eb3c85f5dc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c33a75-7eb7-4353-8ad3-a75567ba2c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0ba9bf-1639-41d9-982f-30026fb7e7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cbc99c-9150-43d2-ab88-b55a5ea945b0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b3ff30-9160-4d30-b22e-a285b63d0c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64568b42-95af-490d-9a31-b07d85696fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff82eee-8516-4e8f-872d-5d81a1624333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef90a84c-f646-4dc9-afb7-0550047d8109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7694d0e4-6686-4df0-a1ee-a0bf3c691ac0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5686bc-28f7-4c94-9e06-87d9032e255b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a591f606-eb2e-43c3-81b7-56ad52272f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b30454-d6c4-4062-802f-931f89016677",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b0e9ee-e0b8-4e74-96eb-92a36e2a878f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9e48d8-8336-4f37-a6e2-a8f1a04bb1c8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a0b43d-510a-4333-a32c-d896ecf9df8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3638c7-b8fd-4fc8-af75-9dd9c2b05c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f98f791-2ef9-43bc-aacc-515a4a7d815f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4054396-dba6-486e-a7d5-15433ab57d7a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7582d77-a2ce-4fb3-9c03-560bf4748a6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab32c911-fcb5-4255-b5d6-215d1661111a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abf3c74c-b30d-4acd-9d53-ec1a29b8577b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "263ded80-697c-4e3a-a458-244c4e4dd949"
                    }
                  }
                ]
              },
              {
                "id": "ac470356-c7ff-404d-9186-5467e08274fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d23f132d-69a2-4b37-9999-4c665468d2d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8c8dcb-1cf0-4258-95c6-a1b9d61fae67",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c72e7f07-3eb9-43ca-8712-64e2a923f15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f895ee5-e4d0-4274-8799-34de2416ef99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "679a4f16-11dd-4f3d-92ed-fa96c61d8089"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ac7410-4e7a-473e-a71c-6a9dc9d77cbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6eadea71-6040-45fd-bb0d-9ba6572a40ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bea45cc-8acd-4078-8dd8-564352de076c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7df4c2ee-b2a0-441e-b5f1-555b16842155"
                    }
                  }
                ]
              },
              {
                "id": "4f68481c-cc93-43bf-92a0-d28be601fc71",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e2cb8638-9c4c-40b2-8b66-8cf3c09ebaa9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dd4782-0884-4e19-b96d-1135ec13be27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "23de2cb7-0dac-47bb-a324-9940eded9272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2f4886-4a0e-4005-ad6f-49dc91a65ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe36c14-62e7-471b-b13f-dadd43df7cf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5fbdd9f1-c779-48f6-801f-91a892e35b2b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ef05906-5995-4b2b-9b0f-fe1f9ba99dde",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c729170-ba6f-48b1-ba4c-6eb9d8fe308d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4a344bff-0a67-4413-a7d5-1e65f4e35469"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4e79a07-71c3-421e-90f3-2b042902d32f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ec19974-1cf3-47e7-8f70-d56ddce3b684"
                    }
                  }
                ]
              },
              {
                "id": "e17933b8-6a5a-46c2-9e3e-e7fc39ef1e1b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27113f1d-d06e-44d9-9b4b-6faca19a8f77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "87346164-8e30-450a-9c80-0ed1b42ca103"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28d5ff79-26af-4529-a670-b04d2f668a2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8b65485-b002-406d-8c33-7bc9c1ef4014"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "173464f0-641a-4fe0-a238-9661d31d7d05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bf939d9e-f381-4d71-8014-54b42137c137"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ba85c7d-67eb-4967-836c-b279d0821515",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "453bc91a-f58d-497b-a4a8-679fc47ff3e4"
            }
          }
        ]
      },
      {
        "id": "9a9b21f1-1b44-4596-93a3-0eb6d1117484",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "12e922a0-a86d-4477-bc2a-8bce82403c90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3053984c-999b-431c-83eb-c4b266da56c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16cba6bb-3e8a-4fc7-a0c1-55103ceb6908",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c063ac90-365c-4730-b8a2-f06421303d8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ded44fdb-a204-4075-80a3-5a738f47c83c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fca1d1-26ad-47ac-b588-e8b3ebb5f753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72f8ea9b-5ecb-43e3-8974-82dc91b8d83b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f7b6ef0-23d0-44fe-9c32-f4ee2ccfd1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2554f7a6-3a85-4f18-80cd-1b3f6a104ef0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c9e43ac-960b-4b31-9878-0ad5b21e3cc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ba64647-a78b-4834-926c-f61e0118d13d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52e00b00-b182-4684-8d30-28bb20c7580a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dcaa0190-2a39-4850-89d2-8961589a535c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1b4447a-c7be-4cb3-82a6-afcc2d67fb04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "badbd118-f652-4519-bf18-4e3cec7257f2"
            }
          }
        ]
      },
      {
        "id": "284b7545-58bb-40c3-b955-efdec6f5aaa0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7dfd216c-5026-4091-bdf6-09fc16ec5bdb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65cf392b-4556-416f-a96b-beaa188ce741",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5eb2a2f-5533-490b-abcb-5985438bb630",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123a3644-0edc-4114-aeb7-2dfed93d82f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bc10551-f3cb-4214-991f-64763603efc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4ea58c-891f-411b-a115-025949c6ce99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdaec5d5-566a-40db-90fc-1d695e212c67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3623a36-b436-4823-ac61-46f8910ba29d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42e37eaa-c5eb-4fad-bd27-7c3dc7e0fa59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c52fdd8e-b878-4c60-b789-74914c86b340",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a30827f8-c76a-4452-b3de-653a7890eea4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28cb5960-1f23-49bd-afc7-ded0bd263a5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f977e3ac-1cf3-48f3-b091-5ab312a76748"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1739ee8f-4360-4ae4-8cb9-900c36617299",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e73835fc-f9ad-4f2d-bcf6-839b42c49978"
            }
          }
        ]
      },
      {
        "id": "e37407d6-4dce-45bc-b7f2-b5da70242c1b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2aa75cd1-574c-4586-b08c-a1c06066197c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cdd8d46-d4b6-42a4-8fe3-1252f3a8826e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "637c6baf-ddde-4a71-9a80-24ada379ea8a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2bf10a-d82f-4e9a-b417-bdc0d61a8796",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdeb7eaa-7aa1-4580-b611-8124bd715a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada8c85e-2ce1-4957-9be9-1dfb84d644e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2af09b17-9abb-4025-9c3b-080c99f156aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1320852b-b71d-45ed-a2a4-8c3a8ec86e73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad6c957e-6707-48cb-9137-9fa01fa19486"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "724c4528-064a-43c8-97a5-28ae8cc9961e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ba9fc7d-4d83-49d2-86fc-294e1998462c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b529fb3f-014f-4b11-be37-cfef8ef94e1d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "432170bb-decc-4d59-97ef-9ba1e5bad2bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba312c29-0b23-43bb-a740-fdaeedf9d912",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2559d63-9dc3-4063-8231-9859ffd53370"
            }
          }
        ]
      },
      {
        "id": "9c73ebc1-0d3f-4fee-8188-b47737edd5f5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6b24108-e894-40d6-906d-651b4764ba19",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "245c5492-6b88-489d-b3c0-5db3849281cd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "99e57e4d-d43b-4b7b-b7ef-fd634e09ddf2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e3e6428-0ac5-4811-9469-f343d38e5887",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0dc7a9ad-472f-4565-983a-3ac9e6e78225",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 75.86507936507934,
      "responseMin": 6,
      "responseMax": 625,
      "responseSd": 76.94667842234516,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712450317026,
      "completed": 1712450344717
    },
    "executions": [
      {
        "id": "747f5b74-f822-474c-9dcb-436676b4c84b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b4f91ba5-6e67-4e35-a0ea-595034107bec",
          "httpRequestId": "21917df2-63d9-4745-aabb-a117f0281dc6"
        },
        "item": {
          "id": "747f5b74-f822-474c-9dcb-436676b4c84b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0595a6a9-2b4d-409b-ab26-57d82cff75a8",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "f180f048-f6bb-4301-9c53-7759ecede628",
        "cursor": {
          "ref": "a11d5405-9a68-4125-bd92-a3cb906da3ed",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "258ba45a-4a88-4bcf-9b4e-ed6b6bde96c7"
        },
        "item": {
          "id": "f180f048-f6bb-4301-9c53-7759ecede628",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1e2da8af-cd99-49d5-b20a-3a52b920eeba",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "860bd5ce-8fc0-4240-9bd1-cb508ac3036c",
        "cursor": {
          "ref": "709d12a1-dfe3-41a5-b5a9-5dcf7d88e9bb",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cb138a26-e5cc-4a5d-8f67-16a357249381"
        },
        "item": {
          "id": "860bd5ce-8fc0-4240-9bd1-cb508ac3036c",
          "name": "did_json"
        },
        "response": {
          "id": "018f98b5-1aec-439a-a6a3-d6b1a5cb778d",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0012929d-40de-47d9-8a81-a193785507f7",
        "cursor": {
          "ref": "0e811e32-ed84-4312-8216-c5b8ec7aee10",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8510e152-7b5a-45ef-8a9e-a93fe2bfacc9"
        },
        "item": {
          "id": "0012929d-40de-47d9-8a81-a193785507f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "46a1893c-cf43-485c-95a8-ccacbba9a723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0012929d-40de-47d9-8a81-a193785507f7",
        "cursor": {
          "ref": "0e811e32-ed84-4312-8216-c5b8ec7aee10",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8510e152-7b5a-45ef-8a9e-a93fe2bfacc9"
        },
        "item": {
          "id": "0012929d-40de-47d9-8a81-a193785507f7",
          "name": "did:invalid"
        },
        "response": {
          "id": "46a1893c-cf43-485c-95a8-ccacbba9a723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ded55d-b748-405f-891f-d1da396ab726",
        "cursor": {
          "ref": "d7d7cf11-c04d-47f7-993a-ed452af141f5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6991c3d4-042a-4573-9d61-06b583b074e0"
        },
        "item": {
          "id": "e8ded55d-b748-405f-891f-d1da396ab726",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c02ad6c4-606f-4cfc-bab8-d757ce68eeb9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 324,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149aacaa-f2ce-44ca-a127-6bb491b1bbe2",
        "cursor": {
          "ref": "f820461d-aa77-4bd8-a8bd-e85afd564d59",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7eda4ce4-6af2-49a1-b9c7-510d2ea4c544"
        },
        "item": {
          "id": "149aacaa-f2ce-44ca-a127-6bb491b1bbe2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dfcc0459-9f2e-4a62-a170-f75dbd5a984c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33160bf9-614d-4237-9c85-24b2245bb018",
        "cursor": {
          "ref": "3ac403e7-a97a-4d30-9071-1130de6d2386",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "edd27920-75f1-449f-b34d-5c3fd481d608"
        },
        "item": {
          "id": "33160bf9-614d-4237-9c85-24b2245bb018",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3bc8afde-ec98-4d06-925a-30c969cc57d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8462e5e-e67c-492f-9c15-df4ba3de13bb",
        "cursor": {
          "ref": "a2a6f69b-a168-4a1c-8fef-eb79a0f2066f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "07f277bc-6a87-4512-a97d-517dc0cfd361"
        },
        "item": {
          "id": "d8462e5e-e67c-492f-9c15-df4ba3de13bb",
          "name": "identifiers"
        },
        "response": {
          "id": "e92a658d-5ea7-4b4a-b8a6-29b195a0a599",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38d3503-9374-4f13-8dff-6c3094c5c629",
        "cursor": {
          "ref": "f22fb883-0293-40b4-ad68-706a0ac13876",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2c687bdc-3a66-4ee9-927d-8c768c4cd3f9"
        },
        "item": {
          "id": "f38d3503-9374-4f13-8dff-6c3094c5c629",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cd09513d-36ce-4c46-9f9c-98bf97d9cdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f089f3e7-90d0-46ff-965b-8a7bda92d221",
        "cursor": {
          "ref": "e183d1d1-8c0d-4258-a555-96fd0b3f3c08",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f84b51ef-7a18-42de-a708-fa18f866038b"
        },
        "item": {
          "id": "f089f3e7-90d0-46ff-965b-8a7bda92d221",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "930032ac-1cb4-42bc-933f-84a391247944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc83b93-683b-4aa4-8c92-1ae71a200b93",
        "cursor": {
          "ref": "b0e66bbb-de7a-4f0e-ac33-f1e3d3c05fa8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b1acf3e8-d586-4ee3-a05a-5d4ee06c55cc"
        },
        "item": {
          "id": "0cc83b93-683b-4aa4-8c92-1ae71a200b93",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7fd09e19-89ee-4259-b9c9-3556cdcabc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc99a3a3-1343-4773-a10d-38c941f500eb",
        "cursor": {
          "ref": "7afb921f-2ce9-4ad9-97ea-cdc0db64fd97",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7649519a-1bbe-4842-b999-38d81dc61b62"
        },
        "item": {
          "id": "fc99a3a3-1343-4773-a10d-38c941f500eb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "32f7ad0e-c284-4597-b31a-fc244f1e1235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c467bba-9c9a-413f-aad7-b5c285a0aace",
        "cursor": {
          "ref": "fde5c5a0-e83b-41e8-bd95-afbc0b7fb886",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c91c530b-9016-412a-bd80-bad6c25e3087"
        },
        "item": {
          "id": "7c467bba-9c9a-413f-aad7-b5c285a0aace",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed510fcf-8559-41de-89cd-2643198c7f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1317686-3681-487d-a0e6-26eb8cb88eff",
        "cursor": {
          "ref": "58943a9e-8cbc-40c5-b293-cebaed19d30a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "673b73c3-c10f-4cbd-b765-915e3093f1bb"
        },
        "item": {
          "id": "c1317686-3681-487d-a0e6-26eb8cb88eff",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "15dd66fa-0884-4b0d-bc96-57b92a31152d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071589d6-cdc0-43a6-8128-06c6a7bc91c9",
        "cursor": {
          "ref": "7f3243e3-f82f-41da-a09f-ec65d1b2c3dd",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e575a15f-04e5-4a07-8e8c-8bc55ab7a460"
        },
        "item": {
          "id": "071589d6-cdc0-43a6-8128-06c6a7bc91c9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e3a35d56-2780-448a-aa62-e25f194a5b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179a66eb-bc37-4f81-aa19-42d045144045",
        "cursor": {
          "ref": "40f68d33-db4b-4a02-a760-30dab25d6e9f",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d358a8d7-cf4a-48c7-b306-b66c5f512df4"
        },
        "item": {
          "id": "179a66eb-bc37-4f81-aa19-42d045144045",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bdd79f4a-5be2-4dd0-8b42-7a989f9f5d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78433890-2e2d-458b-b9d2-625880379ace",
        "cursor": {
          "ref": "69811550-a56c-4df7-9128-dc971b1acf12",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c42133ac-4cd0-4fe9-8f9e-daeeb1a59585"
        },
        "item": {
          "id": "78433890-2e2d-458b-b9d2-625880379ace",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "86b8a230-46f4-4cf7-a2e8-ac9a26258997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04922905-c9d3-421e-959c-a6977852b2d8",
        "cursor": {
          "ref": "e931a4bd-c190-4f1a-b507-cb145bdf03ef",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "db8e850d-aa58-4f8b-a769-fa879cf25467"
        },
        "item": {
          "id": "04922905-c9d3-421e-959c-a6977852b2d8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5c90df79-c8cb-481a-968e-487f992dbb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6056aa-e5bd-4e71-8a53-88a6dd8a8254",
        "cursor": {
          "ref": "ccc5a91a-0869-4d6d-90af-8a3161ebd2df",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "733f768e-aef6-4b56-bf7b-c4f3eb27f9ae"
        },
        "item": {
          "id": "9d6056aa-e5bd-4e71-8a53-88a6dd8a8254",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c47b637c-ca7a-4a8e-8534-1a64c5c3e581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a211092-e01a-4e1e-a1dc-eab54fed3de4",
        "cursor": {
          "ref": "ce423b50-325b-4894-9613-43afe97a0105",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b424843f-e6d1-4a76-99b3-9ad64ecf05b6"
        },
        "item": {
          "id": "7a211092-e01a-4e1e-a1dc-eab54fed3de4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "810412ad-2088-44e3-b9af-3ef6ef3d473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a01f96e-261a-4226-931d-1ae627e14a02",
        "cursor": {
          "ref": "05606e13-3709-4f2e-90d9-e8b44129fb1f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6599ce39-8037-404f-a974-c1b4f1588c2c"
        },
        "item": {
          "id": "0a01f96e-261a-4226-931d-1ae627e14a02",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "859c9daa-265c-413b-ba30-85969a88f743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a502f6-8718-4231-9f8c-f287c5b06630",
        "cursor": {
          "ref": "b4e06b8f-ea0f-4ed5-8350-7d0b8c72d265",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1ea390a0-d556-4319-9a96-ab8d516e8f39"
        },
        "item": {
          "id": "28a502f6-8718-4231-9f8c-f287c5b06630",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "59715b8b-6b8d-41cd-9fc5-e790e535c3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d967e48-f6ca-4cc9-b2cc-3003db873ef5",
        "cursor": {
          "ref": "d51abc12-ea0a-4618-aca3-d86772e0e0d3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "388365c9-8ff3-42ab-9ff0-29ef24c88e34"
        },
        "item": {
          "id": "1d967e48-f6ca-4cc9-b2cc-3003db873ef5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4baf38b-c019-4aa9-8be8-a611d8f2dfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d5f659-f42e-4636-b392-716493103068",
        "cursor": {
          "ref": "8a6c4abb-b473-4245-8195-8d3ffaec8baf",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2d49248c-c647-4282-ba0d-aa58ba95d396"
        },
        "item": {
          "id": "a0d5f659-f42e-4636-b392-716493103068",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "336f4a34-c15c-439a-b4a7-a87eb5119fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c32bbd-1a13-4e6c-8cd2-ee5a634606e8",
        "cursor": {
          "ref": "b9353afb-2f9c-4cff-bbe8-92382ddec71b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03794671-fd92-4eef-a7b9-d5eac136120b"
        },
        "item": {
          "id": "74c32bbd-1a13-4e6c-8cd2-ee5a634606e8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0195f4e5-0461-4301-8db5-ada673fcf062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dac32b-bab9-4ca1-8919-a3b38460431e",
        "cursor": {
          "ref": "5fc506fa-6cb9-493e-87d1-687fe267125d",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bac4f9eb-b64e-40ca-89af-7594f3fa6d56"
        },
        "item": {
          "id": "06dac32b-bab9-4ca1-8919-a3b38460431e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "93608a8e-6341-4fe8-9673-fb7e1d6f5720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a8371f-7a06-4c2d-a1a4-2df6af0b4cd5",
        "cursor": {
          "ref": "b4a8b428-bde3-40ba-adef-477f71221e61",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "501a295e-2613-400e-a854-20a41f2c4663"
        },
        "item": {
          "id": "41a8371f-7a06-4c2d-a1a4-2df6af0b4cd5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a1306067-884a-4c4a-be36-22dc8d4d1dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d331fa8a-6915-4c17-bd94-9c00927084de",
        "cursor": {
          "ref": "2c1987cd-70a2-4f1e-8f11-f0435455069c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7aca0511-cc62-416d-bf5b-d3ddf0c948ec"
        },
        "item": {
          "id": "d331fa8a-6915-4c17-bd94-9c00927084de",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "feb6603e-cbfb-454d-904d-ff74171114db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b792f4-d194-421e-a1e6-3e0751e5c1b8",
        "cursor": {
          "ref": "25121dc1-17be-4b3f-8a87-772e11369f97",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d86ef758-92d0-4af0-8957-aff411392d1d"
        },
        "item": {
          "id": "11b792f4-d194-421e-a1e6-3e0751e5c1b8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "93ee3f1c-f4f0-4361-8754-5a41972e0851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b401c18-691a-4d39-ba54-c1e24f6ede9e",
        "cursor": {
          "ref": "51f5272c-747c-42e4-8a3a-bb58b8a1b686",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d917e197-1718-4fc2-9fa8-389620f3b74b"
        },
        "item": {
          "id": "2b401c18-691a-4d39-ba54-c1e24f6ede9e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5d5ac1cf-d0c2-4277-9fdf-bf9a6fd7b3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f278700-5359-41c5-a8c2-1a31231718dc",
        "cursor": {
          "ref": "97c6c028-a55d-48bf-8c44-74525f705727",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9b3ab5d4-f111-449c-a910-e02e1fce3c5c"
        },
        "item": {
          "id": "9f278700-5359-41c5-a8c2-1a31231718dc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9012811b-472b-4f33-9a15-cb30b95ddcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59aaa47-ed3a-44a2-91e3-7727d92f32f9",
        "cursor": {
          "ref": "3dc5b646-b4d1-4602-a1d0-9ec37a45efda",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8885a759-ad95-4658-be83-2ef8f2a5cebb"
        },
        "item": {
          "id": "e59aaa47-ed3a-44a2-91e3-7727d92f32f9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6915ffb2-49ae-41aa-ba8e-8428a90e666f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891c07ed-7a94-48c9-a60a-6cbcefd4fb00",
        "cursor": {
          "ref": "b8216997-c97c-4386-9fde-fe72d6acf356",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d0280e76-e62d-455f-8b49-dcefff2c26b0"
        },
        "item": {
          "id": "891c07ed-7a94-48c9-a60a-6cbcefd4fb00",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6c1db3b1-576a-4b4e-8f86-ef74bb29572d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833df066-9dd6-4235-ae81-083b6ff64387",
        "cursor": {
          "ref": "b04ebfe8-88cd-4cfd-aa8f-a96ddc854502",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5ac1a7e3-11cb-43fc-9d28-a0dd84ea2d85"
        },
        "item": {
          "id": "833df066-9dd6-4235-ae81-083b6ff64387",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9752db80-7bc6-4b0a-8538-bb45e98a1d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70884005-d18c-4332-a488-a5c7a0dd9762",
        "cursor": {
          "ref": "a2d21e4b-22b0-4660-af86-7b988765ef37",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0e6a1ab8-a52f-49f5-84a7-75431521b1b5"
        },
        "item": {
          "id": "70884005-d18c-4332-a488-a5c7a0dd9762",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8bc1054f-10f3-4f92-9c19-415909906d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b32187-b84a-48d9-a1c0-6db4b8349372",
        "cursor": {
          "ref": "7d856613-6350-41e2-8314-1ddec98ef3fa",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3a4e7813-a546-4193-8c7f-430b4d0410fc"
        },
        "item": {
          "id": "e4b32187-b84a-48d9-a1c0-6db4b8349372",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7008d6bd-3401-4fd2-8c8b-03de9e7c1fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4521a8-255a-4f97-b846-e2cf6f608a92",
        "cursor": {
          "ref": "9018af41-cc11-4aa7-8ee6-43adee8f4a2f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7413e936-9e11-450d-90f9-4fab6645a1f6"
        },
        "item": {
          "id": "6b4521a8-255a-4f97-b846-e2cf6f608a92",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "88a50fc0-cc15-43a8-b303-9451b128d214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5c9071-e562-4bf7-8a5d-12e53b37e48d",
        "cursor": {
          "ref": "381332d7-97f1-4fd2-9556-bf84dc048147",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a5b5af83-f484-49f3-a109-d6c31b489f68"
        },
        "item": {
          "id": "6a5c9071-e562-4bf7-8a5d-12e53b37e48d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d6ff5ba0-5900-4d01-b92e-4333439a6ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60d54f3-f522-481b-994c-3afcba6943fe",
        "cursor": {
          "ref": "a03208f3-3af3-4b01-9f35-2d9cb2c3e8f0",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "001e3873-4cb9-4a0c-bf62-145128b4f30a"
        },
        "item": {
          "id": "c60d54f3-f522-481b-994c-3afcba6943fe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7beac277-0536-4d66-91f5-b14fb155ebef",
          "status": "Created",
          "code": 201,
          "responseTime": 625,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "74a01a44-7c5c-4d89-9531-9ddca92352a9",
        "cursor": {
          "ref": "42a912d7-1a83-45db-b458-bc21bce2b259",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "50a50461-f175-487b-b00f-a24ecdd71079"
        },
        "item": {
          "id": "74a01a44-7c5c-4d89-9531-9ddca92352a9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "86c1acf3-7b61-488c-ac96-91cc4bb0e1d1",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5690b3d4-4ef1-4f48-b310-e989e5bd6c6b",
        "cursor": {
          "ref": "3d38a90e-c814-4c93-a50d-5d2e556678a8",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "35340162-8471-4097-a534-923e3e8da28b"
        },
        "item": {
          "id": "5690b3d4-4ef1-4f48-b310-e989e5bd6c6b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5112f5cd-af2d-4c87-b597-257d0fcdcf60",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e591bf19-83c8-4189-83df-3de72f1e6661",
        "cursor": {
          "ref": "7e4e7734-6f99-400b-a645-a4b4f51e4745",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f991f964-72e2-4861-9722-17bfb51ab457"
        },
        "item": {
          "id": "e591bf19-83c8-4189-83df-3de72f1e6661",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ff4b8a76-ebea-4a45-90ca-810beb7aa5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20df1bc-85bd-4364-b049-293b3da78939",
        "cursor": {
          "ref": "5e72748a-7aaf-47d4-864f-c52b09810091",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "24596ae6-5a0c-4bf1-9bf7-b95d7be24222"
        },
        "item": {
          "id": "d20df1bc-85bd-4364-b049-293b3da78939",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "116a21c9-a759-4db5-8fc0-1e37e557d331",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "219ff68d-35a0-4e5d-a774-86839decc845",
        "cursor": {
          "ref": "418c37dd-a2b9-43c2-a8a1-79f1a6937d34",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "75c16ea0-ccf1-4f31-8b79-fb9406d67b61"
        },
        "item": {
          "id": "219ff68d-35a0-4e5d-a774-86839decc845",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c2bf8b6e-4b5c-413b-8528-4e938fbf0e47",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1457151b-5d9b-4de8-9083-e52b9cce8c2c",
        "cursor": {
          "ref": "780ca9e3-c881-4abb-8121-86dbed13f237",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a2247ac-aa97-45ae-bb26-64a1e5c41ab0"
        },
        "item": {
          "id": "1457151b-5d9b-4de8-9083-e52b9cce8c2c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6b836661-b850-4edd-aefc-e81ef759c1b8",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "dcf9def4-149f-4498-908e-e07ee2c73975",
        "cursor": {
          "ref": "d4d588fb-0ba7-4618-bcbd-bf3224bbe0ed",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b236e4e5-da36-4db1-bf93-760c2e1f0f43"
        },
        "item": {
          "id": "dcf9def4-149f-4498-908e-e07ee2c73975",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b15d4acd-93f6-4d32-ac7f-94455e442e7a",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2d039283-a213-4871-9ccc-ed2c49a2a35c",
        "cursor": {
          "ref": "37b6a41b-baa8-43d9-8cc5-7ac49f032029",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "909941f0-35d9-4d01-bd2f-6792f7fc396d"
        },
        "item": {
          "id": "2d039283-a213-4871-9ccc-ed2c49a2a35c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "57c263ca-8e01-45a6-9779-30c77dfa2661",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "73b62b7c-d947-4c2e-a98f-96bf4259ede4",
        "cursor": {
          "ref": "a91aa03f-7bc0-4493-bd5f-7a1fcf334bf7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a4b5a89c-a2ce-4dae-9067-9df8003eb3a1"
        },
        "item": {
          "id": "73b62b7c-d947-4c2e-a98f-96bf4259ede4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4b433c73-3c02-4477-92e9-dfe6f9e84b8e",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fdd0b8fa-4365-4932-9104-85b527685ac5",
        "cursor": {
          "ref": "2c653599-6c07-491b-961b-7e51df5bb47f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "14309e0e-1595-48d9-982e-a44a73c218e6"
        },
        "item": {
          "id": "fdd0b8fa-4365-4932-9104-85b527685ac5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b75f96f3-6b9b-4056-8710-724fd916a352",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "01ddadce-9c2f-4988-8491-95a019b3b7f3",
        "cursor": {
          "ref": "e529bc02-d865-406f-9f82-d3cdf3355517",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d7e5d210-3f98-4d9e-b9f3-6811266e518d"
        },
        "item": {
          "id": "01ddadce-9c2f-4988-8491-95a019b3b7f3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "79240013-1b72-4654-9ffb-7a26ae12ebe3",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "72d11d36-69ad-4049-b7b8-53c4fbeca444",
        "cursor": {
          "ref": "ad4f8519-7d1c-4ffb-a855-37cfccca37f7",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "68a1d734-3bb5-406e-9ea8-29775d5d5a82"
        },
        "item": {
          "id": "72d11d36-69ad-4049-b7b8-53c4fbeca444",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b167c2d6-e1bd-407e-9c1f-2ec6e83750d1",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0b95754c-b26a-4363-a4be-479098fc6645",
        "cursor": {
          "ref": "ec4832ae-0649-41c7-b7ba-7788dcbf8f64",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ff41dbd0-6331-4c80-baf6-29817a0920ec"
        },
        "item": {
          "id": "0b95754c-b26a-4363-a4be-479098fc6645",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d3bff399-f49e-4b0e-a07d-c519dd7cbca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cdd510-fdfc-46ce-8e08-0fc150341dd4",
        "cursor": {
          "ref": "a08e8427-04ec-466f-b2d2-3b342608efb4",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "57b89b28-05e5-4fc6-b889-73fd9ad8ccc4"
        },
        "item": {
          "id": "d7cdd510-fdfc-46ce-8e08-0fc150341dd4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "47b03304-9bef-4490-907a-39218a362ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e369c4-adb5-413d-ada6-a066a87fd2cf",
        "cursor": {
          "ref": "debeeedd-c5be-4229-b785-2534fac27dfa",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "86e04488-febf-49e0-b8ce-28d4c70d84ee"
        },
        "item": {
          "id": "c1e369c4-adb5-413d-ada6-a066a87fd2cf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8e113d84-d801-46af-ace6-df5f1fc8aa0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4900cb-3419-4750-bb11-f67b0ac7c68e",
        "cursor": {
          "ref": "a5f1a029-6a49-4386-8fc0-2624fd351c71",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3b7c212f-0e9a-4233-bcc0-c683ced8a089"
        },
        "item": {
          "id": "0e4900cb-3419-4750-bb11-f67b0ac7c68e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f840da8e-80be-49cf-944f-f083d0532795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3600895-7770-4be7-b3e4-73738e0d7904",
        "cursor": {
          "ref": "d12d36ec-6afd-4681-9ea9-29cd78d1f838",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c83572cb-97e7-4673-a4e6-9eb0318d9cc3"
        },
        "item": {
          "id": "c3600895-7770-4be7-b3e4-73738e0d7904",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "15d97ccd-35eb-4407-a399-dc2f2c794db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103cdc07-2118-4441-93f9-e6a83f182df8",
        "cursor": {
          "ref": "b71dd221-3f58-4ead-b3e9-41c5aadfa9e5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dd23c72d-2d92-4502-9779-67d968dd692d"
        },
        "item": {
          "id": "103cdc07-2118-4441-93f9-e6a83f182df8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7015e9c5-b473-4c0f-a4dd-37fc3616b07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d4f81d-b781-4557-8699-2f20b2c0f3a1",
        "cursor": {
          "ref": "1b4a433c-c6a0-48fa-8b98-0aa2943307b7",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2d3ec3af-0fe4-4531-a5b5-a7bdcaa33d96"
        },
        "item": {
          "id": "19d4f81d-b781-4557-8699-2f20b2c0f3a1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "001e1dde-3b73-4953-b026-cc74a7fc1888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc030ab8-f178-4fe7-a778-c5bdb3622d5e",
        "cursor": {
          "ref": "c5311893-0a0c-491d-9942-7bb8b446ccc5",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d31ca5ce-61e0-45e1-a314-70720dd42edc"
        },
        "item": {
          "id": "fc030ab8-f178-4fe7-a778-c5bdb3622d5e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7de35cb3-c2e5-418d-89c8-4dfb493af68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7999319f-2a31-45c2-b03b-daff31768622",
        "cursor": {
          "ref": "754520c0-af6d-4562-85ec-02fe859242aa",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f18e710e-f562-4251-a0f4-c527a5a50dcb"
        },
        "item": {
          "id": "7999319f-2a31-45c2-b03b-daff31768622",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a9118f0e-c7d8-4703-8214-4a68bb02e11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aff498-77aa-42f1-b890-2c58e371d0cb",
        "cursor": {
          "ref": "2a5edbae-b20e-432b-b6d7-939fef638e5d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "368ac628-fb01-43fd-bf8e-9cf86c90cda7"
        },
        "item": {
          "id": "56aff498-77aa-42f1-b890-2c58e371d0cb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b37d7720-07fe-4bb9-9e4f-c5735f99c9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ebc72a-36e5-42d1-bb95-fcea73b6bd92",
        "cursor": {
          "ref": "3a8c6b26-5f62-4186-b712-f331959fe3a5",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ba2b8e1e-b524-4dbd-af38-daaf642a780c"
        },
        "item": {
          "id": "a6ebc72a-36e5-42d1-bb95-fcea73b6bd92",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9b7684b7-e6b7-4506-8c9d-f9f7a5d5f008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8449e1c0-673c-417d-9a4a-a528e35aee97",
        "cursor": {
          "ref": "cfbbe617-7203-4470-b333-1eca650034b1",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3fd10417-fc04-4fd1-afec-7a79a820ca28"
        },
        "item": {
          "id": "8449e1c0-673c-417d-9a4a-a528e35aee97",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "aa154565-dd24-4ff0-af76-f4c4d67f3bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae509d21-3f67-45c6-b260-66242b317a41",
        "cursor": {
          "ref": "73bba1fc-c40d-4f39-ab65-4792603bdf5c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "48144de7-af86-425d-86e7-9ab872a5f9d1"
        },
        "item": {
          "id": "ae509d21-3f67-45c6-b260-66242b317a41",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f01f645-55b5-49b0-b2ba-d9444e13fa2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8d7945-44d4-458c-bfa5-7e5add33b41b",
        "cursor": {
          "ref": "9d63ecde-bbb1-4cb0-8e7d-e0aa4e4da2ee",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "56a22378-158a-43c6-9fed-4918fc01396a"
        },
        "item": {
          "id": "2e8d7945-44d4-458c-bfa5-7e5add33b41b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3d7f7833-027d-4174-9ec7-a3ea1e392e6f",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b808e231-c344-4557-bd55-200c117c7088",
        "cursor": {
          "ref": "8ae55e6c-836d-40be-b031-efc8a8c85273",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f3df6901-d4c4-4d95-862d-3015bf9ee8eb"
        },
        "item": {
          "id": "b808e231-c344-4557-bd55-200c117c7088",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3e2b17e3-7deb-4ff1-9fd0-347136af1ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "32f6e150-5bd1-4ab7-bc6f-f60335d74384",
        "cursor": {
          "ref": "8e3444a9-7853-40d9-acba-b3ea52f5fb79",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "963bcaf2-0ae9-479a-b9ba-022ad21e17e8"
        },
        "item": {
          "id": "32f6e150-5bd1-4ab7-bc6f-f60335d74384",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2483b328-4d6c-4f75-8b3f-613755d2f392",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e49eb930-dab0-420a-a02b-26f6569af826",
        "cursor": {
          "ref": "1b05d022-88ab-49cc-ad4c-e27b12e4480d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "06356460-199a-40d3-ac5d-051cbf0bcef8"
        },
        "item": {
          "id": "e49eb930-dab0-420a-a02b-26f6569af826",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cc3eb98e-0e86-479f-95ce-5f84eda75c48",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e2e6214c-2d35-4356-9f5e-a21f74e1b73d",
        "cursor": {
          "ref": "af65f420-9b3e-494d-9f86-e8368ab0ca9f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b2f387e0-3b92-4d5a-bc42-6c971bd18fcc"
        },
        "item": {
          "id": "e2e6214c-2d35-4356-9f5e-a21f74e1b73d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d1fe6af8-08e8-4698-ab15-063cf7e37d90",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ceda3955-f995-4986-87c6-7f25521bc245",
        "cursor": {
          "ref": "15fead58-6156-4827-a7cd-df0e64ac3e84",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "282f93f8-29f1-4476-8bde-d9b4191c2992"
        },
        "item": {
          "id": "ceda3955-f995-4986-87c6-7f25521bc245",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8ccb37ba-6fc4-4b96-9651-c016271db3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e3a146-465d-4d8a-8314-5256bec603af",
        "cursor": {
          "ref": "c45ffd4d-ba14-4c73-a7dc-d8f437109923",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4bac8fd8-b73d-4b22-9b85-3b7412790569"
        },
        "item": {
          "id": "89e3a146-465d-4d8a-8314-5256bec603af",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "16a4173f-232b-452b-948b-8aa941e92fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04103cb-2199-485b-96fe-26e0ed102437",
        "cursor": {
          "ref": "9d5481c7-d968-4db8-b128-fe7f66c6c4ef",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4966b59b-3685-4b87-871b-3fc58082579d"
        },
        "item": {
          "id": "d04103cb-2199-485b-96fe-26e0ed102437",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa179b4e-a169-4284-b4d3-8d12865cce55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5465b7-8505-4541-bde9-30d5c2972644",
        "cursor": {
          "ref": "827a35d0-be55-4e20-b89f-40b7bca7ed13",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "202d0744-78d0-4025-bff9-d4c821d2b110"
        },
        "item": {
          "id": "5a5465b7-8505-4541-bde9-30d5c2972644",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "14282859-359b-4c84-a1e3-032ed15e903f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866bdb94-c3d2-4713-a901-f41e1552d37e",
        "cursor": {
          "ref": "a4ecad78-b660-468a-907f-b4157e8d27e3",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4333b9b1-99dd-47b3-b040-637aff320d7e"
        },
        "item": {
          "id": "866bdb94-c3d2-4713-a901-f41e1552d37e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d850334b-09aa-46f1-a429-33cf62824918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc701a7d-48a4-4b37-a2a0-f7f38d484762",
        "cursor": {
          "ref": "569d4259-2b4f-4d45-b0e5-6c13990944f5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "29c0adef-ed3f-4d0e-8e47-d3232c582145"
        },
        "item": {
          "id": "fc701a7d-48a4-4b37-a2a0-f7f38d484762",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "07e55eba-6619-415b-910a-802d4ee09fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a00c14-8e41-4d3b-b6ad-0d97449e7b81",
        "cursor": {
          "ref": "a650124f-04b6-455c-8af4-511ef96a6e36",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "881e82c1-38fc-4636-872f-fdcb59f8daaa"
        },
        "item": {
          "id": "12a00c14-8e41-4d3b-b6ad-0d97449e7b81",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "287e1c80-0670-4aff-aeb7-341fd8ced198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2a2bbd-07d0-4763-92ab-e6083f4898f3",
        "cursor": {
          "ref": "2b9eaac7-3972-4257-8b33-16b710a4e2c8",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7e471548-d623-4810-95bb-507148d35045"
        },
        "item": {
          "id": "3d2a2bbd-07d0-4763-92ab-e6083f4898f3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c7dc44cd-052f-4233-9ca8-7843e40855fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74b7abb-0647-4757-ba2e-8557733232e6",
        "cursor": {
          "ref": "f4425e31-df14-4720-989f-7a1ba23cc0a0",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "79ce42c3-dd9c-4937-b3d5-9b60a30d6a7a"
        },
        "item": {
          "id": "c74b7abb-0647-4757-ba2e-8557733232e6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "288cb9ce-2a1c-403c-ba08-888d286388a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533a5052-2742-4783-9904-949fb5983df6",
        "cursor": {
          "ref": "5c055785-8dcc-4992-94d3-2f0505f23420",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "afc10e80-ef4e-44b4-8cc7-9f69c2438577"
        },
        "item": {
          "id": "533a5052-2742-4783-9904-949fb5983df6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f02b8546-1f82-4711-b8b7-4a8366dd36c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c76d8b-ae1f-4882-9d05-daae4e7abd88",
        "cursor": {
          "ref": "a3082256-7607-48ca-b1ff-9fcb6fb60839",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8f4b9e6f-4dc4-4f20-bbf6-e4fe140596a6"
        },
        "item": {
          "id": "e8c76d8b-ae1f-4882-9d05-daae4e7abd88",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "760ce9a3-bee0-4c3e-9841-54e1beef86ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52cd54e-0aa3-4f64-bf70-bae6f89f8f5e",
        "cursor": {
          "ref": "cb490d22-c18a-48f3-9509-a268aecd3ca4",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0ea65ed4-a4e2-4c40-9cfa-8715ce49d1ee"
        },
        "item": {
          "id": "f52cd54e-0aa3-4f64-bf70-bae6f89f8f5e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a007c596-d2dc-45cd-bca7-338e8680f58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bb1a23-b2b0-4541-912b-9e4215290f02",
        "cursor": {
          "ref": "19d78d46-903d-4373-9d6f-38665d232de7",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "efa97168-0089-43a8-bf89-0af17499678f"
        },
        "item": {
          "id": "83bb1a23-b2b0-4541-912b-9e4215290f02",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1f14da71-26e8-4e5b-843c-9af9178aca6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0118863-aacf-4895-b288-121bc27209be",
        "cursor": {
          "ref": "6ab5607a-6159-4ab1-bb27-e803ed1febe5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "40d9810c-bc57-4e34-88a8-aad5420357e8"
        },
        "item": {
          "id": "f0118863-aacf-4895-b288-121bc27209be",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "56129fce-cc67-4973-ac9f-b72f021ed08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04aeb7f-c2b2-47a7-8d90-7cf5a004fe35",
        "cursor": {
          "ref": "8fd03c32-7ef3-4513-b94d-1abd3430a5fb",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a534cebd-63c8-41b1-8918-0c94b6e11b6b"
        },
        "item": {
          "id": "d04aeb7f-c2b2-47a7-8d90-7cf5a004fe35",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5c793a27-0704-43a1-9a92-4d37b574bea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a3a676-34b7-478f-8cb8-ba4bf14930c9",
        "cursor": {
          "ref": "6bc7e36c-5418-49aa-9e9e-dcfbfdc3d2b1",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "55605548-fd6c-48fc-8e70-24197d47cb7e"
        },
        "item": {
          "id": "45a3a676-34b7-478f-8cb8-ba4bf14930c9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e0e165af-1b85-4cbe-ac17-6de7476f1596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82a048a-62a7-49b1-a004-00fc9529ef55",
        "cursor": {
          "ref": "c2c4b42b-fe43-45c1-b50c-bad556b36235",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a24534e5-ff04-41e6-b34e-adda14bacb88"
        },
        "item": {
          "id": "c82a048a-62a7-49b1-a004-00fc9529ef55",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0b301a30-54a5-4342-b263-3b1f9c7d2139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f2e471-1324-4a3b-bd77-dec80a6c4f22",
        "cursor": {
          "ref": "45d6b0b7-cd8a-4e08-99bc-5166324d3671",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b688f8a2-2bf9-4ef3-beea-bb95d9ae9571"
        },
        "item": {
          "id": "c8f2e471-1324-4a3b-bd77-dec80a6c4f22",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ec045dbe-f699-4a8f-b420-9df4f05e6236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a848477-3eb6-4a8d-9bbd-d13309f43116",
        "cursor": {
          "ref": "fdea2958-c4ec-4597-b076-0f758e8ba013",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b1009333-24ca-43c2-9443-6769752a2b17"
        },
        "item": {
          "id": "2a848477-3eb6-4a8d-9bbd-d13309f43116",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fa576f77-5213-4d6b-a5a4-12b430620d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d318291-0131-4a71-b68b-9631d8a51f56",
        "cursor": {
          "ref": "a683378b-dbdf-4428-a951-9c0e0f4e9b97",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "82251981-c153-4ae2-99c3-fa901978a3ab"
        },
        "item": {
          "id": "5d318291-0131-4a71-b68b-9631d8a51f56",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "85fb37fc-a0ee-4913-b879-19a06ad181ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cf21f1-4ff3-4662-b02c-157803511ea4",
        "cursor": {
          "ref": "ed8b7c25-b958-4053-8641-24522bc77e23",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "66a3f56b-fd51-480b-bb96-9b2e50333cd8"
        },
        "item": {
          "id": "58cf21f1-4ff3-4662-b02c-157803511ea4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "156b68bd-4be1-43fa-9a73-d0d91e6eb4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5b302c-dc33-44cb-99af-f70d50529f9b",
        "cursor": {
          "ref": "04afa578-5fa1-41e4-a605-c471eba585bd",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6de904be-cf35-4a74-a64e-b22f52886004"
        },
        "item": {
          "id": "8c5b302c-dc33-44cb-99af-f70d50529f9b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6dcbae2f-0586-47ae-9095-f9f56161c630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220728e5-8f46-4fdf-b698-55cf7151c89b",
        "cursor": {
          "ref": "2b64504e-546d-467d-8da5-859e5d7c1e05",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "146ed5ac-630e-42df-a0b1-8d5ebaf31fc2"
        },
        "item": {
          "id": "220728e5-8f46-4fdf-b698-55cf7151c89b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8be7e543-1822-4986-8b78-5f0d973f5f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de54b82-e578-4186-9621-814db3bd2983",
        "cursor": {
          "ref": "30cf0c0d-e874-4a44-ab40-d45479494d07",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "745eddba-0ef7-482a-975d-30676d78fe0b"
        },
        "item": {
          "id": "6de54b82-e578-4186-9621-814db3bd2983",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fb2426d9-110f-406c-9a68-9e558f05e1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3cf3bb6-f8ba-4bd4-84a5-b4f841bb8e8e",
        "cursor": {
          "ref": "a2c6d879-0dca-40ff-b5be-70e02e663be5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "535788d7-5ab7-4e48-986d-a7418a546e99"
        },
        "item": {
          "id": "b3cf3bb6-f8ba-4bd4-84a5-b4f841bb8e8e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "90a0db17-b48c-46e1-bdd8-079a64d0af26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040ea33e-0217-4183-b0e3-8653b68cd5a1",
        "cursor": {
          "ref": "4b8d2438-24db-42a7-932f-df768ded2a44",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3425325b-d87e-40f8-b151-910a0b15d4f6"
        },
        "item": {
          "id": "040ea33e-0217-4183-b0e3-8653b68cd5a1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "48de06a4-dbf1-4a64-a156-818dee48d62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b126cb5-1560-4b1c-9285-580bb1be4411",
        "cursor": {
          "ref": "72f1ba87-3810-4240-845d-2768711422bc",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b002fe0d-4c35-428b-a348-55d5905f3197"
        },
        "item": {
          "id": "3b126cb5-1560-4b1c-9285-580bb1be4411",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "89990dc0-9f42-4c1d-a550-423f7c5fbf51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5283230-0004-417b-ba44-72ede5443d36",
        "cursor": {
          "ref": "c3e41666-43b8-4331-9c31-704900ea8934",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bfd36821-4d13-4cfb-b5de-404a68aa02ef"
        },
        "item": {
          "id": "c5283230-0004-417b-ba44-72ede5443d36",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e8f4b532-3088-4454-990d-357d76bc3ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea88112-394b-44e7-b2c2-d4473cb58542",
        "cursor": {
          "ref": "791dd838-dd89-4ff2-8d68-896b4b964939",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e25dd7ef-57cd-4618-8a4e-1a65842b3a8d"
        },
        "item": {
          "id": "9ea88112-394b-44e7-b2c2-d4473cb58542",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b18d0b9b-0623-4db8-84d1-4ce4f28dfc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67549a9c-e937-450e-91b7-9d22165efc93",
        "cursor": {
          "ref": "2c007b7b-1278-47c3-9cd7-18c081bbf278",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1b0138a2-85d2-46cf-b7fc-dcc8aab8e6fc"
        },
        "item": {
          "id": "67549a9c-e937-450e-91b7-9d22165efc93",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "37639cc0-317b-4b7c-b941-857e2f33d61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fef1da-ca2b-4742-ab00-88a6f1f45af7",
        "cursor": {
          "ref": "3e66b30d-2ce7-4a29-9382-62f38440926a",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c22bd947-1b4b-48fe-b583-d6de7e28b2a1"
        },
        "item": {
          "id": "c9fef1da-ca2b-4742-ab00-88a6f1f45af7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a8e8dfd4-ff14-4dd3-b0a6-9abc7a6c308c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95c5739-33a1-4309-b995-90d444a5d4d6",
        "cursor": {
          "ref": "ed4ed1b8-4d40-4b12-88c7-4a229911f00c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "85f11084-6784-4c2f-89a9-c17f65a14366"
        },
        "item": {
          "id": "f95c5739-33a1-4309-b995-90d444a5d4d6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0333a3f7-495f-4c57-b8ed-79c51937de04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5e54df-cc08-4c84-85d7-9246f056ed1a",
        "cursor": {
          "ref": "ab481682-9b6a-438f-a68d-49c141316819",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a6e7e4d6-6325-4af0-951e-ce7cfef1bb12"
        },
        "item": {
          "id": "1c5e54df-cc08-4c84-85d7-9246f056ed1a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8b03345e-d440-4d50-8bb3-30e91d4afcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e6bc576c-d633-438b-960e-59ffa1af8dcb",
        "cursor": {
          "ref": "948eb1bd-2892-4cc6-baf8-e286ed251a2e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5c893cb9-f00d-49ef-b21a-45c6fc50d157"
        },
        "item": {
          "id": "e6bc576c-d633-438b-960e-59ffa1af8dcb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4ba8a9ed-1805-47d0-824c-3d5dadf49e8d",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3fa22c-218f-445d-8eb6-36bb04d62956",
        "cursor": {
          "ref": "47bf3e95-a4cb-45a7-9512-da7df20ecc69",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "92c43bc0-4ce4-4409-9aa3-3c4e8f972ac3"
        },
        "item": {
          "id": "1c3fa22c-218f-445d-8eb6-36bb04d62956",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a8f4a138-66ca-4ffe-bf2d-45d3ab7914a8",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "730415f7-4546-43d5-ba8f-a9427096bf3e",
        "cursor": {
          "ref": "0d63c459-7d06-4601-8724-0d6c51762a72",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "009915bc-4122-4715-b63a-76fd173d038a"
        },
        "item": {
          "id": "730415f7-4546-43d5-ba8f-a9427096bf3e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "00be3d47-5bb6-4679-81bd-ab0d03b9715b",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "819371f6-db8e-43a3-92bd-352db384bdbd",
        "cursor": {
          "ref": "39da3346-a84c-4580-bcff-390a799ff749",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f0d16621-4ba6-4145-926b-abd84848c605"
        },
        "item": {
          "id": "819371f6-db8e-43a3-92bd-352db384bdbd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f5a6cf7f-33ee-47f0-be66-3423022f2824",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58850a0-be99-4e2c-b6b3-da515d223dcb",
        "cursor": {
          "ref": "0cbf2a21-e25a-48c0-9ff0-fc06644487d9",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "63f46ca6-8125-4c79-bd3e-3c776ae88acd"
        },
        "item": {
          "id": "a58850a0-be99-4e2c-b6b3-da515d223dcb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d72461da-8fca-4047-8775-26f5e90045f2",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-07T00:38:51.840Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-07T00:38:51.840Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5c0df3cd-8f55-409a-a6e4-35c1fe583f9e",
        "cursor": {
          "ref": "5ce5dec1-f019-4423-b352-ba5d768c04ba",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "99e3a8b1-23ca-48d2-9cf8-822b1dee9a07"
        },
        "item": {
          "id": "5c0df3cd-8f55-409a-a6e4-35c1fe583f9e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "741258a8-1e3d-4567-ae4e-c06e922808ee",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de62acf8-2aff-4a36-911b-bc170fa6c3cd",
        "cursor": {
          "ref": "80fde6cd-ef12-4e7a-bd70-951356fb313d",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3fd740d5-499a-40b0-bb51-f6a939956090"
        },
        "item": {
          "id": "de62acf8-2aff-4a36-911b-bc170fa6c3cd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9d8c291a-7d88-4635-a289-28fef9463c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a592905-a3c9-46a9-970f-e47cd9d079f4",
        "cursor": {
          "ref": "2c16477c-8270-4399-b12f-baa26ed7a05e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9573fed5-12b4-4b3a-b63d-ac1a67a0dca1"
        },
        "item": {
          "id": "6a592905-a3c9-46a9-970f-e47cd9d079f4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ff90398d-2186-4b5a-a6df-a99f5a57d041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3351f421-9f77-49c5-b02d-2663f6731e4a",
        "cursor": {
          "ref": "365cb8ba-3cc6-4ca1-859e-9c52a7083c26",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c19bd1d8-4d9e-4501-a426-b3ce97c5745f"
        },
        "item": {
          "id": "3351f421-9f77-49c5-b02d-2663f6731e4a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "54f28d28-cb6b-496f-b781-df87cd597055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75707c3d-42bd-4f38-b254-51039b081a9e",
        "cursor": {
          "ref": "554ea6e2-38f8-49b1-9ecd-9b026660168e",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "548456ca-db84-4cf0-b7a1-3750ada252d9"
        },
        "item": {
          "id": "75707c3d-42bd-4f38-b254-51039b081a9e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c6530c94-f40c-4b59-a65a-d5873371f11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2d36e4-cb3f-4a95-bfc2-d6e3c1826f6f",
        "cursor": {
          "ref": "01fc2415-3719-48a1-bca1-1e15fd13f341",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4687ed66-9768-4eb1-a58f-871cc014fd5f"
        },
        "item": {
          "id": "6c2d36e4-cb3f-4a95-bfc2-d6e3c1826f6f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1210b5f2-f612-45eb-b613-026e23d1c7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977c530e-9127-4ad0-b448-12d4f784dd2c",
        "cursor": {
          "ref": "dd46647a-4576-4aed-b141-bc1b308b4def",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8dab2ecf-4bb1-4c7f-ba1b-0ff61104a05f"
        },
        "item": {
          "id": "977c530e-9127-4ad0-b448-12d4f784dd2c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9285e778-1d77-44ac-a41e-2218beb5fdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caddbd25-75cd-495b-91fa-10d541008e95",
        "cursor": {
          "ref": "8acd4e6e-750a-48de-a54b-b8afde0a3361",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a934a9c2-e3e4-49ba-93fe-bd0b85f02fb1"
        },
        "item": {
          "id": "caddbd25-75cd-495b-91fa-10d541008e95",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4223cd26-f8bb-45af-98fc-e7525db7dfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0b4797-b6cd-4af8-b7fb-cf565d127aa8",
        "cursor": {
          "ref": "f516c09a-5948-441f-96a2-531fae3d71ec",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fb746619-1a32-48f8-ac9d-ce4c32d3f1cf"
        },
        "item": {
          "id": "0f0b4797-b6cd-4af8-b7fb-cf565d127aa8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "99107de5-0807-46e1-b92b-905545c8d441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40045f5a-d757-48cc-bb3a-82dd73762340",
        "cursor": {
          "ref": "7811323f-1690-456d-94f2-3c582cbe09e9",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9ed78e7b-6440-415b-bcb0-c80f71db0ca4"
        },
        "item": {
          "id": "40045f5a-d757-48cc-bb3a-82dd73762340",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e769fa2d-b2b0-4f9e-91c1-4043656fe7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5578675f-e1b5-4796-a227-be539d4b144f",
        "cursor": {
          "ref": "1dbd5aef-a644-4b83-a08a-c1d6c438e0b4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b6f5b5f5-6b1b-443d-9e7b-8dc98ed1db4f"
        },
        "item": {
          "id": "5578675f-e1b5-4796-a227-be539d4b144f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c9bc4610-7e75-4361-b22a-3fc9802a3930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fc0a26-9e8b-4c1b-a696-103b2b840e6e",
        "cursor": {
          "ref": "d142c60b-f5e2-43d1-89c1-2a8e419f217a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "85fa7953-fcd7-4330-945b-12557145f588"
        },
        "item": {
          "id": "c8fc0a26-9e8b-4c1b-a696-103b2b840e6e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "04889567-a061-46e7-8829-7f0eaa2bda81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f956b749-23a8-410c-9a81-8789641efc21",
        "cursor": {
          "ref": "4bd03633-77a8-44c8-ad95-36703fb3f003",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8b5b0f2e-3205-44b9-90fb-44ef68931152"
        },
        "item": {
          "id": "f956b749-23a8-410c-9a81-8789641efc21",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a0520b43-1594-41ed-8c0f-2f3b257dccb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f7aa7b-581b-4ae2-b22d-27c08396dc71",
        "cursor": {
          "ref": "dd839218-452b-400b-9f21-5e4335b153a8",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a032f5dd-decc-431f-a724-9377b15dce67"
        },
        "item": {
          "id": "a9f7aa7b-581b-4ae2-b22d-27c08396dc71",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "afde67d5-ef6f-45eb-8436-be32b71dcc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c792fe-d1b0-4bba-a3a8-436451afc0af",
        "cursor": {
          "ref": "1647c13b-9659-4b23-900c-6d9f8a13c844",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1862817b-8d2c-43ae-8c06-8ad917ed77ed"
        },
        "item": {
          "id": "f7c792fe-d1b0-4bba-a3a8-436451afc0af",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "675b7676-ccd5-4ac7-8ec6-ced659a58151",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3603b404-41ec-408d-9c30-705efd4a0eed",
        "cursor": {
          "ref": "f65195e0-5803-4041-8319-6798da92a643",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c9e3c60-9dfa-4eb8-995c-084ddf73f391"
        },
        "item": {
          "id": "3603b404-41ec-408d-9c30-705efd4a0eed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b0280eea-8542-4687-9774-4cb20b98abaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b31febf-fd4f-4bd3-a28d-5c9b52b03055",
        "cursor": {
          "ref": "1b9c988f-bd0c-4080-8a33-b407310b9468",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8f4ea567-f124-48a5-bf55-20cb45bdaaf4"
        },
        "item": {
          "id": "7b31febf-fd4f-4bd3-a28d-5c9b52b03055",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5d66df3d-4d81-4a99-9507-35eec1f59c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed80d4e-6162-4f72-905e-28b474124e6d",
        "cursor": {
          "ref": "bee3c0b4-c66c-4978-b99c-83c1324de926",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1d6034bf-64cb-4cbd-a015-7cf6a56029d2"
        },
        "item": {
          "id": "2ed80d4e-6162-4f72-905e-28b474124e6d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe2620f8-6e77-44e6-8182-e5f34e399ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2124b45a-5906-4f89-9182-3520be0a0d29",
        "cursor": {
          "ref": "022cec6f-9409-478c-93fd-3d726c5ea15a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bf7973fe-ca8e-4e92-be02-29edcc01094d"
        },
        "item": {
          "id": "2124b45a-5906-4f89-9182-3520be0a0d29",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5963cbfd-6245-47c0-9a11-61d40e6d8dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e317fcc-d11e-4d29-908b-7e6d915c3641",
        "cursor": {
          "ref": "62dc7ae5-8625-4113-aa5a-bfb5390323f6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bdc6dd42-30cb-46b3-8b1b-53292426f4f0"
        },
        "item": {
          "id": "9e317fcc-d11e-4d29-908b-7e6d915c3641",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "699e8c30-cc70-4d56-94b2-1cc83ebeab09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cce61f-7ac0-401a-b1bd-6e4aecf2aa3e",
        "cursor": {
          "ref": "c11a05b7-36c9-4e1c-893c-7d8c7982319e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "feecc227-a578-4f8f-8b92-f90cee1f9583"
        },
        "item": {
          "id": "81cce61f-7ac0-401a-b1bd-6e4aecf2aa3e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f08cbb0-46c6-48ce-8dd5-e11c51ac51db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a611df-ecd8-492e-b1e0-2f3c1aeabd3d",
        "cursor": {
          "ref": "bfdc8053-7e27-47a7-b67b-64cfdf62efd8",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "41f7d695-2eb6-4f01-8700-f4023d0dc701"
        },
        "item": {
          "id": "12a611df-ecd8-492e-b1e0-2f3c1aeabd3d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd6beb7b-36cb-4cf8-b4fe-f68271632426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688d50f0-e4a3-4183-85d9-d151852e9b2f",
        "cursor": {
          "ref": "bf3cbaa9-bfa5-42e9-92ab-4a8578042d26",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3d5a06ae-b06d-4e88-87a9-92eae89d936f"
        },
        "item": {
          "id": "688d50f0-e4a3-4183-85d9-d151852e9b2f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "938ec2fd-8ac4-41cc-88da-12890e5cad64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a4c940-cb8c-4373-815f-bb79d44718c8",
        "cursor": {
          "ref": "69251e49-fa44-4783-94e5-78a448c074a5",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "76e075e0-414b-4d36-9397-1981210d5613"
        },
        "item": {
          "id": "09a4c940-cb8c-4373-815f-bb79d44718c8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bc5c30dc-0d88-40ef-89b9-c3833f5d73ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fe62ab-048e-4097-8c20-a2699e5d2b61",
        "cursor": {
          "ref": "f3e15dd5-c049-4e78-b3c1-1aaf7c722d48",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2131a9a4-d44b-4ab2-8342-73e67ff508c4"
        },
        "item": {
          "id": "30fe62ab-048e-4097-8c20-a2699e5d2b61",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "791a0537-ca01-443e-aac4-be98c0d884c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9051b7c4-9eae-4a0d-8ffb-3b964ef365f5",
        "cursor": {
          "ref": "417c3e4f-225b-4d37-b3c3-a887972b6775",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11ff9ec4-7bce-4db1-adab-72818fcf2996"
        },
        "item": {
          "id": "9051b7c4-9eae-4a0d-8ffb-3b964ef365f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f8e7b801-195e-414b-a09d-9fea4870818f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75bcaef-54d3-4d57-bbab-7543d8fc0cb0",
        "cursor": {
          "ref": "5e2f5281-f618-4b5c-ba1f-7c7232f5775b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e3c3d8dd-cef5-49a1-9be3-34f916f8bfce"
        },
        "item": {
          "id": "c75bcaef-54d3-4d57-bbab-7543d8fc0cb0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2b3b55d1-0283-451d-9040-f765d7bec4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b7309b-ff22-4b00-8278-cb090d01f095",
        "cursor": {
          "ref": "19883061-33ff-41d9-a352-f23ab0a5969b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "64655c92-b65c-4751-988b-1fff83c71287"
        },
        "item": {
          "id": "58b7309b-ff22-4b00-8278-cb090d01f095",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c97f0256-d507-4803-97f5-0189ef793e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15a42f8-eeac-47da-b1d6-ad738c7a7969",
        "cursor": {
          "ref": "eb41ea61-aeea-4957-be46-7bc0597fb9e6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7323ef81-96f7-481b-a8b5-7e396abeb79e"
        },
        "item": {
          "id": "c15a42f8-eeac-47da-b1d6-ad738c7a7969",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47d4c514-51ea-439a-b983-9a3ccd70d67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054163ae-8914-439d-b4d2-de443d9b903a",
        "cursor": {
          "ref": "53ba1aa6-e000-4d1f-ab5f-d8d6e9ea752b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e314c867-9350-4f9a-998a-17c66da13ad0"
        },
        "item": {
          "id": "054163ae-8914-439d-b4d2-de443d9b903a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "33834010-ac6f-42a7-85c8-07af33c4be66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3082a4f4-bafc-442a-adf1-011b1208da74",
        "cursor": {
          "ref": "97191e9f-95ce-405f-9fc6-a33d630a173f",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "15d7aff0-f05b-4247-93dc-57e0e2c65956"
        },
        "item": {
          "id": "3082a4f4-bafc-442a-adf1-011b1208da74",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "288681d6-446b-4656-8f0d-792f03327227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1956578f-3f8e-46a2-aa0e-af0735332e09",
        "cursor": {
          "ref": "41eeb0c5-0130-4d6c-8fd3-6141f2d840db",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4f349645-9616-4f32-96a2-b1bac4b7f7e2"
        },
        "item": {
          "id": "1956578f-3f8e-46a2-aa0e-af0735332e09",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0a37b84b-d84d-49a5-8d46-f5ae6b164fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc23d609-7312-46d4-af42-642b2a3089b8",
        "cursor": {
          "ref": "dc6b6aca-df73-4732-81b9-95aea94ddc2f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "75239217-23c9-4aae-89d6-ab917dfa399c"
        },
        "item": {
          "id": "dc23d609-7312-46d4-af42-642b2a3089b8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "07dfc7b5-8e36-4c1c-92c1-b6a3970c932f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed54570-5f88-4754-8411-996426825564",
        "cursor": {
          "ref": "5cab4233-303f-42f8-bb3c-ebe6e5c94a6b",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dd38d186-39c0-4f0e-b5c1-6d2a82c7e12f"
        },
        "item": {
          "id": "aed54570-5f88-4754-8411-996426825564",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d6b7f745-cb44-4071-ae60-5ae1a1fa84ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82d4a60-d0f9-479b-a7b7-3bf24a3f0cf2",
        "cursor": {
          "ref": "75ec3f51-4267-44ef-a426-389ed38cf391",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "77887947-fb69-436f-bd78-9cbee8bf5bb9"
        },
        "item": {
          "id": "d82d4a60-d0f9-479b-a7b7-3bf24a3f0cf2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f3895108-0a04-41b6-a677-bd8de48b955f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8378362-d943-44ea-a5a9-ab1bdb84fb85",
        "cursor": {
          "ref": "1c00b487-aca8-403e-94ed-0fa0f8242a65",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "077dce4f-c07f-4d58-8172-43a29fff4a82"
        },
        "item": {
          "id": "b8378362-d943-44ea-a5a9-ab1bdb84fb85",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a0782823-f9a2-44bc-9c78-50761e5fdcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b6f4cc-903a-4b83-9cce-953de14f7b50",
        "cursor": {
          "ref": "ace28b42-0bef-4e1d-914f-7c30bbe26a9a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e70aa04b-9e8b-4231-a02b-e162e76b0400"
        },
        "item": {
          "id": "26b6f4cc-903a-4b83-9cce-953de14f7b50",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a88a884a-184f-44e0-a227-f23d30f3b528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0677bf2-9b68-4116-9a53-4ef01bcd3ed7",
        "cursor": {
          "ref": "be4b4f04-ec96-43c1-8dcb-7f0e0225352f",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eb1bb82d-3b07-49cf-9de7-74b3108d2165"
        },
        "item": {
          "id": "e0677bf2-9b68-4116-9a53-4ef01bcd3ed7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fbf28737-ff35-467c-bd5e-f4cd3ba0214c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1da3920-d0ed-4cab-9c04-d74b8b114266",
        "cursor": {
          "ref": "3b3a496d-6c22-4119-b307-9330a0cfc724",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8de48261-ebbe-4550-bf9a-f967deecfb12"
        },
        "item": {
          "id": "b1da3920-d0ed-4cab-9c04-d74b8b114266",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "268b7716-104d-40a6-bbbc-8ce90028831c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cf5c22-6fc2-4636-81e4-dc260ab8a2a7",
        "cursor": {
          "ref": "4a25c285-a8c9-4fda-ae04-c478c098459e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fae9fd4e-2b1c-4124-be05-db8e9f480dd6"
        },
        "item": {
          "id": "46cf5c22-6fc2-4636-81e4-dc260ab8a2a7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "41d2e05f-24eb-45b2-b428-14488bfd4b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97ed0c4-fd59-498a-b4dc-d6dbab16d720",
        "cursor": {
          "ref": "0d3b969f-17f0-4e02-b43c-7103eeb0a529",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1b7199c6-6f8b-4400-91ec-b7e33644acab"
        },
        "item": {
          "id": "d97ed0c4-fd59-498a-b4dc-d6dbab16d720",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "97e6f5cc-d3cb-4af4-b1b5-dd0de4880321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e164ad-f937-4f7f-8adf-38ca7f982e52",
        "cursor": {
          "ref": "58479cca-bb69-447b-b915-cdf50620906d",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f59371b0-540e-4613-a405-57ead5948403"
        },
        "item": {
          "id": "07e164ad-f937-4f7f-8adf-38ca7f982e52",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42417f85-dbf7-47ea-8dfc-bc81d782e0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92290bf-fd97-46ca-893c-5e5d649ea996",
        "cursor": {
          "ref": "dbeba3cb-d494-4bfe-9f95-fe6a39c33e97",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "81674b51-f16e-4d90-9b8d-9fd74e181558"
        },
        "item": {
          "id": "e92290bf-fd97-46ca-893c-5e5d649ea996",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "32e91dae-0272-4319-9dfc-398409ea5832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b2d7e5-0cdf-480d-b403-489476d0e156",
        "cursor": {
          "ref": "afd6ac83-87e2-4ddc-80f3-02d6b2721ec0",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "59193700-ba25-4295-9654-ab826fe9014f"
        },
        "item": {
          "id": "30b2d7e5-0cdf-480d-b403-489476d0e156",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f49f1a5e-c57e-4f74-a52f-3b12cae8a2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc9bc4d-79f3-4e91-a039-1f2f66f40005",
        "cursor": {
          "ref": "4e676362-43db-4d7a-b52a-529b67c216e3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "811faf6d-9662-44c6-a689-24e184e62b25"
        },
        "item": {
          "id": "cdc9bc4d-79f3-4e91-a039-1f2f66f40005",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3d7817df-33a5-477d-9a38-1af8c655d0dc",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "7f307269-3ab2-4d81-9e6f-ff80f7b28b1f",
        "cursor": {
          "ref": "7f3f2f4b-ada4-42b4-92ba-72f4fdeac323",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "eec4c9e7-5269-489c-a903-98927b532d91"
        },
        "item": {
          "id": "7f307269-3ab2-4d81-9e6f-ff80f7b28b1f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "df44a59e-c7d7-4f7e-835a-469a8a200b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf166a0b-5948-487c-8e97-e6fd6df8fc3f",
        "cursor": {
          "ref": "33f86f5c-c0c5-46a2-b55e-13d4444c6a25",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fd13ee2c-e41d-4d60-a66d-3f129216a024"
        },
        "item": {
          "id": "cf166a0b-5948-487c-8e97-e6fd6df8fc3f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0258817e-da5b-481d-ad8f-fe830b0cc375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252c7c43-e8bd-4c7a-88be-9f4997abc91a",
        "cursor": {
          "ref": "c02e9686-1dbe-4c15-b2a7-b13dad00d945",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "02439dd1-d63a-4b3d-bc54-925c12924adf"
        },
        "item": {
          "id": "252c7c43-e8bd-4c7a-88be-9f4997abc91a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "803139bd-dd57-4cbe-ae9d-4927f7b609cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b17be48-bf53-4f82-8f8d-eee6eaaa26ae",
        "cursor": {
          "ref": "14bb2752-6c5d-43fe-87b2-fa5fe953e3be",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f22b814e-f78a-4721-9275-10581439a07e"
        },
        "item": {
          "id": "0b17be48-bf53-4f82-8f8d-eee6eaaa26ae",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "20c2763a-02d9-4dfb-8e1f-111c39ae1f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e317a3-e1e2-49b3-a91f-b0f27d0eaac4",
        "cursor": {
          "ref": "5331ba73-56bb-4671-a4e7-8cbf4708b2d2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6ca45fd2-34d3-4fcc-bac2-9303539a17d0"
        },
        "item": {
          "id": "33e317a3-e1e2-49b3-a91f-b0f27d0eaac4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f4a4d4b9-2653-431f-bd46-39924c81d4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655e5e95-32d8-444e-ab49-7e622698b1c4",
        "cursor": {
          "ref": "caf7259f-ecff-459c-9875-fe5c161aee8e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "330d4636-85b0-4af4-b141-eb05ec9d0c08"
        },
        "item": {
          "id": "655e5e95-32d8-444e-ab49-7e622698b1c4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8e070f88-b9bc-4035-80f9-74b6779bbd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9acc439-04a5-4c71-8854-e70ea06fbf94",
        "cursor": {
          "ref": "a3a7886e-9b4e-4c70-ba14-fb344fffd068",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "13796bad-3ca0-4e5e-8405-eae12704742c"
        },
        "item": {
          "id": "f9acc439-04a5-4c71-8854-e70ea06fbf94",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9dcf07e3-0981-4f62-9110-a24c3be750f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffe4e9d-dcdf-45ad-b68f-9e1a7852e3db",
        "cursor": {
          "ref": "b1105759-1af5-4830-b690-5e8a7de2935f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4e06a877-3b9e-492d-9aad-4413e44ab6d1"
        },
        "item": {
          "id": "0ffe4e9d-dcdf-45ad-b68f-9e1a7852e3db",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "842e384c-7027-4a2d-9972-8d77b3b92995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7ef301-3b52-46f3-ae70-94a217424ffe",
        "cursor": {
          "ref": "4a8ec313-6090-4584-ad98-2e56c3bdef88",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "13f0e44a-0385-4d1a-b76c-ebf3b403674e"
        },
        "item": {
          "id": "1a7ef301-3b52-46f3-ae70-94a217424ffe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e967edfa-f347-4b42-ae7c-6b0db81b031a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7baa9e48-0694-4ce4-98f1-529f42be1101",
        "cursor": {
          "ref": "c538830c-ded4-480f-8a98-8a138401dceb",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "11ea9597-3baf-4643-aad8-659be7090739"
        },
        "item": {
          "id": "7baa9e48-0694-4ce4-98f1-529f42be1101",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3395ce21-22b2-4344-bc46-ee688a8466d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abc57bd-76ea-43d6-995e-cbbf58bbe0a9",
        "cursor": {
          "ref": "1153c5f7-9c0f-43cf-b0a6-f6828c25443d",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3ea8a982-bebd-44c4-860f-e3244ea18623"
        },
        "item": {
          "id": "6abc57bd-76ea-43d6-995e-cbbf58bbe0a9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "17e69943-0897-4f64-97a5-87d314c194b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c0d090-a3c3-4f60-b2aa-6a72e723a0d9",
        "cursor": {
          "ref": "fa354b42-2bd0-4e48-a0a9-f63329f7d04b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "15f8511c-2684-4877-b3bc-1e9bdf915da4"
        },
        "item": {
          "id": "05c0d090-a3c3-4f60-b2aa-6a72e723a0d9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a12dadee-673f-4da8-be31-62235883a92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000a4799-badd-4579-962b-cd166c3583a3",
        "cursor": {
          "ref": "41803362-ca3b-4726-aba6-064ec83f890d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9792a07a-6ab6-426a-90f2-10dfc23aa071"
        },
        "item": {
          "id": "000a4799-badd-4579-962b-cd166c3583a3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "df9cd663-93d4-4f87-8e9f-79ea1d3d5bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb8be33-3066-4d12-a2b7-dd1fc9b0ff53",
        "cursor": {
          "ref": "789d6bc3-801f-41ec-807f-fe1aa927914c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "19e289c4-0a52-4bce-b142-402e6f1cd48b"
        },
        "item": {
          "id": "4cb8be33-3066-4d12-a2b7-dd1fc9b0ff53",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9cd69150-3175-4eff-95c7-1697dd6bb010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01978f53-491b-4916-8abd-9b295ef5a139",
        "cursor": {
          "ref": "fd62ecfe-a4ee-4aba-a21d-cd06af01f99f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "283131f0-4aca-420d-9179-adae2de5605e"
        },
        "item": {
          "id": "01978f53-491b-4916-8abd-9b295ef5a139",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a0b2726f-203e-4611-8d09-5ff9cc18bbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f84d74-91ae-43e8-98e3-967b02cb5d14",
        "cursor": {
          "ref": "9dd22c75-f2c2-430a-9755-b23358187e6b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cdd267f5-1731-4978-a7a1-3b8c8700a047"
        },
        "item": {
          "id": "b0f84d74-91ae-43e8-98e3-967b02cb5d14",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a14ebc93-4f04-41bd-83ac-9206bca3b892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7596bf-41a7-4b5a-b329-0c991d1e66fb",
        "cursor": {
          "ref": "6268910e-ddf4-4dba-bfc1-41d0df13080a",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7508c859-87a3-4a97-bbf6-345eaf394e8e"
        },
        "item": {
          "id": "fd7596bf-41a7-4b5a-b329-0c991d1e66fb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cdf4dada-852a-4218-8adf-b897e62f697f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5804ad4-6e9e-4b03-b2fd-0110ea144994",
        "cursor": {
          "ref": "0da378b1-103c-4efe-989d-24379021db69",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d191b1bf-e0a3-4324-bca9-e3c2ac03cffc"
        },
        "item": {
          "id": "b5804ad4-6e9e-4b03-b2fd-0110ea144994",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9a76677d-c66d-4457-8cf9-d5aec6815a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0abf5e-9b10-4bae-8dde-a931da38f34c",
        "cursor": {
          "ref": "bf9d9ba3-4412-479a-86eb-93e926707f7e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7115589a-0044-4ac5-bfba-e20ec2488ca4"
        },
        "item": {
          "id": "5d0abf5e-9b10-4bae-8dde-a931da38f34c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f07e19ee-f3e2-4ae0-96af-595b5e148573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64225e52-5dee-4edc-bc3b-f519c5ae2ad4",
        "cursor": {
          "ref": "bc0a0aa1-f4af-4db7-a893-dffaed8c5705",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e8b629d0-1b7f-449b-b553-2cba504a07a6"
        },
        "item": {
          "id": "64225e52-5dee-4edc-bc3b-f519c5ae2ad4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0deaf95e-8703-4d3c-92b1-324e921d591e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f11287-5acf-4232-a51f-e8cd68677511",
        "cursor": {
          "ref": "bbee4fcd-d463-42b3-bbaf-103f5b78e1f9",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b641b7cc-e190-469b-a3dd-a1be03d38cef"
        },
        "item": {
          "id": "61f11287-5acf-4232-a51f-e8cd68677511",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e5a74506-b75d-46de-bb31-46219d36429a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6867afe-3e2f-4b13-ba28-ef2c2378e80a",
        "cursor": {
          "ref": "146ba402-613e-4b36-8211-f897a6bcbb2b",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "516ee774-ca7c-4af9-94c7-e83a802105b3"
        },
        "item": {
          "id": "d6867afe-3e2f-4b13-ba28-ef2c2378e80a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b194e839-79da-4a96-8018-d51a99c4e4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898a3957-4464-4e6e-b1ab-21d2f3b116d5",
        "cursor": {
          "ref": "4485376d-7c12-466b-a675-eae71ba515c8",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "08018495-1af6-49a8-9feb-0d1755bdd711"
        },
        "item": {
          "id": "898a3957-4464-4e6e-b1ab-21d2f3b116d5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a8e4ab1f-93a4-4992-8e48-698fbf3ddbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66085bba-d0d4-4146-86ec-9f49cb201b04",
        "cursor": {
          "ref": "c41cb560-5378-4aeb-893b-cf89e5354038",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "591a5df9-4275-43b0-b195-079c491a26e3"
        },
        "item": {
          "id": "66085bba-d0d4-4146-86ec-9f49cb201b04",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ac8e9249-170f-420e-8a1e-c389bdc72609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3b9dae-59ab-4cac-b74d-e65ec2c81cba",
        "cursor": {
          "ref": "89b8f401-e524-47b5-8452-a19ad913b4e2",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "90f28958-45eb-4334-b804-3b1720f14ad3"
        },
        "item": {
          "id": "bd3b9dae-59ab-4cac-b74d-e65ec2c81cba",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "34459bbe-7c4a-41ab-aadd-ac6c88f0008b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4762debe-3c3c-4373-8ae8-5ddb894d4e1a",
        "cursor": {
          "ref": "d187542f-fb57-4306-906a-16f319fc0e81",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cd975243-0b6c-4a7c-a576-8cf9884dc354"
        },
        "item": {
          "id": "4762debe-3c3c-4373-8ae8-5ddb894d4e1a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f2aab96-e49a-4f27-92c8-ea233a0153e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f041b0f7-e4dd-46cc-b471-1395967512c1",
        "cursor": {
          "ref": "2e5e4a65-d46f-43d8-a85c-07ee23af293a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fd0c574a-ec31-408c-bf3b-631f57d6ecbf"
        },
        "item": {
          "id": "f041b0f7-e4dd-46cc-b471-1395967512c1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e83d7ae3-5c8a-422d-94ab-808b4f780a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193c9f3d-64cc-4fd9-bdc7-523f6953b8a9",
        "cursor": {
          "ref": "c71bd18d-ae76-4326-a811-3b8343a5938c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "feaadf7a-cd6e-42ca-9e24-7256199266a8"
        },
        "item": {
          "id": "193c9f3d-64cc-4fd9-bdc7-523f6953b8a9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a59af512-9039-482d-abc8-3c330d8b4b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed42deb5-ba69-41a2-9086-0034eb59c9c3",
        "cursor": {
          "ref": "51587c18-740b-4b41-b920-92df0de85f9b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ce74f9e0-230b-48a7-a2c3-ee2da4864895"
        },
        "item": {
          "id": "ed42deb5-ba69-41a2-9086-0034eb59c9c3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0f72a1c6-7ddb-4adb-9781-7f757625c387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37933107-c935-4c20-a63e-d5df1fdd671d",
        "cursor": {
          "ref": "30d55726-8979-48b7-b882-822a497c1f63",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "40e01f9c-311f-4f6c-b7bb-e0b8ed848205"
        },
        "item": {
          "id": "37933107-c935-4c20-a63e-d5df1fdd671d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "91173091-7b2e-4086-90f0-88644bf4aa92",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4c80424a-7873-43b7-be27-c92dc60b8bf8",
        "cursor": {
          "ref": "64ec1187-f265-4c78-bc55-4ecb1149fb84",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e8e5e431-3b95-4270-83f1-2adfc36faf81"
        },
        "item": {
          "id": "4c80424a-7873-43b7-be27-c92dc60b8bf8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cdb56f8a-9b3e-4a71-abad-06c50be31254",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "01b2618f-0de1-4d8c-9e1f-127936647b29",
        "cursor": {
          "ref": "f714d153-334f-4df2-b327-7602b94376ce",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1619e84a-dbc3-4631-af9e-ef5252ff93c6"
        },
        "item": {
          "id": "01b2618f-0de1-4d8c-9e1f-127936647b29",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "10fee5a1-9851-4ce3-adf3-9d88498b194a",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1de46f2d-b2e8-4549-bd01-0ef9e9cc77fa",
        "cursor": {
          "ref": "8e980fe9-218d-41ae-a5c4-a778210840c5",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "442892a6-f009-4cba-a38f-8dc9294e9dc3"
        },
        "item": {
          "id": "1de46f2d-b2e8-4549-bd01-0ef9e9cc77fa",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1c323779-fcd9-41d6-a426-068e53a1b93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6f8846-5624-465e-b33c-56811d8849b5",
        "cursor": {
          "ref": "c03639c4-70ed-4881-9bac-d9e0c7b9db47",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d25eb380-a98e-4404-9234-b36323f5f71f"
        },
        "item": {
          "id": "8c6f8846-5624-465e-b33c-56811d8849b5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a74534c1-9d6c-446a-a102-b04486a7ce11",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "ec28b663-14b6-4ee8-a101-e68af5c4b5cc",
        "cursor": {
          "ref": "7e274f6e-407e-46b9-8d26-1dd0bb6257c4",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "37e626fe-1cb3-4b8f-9ded-36262e0bf707"
        },
        "item": {
          "id": "ec28b663-14b6-4ee8-a101-e68af5c4b5cc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db3295c9-9f6d-45d5-94b1-6c3590a9a212",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "3f4edf9a-081e-4617-b558-eef44b2f1d93",
        "cursor": {
          "ref": "41cd0122-f35d-4944-aeb7-047e4308f5b6",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7f7f0302-80f4-41fc-82a1-61412ffbe524"
        },
        "item": {
          "id": "3f4edf9a-081e-4617-b558-eef44b2f1d93",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a96fe63f-33d4-42a1-9d6d-22f2e51e4911",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "808c0f18-4573-40f9-a946-7f3d72e0ec15",
        "cursor": {
          "ref": "f22e36f4-4ced-419a-8d1b-2bab79cbe1ec",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5523a96d-67f4-4c8b-97fd-6158e98b7d29"
        },
        "item": {
          "id": "808c0f18-4573-40f9-a946-7f3d72e0ec15",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4880679a-c0bb-4c5b-a874-261ff4a9cc7c",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ff0d3b08-0bc0-4887-b5f4-cc720e58d99b",
        "cursor": {
          "ref": "62078bc2-5575-437c-97d5-57bef60b9d2d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e4196b97-a6bf-4028-bf36-91cd26542aec"
        },
        "item": {
          "id": "ff0d3b08-0bc0-4887-b5f4-cc720e58d99b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "93c3469d-05fb-4887-a254-117ea55219ad",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3db45abd-1a2d-4afb-938c-b000a662ce81",
        "cursor": {
          "ref": "751278b7-6751-4f40-8630-9bce88e24677",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4226973d-9eef-44fd-b935-feaf2da34aeb"
        },
        "item": {
          "id": "3db45abd-1a2d-4afb-938c-b000a662ce81",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "449009ea-4104-45e7-93ab-1b8997352eb8",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c72cf1d9-3016-4d56-aa41-3c404398dfb6",
        "cursor": {
          "ref": "0dbfcf9d-6375-43ce-b2d5-f7798ade176b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f724604-5429-473b-85e4-62104d7935b2"
        },
        "item": {
          "id": "c72cf1d9-3016-4d56-aa41-3c404398dfb6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0f20ffa9-abb5-4d10-bb16-19b7b0402e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ce9422-9c3e-4728-83f1-4eb49a76ed11",
        "cursor": {
          "ref": "bb108c65-e9c8-49e1-83b9-b2a4efb758a4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0e39c71a-6a6d-48a6-ba57-463c3d90274e"
        },
        "item": {
          "id": "d4ce9422-9c3e-4728-83f1-4eb49a76ed11",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ec066aaa-0656-4368-8292-80e61aaf16b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52d3d27-d784-415d-ac7e-badf2d4161ea",
        "cursor": {
          "ref": "c85f22b2-b973-4c5c-8665-e1c2ae8e6a00",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "67779ec2-ba15-462b-8800-7289e9a294b7"
        },
        "item": {
          "id": "c52d3d27-d784-415d-ac7e-badf2d4161ea",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "40383cab-a955-4a0a-82d6-553f59384f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a466da-7ffa-4cec-9013-2e93fa1eedec",
        "cursor": {
          "ref": "c80576eb-6c11-4dda-bb29-c0db36cac801",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "009916d4-e606-49c5-be40-feeaa4dd4014"
        },
        "item": {
          "id": "85a466da-7ffa-4cec-9013-2e93fa1eedec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "86793542-05bf-490e-9600-995965f2560a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0090b4-526e-49b5-8629-8b7bdc388884",
        "cursor": {
          "ref": "c84ac929-136f-400b-a32e-860ed50218c3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "97794284-0870-4ad1-9b8a-3fb9d81a5445"
        },
        "item": {
          "id": "ed0090b4-526e-49b5-8629-8b7bdc388884",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fe77bfba-b3c6-4145-b0d7-e661b2483a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46990b8e-69c3-4415-9561-4e65d60b1c6b",
        "cursor": {
          "ref": "43666346-7a85-4443-bad3-9715e1ae4a87",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "733855cc-4aae-4f35-9b19-33c90426e9b7"
        },
        "item": {
          "id": "46990b8e-69c3-4415-9561-4e65d60b1c6b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "399de678-a903-4d7e-a071-3b03d3d37862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62db3b4-7e29-44e3-85fd-7237952330df",
        "cursor": {
          "ref": "6fc69252-f406-493b-b9a8-4144ca800d95",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "26439a7c-2e1a-4cf0-8318-43fc045f7d72"
        },
        "item": {
          "id": "f62db3b4-7e29-44e3-85fd-7237952330df",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "09afde49-2be6-4bb1-ae12-9f535b2e476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d649e1-e621-4712-9846-c6448b388265",
        "cursor": {
          "ref": "dca52f0a-df22-44c5-998e-d4514e93e1a3",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a844d76d-0675-4d6e-a4d6-dbed25b3c2cb"
        },
        "item": {
          "id": "26d649e1-e621-4712-9846-c6448b388265",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5556b27a-a0c9-46a1-a718-68c896664a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15297a71-5b49-4e8c-ae6c-23ab18896fde",
        "cursor": {
          "ref": "d0c269b7-6667-42ea-84dd-31a51e7020e9",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2f745416-f459-4c69-86d3-918503008d6e"
        },
        "item": {
          "id": "15297a71-5b49-4e8c-ae6c-23ab18896fde",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c9c7f7b8-a0f4-44a9-ba15-16802a28cc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0311480-a987-4db0-b767-2b8aaeaf5d38",
        "cursor": {
          "ref": "15b45ab5-3be7-4b97-8f11-7c5f943a0c20",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "02bbc820-2d85-482f-a3d6-7e0542575a83"
        },
        "item": {
          "id": "f0311480-a987-4db0-b767-2b8aaeaf5d38",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "60fc1217-1642-41d0-93ff-1d7f43cd82ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4a8f79-90ac-401d-ab00-e12045c3276a",
        "cursor": {
          "ref": "0c4964f1-9b63-4c80-9a94-d7aa68ba82fd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "39185c44-2fd5-43cd-a7e6-02dbdbe2b2ca"
        },
        "item": {
          "id": "1f4a8f79-90ac-401d-ab00-e12045c3276a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d711a3bc-6eae-4133-a99c-ea238f81662b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4889758f-6147-4e39-9258-a5febbffe312",
        "cursor": {
          "ref": "b255d2f5-cdc6-4459-b473-7ff87783dae7",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4f11a9b9-05d1-4cc6-b54c-a6d160a29f3e"
        },
        "item": {
          "id": "4889758f-6147-4e39-9258-a5febbffe312",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3df14c50-f2fb-4ba2-b4c7-319b82fb8563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b11681a-b7cb-437e-a620-37f2e8983f3b",
        "cursor": {
          "ref": "7c9184e2-9df9-41c7-a3fe-e5364152d24e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d1c94528-7cf0-4e0b-ae47-218ceb87a1b3"
        },
        "item": {
          "id": "3b11681a-b7cb-437e-a620-37f2e8983f3b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dfdaa520-0326-4831-bcc2-70912f607085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efb4663-66b8-43cf-a0a0-a6de70259e3a",
        "cursor": {
          "ref": "867f7b3d-3100-45b5-9540-1abf09134604",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "70fd73c0-324c-4922-b17d-9ef456ed2d38"
        },
        "item": {
          "id": "0efb4663-66b8-43cf-a0a0-a6de70259e3a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "60b56013-b896-4fc1-8f35-3b52183c6e5e",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "236cf9bf-1879-47ed-994d-3ff2dec92d7c",
        "cursor": {
          "ref": "0f6a6812-5732-40ea-8371-9bb8c3d25cc0",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "293ac163-2ac4-4097-bb80-ea8e2c099b90"
        },
        "item": {
          "id": "236cf9bf-1879-47ed-994d-3ff2dec92d7c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "09012f0e-960c-480e-a3ab-c67f2c0f1aea",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "f2eeab64-d23e-4f33-8080-96c0f81b7e44",
        "cursor": {
          "ref": "3d16fc91-82ad-42b4-87bb-d9afd9806643",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "67a5691a-4ea0-4cbf-839a-5eacdc320204"
        },
        "item": {
          "id": "f2eeab64-d23e-4f33-8080-96c0f81b7e44",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cbfbf80f-de9a-4bca-be61-1278f36191e8",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7b9a174b-11eb-44a7-8d5b-7df98f76e59c",
        "cursor": {
          "ref": "633e069d-7eb4-4a32-8c05-5678b383bb62",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f5417fea-fad1-497d-bd4f-0250e465a44f"
        },
        "item": {
          "id": "7b9a174b-11eb-44a7-8d5b-7df98f76e59c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a248b141-fa94-4606-9a0d-03d0b3470aa7",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "4161ef1f-628c-4d4d-936f-e825df3deb49",
        "cursor": {
          "ref": "728f9c52-6bb8-42a6-a4a0-641bdc2bfae2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4affc2ea-617e-49b7-94ad-06793679a066"
        },
        "item": {
          "id": "4161ef1f-628c-4d4d-936f-e825df3deb49",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b502338e-b14e-4edc-a96b-3338a6d3b746",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fd91e315-58eb-4466-8b52-0140155ddb67",
        "cursor": {
          "ref": "1c055d48-e223-400d-85c4-59aab21d29ca",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3e453cad-9c6f-480a-98c9-a77b15263daa"
        },
        "item": {
          "id": "fd91e315-58eb-4466-8b52-0140155ddb67",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "034b7fce-5796-4a69-99f1-0f5d5a5d5eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba54c1c-8e94-4ba4-8fde-1d3b45d2fb55",
        "cursor": {
          "ref": "790df75c-f8d2-404c-9868-b4f59548fe70",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b6bd2d5a-12d0-4648-a394-cda4b17a8fad"
        },
        "item": {
          "id": "0ba54c1c-8e94-4ba4-8fde-1d3b45d2fb55",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "16305ef2-bd0a-46a8-9d46-c6c13c1998b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98efa07a-ffa9-4be4-8b65-d671db04d149",
        "cursor": {
          "ref": "bb1be556-2e9f-4827-be18-e83856bd1d8e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9b75300e-0048-4ff5-9531-b1dd89105076"
        },
        "item": {
          "id": "98efa07a-ffa9-4be4-8b65-d671db04d149",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bcf2ec5e-4f74-4ae0-9ca0-a78e881d9ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83050af-42f0-46d7-bce1-b56045ec18f7",
        "cursor": {
          "ref": "0d8817d4-576d-4e91-a01b-e2683beed3df",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b595e510-08ed-41d9-8521-bbd92c77d316"
        },
        "item": {
          "id": "e83050af-42f0-46d7-bce1-b56045ec18f7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "43c1b6d9-5147-4152-b5a2-e6cef6f96805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3c5d91-e009-4b73-a418-d24c971ce115",
        "cursor": {
          "ref": "578ddc73-0f7f-441a-867d-754271bf5669",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e95bc7af-4dd2-4948-ada2-3aee9f7f6633"
        },
        "item": {
          "id": "8e3c5d91-e009-4b73-a418-d24c971ce115",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a61cbb1f-9f05-41b9-bdd2-13ff250541f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dc5330-a468-414e-8089-4f46e279eee8",
        "cursor": {
          "ref": "545d7453-e0eb-4013-bbc9-8466713ff5dc",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8c6ddffe-2b2a-4adf-b6b6-f0d5c3a88307"
        },
        "item": {
          "id": "a2dc5330-a468-414e-8089-4f46e279eee8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "86c22557-8bb2-4180-aa76-f890265b0e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2167d7-7ea4-4af2-841d-a449a6471647",
        "cursor": {
          "ref": "ff52dbce-63c5-40db-9e06-71464fa7b2ac",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "349cb84c-4245-4160-8ca1-280152d9aac5"
        },
        "item": {
          "id": "ac2167d7-7ea4-4af2-841d-a449a6471647",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d9ea1345-a1c3-48e9-8bb7-5b25e7cbc8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090bc252-5456-46f0-833b-0f1a8c0884b2",
        "cursor": {
          "ref": "f27352d1-5710-43cf-ada3-1385c0ca1112",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "14db9768-247b-4cc8-97a7-ba63207e20f8"
        },
        "item": {
          "id": "090bc252-5456-46f0-833b-0f1a8c0884b2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0b824adb-42cd-4ca7-8c80-7de6b45c9808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a124b9-c7e7-4567-bccf-20c415464fb7",
        "cursor": {
          "ref": "98dbf9fa-ae12-49fc-887e-8e663bb5e62f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a00778a0-28b6-4b76-85fb-cff054c7c777"
        },
        "item": {
          "id": "49a124b9-c7e7-4567-bccf-20c415464fb7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "15f4a83a-60df-4344-97a3-6a1dd3d7bfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d289c4-cd53-4e10-8475-728c71d0c6c4",
        "cursor": {
          "ref": "c7592989-a55c-46f3-9dba-5d0a3298d777",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5d22e405-fc07-4243-8b6e-804d140eb897"
        },
        "item": {
          "id": "c7d289c4-cd53-4e10-8475-728c71d0c6c4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fd7c8c2b-2225-40f1-81d1-e7f1bf7705f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9d53a4-e936-412b-925a-8383e761cf68",
        "cursor": {
          "ref": "e2dbc6b1-e5a8-47f1-a08a-e9805353f8c9",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a6b111a4-e5b9-4cf8-be8e-a3afefd2be46"
        },
        "item": {
          "id": "fa9d53a4-e936-412b-925a-8383e761cf68",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "96a8f56f-335d-4b03-9110-fd547361e9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872abd5e-d4b8-413d-8225-0a9cf4458ecb",
        "cursor": {
          "ref": "8e832e77-04ef-4d88-be61-c29b0caf34d7",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ddba2078-edb9-432e-9b1b-0a6f744d12d1"
        },
        "item": {
          "id": "872abd5e-d4b8-413d-8225-0a9cf4458ecb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6617ff55-8197-4a98-8928-0d9223f6f747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec4e82a-de43-40d9-9c77-f28b462ece1b",
        "cursor": {
          "ref": "7468664d-f8fe-4392-9434-834e9c9b97c1",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8351034a-7ca7-4ba5-adc3-05063c3fc504"
        },
        "item": {
          "id": "9ec4e82a-de43-40d9-9c77-f28b462ece1b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1c617f6f-d6a6-4894-9c20-a92ba3a92997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38f84e8-48f8-464d-ae3f-056b3ea6a469",
        "cursor": {
          "ref": "747dbbdc-2891-447f-ab6b-11694cd02abe",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac89a025-b380-406b-bf4c-d47d5b52a42e"
        },
        "item": {
          "id": "e38f84e8-48f8-464d-ae3f-056b3ea6a469",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "07710c24-fd28-4116-a5e6-c10eb9b780c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828ee4cc-4eaf-4a21-91a8-bf33d403fca6",
        "cursor": {
          "ref": "f4008323-a907-4f8a-97be-c12a003c8270",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e0a06f2b-842a-43b7-b25f-e097894c285f"
        },
        "item": {
          "id": "828ee4cc-4eaf-4a21-91a8-bf33d403fca6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e564e665-6338-450d-a13e-1193b5b60acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971d314d-4552-4735-b1a6-01163fbd2ab5",
        "cursor": {
          "ref": "5159da8f-cf1d-4122-b23b-7faa9b750d7c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fc4b1f5c-ba13-4dff-8e12-cca69fe47d58"
        },
        "item": {
          "id": "971d314d-4552-4735-b1a6-01163fbd2ab5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "90202292-9311-471b-9915-55690fe03b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f89934a-7df6-4f28-abb2-b913ab8d88a4",
        "cursor": {
          "ref": "9351ee0c-1167-49d6-9718-965d8f59fecb",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d0a98354-ba78-4c91-96fa-bed0ceb68810"
        },
        "item": {
          "id": "5f89934a-7df6-4f28-abb2-b913ab8d88a4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "97289c9a-d980-4cc4-b339-a2a51ec6e6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2c2211-1d36-4d69-bd93-817403bf3814",
        "cursor": {
          "ref": "a8f19c7d-eb45-4e21-8059-4208c15d7a69",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "180dea59-f1a3-4a2f-9ca0-156bab218968"
        },
        "item": {
          "id": "2f2c2211-1d36-4d69-bd93-817403bf3814",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "186b0a0f-3441-4456-acc0-3c6555b15bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a8d7b-0f54-4f86-b9f0-891a90c43e61",
        "cursor": {
          "ref": "5a8e955d-6a18-4a9c-a680-88a442819a67",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "42520778-8bfd-4640-97af-4f87f62acc6d"
        },
        "item": {
          "id": "311a8d7b-0f54-4f86-b9f0-891a90c43e61",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ec78606b-55e3-4ec8-bd32-7bc98460b41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59211f8-7ca5-433e-9b4f-6a0286055e18",
        "cursor": {
          "ref": "3c6ac4cd-68b6-4ea7-861b-ad8e48a6f38c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "71d82220-dcd7-400e-94b6-74386cd83e63"
        },
        "item": {
          "id": "a59211f8-7ca5-433e-9b4f-6a0286055e18",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "248779f3-dfeb-46a5-a669-be56930cf341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c21dc16-74ab-4d71-817d-c9e415100363",
        "cursor": {
          "ref": "82c3034a-6cdf-4c99-9f46-48869dce5ee3",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "48b48626-c7de-4c3a-bb22-ef3507994046"
        },
        "item": {
          "id": "6c21dc16-74ab-4d71-817d-c9e415100363",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd3d9733-4ffe-4983-8cc3-eab8e52d2be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad18321-a45c-451c-b489-47ce4fd34a22",
        "cursor": {
          "ref": "c038596c-7a41-41b8-aba8-721a948ff109",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b86aa19e-63a0-49bd-a97f-27fb41838563"
        },
        "item": {
          "id": "fad18321-a45c-451c-b489-47ce4fd34a22",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "170c164d-1f51-44dd-a28d-66f874d89e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a18a969-1a93-492b-aaa3-8e887a955dce",
        "cursor": {
          "ref": "3655b3e2-d0a4-4095-b6e2-cfea4d7008ad",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "098ce2fc-4bcc-49bc-a1f7-388f6d52ca94"
        },
        "item": {
          "id": "6a18a969-1a93-492b-aaa3-8e887a955dce",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "308c9082-4063-479e-a082-12c00d730d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309f1328-ee14-47a9-a395-e636e1790142",
        "cursor": {
          "ref": "7bc70a54-105b-4b30-b76d-6067aa1054ca",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ddc77032-a2ac-4327-a675-c02ce5e7dcc0"
        },
        "item": {
          "id": "309f1328-ee14-47a9-a395-e636e1790142",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3b904470-3c23-4c5e-97d1-9aa649450d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98218117-ca32-4f11-8726-29c6ce82e143",
        "cursor": {
          "ref": "efbeb296-a732-4d92-87db-322d37fdd598",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "82b69230-166a-4e29-8994-998b92e0b785"
        },
        "item": {
          "id": "98218117-ca32-4f11-8726-29c6ce82e143",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1b345a5b-98ca-409d-97c0-d7d5803a767f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90913226-518e-49cb-bb71-22065671e873",
        "cursor": {
          "ref": "0cce3571-9385-4017-8aa5-703ed8443cff",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c91fa95e-bf20-4dc7-a56b-dcb913a8e1b3"
        },
        "item": {
          "id": "90913226-518e-49cb-bb71-22065671e873",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ea0e428d-06a3-4f34-8815-58d8c1d5db18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66000e10-22cc-4c49-a427-f94840397f8d",
        "cursor": {
          "ref": "51587edb-ad69-4e9d-90d4-3be796586670",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1c21acbc-8c13-497e-8b57-de4415a790bf"
        },
        "item": {
          "id": "66000e10-22cc-4c49-a427-f94840397f8d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0167faca-9bab-46bd-af5f-543eae415afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3914ef-015c-431d-8e8a-77bbe2e4ea28",
        "cursor": {
          "ref": "29f988e0-9e71-4cae-8172-0b948f2616f0",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "693bf60b-af6d-45e3-9d6b-876ce37daec1"
        },
        "item": {
          "id": "6f3914ef-015c-431d-8e8a-77bbe2e4ea28",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3c2bb98f-2fb0-474e-a591-1ea8a3269680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb99716-61ba-4fef-a22e-4a9c3d8bf4c4",
        "cursor": {
          "ref": "c5e5f95a-ab6f-4b67-bb46-fcbb794a998d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d3a225de-2f9d-4974-b6ac-0da8c29cda02"
        },
        "item": {
          "id": "ddb99716-61ba-4fef-a22e-4a9c3d8bf4c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "04afb8aa-c264-49bb-ab15-abc7940fba29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b649a102-d6cb-430a-a1fb-4fe8f9dc4618",
        "cursor": {
          "ref": "547fd791-9861-4606-9c9d-a742ab202422",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e43105d9-e00c-4854-b47b-018e9bb09f7d"
        },
        "item": {
          "id": "b649a102-d6cb-430a-a1fb-4fe8f9dc4618",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c42ae0ae-3782-483b-9481-ea8e987f973a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e906ad2-51a3-4f5c-a6c3-1325a49a4801",
        "cursor": {
          "ref": "b5a2d9de-a47c-4f13-a28b-f4304255b30e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "da31a1c3-ff40-441a-9f8b-799a8e304d20"
        },
        "item": {
          "id": "2e906ad2-51a3-4f5c-a6c3-1325a49a4801",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3cdac24c-497b-47c2-9e22-d6cc3e561552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cbc99c-9150-43d2-ab88-b55a5ea945b0",
        "cursor": {
          "ref": "6320a731-263f-4919-9dca-485d5384ef2b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "52fd2796-a6fc-460b-ac0f-ff0c6ed0316b"
        },
        "item": {
          "id": "39cbc99c-9150-43d2-ab88-b55a5ea945b0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "eea9af49-7639-4893-b86e-6480c2af4346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7694d0e4-6686-4df0-a1ee-a0bf3c691ac0",
        "cursor": {
          "ref": "fa1935a2-51cb-4ddf-b77d-420223a96488",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f38813ce-9472-41a8-bdc8-63afed6f0aac"
        },
        "item": {
          "id": "7694d0e4-6686-4df0-a1ee-a0bf3c691ac0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b2dc6824-0a92-43a8-adc2-58573dc92027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9e48d8-8336-4f37-a6e2-a8f1a04bb1c8",
        "cursor": {
          "ref": "34591005-402e-46ae-be27-e11be5b19b3a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "978da13b-f3db-4dbb-853d-ee83c550948a"
        },
        "item": {
          "id": "bb9e48d8-8336-4f37-a6e2-a8f1a04bb1c8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0c454c97-2cd1-4c44-adf8-f1d56b51d532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23f132d-69a2-4b37-9999-4c665468d2d6",
        "cursor": {
          "ref": "277b1d7f-ef4b-474f-8b28-5a13ab2c0b40",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "967e0ed3-b98a-4802-8252-992d58281446"
        },
        "item": {
          "id": "d23f132d-69a2-4b37-9999-4c665468d2d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "56b43040-8bc0-4843-9c01-1d160724b043",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cb8638-9c4c-40b2-8b66-8cf3c09ebaa9",
        "cursor": {
          "ref": "5a4b46b5-2da8-4ba0-bcd1-4744be4cc711",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f2d475f0-db02-4c00-bd33-fa645f07ab25"
        },
        "item": {
          "id": "e2cb8638-9c4c-40b2-8b66-8cf3c09ebaa9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0f90b935-70dd-4346-878e-301311b21377",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8ef05906-5995-4b2b-9b0f-fe1f9ba99dde",
        "cursor": {
          "ref": "10d849ea-5d28-40ab-b6ff-798e04e1e115",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0b078a10-4237-4ce3-8ec9-7d514f4e0125"
        },
        "item": {
          "id": "8ef05906-5995-4b2b-9b0f-fe1f9ba99dde",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cab58f06-15eb-4ebb-9fbe-50f8807b2da1",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17933b8-6a5a-46c2-9e3e-e7fc39ef1e1b",
        "cursor": {
          "ref": "1656f2b7-2a6c-4ce9-8122-7fef57a9573c",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1abb944e-bf94-4781-bb66-c44f116be476"
        },
        "item": {
          "id": "e17933b8-6a5a-46c2-9e3e-e7fc39ef1e1b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0cccdbf4-1c94-42f3-8c76-d511a305d3d1",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cba6bb-3e8a-4fc7-a0c1-55103ceb6908",
        "cursor": {
          "ref": "5a0c6ebf-856e-4b61-b20b-8d281b461d38",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fe4ada7a-40d0-4348-91a0-6647ea6ece51"
        },
        "item": {
          "id": "16cba6bb-3e8a-4fc7-a0c1-55103ceb6908",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "57d24fdd-24d4-40da-8f07-da7058e98ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cba6bb-3e8a-4fc7-a0c1-55103ceb6908",
        "cursor": {
          "ref": "5a0c6ebf-856e-4b61-b20b-8d281b461d38",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fe4ada7a-40d0-4348-91a0-6647ea6ece51"
        },
        "item": {
          "id": "16cba6bb-3e8a-4fc7-a0c1-55103ceb6908",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "57d24fdd-24d4-40da-8f07-da7058e98ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eb2a2f-5533-490b-abcb-5985438bb630",
        "cursor": {
          "ref": "cbae10f9-6964-4c04-8041-033f40c1b868",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7ddcbe18-9b9d-4402-ae77-723b0bdf7fcf"
        },
        "item": {
          "id": "b5eb2a2f-5533-490b-abcb-5985438bb630",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2b970306-4453-4634-afd2-076aff137526",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637c6baf-ddde-4a71-9a80-24ada379ea8a",
        "cursor": {
          "ref": "6cd2a9be-0b91-47ae-98ac-d2fb6965c1ae",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "49bf8b07-cd39-427c-b4c0-074b89b66724"
        },
        "item": {
          "id": "637c6baf-ddde-4a71-9a80-24ada379ea8a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "235616dc-0745-412f-bc54-579c5540bc58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}