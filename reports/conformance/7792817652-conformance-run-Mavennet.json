{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f7c3d7c5-ddae-4053-8916-1e58f19bcefb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6235ec8c-e35d-4f6d-9360-359f5cd148e7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa2818bb-55ca-4dad-8e0c-ac4cf59ce05c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "793dae20-d14c-4a06-9c13-822aa9484df3"
                }
              }
            ]
          },
          {
            "id": "3e9bb57d-bdea-493b-8467-4b46363564b1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0386eb21-753b-424f-a1c0-60f529fa775a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3d28f2da-f6c8-4f8f-a649-ee7f5e44eebb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8514bb35-f9c0-4ccb-acd1-374db1f2c532",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a5067a98-d584-4f84-a9c6-efd7eb2df3b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b88caed-fdbd-4006-87f6-7196dbdfd93b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdf00f04-0adf-43cd-925b-b37ee09359f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2383e26-ed43-4f0d-9564-6dd8792d57f5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ba41e5c-7f1f-4e0a-ad01-110bee768420",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de5f4786-dde2-4582-9f34-6790ef28298f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a58d23f9-8317-401a-ada0-390722b02adb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59047dc3-f835-4093-b74e-45da961921c4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77239021-ee3f-4c5d-893c-d21a95c53717",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f27ba760-8e6b-47d8-81cb-c12492558361"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bfb41b1-d7f7-47fd-834d-98e1e322c611",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff4690eb-248c-4057-80af-2992e158c881"
            }
          }
        ]
      },
      {
        "id": "73c1c97d-973d-4fe4-8ddc-515c78a1b945",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "51369bec-4528-4cac-84f0-89f205418ace",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9e5a955-10c2-4506-8605-00699d9fa985",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3be91197-8697-44ee-ae8a-71fda3248b86",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4317d2-79aa-47ab-b574-1e5a302bfb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88fdac74-4366-4183-9042-1eb95f07f745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2413a8-d26b-460b-8696-9093caf437f2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc285348-e32b-4064-9db4-ded45e95a973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "875d680c-15eb-4bdc-b71e-5317494fc97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03036ef4-ccce-4704-8b36-324b19abb6e9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a2ce35-dedd-404c-a8d8-472cb0a7c8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d48c9a-a97b-4b06-8e26-425e8cc0dcf6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac6c9f3f-36d8-481d-8595-7cc8b82752e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b10ebbb0-6430-426c-8bc4-6f82aec89a68",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf0c476-72aa-4376-9741-2199cb077a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e2187bc-8a02-4d13-8a7e-26a34a02b6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350e2767-a866-4a4f-8db5-14e7fdafe4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f574c24d-39bf-4249-a343-5a5d0160e116"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50a7e58b-c355-4672-9b82-8bb7aa080b2b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d6be754-50c0-4f23-ba98-f236ab434f57",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f906b5cd-54e6-4450-80ca-7b981e19c8e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "133cec5b-96a1-4fbf-a8db-78dd1a145cae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50438cfb-447d-41cd-9d01-3c85b23e4b4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7f62a2dd-d19d-4fd9-9d2b-d3a4fdacbf24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "671da527-6bb1-4021-8b5d-fde6aba4a1fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3f90c50-4742-415b-892c-86e804d4369b"
            }
          }
        ]
      },
      {
        "id": "fbd820a2-3051-49f3-96f5-05d9345c786d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ba3c654c-42de-44c9-85fe-462af32c1454",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22f67d53-d53d-467d-974a-dedad0d75366",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4e531af4-1325-4230-b426-f852708defd4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c763b43-5480-409f-b6b6-60deecf5b39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0a48bf-d7a4-412f-b7c6-4580108af31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3d8047-f01f-4865-9407-51367a6d9be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b33496c0-ca20-4636-a850-2a89c7fb949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f73eff3-de1f-44bb-8c39-e314e61d3d42",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8046b197-66d0-424b-94ef-b5b5c9d62cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9114f5c5-5c34-4206-bf7d-dee1d7b379bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce73bb14-32a4-4384-8049-d6a29c19418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fa84801-4fca-48b2-b6f3-bdb88cea4b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25af2c0e-2ad3-4b6f-99aa-efdaef13d7f1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c27ae57-239f-469b-b109-efa280b455a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1107b30-964b-487f-bbd2-104c95e587e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfef870-4847-4d3f-8b8e-f1a2c3e0d3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "386b020b-23cf-46c0-9a49-90997d362daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f4f22a-0292-4271-b795-9ff9a529162b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6780327-e022-465b-bf96-555ea9ffbfe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda2d3b2-7b3a-4df0-be2d-bb73a8a50154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6a2b37-a4b0-4e6a-9201-2cccaffd74f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f775b72b-7480-42db-87a4-dd11ccf439c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f41967-cf41-450c-93e7-5ec1df30298d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcb28c7-bc9a-4ee6-b4cf-a092200e7cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95304756-1ffc-4dc8-a9c7-8aec0a681fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10a0ee3-b59e-4a9e-acf4-804a73d85f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c38c663d-90e9-463e-af5d-089be6cd3fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb2ff2e-bb3c-4501-9738-ab2ab0bc82a0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8602a9-c78b-4d4d-b506-e60c48502072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c8a898-195b-4b23-a298-c0522f518195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba02b8-9659-4dd6-a659-ba5864673134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6cd6ae2-bd3b-412f-8d78-7fb2516c6909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4281df-3cad-4a9c-aaff-2bb5c94cb13c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731a1afb-e4c3-44df-9541-2ee3c76b9420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eba552f-1154-470d-aa1c-32fc211925b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fc1696-26d4-4820-b297-3f239d9e7f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1686832-5d62-4a5a-99ac-7993ac4ee4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8b5c3b-84c3-42a0-8ec9-7643e2a18f6e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d591134a-056f-41e3-a747-7bf590a326fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d2a3a5-d855-464b-9481-76e63a74e23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8c4f9b-c735-4ca0-b0e2-039d5dd3e772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2853e34-2239-49aa-8904-f04ff2f7a2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047ff109-d624-4ab0-8c96-db0c12290863",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c680bcc-b8be-41f1-bb81-c2da4df185d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0950e8e2-67ff-4bc7-ae7c-78ecb858588f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e46bbc-872b-4015-9b5a-35f1b50e46b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93359e63-9b43-4f1a-9009-3fc1d396fba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e80fc9-50e7-4aa7-8f45-202f724a500c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0965c3bd-7662-4b78-a17f-6d0fb2ff5bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0fb09ef-9e3f-4168-983e-8d0f8328dea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb38b24-e76e-4b6f-a2a2-88e984c67bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f250e184-3fd0-41cf-a6f0-fe1d848e2ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af622453-a0d8-4db6-842b-ba6ed4c654be",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47512f7-da47-4b06-bd3b-2434bc4d1422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f491302-93e6-4da1-b198-6c24c628c8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ce2d5a-1800-4f6e-be9c-044d3e826d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc377078-a559-41a9-91ed-d9711bd18bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635ec141-fe14-417a-b2d6-97a4b106d657",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba3b4e1-71bb-448a-bae8-77d8759c4f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fc3b30-5788-4fb3-ad14-37a60f519ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81738a55-0684-4e00-bd9e-b13e63080725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e94e3804-61b4-4ab6-8d8e-6d8f665a8862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5ad9d8-82fe-4165-9e96-570cfcdac5e3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2736151-ba70-452f-81b4-22bb9b5dd26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b11dbe2-30ea-4c7f-afaf-19d3ef4fc47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd6f3d0-cbfe-4b07-aa25-5d514d95a8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82a7cfee-2db5-4a0f-8cb0-5ab2cb61390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff3bd2a-0829-4b9d-a236-28db12d109a1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86fef9e-3c9c-4385-bf12-e4b722b1598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b86de6-8753-414d-8b53-89f2a3a238b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84fedd7-8699-4b84-a439-ecef3802481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "130e449c-fdf8-4de8-af0f-c1c2dafaf65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0cded9-4240-4102-9ad3-f17c37c3bd3e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1f15ee-e18e-4e5f-9aaf-99542479055b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1669a71d-89c0-4bcd-904f-3ad86a07e74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf8cbc2-63b2-4a42-b16e-7f538e879897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a15f7d1-eca9-4c8e-a2bf-9f7ea1b47ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28552134-538f-4129-bb29-73d5ba1caaa7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039b31fa-e8ae-48d9-9e77-e57a45ac7d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e8b0dc-a3e6-40fe-9e66-b5da2f1fa73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb172db-34d0-43f0-9317-1c847ad8eb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "300c1360-2aad-44dc-a854-f6586b258060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21824699-4b33-4b3d-9132-4ad83c0a60d2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f9aac1-e541-4b11-b736-bf4b06482695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da58893c-8bca-44b2-9ada-8fd483a29dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f7c7a6-c339-4b95-9b75-abb11aadd714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2544049b-ae5a-4bd6-a9cd-dbdadeac2f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a8479d-d687-4d74-85ee-9448544196c7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4d27c9-436f-45e1-a2b2-66d42bdfef55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f402574-cb66-4431-9c2c-3026af2e3da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53577017-1110-49c2-b665-2a7dc973c467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0006b1de-5126-4275-9b8e-c5dda78d5e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e89d6-4473-4e74-bd40-8b1bff55ea99",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ee6c64-6066-4b61-983e-c59521ec6431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d47a8cf-311b-4929-b287-007b45e67e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b38015-f8d0-4735-ada5-f68718f6ba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d4820e-d48d-4593-849c-dc3782b345ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c295e0-2f87-4a54-8ddf-d33a6bca9b6c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a98630f-b697-4e60-81d4-189f076abe51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c4d69c-bc9d-4bf6-9dc0-45573ce036c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6348e4-2f3d-4929-bcca-88d5f28827ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "026e4d8a-5e80-46ac-bb56-3b7dfe814fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de44a2b8-ccf9-4dd8-87c5-69ea9d87b4db",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87870007-e035-41bc-b937-e7d3bc28f8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097950e7-11c3-48b1-83c8-326a421ad48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef70822-a8cc-45e3-a480-3c33a07e4cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54cae1db-fb69-43d0-9114-5129870c4b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0955f1-2850-4668-9eca-7ae0bc40cc6b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec35aac-6c64-4ced-b4a9-5aa41d771054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f8a150-163c-4999-9d69-958e8b567c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6543262c-150c-4799-98f8-fd106f70c1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68ef7681-5c07-4809-8cc0-4cb85cfa3a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0bb9cd-46c7-41c8-a4a7-00400a63931c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5730c49a-deb1-4cb1-8d97-09f83b5f1822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34986cc7-3ac7-4517-8031-a5ead1fd37c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd42bd34-de59-41fa-ac44-5609be59c5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a49950-7664-4aad-b9d7-6f359ad43ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7070e7f-de58-4821-850e-7287d5524cf9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c178c945-fc96-4ede-8473-e7a0e21b33f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41637ad-4dc5-484c-8d0e-f5041465c4c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f968ff-597e-4e95-a0b8-a268481b81aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7ce9fd-bed7-48e6-84bd-a25252489f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d5d165-45fc-4088-8d63-b1f474397d28",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efba0e5-579d-4920-b26a-e592e1b03a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30b45bc-0fbe-4b0b-a0c2-777985e0e902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f62388-7873-4e30-ba40-c3fc2e892f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78c65f36-2bb3-4379-996d-98317e5d8136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98e77ea-961f-43b8-9c5d-5319450d3076",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48688f34-43e7-4599-8b75-c5e5058aa845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826b8b4e-8cc4-43d2-a583-642b99b798d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f137da95-d0a9-44d8-b13d-89ca6ccad40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7881e1e-49e5-4f80-aafe-9cb1c6f99f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25e6322-9232-4e2e-b518-151a10f8a5d0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba320301-b1e5-4911-a268-d5e3074046cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775c8c53-f8c5-403e-8b07-2ae0d04fcd10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771c9b60-be2a-4d46-af60-fefe5d944314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a67669-1ae3-4165-93e2-3efc85245ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371f62a8-7a08-48fa-a490-ac59ea7185c9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ca7fd9-8320-4cf4-bf4f-08c487197acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47880d5f-735b-4f5c-8ad4-a7c4aa6a6462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc3fbc5-c560-4886-9a52-82e8482b1a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9900193-cc1b-4421-9272-ae6e8ff08644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f148eb-8c48-4c05-bef6-f08db8ee497d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3741590-9286-41be-acf5-149c423bd434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b82a278-7b30-42cc-8f14-f92100d4265b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fef93f-16e3-4fed-83fb-913c1b72bb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4692089b-9597-4612-aa1a-aae4b255268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047b2c5-0325-4661-b02a-5c97831180cd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c357c44-714f-4c0c-a160-4aeeb4219948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2a1611-f50b-47d9-b48d-0fe4d7d4252f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b31e47-5bab-4030-bc11-669106d56c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2615d9-b00e-4f2f-9f57-e44c43bf9840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca8c774-5911-4faf-a918-ca6228f1cfae",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5e6cbf-e41f-465b-8f9d-1ea557e8ee0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30738a3-f66d-4bde-914a-6989854e7abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5931ed-c0af-4eaf-926d-21407dcd3974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0081bf89-f573-4572-a365-21abf6a0f504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a83e2f-bdf7-4c73-86a2-f7288cd226d8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2692c40-a537-4409-940c-e641663bbfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f15548-e799-414f-bdee-58c52f62a521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bf8afa-9be7-43d9-a8e5-8d6475fb6315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4c8f19-8f0c-410e-8d5c-3c7ee8a8c14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b1df26-c5e5-477c-b682-e3122d5e4148",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e252c940-b9a3-4b17-8718-7819a8735381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60d142b-aff6-40e6-9e96-3b62db425cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2602cff5-7c3c-4aa9-9f1e-e835fbd3463e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7b82c8-9604-450e-9eaf-5bb7f5b3260b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3e046c-3365-44f8-a869-bac2102015de",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb681ac-a555-4ead-b656-285d61bb9224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d9c582-f812-484d-aaec-64139ad6cf83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d4bcb3-4b63-4d1b-bcb4-a520ab8a6d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "317e3b68-73fb-434a-a31d-88cd4e247511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3989a6-087c-4f52-a3f9-158932643956",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208118e9-ef88-4637-b97d-3915f58f61b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e538dcd4-f0f4-4010-947e-69727d6ce9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d015ab5-35db-494a-843e-385a5bf7448b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b82b5a13-1229-4b2d-81da-51ff86a0fb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc62fd82-df08-40fc-b7e6-4b4ec2cb427c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de74a026-2fac-4e83-9cfe-0a24bc8ffef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8aee6e8c-5bf3-4af4-8bc9-910e0194829c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62410c1a-dec3-458c-bb90-9f480280f0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d237610e-1871-46a2-93f1-adc827178d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29efe26b-aa72-4740-8415-2455833c6354",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0570d4-f4fa-40f8-9f64-78a51ffa3e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580df216-6efe-41c7-bad2-9ecc359d2d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97305732-5131-460e-b5ca-a34054e8bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "982a4900-2315-4cdd-9269-35a582c21a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab84348c-113b-44db-9919-d49b77b8eb0e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08705d7-7e68-4aaf-873c-976efffb52d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da6a8c8-9fd2-4b9a-9b96-f0ef485f6649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa5236b-9a50-46c9-a974-2f4d749fa578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "892aa5fd-d67d-4037-b7e3-52684cceab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319f5eda-fdd2-45c8-91ab-9844d33cc344",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de56b38f-5762-40b9-a125-df05aa5954a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c1366d-dbce-4d30-9064-bdbe6fdd7e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f8ccd8-b2b6-4d39-9ba9-5cd83adb040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "06d5c347-f986-4771-b264-fc0fdb34f437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d51bedc-b667-4094-8b7a-9c3feb37688a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11878246-b07a-4944-88d6-d8812b0cb33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a47d89-5f44-43c2-a538-596131176e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2343b3-9fa2-4ae5-9b4b-fb90e51285f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7d36ef-a053-4916-b493-1c8c7cfeedd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9587039e-fb3d-45b8-9bd6-791ae1954006",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcea36d-aa02-40c8-a40f-39443e224b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa62077-ec4b-4728-b6a2-dc9cca068016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1101f72e-bfc6-436f-8718-060e1acc9eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "681e01fb-e020-4939-8a8a-03e518076dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fc0232-3b76-400a-88a2-8f3ed8050725",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a942c05-9366-4cd5-be6a-32629695edc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694b71f6-678b-4e78-96e4-0fe4b9c8aa53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacc72e8-18fb-4223-ba6a-0ec76e30a603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a45195-168e-44c6-94d5-d6a5f9cf2b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8fbc9a-ff55-4c7e-a2e3-97cfd5d7de41",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cc5038-df44-4391-8a67-92fbeb768614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5249eb35-dbcb-4d92-93f7-82aa23c387b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48249aa4-4f04-45e2-aba7-dbf0f297f1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3d8adf-de82-4342-8cec-36ed000dba84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77abe89-4b77-4488-b912-5abb464eb618",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96890f7d-af1d-4b96-abc9-7fa7c9cd040f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475be525-a04b-474c-88c9-04705038c3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471d44bd-e610-4682-8545-de92a267531e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2c77b5-3c90-45ef-b434-260b639dddbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0dce1e-96db-44b7-be4e-d2456b49f365",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37007560-d55e-4231-9b3b-f12c3a4c339d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab7faf1-8bc4-4d23-b057-aa0607d6bac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3419fb23-203f-42f1-9731-e2420600852a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fda790d-7488-4ee7-b4b5-2a808ac05a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd5bd82-a1de-4de6-a621-b193ac202d1f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f76703-0730-4d1e-b804-277b6a814eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25bf9e0-c088-49f3-9f97-10d7a78bfea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7867f1-9322-47ec-9e5d-dc6186e74343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "014d490c-b771-4060-bdf4-1b2ed26c863c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eebd05-36e1-4faa-914c-2954fccad8e3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4e3d66-39a9-4212-b1d8-9a140e490584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3350b10c-4459-4693-a36e-795c78c84bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3fb159-f071-4863-92c9-61aaddfd4362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb614a3-6fdf-45e9-bb7b-7227c445d160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e14bbfc-158c-4ba7-9d8f-c89c436ff606",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87a932e-4025-49ea-be94-130b1ff0bfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7aedb9-eca3-48f6-ab85-9650326f2ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a541386e-4bef-4098-829e-684cd65232d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5bcddd9-d556-4b2f-9683-7262001cd376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4e265a-98a9-402b-98e8-49487b2b4d53",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ce20a3-678c-4319-b275-74c1e788ea0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958cc470-93f6-4514-b3fd-8d20bc29a5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f95d97-e8d4-40ff-8130-8c3443e27df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc68a88-a262-4520-962f-41aa440bc919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48a6ec6-c1f5-4f96-9286-d857290892a7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5290b014-d279-42aa-aa18-6ef9e1cdd120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8707b848-21b0-44a3-905d-3858e6f5ae7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2689f14b-be83-4570-86ff-e62c02c09703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "371bb67e-06da-4e4b-a742-cd3bf6600e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10413ed8-b4aa-4323-847a-9e8b557bfbd3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c683e71-4ccd-4a9b-8cb8-a328e7271305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbba6b3d-737f-40db-ab15-41c11a776673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccda24e-b819-4128-9230-cffdfd3a07e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8d0064-0842-459a-83cc-f6afd2b150e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f08bdc-7e84-4dca-b858-5c46cee8e044",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df092076-281f-4cc4-8bd9-f7d34fe72ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7836bf2-1e9c-4019-97ea-a20cf9823623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c84abd3-6273-4846-936e-2b3b3abdb10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b519b9eb-4046-4c49-9a60-55a160ee153f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4331b72-bfa6-44b2-9785-be40916d64f1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932bb68e-5d77-49b3-a72f-3144c52464bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead81ec1-9ca5-453e-88c1-aaaf08cc59e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb267a5-e653-4806-baa0-3f5cdb824278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca1244a-17a5-474a-97c2-91e95b0b7b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cfc441-ecc1-43d2-a343-0e2181bc8717",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e650477a-4508-47cb-bc90-d05d31eb438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a11bec-18f1-4f32-a440-b6b9945a19e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9692550c-1127-4832-a296-b44e633844c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43940458-90cc-45c5-9502-bde17e6cab52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab811391-eb4e-4a19-a8d9-0ca5d1e2e006",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cac5066-ef62-4748-94fe-d96044954f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f01ad2-9216-4828-990c-3a7738b9bdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa685df-b0bf-424f-823f-223a46bdd214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6788da6-3863-41cd-9902-9ef547ccd4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5f38d5-8eba-4591-9add-5ad134794796",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cad1a09-7e64-427c-8d93-a1d5a8aa59d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d69ed3-939e-4352-b72a-ed18a6964306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc83a82b-c355-48c2-87b5-3c66c793e212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "51a5ced1-b921-4e69-9116-1cbbb7c4214e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b585cce-0425-4d6d-bf2b-d78c74ffa8dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95932ef-df0e-412a-abe2-e7eb235f0ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95be31b0-a56d-4262-a398-44246e8689cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbae788d-2314-4b88-ac66-3a99f77457b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f08660-b75e-4bd4-bf96-d80e5f5a9178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ca9c50-5fe3-4b87-aedc-7203a8cc8b0f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1628a007-10b8-4103-8208-e12593cda3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65301514-0c31-49fc-9ca2-6cfb9f85b2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b0356f-ae30-432c-91a3-d234af10f297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8803740-b474-453e-98dd-8ccddf5ea0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f6d625-ad0b-48c1-b4ce-cb1b1998e5ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a9ea24-97e1-4c3f-981d-5d43b72a87f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb51619-1a9d-4268-8c1c-1c7c57938b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea38ab2-58d9-4a51-8f90-2247c7543599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3ed5d-38e0-4608-8920-7aca149d853c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daafe79-a717-4bb7-b022-192b7db9119b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaec0b2e-72a0-4a3b-a08d-6469b67847cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c71890a-da72-4484-bb86-6eae8c654426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1ff5fd-e7d9-40e5-b9b2-d17499ce206d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4627ab38-f00b-477f-a43a-f1a4ea95c3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b491e6-b4c9-431e-8a4c-978e0e4ed940",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040daf02-1e43-47e5-9945-7281e9ded7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b1acc8-a877-4509-93f4-e731c2ba99b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be140ac-fd13-4591-a374-4fd9c6aff3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bf8ea7-5598-41cc-8186-de57ab251f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9167742d-34e0-46f1-af68-c97f8eb47a99",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a391943a-f261-45e1-9970-892c64b93ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dd9283-4a0f-445b-9120-3599f9e16b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e48f179-0db4-4ba1-9efc-1194857fda27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "269b454e-48cb-4c84-96cc-fbe524c64bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7aeaad-11ea-4ae8-aeb3-84dac0ce39ee",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45fc3cc-48e5-4ec9-98be-134e2b4da653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396973ec-b422-447d-8790-929cb1e38859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6820963-4b03-480e-b044-f1b47489a64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "51a91cc6-7193-42f1-b86d-fca8352b15e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7b4d8c-0d7f-415e-bb0e-dd2cfcacb66d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b6b3b2-f724-4f8f-834c-0a46b3162896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4344e803-767f-4e1d-b77e-ac647d8c69d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85fb896-256e-4324-9d2a-b6b5b5aef74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8358d021-42a4-4337-b3c5-4b920ff6cabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17dbc86-1f2c-4c3b-8322-c767221d5a90",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be56e80d-1505-4300-825d-11378ec4112a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58ab52a-37f9-4d42-991f-739b02c63ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebc30fb-bd8a-49e6-93e4-b74dd1d00652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2186ef0c-9508-4ad7-805f-df16e76c30bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117cf283-eb95-4fc7-8a76-f89abeaf6f6b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87c6b7d-bac5-4f22-9aa1-9585679f6b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33d1ce8-507c-4a42-81d7-a6c5644582fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871c970f-2921-44f9-b8da-bc01c62e4a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cde87f8-680e-495a-9a02-b912f15a9008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57830fc-b128-4941-89a5-fc034ff24234",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5d22bf-7821-41cf-ab95-aa43a8b3da5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82d2afa-6bdb-4a85-847e-93d22553eae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeffb615-7c72-4eb5-8bd3-db1ca0326989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41f6260a-ff0f-47f2-afb5-75562e231230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1278a5e8-e0f5-43c1-bc75-2c148d2f93a6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48a28c0-6643-4676-9d70-58ef459a4047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9cf2c7f-06ad-4a7a-83d1-718f944dfbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955a6005-4492-460d-8113-30355677dc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "01c20d1b-66f1-4366-8faa-70b89bd6d464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e9b1a5-04b0-407d-b88c-67e081771bb7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28c6836-79a8-456b-ab5a-3a746ef348b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c512cc58-beab-4afc-b38d-2abf5ae2ac3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39afc850-97db-4e81-949d-3405fc8be18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c80fa263-9a57-4795-9aca-42512f39ddd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b0ab5c-9f32-42ce-bc2f-9cc40806b433",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa82e735-5f42-4329-bbe8-5cd6ba6bd970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ada854-01e5-480f-a95c-ad5c4fe2bcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0aeecd-d3ff-4f73-8861-c5591d6bb908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2571a2c4-7163-4c56-bb07-265e43eb4921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71237c77-d0bf-4fbf-ac59-5591f38fb812",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df65b333-5714-4bfd-86ff-d660ea66afe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fa9741-c655-4d06-95c6-7a9ddd44a047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3480f032-1d11-468f-884a-059d844d8bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3729410-9c38-4bc2-89b9-bf908e13e508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4de5837-e575-4a18-aae9-168da2ef5504",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e90bd7-d56d-4865-98f2-c1988d1355b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb6fd54-1d5a-46d6-bda1-1cd1789ad794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79a3366-fbc2-408f-ba64-e1b31760393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06541275-c45e-465c-8577-b8e435fceb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb640341-9a5f-48ab-b21e-cd8b42b7531d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26127612-1091-4ed9-b315-30770602a8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39151927-5134-4d3c-865b-c8ee45b1f9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e174dec4-6a68-4eeb-9d85-eb0c75bd0946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ae6df0-a0f9-4c85-a728-42b4839f29c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcc79c6-8028-4010-a005-3559e6d0b9f6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10069aa9-97ac-414c-a0a1-b2431ee455fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659c8ee6-8618-4b27-87d2-891e0f640365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1cab48-5fae-4b5c-a5a4-20feb9d85f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b57f06e6-9ba5-4d09-87db-a9af30148be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff74caab-877e-4ca7-88f8-c097ba393777",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a184e8c0-9027-410f-8694-e25f89405947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b18452d-b356-4ee0-8384-2eaa8de23acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2ed788-cf8d-4369-90b6-d09ba1754fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf8097f-20a2-4b31-ba2d-f1bab867957c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2565aaf-1ed2-4859-b69a-cd3adfe07a14",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce5137f-5cce-4943-9d10-a59148e322f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e14a21-f8ef-4a66-b954-3913f2c99285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e044083-417b-47b5-874b-f1f05800c026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67661934-3921-4fe7-870c-4cc2b7bc35b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6dbc33-6481-44fb-98fe-c6d74693aef6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b8b487-1ae2-41ad-9405-af0898401629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42752ce6-b562-493c-9edb-efc7906e4b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371a1249-3d47-44ba-85d8-e320ddaecd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e20310b-df4e-4d49-af59-571192a8849f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f947bd-c334-4205-8ad0-9bab41226c56",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735700a7-04b8-4494-97d0-cda0598afa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19af2038-e97d-4d6d-8a35-3033d5f4e7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cc69de-c57f-4554-9e0c-785064d11120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27e93e00-93d6-46e4-987b-71927f4394ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a861d304-a8d8-470f-92a5-7914adc67ea6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f66b005-d063-4fd2-9034-d84fad43533b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b792977-9e29-4c1c-9914-399b19b54b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffe6490-de3f-4182-9db3-e96cf1e3bac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "501aa070-691b-4c52-a038-5cfbecf6594f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11624ed5-a616-42b6-a441-0e12ed13698a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d378bdb-e7bc-49aa-b050-ddb517e0bf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75540170-df96-451c-a254-b2724b90f23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f782cd8-5520-4129-af29-d9358e62a95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99da44a3-69a4-41cb-be4c-2afc09b7951c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffb36eb-c61b-47d2-b284-336d68755f1f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8de460-ff7f-4cc6-89fe-58937084e3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc84a79-2d20-4daf-a713-28b3a090a677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcb42d4-89e8-4c26-9138-bc8aa5bd141f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "75aeaf28-3cde-4f03-9c37-0ec26e3a8375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6456e9b3-c828-4cf8-a14c-d59dce50347c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8875c74-adc8-4169-839d-cb9751739955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c102493b-93f9-4768-a4e3-5139f09b26a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aea6e06-75e2-4518-95ae-ba8f7357850f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c620cbd3-38b1-4864-a9ce-6da1ef456325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa8795e-e845-4dd0-96d5-ce4f50003c14",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ccfb86-a7b4-4ac9-8178-3a953b848d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0ecead-2353-42c1-ab68-a74aa9233543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b317a485-df9a-4f3a-9027-968e68aa76fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73529048-f1bb-44e8-a0a1-1a211b7634f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e30edb-21d5-4f7b-bae9-f9e779c584a6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87833b7-5c7b-4cce-a8fd-ad16f77befd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff004ba-76f9-4105-8d8e-399cdd2c78ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be81f87-8aaf-4bc3-95c8-664e849a93ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4ca1c3-a57f-4cbe-8d9c-26ceccf2e86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd27003d-3497-4e12-ab1a-06d7159c03cb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bb9d54-d0b3-473e-a806-50f2c2d17813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b07167e-6959-463a-abda-19cb54d2ffc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90d0e45-cc9a-4d2e-9bae-366d67f71f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96d7cb19-21cc-4f40-a157-c00bc194e64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85521ecb-60e9-48f2-b442-6f311dffb610",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4ae9b1-5bb9-42ee-a093-89ab22637ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9609e99b-f057-4585-953c-19a92f5bdeba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2250d1cb-0ff8-46ca-873a-d6715da8dc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e153866-a1da-432c-b4be-4ab1c036047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bca00f-9dfe-42cd-a2a6-00453e8a0fcd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527f41af-2596-4f8b-8d31-3044330f8937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4d804c-3c9b-4223-b9fd-09073456492f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bdecfc-2886-467c-ac06-300511bc2ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6476a1f1-4a16-40de-a78c-4be646e77088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377db7d0-2a68-47a4-abf9-ae542d73341b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4685f6d-3c92-4fd3-b073-1ee61f7cb62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58305122-8941-4bd4-ac4d-de66e10bf370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592a1947-4694-4ebb-ab14-3e7964e46579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba302edf-c016-4999-afe1-bf689d9eb74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab4aed7-4511-4a80-810c-eec8948ad049",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c70059f-989d-4f45-90bc-b398448ed84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a27555e-7ed8-44a4-984a-00686a796a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab46c0a9-c0d1-4203-9c05-e1335e01a675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f898dc-f241-466c-97a6-c986f18886ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e358c3-2af5-4b52-9238-5bb2249cb609",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c159a8e8-438e-426d-aa7a-0c0dc1d95c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02022168-01d3-4fd4-8be1-a0be7ac4e7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7202402-a1fa-4454-98d4-d972e371e26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87d1abce-9414-4738-8049-22ce41ba5dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47123e6a-fb19-49db-a1b4-da60a82f4c2c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fc3683-89d9-499d-b873-dbcbcff9ea40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7095091a-37b9-4231-8de4-a38223055d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc14eae-ea9c-48ae-9d73-6df308a52331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "77de4706-df61-4d8b-b5f5-85439034005c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6b9358-e6cc-4b29-8023-2b88a51788d4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ca01d2-cd58-4030-a231-c53cf3725b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "feac95cc-38eb-449e-a303-bcbd3811e54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2762c2-329e-43a1-97f9-913836fcae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4fe525-daf5-4c53-81f7-3006876a7a5d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "da49b59a-ada8-4b52-8886-f98a6bca5842",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b0b81e9-c959-4d0e-a1fc-da04c5d27b98",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bbcdfd-d67d-470d-afeb-5d46c1e2c26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30b7c154-e011-4510-b7df-115ce720bb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12816006-74b7-4ba9-98db-fc1d7d49000d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26977b39-757f-41a9-8b87-30d668248207"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6b632c9-abde-4c81-9820-1eb741e6fee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50a31b91-124a-4f03-9869-f2761ebcd59f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68aac48c-72e1-40cb-bfe8-6d4f334437e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0395ffad-58ee-4054-ab23-9987a2cb8c8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3dbaee90-ef46-4c62-a8ae-06a7adecba51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1821a816-90d3-4398-96c3-c2c9d0605eb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f291421d-24bf-4b50-bdbc-52da31743f54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8e028fd-d7eb-48f9-aabf-4e74e9a854a1"
                }
              }
            ]
          },
          {
            "id": "d08f0e1c-4a51-4b65-82d6-ba8c31c95445",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2be64ef8-1104-42fe-9054-0327ab292ba3",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9c9f6dd0-765d-4496-af9f-0de2a3ccacd4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f4bbee-60eb-4343-baad-b371ffe7403e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dd6f51e1-e739-45e4-83ff-01a65102298b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a2be9e-50bd-4f90-859f-724b3588c8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d033aa6b-dfaf-42f4-85ac-eddf435cdd7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c8c6c426-ad8c-473c-a8f3-97ba7a8c5b99",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08204362-4b1c-4161-a39a-0aa6cc3ccd8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27d297fa-3df6-4427-bef8-c1b8f5c0f21d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7d12d7d-cd29-4bee-83d2-db82da91466b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "94d2904d-b515-4292-9265-0fbee09f18c9"
                    }
                  }
                ]
              },
              {
                "id": "db117d0b-0b85-4d4a-b343-4d0bab1420d5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35b3563f-af18-4170-9a31-78c94fb1d689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5e697a6-60ba-4b94-ad7c-858a1c7a92d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57d256c4-ff56-4da2-958f-c4e06762679f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe2f4426-27d0-4c3e-86dd-6b061cc3ab8a"
                    }
                  }
                ]
              },
              {
                "id": "940d4de7-1027-49c1-ae8e-1a45d50b826e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1ebfaf4-6638-4ce6-b81e-db7a6e71c314",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c33703b6-0120-404b-85cc-3d1f4673ac55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "657ca983-fb97-4a30-b14a-3b133589f572",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a39d07e-25f7-46fe-85dd-d2217bf518e4"
                    }
                  }
                ]
              },
              {
                "id": "b5baa76f-fd1b-42c6-9fef-9f7368a68dbf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b342edf-1131-414d-8f9f-659e55435bc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd9c9828-103a-417a-a91b-23be194ff35c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73a1821e-6ed4-4307-9a8e-8d21b9766477",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6bba03d0-0c48-4b57-abc5-28c570568680"
                    }
                  }
                ]
              },
              {
                "id": "5ecad549-db31-45fa-a70b-95756618f655",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca8b4188-663b-4dbf-bed1-b69c32f252d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42f674d2-840a-4ca6-961d-c87958cd59fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b37afc6-ba41-40cc-a7a6-855516011716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1fa7817a-1a5e-431a-aa8a-719dd3ec6d97"
                    }
                  }
                ]
              },
              {
                "id": "76d1a4df-0201-4e3c-bdb5-ef3527d2f78e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "516e54ea-6f8b-43f7-b93c-6301c463f551",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "725cae8a-e719-4009-9e19-99e049f626b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d891c941-ef7a-456b-b7f3-ab7c6953982b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd9db951-d58a-4b42-9429-a990c4d54146"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc11520c-94a4-405a-bf47-f975bc0987fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a5f48b7-c6fb-4da7-ba5f-ea3fdb9a70ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ae91796-2770-4e5d-a2c2-4f76d618010e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af0c864f-ae44-44b2-ac86-53aea7fa7fa5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdbaaae4-ef2d-4c4a-924e-a199c804f583",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a676a798-1b08-40e9-a3ee-94d2d4df8d40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22d9e766-6e98-4669-8206-291340d24dd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d071dd0f-d916-498d-8faa-1cc92b42526a"
            }
          }
        ]
      },
      {
        "id": "0518d8f2-3559-45b8-aaef-c735c088f437",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e43cd44a-aac9-427d-a479-4b0a828a88c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27a2d2dd-cd52-4499-8e19-9187eb4b9a50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a0703e59-3da6-408f-94ba-fbf0dbb5f6a9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9e3303-5108-48e0-809b-1764b10b1c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886556b6-6863-419e-8340-e7cd3065cb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920ae9c2-6260-4f0f-91ae-8321434c46e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa55fa6-a70f-432b-8655-66ab9ae004d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceaefe6-7f8e-4025-955a-1ac36fa4524e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30f004f-ef5f-48e0-a25c-f611d98375ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3517601b-13f4-4168-bae4-bb387360fde1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d64938f-15b2-4341-9843-58f32eabd6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9533ac-73b3-41e4-8cb6-ded6be626bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3a5d10-dcce-45ff-b008-4e8926e6e80d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1481f44a-e8a3-4d1f-b1ed-a628deb59d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb33292-49c6-4874-824d-866ba073fd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4423a32-9be5-42be-a3e6-d3a7a64af671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e73b7424-8cfc-414b-acfa-43dc43b9e0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946e57ee-731f-4f90-89bb-0b9a7e92f6bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809c6a47-1df4-4a6f-9102-fcd8368f3c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a44a27-02c7-4d2f-87ef-524a5f874cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5419bfe4-e30d-4430-962e-330bbe5d18a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39100f7e-87d1-4689-a026-dfc249aafb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8263d79-c5f2-4200-98c6-0e7791350ac7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fdf9ff-13fc-4c6f-a48e-f1821e41e6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832a6f41-688e-48d2-888d-8cf00fb8b6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1bc3d0-e33c-48c6-8e2e-96c0be0ac627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6abd892-f66c-4fc6-b5c6-d11b2ebafbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b44c1fd-f9ad-4d4f-ae46-40be9bc71c51",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa45c856-d76b-4e35-bdb3-38e51c0199c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbad615-ceaf-427b-b698-4e7e2d63da20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8c781a-2acb-45a8-b87a-a2227100211b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "911b3c51-5d6f-4356-b971-887054e791c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7db9636-9de8-4e57-8bc1-19767058245d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbb43d0-14cd-41bd-b5b1-f2072143e39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053d36eb-27bc-462c-a4c8-5dd437bc9ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09591351-81a5-4ebd-9a08-744484e98e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "15772348-1f8c-445c-b142-b2cabea1caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84947bd-ed6c-46eb-b8ba-81350cf2e285",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370b798c-2bac-45bc-8e68-e7e22115f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a48f0e-e280-439e-b48a-2bedcb319ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc136f7f-8593-4d2a-9c0d-90df58906f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee19bd6-1197-449f-81f4-17bd2332be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b84ae5a-cfe8-42aa-bfdf-b9b6ed664da1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f843ead-dedf-45c0-a202-8d880bbe4ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ad1063-433c-402e-bfff-710d2e884c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124e08db-0153-4b9d-8331-8ab209639de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f09e03-66b7-4970-be11-4ff771e0c544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c34afe6-badc-45bc-94cb-107995207ab3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96731b3c-2e34-4170-84cc-b2c8233f16a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed16399-7fe1-4d1d-bc73-bd1a423cdf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8cdf00-1226-4054-a0d6-5d66bdc60461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93f70cde-1337-4cff-b4a8-1d38492bd21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371edd3c-0157-472e-a717-7b69d440874e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49db9234-d403-4cfd-9b69-c92c1353d91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4edcdb8-452b-4766-b693-565ef89877bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045686cc-140c-44e2-81d7-76d3f289622b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0a2c22-cc54-4900-972d-26e64ade1537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7396fb59-e6dc-4c94-bd4e-8e818afeee63",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c8e086-b12c-401b-bcfc-b28c9f0013a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630d03b5-bc1e-4c2a-9798-aecb63fe9f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b3b4ba-c19a-49ea-b07e-52bab5641b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "972e07dc-6f7c-4171-ad8a-ee44f25ad124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6ca0c9-f434-4873-b111-cf3dd1eb22dc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e496d23-9366-4455-aefd-597f660e4b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2424b6b-5dc9-4e47-84a8-3ceafe42a3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce36b98f-7289-4e91-af5c-fda9384f59d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dacf9184-eec8-46cc-bdc0-b61b74e8dbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3b53af-1986-4358-9e6a-79242c71cea3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4ebad0-c138-45bc-950f-190920705993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124f6105-6522-46e2-982c-977ce0ba95e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24a3cc7-39b6-459b-a4d9-53782a51bc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb24950d-ea28-4fcc-9d1c-3aab333cd75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4028b9d2-aed6-40c1-91f1-49258aaa0f82",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6769be-8e20-4ae7-a6b9-93587ae615f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62875138-a83a-4c2b-a996-3660c0178c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1287149e-05ee-4870-a6a9-ceaf390547a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9913c1-b63f-45c7-a20b-edcd8c6e4723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e92dd1-8c65-4511-96bb-993854faa24b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eea3f41-d5aa-4e41-9674-ac594d2de51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefc9e82-814b-41bd-89d7-4370f48c1069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9961c2a-6d90-4280-80bf-d408588ae6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d428e19-6e1d-49e2-928d-5c168d2a2859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3ede52-5d25-499d-87d2-2ae30b2ff23b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc7cd50-74c5-4483-a40f-7157e14b48f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb82086-dd12-4a8e-9e30-95ab55640b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6795240b-85ea-4bbb-b713-f4af684f4116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e640f3-0453-4ccd-a20a-346935f59d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e42eb7-a5ad-4535-a743-4b66c48db40e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77928d33-cf99-4b24-9a1e-9e965c03a16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8ede0d-8c54-4266-99a7-1c7bc7caf0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ad8aaf-edca-4620-a223-2084b39bc6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "49f3b59c-bf11-439f-95b6-4c1a9bbcd1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15eb7e39-c0ac-4acd-868d-c27b4ca202a6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba7dbe7-2e02-4667-91d9-fb3dc1628d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e7464b-dc2c-4053-9f79-eeec2525b6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d578fdb9-c5db-410e-96c2-be78946dd0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e57f5a2-85c2-4e52-a2a6-3b6ae535ffdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3b80a4-e4d6-4b16-ab08-1629df454e6f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c795d6d7-2d16-4658-b720-cb92729358cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda22523-6bc4-4766-a343-d01bdf30063f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7cb5be-7797-4c42-a683-bc6b42804fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8faa6bc-a74e-4dc2-9a03-92347084590b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a146a0-98a3-4ca2-afba-d0393d9b52ac",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4157110-609f-4c48-a21b-57c70ebfa5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b20e27-60ad-4629-ae9f-d4ec6b7a9592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2053cd2a-724c-4fd5-9c1b-c28b84c25ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b15f54-c098-4bfc-b621-97d75b12cdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595df0b8-8d0e-4d08-82fc-21d2786f4291",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797469f2-0718-4d68-94a4-4bdaecc1499b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b43142-e951-43f9-be18-2e3e471d598a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4e760f-6976-4aaf-8e38-803801bc59a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1729a975-3d7e-4273-91be-74695ac8c2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a99853-c635-4b6b-9384-3aa6d8063fec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad8a947-fef7-4aef-8f7b-4233c34c3965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d94a9c8-48e4-4cda-a0f6-e61eefe27ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e595c0-d75c-4885-b5a7-99a30d253591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f94e46c-f7ae-4b32-97cd-7f24ffb6df3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fdcb8c-9bfb-414c-94ed-4d9fe2a514e5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671d88c9-3fea-4c97-b63a-12b5bed1b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ff4e83-cad4-4bc6-ae83-4d147f950bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247cd450-3d9c-42a6-ac56-ccb06ff5fca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05fe69c6-23b9-4e21-b653-1b733c714c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dea81b4-1258-47e6-a702-6190ec2c27da",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05707ca-5575-4ed0-beb1-16241f9be0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea88aa-9992-4daa-9df0-17db4369bfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ba7dc7-7c1a-4c17-947f-697dc93a050f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6f785f-4401-4cb4-8309-66b24ad77bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaf31f7-6b92-44a4-bb5b-f08f12eae682",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffd755f-778e-4035-ad6c-ef490b3f97bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d089d1-03e8-480f-85f3-91eece2ce199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8593990-77ba-4407-b752-a79b3cb3028b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d09f939e-f39d-43a9-9f33-d0951456f770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72414ce6-52bd-4a87-9216-dd65236461b7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ba5849-deb5-46f5-97aa-90770bfbd6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5e7cd7-863c-4710-8356-01c62f243b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9701a883-16b2-4958-8870-b59ff4b710d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f4f325-7207-44c4-8d7d-6ed60f4b461e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1665ad3d-ffba-4e6e-9587-d3210dd8dea7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cde280d-a971-482d-80b8-440f665b63df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1893841-e8e3-4182-bc64-31671d9704d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8b14e8-d726-4807-9e0e-2d94f72a2642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99b60f6-4e25-4268-a20b-c94d8413fa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cf5b55-3497-4b7a-95e8-a03c874c38d1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d333d163-0029-4c9b-b95c-2e831955fa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7778022f-ae34-4815-b5c2-22d2145c5609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b390099a-9c57-42f8-afe2-9ce00440b882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9892ba9e-0648-441a-bad1-d44a2d9c29fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e353760-03cc-41e4-9a74-9545c263cfcc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8197a0b-41c8-4d0d-bec8-f6e136f37587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9a9469-b979-4156-b7bf-febbe285da06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fd0351-f27e-4f3e-841a-fc8b923a86d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5f6e01-bde0-4bbe-84b5-3970a995fd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905278cd-962c-4766-b3a7-869cf6845595",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321887da-4cd5-4077-9e2a-69ced5a9fcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4237c93-6f67-497f-b3cc-320d60f7d30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65b061d-abe0-4b79-bb05-1784c151865a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "608e7b08-fcf3-4e56-8ae3-ebefddd7c92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cb0d8c-0427-4156-a5fd-1c5568f06826",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4bc4e-0a44-4a4c-9acc-b7be09dfcc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314203d2-faa0-430c-804e-ee34798c7c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214d6a4b-2479-43cc-a169-c3e96f26d848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8128e376-0c45-41f8-8847-a349aa9557d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b67c2fdc-f10a-4c5d-9d70-0a456453cc74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67b3bc23-dc98-42c9-a52e-219f206c1d76",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdd11fd-2504-41e4-8463-5f5185d23d16",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6e917ad3-0e2e-4596-b740-383640c42692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04c965d-e9cc-48c0-93fd-436e48592e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d782c1a-3ddb-4508-817e-a1108b153746"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0634fc0-0bac-4501-9b96-610acc5172b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "897fac09-a562-400c-8f94-d096eb4a6d3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e9d4fa3-6502-46bc-be10-d2ed1017e5b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2724887c-2496-4c2c-9e2b-298675b81504"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fa514bc-aeea-4c9d-963b-20a2f0c6dc9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e145c0cb-96ae-4de7-ba4b-3a8ddb7941af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5ba01e4-b816-4df5-b65c-99128869e6d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daf7ec0b-ad19-412e-8ed1-988bc04cf909"
            }
          }
        ]
      },
      {
        "id": "66edfda6-1d8e-4e57-94f9-6cb4c28bd4bc",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7eebf892-30e2-4da9-8260-099077012fcd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "433a4f7f-8b4a-4cfe-b4f5-b76d9830479d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6dea643a-4dbe-44a1-9290-2100bd6d2c2d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed0d3e9-75c5-469f-907f-094ee82e9756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e30ad21-b7b1-4623-85e6-98a3f8046b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dc428a-22af-4b09-8826-3c88b9483e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f518c8-e0b6-43af-8c30-1e4baf704529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519f8d9a-0e50-497f-a200-262f114b7881",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e6afde-0d7b-481a-b50c-0bc5634b503b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281a4581-b08a-49ce-acfc-2243885812eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56d7abe-eed3-48a2-b353-a7811ac46392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84b0c6f3-d309-460b-9a09-97c5f86fc5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4ee61e-a546-4f29-b773-524a95a76120",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a27059-c40c-481e-8b95-a71f2a853725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ffeccf-64f1-4501-a37d-7cb8f8af368b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b40ca2d-b8bc-4812-968f-121cc6056723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f2f8c8-bfa0-419e-8ced-6b8095cdf8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f7a00b-b9cd-4ceb-a6e6-169b47af609b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba45929-21c2-4c9d-8345-72493fc3eaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9678a69-3202-4477-b8f3-a8992c0b4d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cbf5d8-774f-45f0-b75a-0d183cf716c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8755e49-510a-4d77-9682-bbace9d07f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d95abbd-ebb2-4e00-894d-fdd346de0af2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a8053a-0dbe-4b40-906c-eb044ca04e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483c4857-dd63-45f7-8c58-1e63b2753eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce908e74-fa7d-421f-ac75-b29c9e2a1be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd437652-1725-4783-8cd0-5990ef0d904b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aac17aa-22cf-4d8a-b390-636064eebd1d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7861c77-ef9d-4421-8e7c-5c9d62e7bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749942d1-9b47-4302-b527-0308fec6c928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f47771-400f-4edc-a670-889ab0f45422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "afe1ca01-13c2-46a1-84e3-4bf4b4a5f3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3971a7eb-3025-4928-8ee1-5bfb6d23d7b7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6e46e1-c260-48be-9d04-823737b947f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4842ef-eb16-4dbb-9303-4ed57c60d34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1d722a-ef6b-4251-869a-284cf46b268c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "571cbcf1-2e9a-4a56-b1f0-c8bac5e0c4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1a5896-5835-431c-bf59-cb47f58ef92f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02582af2-d666-41a8-b540-df4e6ab892ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bff718-19d1-48fd-a18e-e5d6d43359bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb69a2ad-d57d-45e4-9880-4e793c5a6d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc73fcca-7874-40d7-9ae2-47c665f4e54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f58376-701a-4c96-9f42-ddd7e574b4c8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582d31f3-66a4-43b5-84a2-3cc42910b7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf942802-5438-4de5-9dc3-2460ed0f2c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f462ce7-4ea3-4e0b-9f59-cbd7760eb0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cce064ac-2fe2-4079-a43d-a98e70613e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86514f1c-fe8f-44f9-b4cf-466387c2445a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ba8e26-1c06-444d-bfd1-4168fa1cf135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7ac306-1017-47cd-9ab5-6fe1825d6550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2b975c-a9e4-462c-b9fb-1b35c179e3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cd8a4e-bac6-46b2-a6fd-785f039474aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ae33dd-83b6-4775-a849-e4fa3e79bc98",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3607cca-f627-426c-b26d-f475fec732f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5420efe4-7be8-482f-bb4f-6300fac3b9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97232b9d-8804-448d-8a83-acb7baf94582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "90934c15-8f03-44e5-bb13-97751684be43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3ee898-539d-4538-8918-574882bfa390",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e9ad38-564f-4207-9aba-12678d038f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b400aca-9ed4-4820-8acb-3cf0b132bb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7c3e4f-fbdc-4b1e-8fcb-482cd2a10ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57e5f428-5796-4e6d-8045-7ea19decc0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00047f7-87ee-4efb-91d5-f2c6fb36420b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe8fcd5-7719-4d36-be58-ca9573da5278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa939de-bab5-4c04-917e-c5eb37407904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5b0fb5-ac96-4aec-be75-b4cc245914d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "782488af-46b6-40f8-9c64-3fe586838123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a5cf6c-52fc-4400-945d-9955624e7a1b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608a2a75-b574-420c-873a-1913146426bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd09fff0-db70-4a7e-8df6-39b77185fa9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb3abb3-bcb9-412e-9e0f-76f634ab06c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "720177bd-bd2d-45f5-b1e9-48e4b37785b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16520a27-3789-4822-9676-6c1df479971c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21a3629-df07-49cb-b900-f1924deb77d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0624c8-894b-4c24-bf1e-25fd2e8cd6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691e7900-6e8b-4cfb-96e2-2f8157c3e45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d283b14c-7acf-42e0-9d22-a4bc943d724a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682dff73-6402-4699-a8e1-9f715a6f0847",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922e17de-0015-438f-9423-606ff19333f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffe5398-efc3-4757-8642-69e82079a91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1128fe1-3056-41fe-b255-903a60bd0c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "823dbd7b-86c1-4fdc-a462-9f861c9027f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d4cedc-257b-40bb-92b7-243ad5d9f540",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f7f232-a9ad-4101-8330-ba4b1a304c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c5d30c-abc6-4f23-9bf2-c96cd2915482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2441a9ba-fdca-4291-85fa-46e8916aa92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "068e21d4-e797-499b-bdb8-f3600cffe8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01eaf086-a1d2-47d2-b1bf-9febfedcdd93",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60bc56d-c8bb-4b2c-b618-59c9da65a4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a6a2bf-f680-44a3-ac5e-7f421e0b9207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98568558-72ae-4a45-a683-8535f98830b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcaa8fa-aef0-471d-b416-f45db7737f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e88630-7c67-4c45-9537-a660089fd847",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c07975-79bd-4cb2-815e-13f76ee8af50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e594e741-c583-401c-879a-1fbece8f0f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3362c69-ed9b-4152-b4f3-26f3317b8d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2edcb7b-d1e5-4a8a-99d2-a3ffa0bc5d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d461ce-db78-40a5-9ef7-a004c85b44ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9be6652-0b41-453f-b9e9-8a3d16aab168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651646b5-5b6b-462c-85a4-66b927dc96e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1974348c-131f-409c-b49b-d3744d4c3b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd1ca98-d5e9-40d3-8ef6-b9ab5b03f1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8258137a-dbbb-4ee7-baa0-40bce23cc7a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51198e2f-71b8-4e2d-8bdc-733b4bd6faeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5ecead-c274-496b-8b10-2e6dbc04794a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c103e-bcde-46bd-9fdd-0253ffb4d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8db69d-0dc0-42b9-8945-c9adda88e81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70db6dc6-e9eb-4c73-9145-ec1a0d7c6406",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90ddbc9-5f4e-4705-9f53-944a66c2cb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0b76ca-7db9-489d-ac8f-1957e7ad38a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dfed25-1669-462c-84eb-15ec974e2bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f613e148-2d84-4fb7-a114-74248078f443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06ae338-3896-4a86-a18c-1bfc3defd570",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b119ea-2b66-4926-bcab-f72feacaf241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a421559b-65d3-4b1a-8a01-48e5499366d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79607cbf-8c9e-4653-a686-1964a29a3945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91e061e-6502-41cd-8a0b-67553b057066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613fbbe9-1993-4495-954f-88aa90a4c332",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e6252b-8fa8-4b5a-aec0-d0bd8a3ca3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d720ce6e-d869-4e01-94c8-92c079e677bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf42fa86-70f3-47f4-8c19-1fd8a35dd564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f75649-84dd-41c3-9a18-9badedea1506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645756c7-06eb-4a2e-90be-863d0b1d922f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df20cd3-961e-461c-aeb8-397076bdecac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d5faa8-68ee-409e-8004-7b108960c4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a026e96-aeef-457d-a94d-b47648fe5138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9224cc1-0938-42c2-abbf-658f5fd95712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377ec278-5b92-4907-905e-77f90c4f1688",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677204a-fc9f-4c32-bcd1-78011820d851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fa03b4-b330-47e8-b8a7-9f8531284fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156f8bc7-94c0-43c0-8e8b-d697561062fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b71dba6b-2cc1-417b-81ee-2ca72913ae39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a9175e-f82e-4368-aac5-ee55c075381b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce29957-4d2d-4644-835c-b6b02e8191e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43e4752-ea49-452c-aef5-f5895a19193a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e200cf7-7546-4a89-95bd-335104caeab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b4b993-8447-4696-b8f0-4e31256e9b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460572bf-00f6-4db6-af61-a57d389b5425",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863429fa-472b-4fd3-8a01-1d709052e217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aff3b65-16bc-4ebe-85fa-059bce6548c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b4f65-de75-4377-bb7d-0d7034d75b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b49476-e9ed-44ea-84b2-15fd8fc34d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1196aa74-016f-4ae7-aaad-66859f5aacad",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437dcc76-ec55-488a-ab4c-1de9b630c83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee5a213-0bd1-4206-bce5-7b862eb3d0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8430b72f-411f-437e-885f-8a6e71e1df9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa7a423-5b9a-4090-911e-7c31f6cd2345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6efe21a-4e0c-430b-80bb-b2a74005a730",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dffa2d-e6b8-4dfa-9353-a53f7124d94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671cb379-af11-4a75-9603-fec74f3a57e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c0b037-ae0c-49d0-8a35-6f23d4c841e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aef4060-8a32-4990-8472-ba12a969a2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0f891c-4610-4b92-88ca-644e19f9bde3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef1d80d-9dcc-43d5-b12b-db09cf569e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4711c58-6312-4ec6-bd9b-27e22d6e243d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cbad04-e141-48ea-8785-de0021fb24d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23a695e7-2a44-45f1-a3bf-6c633bac27b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb0051b-b55c-49e0-b8ed-e6c5358a4586",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56c8f6d-ef93-4b30-acff-12b0fc9c7312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb845dc-fd46-4494-b0bb-a856c9eed75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3860a674-8a2c-4018-b937-4223479e4cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b00895ae-6e00-46ec-9cce-0d005601274c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a43d1b-1642-4a12-8439-666c51c58a05",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef5d1a4-ce52-46f0-9ca7-cab8b8a54093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c613d13-2d66-4354-8402-dbeaabcc7653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4723046-c4a7-4abd-b16a-be32bf88872c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0021954-691a-4dbd-a5a6-8cb2ff0b21af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1346b45-5822-4004-b2f1-ac6abbb3fbcd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc634d85-39d3-4b3f-9c47-efb91b9f043a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ecfb447-7797-46ba-aee8-7aace9c5728a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a042237-e768-40d5-9479-eba4c84321d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48791018-d736-4561-ba55-501cc94239e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c788592a-b079-4e61-8eb8-4e4519ae00b9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398dade2-a87a-4930-8aa5-7c1abdd920b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2b3d7e-2799-439b-857a-d5e279605ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6f6fb5-3fb6-49bd-8b1c-e706bb366707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d010f5d-6062-455b-99ed-5d86875b232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b300f11-0b27-4462-8fd8-13f31a200382",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9e4302-c120-4894-bba9-ed9c62a96e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91ca31f-3403-4821-97b6-cf8e2301d11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9008ba7-28f6-4f16-9f70-29d493f876a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6250e2c2-faf9-4798-9920-84a309f54f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff701624-a27e-4eb0-96fb-b2b384660c90",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fbcd9d-0ef8-4dcd-b56b-5e18befcab0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d398b2-c22c-4672-9d28-4ee6d4a6e977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e09872b-6d57-46d3-80e4-ebaefd0f9105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c5a9da-14fa-4214-bd4e-c26e8353d1de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1f32d55-c5f8-43d8-9b24-e3e6a844e96b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c823d30d-8f64-44f5-9b1f-400fee0e096e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5367ad12-2c7f-43ea-9984-b531fd18986e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "11882968-1b78-43c3-9446-ac86dbd75129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c0cbd8-1d48-41d5-9e2a-a4c425bd9c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e51651b-777e-41a9-9b15-adb29b850abb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "841f6ac9-6835-4b62-a76d-0b99afcd48b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "212c8e71-c74b-4fe5-9d40-52524c7026b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8df766c-0e04-4453-824f-272aee69f389",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a3efc50-62a8-4146-aadb-ba55e872ada4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48eb96d4-aa91-45b4-8060-281b70dabe42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f69d9085-f7d5-44b6-acac-3394ef7df65b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7527f478-0150-4d17-9c75-35116025f479",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f454bf41-8b03-4bd6-a702-46c3301bacbc"
            }
          }
        ]
      },
      {
        "id": "8f3c9e96-ac18-4a55-8623-dea5df1d2526",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "59665bfe-cf85-4ef8-8de1-b43c32de13f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f4de841-5729-4860-98c0-412f97c57576",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2703f1ef-e18a-4686-90fc-eb62f570ef14",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8db11a-91a6-4ca1-a6f1-4218dbdc2dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34042f1-1dea-4080-a9ba-70cac6304510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c4979b-04c4-4c38-a836-9148eb19af28",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e1231-50cb-4189-96e0-fc54004b28ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c83090-036b-41ac-b872-b88806535e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9fb64c-8076-4529-8dc4-cdad1cabffb3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5a7633-ca6b-463f-b00e-668dbc9fed7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01872b6f-7965-4ab9-a7b5-006c3fa19191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce171b1-76de-4ffa-9ce8-221f4a2756a7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccf768d-e937-47a0-8b5d-9907e61f85f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e72920-d07f-48a9-9c07-404456c3ffea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5333c61-62a3-454c-a492-60c9980ce3d2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f235a14e-eae4-4b1d-9f6b-4a164dde6d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2e6bd9-37bf-47fb-9a71-60d7e2f7d395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22f74a5-7ac5-447a-99ae-52cdf9b7db61",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7983c5-c6e3-4cb5-a0f6-f0aa9fb9d668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd68bdf-b179-4dd8-b9d2-ea110558f1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d82882-04eb-4cd4-a5bf-317d9da3a8ed",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3167e049-7702-4475-a654-f3e8d774a36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3d11bb-7797-4582-a727-10c2e015a9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a348c2-4e93-4f5d-a7c7-80ce4c162690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4029faba-fbb0-4b03-8f6a-db7654266458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ccf1ad-36a6-4684-ac0d-bc649ced45bc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2c27aa-0290-4431-89a9-8f497e5b45a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee011da9-1bcc-4380-b448-ca809192663d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4cacc0-87f9-4d1a-93fb-2e5ebd31e5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ee264f-860d-4fb5-87e7-58f5c42b13f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4e7ba8-12f6-4b95-af29-ba4585778b97",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3169978-6dce-4a60-9dba-386cef34b829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83564f75-0690-4782-a4dc-50b14c28fa75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1f4455-7518-44c6-88fa-f614d1c77d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b42f0a-1e0d-4728-b523-b7e2d3c0bd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5213795f-1e19-47cc-a313-29c08127de5d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b626287e-6fae-48b9-8525-650059cd7365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64ccee5-6486-45cd-87ed-414540762b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea969a9b-486e-4647-933e-6a2dcf3ee76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23354925-b547-476b-931c-b04a7745b1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaaf604-dbf0-46b9-8c30-b158e589ccd1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac5afaf-105e-4461-b3a1-b92e1b011f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dccb28-4432-436b-a47e-c3f8f51c6581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a2fa2a-096a-4e5b-8ba0-cdcc99819bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece4ab6b-bf2e-457b-8279-a5b0430b892a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6995455e-2e3a-4a56-b5b3-fef297b32419",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ac6d24-986c-419d-9726-1e059741d98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4879942c-7271-49fb-ab84-5dcbe4d705c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caf34b1-d9b8-48ff-b3ea-4f98f7a9a069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f5015-adfb-4ec7-a788-12e1f9a65cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6290c404-2dde-4749-ae6b-a2731c625ce3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed6df1-5a3c-4b7c-a1ff-5c5cc37d4f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27036564-f217-4d79-938f-4b3080cc1033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1851add-2a6a-4daa-9b8c-434a4b6c32f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08f5c44-ac49-4938-bd78-919abe6dafe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188caa94-2d79-4aef-b7a9-71f420618fad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff5c011-d8d4-451f-a8d6-9cad69b26a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82dc4471-692e-4d22-8f2a-e5a6e68db9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e401363d-10a7-4a0d-90e8-dfc19444b422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1047704a-b9d1-452f-8d11-a196f47b2833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec773a7-3dcf-4430-b291-ec4f83c6eca5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b454bed-3cdb-48ba-8fba-d3ed901d5789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3d8e6e-2f81-4fc5-9ce9-56367a5c9a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bf9dfe-9303-4e47-8c1b-74811f9e42e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912a0f63-3564-48ce-ae4f-e51295c08b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f6504-9ddc-41d2-bc42-b370b9c6eba3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01bce73-b906-46b4-bad7-0b15977ceb53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e383790-5919-416a-b43f-49c2583f9c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80fce39-6056-40bb-8942-134579635123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad92aab-1c8a-4217-bb71-b85f6bc1247b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8156f42f-8225-4cfc-a1e6-4eb24f3d7392",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5724bc3-625a-46a5-8128-cf4805e94514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3aa4a4-c394-48e2-8112-42f644679db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bf3537-d9db-4205-98ee-92b36f134303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b491aa7e-46d7-4be3-ad3e-2a6f4d91bd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ef57ad-0333-46c8-abcb-b3d9aea69f7d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bdf649-a6b7-438d-9aea-8570e3b3801d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d79e6d6-94e8-441f-a5fa-a01a2668083c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fff736-c7f2-43b8-986a-02b4c5311514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8405e9b-79f6-4874-95e6-590d70f34a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcfa7b-00fa-40e6-8e47-61a968d0801e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9073f765-b26b-4851-a480-a76d45f416a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b3f0dc-0807-4e5b-9f9b-861148ce88de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92008a38-4ee8-4d49-a04c-87543e6b4bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823ce7a9-a36e-4b27-b0a3-25caaad47de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615d0d6a-9308-4118-81da-325055aa2e41",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3870f368-e7a9-4a8f-9304-fb05d64219ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5c2999-3b12-4af3-ba06-3c76f791b5c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5361576-dbbf-442e-869f-4e36de00c06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69f2dbc-575e-4f60-abfc-94b769146e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebfd64d-84cb-4a2e-9e41-257b51439d3b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46418ffb-574d-45df-80ba-7e65059da177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87203b1d-287b-4efd-b19f-2d12f1fbe135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6ee8b8-2672-46c6-850b-5a01e69c8da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132e3e39-0839-48b2-bef8-5652bbf819fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f285f2d0-ae6e-446c-9434-eb4ee15e7050",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9198f3fb-99ff-47f5-8b2d-9120a831809f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f501e8-bb0d-4d3e-be0e-f1b41b248b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8ae04c-16dd-4b56-a7b8-3bf005b0b9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5329db9-465a-4595-b4f3-15093c71dbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79430ae8-6a75-405b-95fc-edb570f7937d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc274066-d3d1-4508-b9be-cca6cb8dd2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbdd05d-bbae-46d8-a86e-5442431632d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a198ae1-3516-4f74-9ef9-d2a0ad287b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc29cd3-1826-43d8-acbf-5f65c9597276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c58341-b77e-49be-87c9-3eca5c497cfb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9883d94-38db-4833-a072-c1a388d33702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d3e2b1-02f6-498e-9312-990b47774ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bf9f30-34d2-4d1b-925b-5cb96be08e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1f383a-1639-4f9a-8fbd-4fc5bb965c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344b47ba-9c46-4eda-a119-5010ace95ecc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e854716-640a-45c2-843c-57bc29788a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "410caba7-d58e-4103-823b-ea57b8b32922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb0b105-c59f-42be-898d-48d60e2b1dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75513f1d-303a-4e7c-b8ce-2f2e1cca116d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1bf1c1-f3a3-4438-b5ae-ed917ae383ef",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a5a434-4470-43fa-b3a2-120e86b3c5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66542bcc-9b44-4e9b-b177-1ff4250395c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e5e65d-2864-4489-a4b5-29fe57991159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd966608-4977-411e-b549-ee27f714e110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b86e519-cc84-4a7b-acfa-21ece1446f42",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a9767d-c321-4ff5-8c7c-45b69744d593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebedfba8-63a1-47d3-b9b1-d84da588c109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9217f776-8cce-4f61-8b3b-82d0805f4fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b51e5dd-0304-41aa-91a1-2e21c9ca88f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad70f2f6-a0b8-4ea4-adfa-8564b54d47bb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b022bf-b064-4e7f-a8e2-d48da87e9c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdf4a7a-b1cc-4ef5-9b10-eccb27ae6a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715fad35-87af-4c2c-886a-f786b81de007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4194abd2-e20e-46d5-bd2b-0fa3ea102534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6cbda8-d183-416c-8e3c-2a8bcba38cab",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda6188f-7547-4924-a132-49c58fde773d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7edd343e-096b-4a3d-8ace-328596a52f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352c6ea3-be22-42d7-bfd1-b5b44585422c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3565f71-4140-4d4d-8b6c-6439a1fc9a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc10359-dd72-4f59-8a29-4c6cfb4ef80b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b83acf-43f0-46f7-85ad-5feba6ae4cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb6aef1-db36-4004-99e1-de3cd95df55f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef270f79-2072-4a5b-9442-c644108263b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26f7467-f344-4167-a3f5-bee7bd01beef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d46940-4ab5-4120-afd7-46ecb659f29b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f89566-56d6-4a0c-b3b4-f3125bde8f8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "699dae7e-d7b9-4b88-89ef-d63b17b047ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84b593d-3ef7-4974-8dc5-9a33b5bf2b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ffd797-f1ed-40fe-9ceb-b3ab93e76240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0922b050-1f59-442e-81bc-956299511225",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed10cd7-d1c4-45d3-8ed2-1888c73befef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8108c251-3446-4e63-9453-0cf2c90235b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30feadc-a53e-45f0-bf8e-92aeaf7eb5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c9e8f6-7896-47bb-a164-2fae26166ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b22d913-3d8f-458e-b97c-991f041bd311",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d73fbd3-67da-4df1-9a41-24e17c5bf8d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b047c16-1497-48fd-82e8-9c36edf2aa5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c9d0d6-e2e7-4bb2-841b-ce058e23a900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39bdf3fa-1b68-4890-b217-22031971d691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4b2379-ea76-4118-aabf-9bd0ebe56ba1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b4fd6e-f0e2-49b1-8b6b-ee141fc78013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0f391d-bba5-4ee0-ac99-dae7d36012e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be79275e-3576-4b3a-9b61-95bb4c9ddd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04afb3de-a88e-4441-902f-b061092c53d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b34155-2ae8-42e3-ab12-a30330b0ae05",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e35c2e9-3d96-40c9-b7ee-fae542027347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc9fa2d-3828-46a4-b8ca-704ace775b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5098b483-50cb-4cdc-afe4-de2a9a8c49e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0cfb1d-6fa1-41a1-b947-375b1c3facec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5cc5d0-a943-466f-8814-8ae7d59d86b1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3ea711-8052-480d-96af-91e6062b4384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec62e67-825a-4d73-9c43-6fed358056d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f9eca8-494a-427d-9100-b048384d12b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb115f4-5be8-44e2-aec3-ec72f1374d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da839b61-5717-44f4-8710-d561f24ea4f1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0526a4-d6f6-4dc7-8e4c-652e7808e518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e8cdbe-41c3-4d04-87f3-8722faa89633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1601a7-1860-4a62-91c9-4aa2245f5f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cb042d-8d1d-4372-92bd-79f86b9c53a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bff0cb-40b2-4a21-9e30-1f4c959bc3c1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2684eddb-6c4e-406f-86b8-bd119feba081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7967785-54d5-4dc9-b260-31e46006ca0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095f0f3c-fbb0-459c-9ec0-77b046e6e202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5592c3fe-9887-4eb2-97dd-a21689b45829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2d376a-485d-4b6c-8697-8344c6a766d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d38794b-754c-4385-9429-09eb18c750d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca29a269-5511-48e3-bb44-9fb2e04b55aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e65cb46-80c3-4731-b124-a6febd70968a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a6d5bf-0070-4aaa-934e-edbe8c366bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c6931-c6fc-46c0-a0c8-dfe2479dd7f9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e76142-5964-4b92-b0e8-7d19e35e0b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4b500c-b941-4dba-a05f-54c70c2139f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbba9e7-289a-4265-8154-68da60d51f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0f79aa-67dc-453d-8c78-79d237f413b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b616e7-a322-435d-b86c-1db288d7ae85",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a3afa0-63a1-47dc-98e6-d988bdcbb94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba520b31-f4f4-4ea1-a89c-8a891e8f61ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0a286d-6e9b-48bc-9c06-84b8a2677e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec28b7f-e99f-4feb-b0ef-d4546e75d0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb8647a-c9f8-45b6-96c9-241b034714d8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ce98a8-c000-456f-9359-457465e0f54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99e5b3e-d5c5-4e57-8e56-13f189e0c5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5fff48-53d0-48c1-82dc-968d597be843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955daabd-73a6-4f41-a06c-796fba44a316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8468a4-7c8e-464b-a687-270686c778ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92346403-e6c0-4289-a81a-27b42848aae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029c9daa-7a1b-4059-a347-a8af1d1f1d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b5a918-1931-4201-9f23-c37a1a3e21d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c601599f-fce6-47b8-9b99-adbbbbd167b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989055b7-869a-484e-935c-6347580e5641",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee91d74-b378-4bb8-8ea2-a34d83fa71dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d19702-dda5-4a78-a770-03e36d7aef26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2fd3e6-f3e3-46a8-a235-469e36116a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fa9c01-e707-4f3f-8060-42ab894d13e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f6d6a3-2331-4fcc-883e-dfaf6d40d07c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a61115d-2cce-4fac-91fd-3581d7350ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256199f5-20ba-4637-85b0-e16532602f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4b0407-8804-40de-92d1-3ec612bdbb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6835ba8a-8996-47a3-b2bc-a87d34206f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88da4a86-1a19-473f-b789-f797ceb883bd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a9972f-9421-44b5-8026-63a1385701a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faab144d-b72b-4a5a-98c6-b8bcd175606d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35388996-edac-433b-a52a-ba8e356023c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4ff7b3-49e9-443a-9f63-6e9656d8fd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c013b210-ca82-4c03-a45d-8232cc2ef585",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5696f914-c9f3-42e6-8f43-7ccc5c71fade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e28f05-8e9b-4f6f-b3cc-499b0945eb2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c514fb-b8b0-4a13-987d-810ef2743eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880ed097-53cf-48ea-9487-0106e94f6f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f85383-0e8d-49e1-b8f5-a3b24739a4a5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a61f99-1ed7-4bcc-8cdc-cd22bb161d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128513b8-60a2-4f60-8b4a-1ab6b28b8710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab2babd-c809-4c52-a97e-159a4e381c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c60e18-9106-45a5-b17c-5d6e62c0c178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f49007-b521-47fc-9051-bf9d019d11fc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a41f22-e1c2-4967-ab40-d0fd4bbcfdc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2459368-29fd-4f09-8a45-682d64fec6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7b72c0-08e2-4c63-b7eb-c7a4ada7879e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf76a3ac-bf68-4f7c-90f0-7ff0439c2770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee3ed28-d3c6-4e39-8c32-b147cd0fb9ab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c0812e-5239-43f9-846d-ff4d8599defc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d75692-d3fe-4dc7-ac90-3d5d5bf5f3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506fe60e-402a-4675-8931-ebf83e7db01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269937ad-2c82-4d64-9e95-af84797af441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a284f5-87d0-4997-912e-f46b216531a9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5f1847-f62c-43bf-898e-9d613ef67334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4faf5ce7-b235-45ce-a420-f3d58ece6c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1a096-d26d-46fd-be73-3c35ed5394f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92d056c-6deb-44d6-bf1f-88f6beb116d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e142561-d97b-4881-970d-7188760a6c84",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c65cf7-e42c-4465-bd0d-c610838c5c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4a76bf-3af1-4db3-91f2-425d8ffddd35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01400e0a-11fd-44ce-80e3-7a4baeee88a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55711051-5f64-4839-9b21-71972a1c949d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f03206-5e0d-460a-83af-7a4a4dc8b12b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94735e73-7817-409f-af2a-7d3d054cc121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f8e6a3-c56f-4666-9de3-529a3c77ba2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a59e42a-cd66-4d6a-a58e-8ae2575340c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376413c6-4ac0-49b6-99d5-1ad358121725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c728e3c4-4053-421b-91f0-8106a44fe6bd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67de4618-3029-462b-8cbd-4f9f90c9fe46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76300de2-e14c-4db7-b0aa-4df504067ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22f7761-1628-48e6-9133-e28693ace432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06715eff-3cbc-4727-9c0c-5b3d4f580d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d06360-f9e4-400d-9464-3395f588ebf3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa59952-e4d3-4d90-858c-4bc26bf7d8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bad2555-fa53-4a70-961c-494637825ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25edf3e-3702-4a22-83dc-166b0e9c6687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff12a21-e4db-4e95-93cf-416406a4edf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b469a8a9-c502-473d-9646-320f28912767",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd2f672-edf0-48a1-9e6a-03597d0c6578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36145fae-1b7c-4e33-b9ea-4fc087186991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd60127-0a0a-4ef4-b6d3-71fac0a96f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123eebac-86b9-461a-951a-397856317e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed436c9-fef8-43a8-82f0-97829f53d5dd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8a9f0f-13bf-4a26-a9b9-419bf00dee7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ff7563-dff3-48df-962b-eab3fddc44f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ecc663-737f-4632-bbb6-57623e5eaf9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859e8f85-65d2-4715-ad98-03245761856b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c518f46-bcce-436d-a4eb-9c6e0c139f04",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ac2a2c-f882-4247-9904-c41061c93d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d214bc-321d-4a41-a98f-63c95bef0650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbd26f5-7649-40ac-bef1-60bf13225bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84238c02-6ae4-4bf7-b062-a00dd432d76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfeebc66-f2c1-40ae-a68d-31d1955631b0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfb5cd5-b659-405d-a51b-6730ef7ddbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9cf3b5-dca2-422e-a381-47125f563241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afea5e0c-af1e-4f05-a783-125eedc1874e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c402993a-ef68-45c4-bca4-abede566ce79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d14f34-5851-4a2b-a5e5-e4c246f20265",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97fe401-e93e-4c96-b50f-f80d11f57a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd38806-274f-46f1-b65e-428bf8ab1914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaf5187-2b9a-4b0f-a2c6-2c3248fe9fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1259d77f-1f8f-4507-8869-169d9814fcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4341ac4-c0a9-46c4-af4b-9faa8c273f16",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10e5e2d-cacc-4e68-b16d-2941fa809ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718e6b83-99fd-43e4-9f08-6e5dde31a830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ecb3b3-ceea-4e16-9e2e-5d2d7a3b05d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b779bb-0dc1-4f5d-bdb4-1b7f6ff0d9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098bc7a0-1c8e-4dc5-ace2-3bd775996282",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a0c82-6cea-4836-a15c-54bc1ef20b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdab55e4-2610-4efc-9004-69f4c8a7f8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc4bae8-e87c-4ab6-8abf-08ae3f154b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abb7ed7-1895-47f4-8269-4919bac1714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34dcb85d-d97a-4fb3-8385-887ec6a22450",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd42b28-5dc4-4704-ac46-6c67093b067f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86640158-c965-4713-afd0-2c0c459f0e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3289dec4-5cbe-4d5a-b56c-121a693f470c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1004e5e8-4f87-4826-afad-541e0f160bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1feff16-5478-481f-95f4-1de095766b34",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d74c0e-6056-4b5e-ad69-c98a2aeaa320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafa1beb-0838-4761-bb73-51cf06d829c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c938d3e-f525-404e-a3bd-35756ee0c500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2ef919-bac8-4b20-96b7-a79684149136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762fd1af-d586-4091-80bf-ae5a12ebcbfc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4188ee-df95-4cd4-9745-5d70cb6dd94e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3cc114e-c2e8-43a3-8597-88ae95f69702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0658e9c5-48b7-4744-8a8b-e3f61aa7261d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c458da-eaea-47ea-83a7-befb1bb7a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b445e1d-b422-4529-b32c-ffc33b7962eb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4146a5f0-75c4-4996-a230-350a0cb4d438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bc4bd5-fa98-42f8-861c-02316b7c7c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb390e9-fff1-4ac7-ac84-abed2f4f0ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9366a6-bb08-4ccb-8b90-099a40888191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600b67e1-032f-42f0-a47a-6697929629b4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b0a584-4697-4064-bb68-cacf620cb7df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5eb4dd-a007-4d36-a72a-99026321c802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a551aa-9f91-4ad5-95b0-2490329e73eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2edd1d3-5bc7-4093-bab6-272b9256116b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6de02a-8d4b-4d1f-96f4-f93b198b1434",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92abc955-514f-48ec-972f-25081db9684e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75f6253-525a-4362-9c4a-a56f06729ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85f653d-4596-42aa-b8f0-340308ebcbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b91e14b-b70c-4a78-9c7f-5c678c052c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e63373-4262-45d8-9c7d-43798cb88433",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576086fe-0a26-4f5e-b6ad-c9b0d072dcca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ff1605-5c87-4473-ac83-09a924c4620e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b55dd3-06ad-4c2d-ae13-5825e9760d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ca3c47-a026-4201-87d9-e87572c9ead4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d794cf73-f320-4d4c-870e-48a9cfaa9e25",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b41f616-dfbe-4a4f-88b1-64953c481d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34127d49-f77d-4d68-95ea-cfc346e4602d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aea37a-f47f-4199-a8ce-c2e6f2b56134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaed9841-edab-4ef5-b267-e978e11653e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4bfcd7-5009-4a16-a5a1-67ae5ca4d101",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bd2800-c2f8-4a0e-94d8-841d3cd65546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01dd5b14-6ca6-4845-b8c9-9fd58ea08282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdff745-ecdf-4485-8c65-b826c618c348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2087fd4-1a01-4c93-a269-928e309ce1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45261c2e-d86a-41da-92b3-aa775dddfb0f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e9080-5743-412e-ba62-b56a799b754c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d7e85e-dfa0-43dd-b165-abd854b96b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc178d18-89cb-4db6-b2c4-45b6e7c95c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd522066-735e-4f16-974d-70d95d150b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4343df7-1278-41d4-abfc-f56a0d317a90",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212ac0aa-1113-4d3d-bdf6-5f0056244fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf42c17-ae69-4651-ad54-1ff583855fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f217d619-2429-4dc8-9aea-4a44e6ef9304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b871e6a-0d7c-4bd0-8357-4d637f03c1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2c3652-e1ce-4c71-9e93-76c02f82252d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5947a0ea-2ea8-4cea-944e-17baaf3c09ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "059caae9-6f51-42f3-b4f6-ed1f035e3318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cced687-a41d-4382-90f1-0fa8db1e3361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c441891-99f1-46da-b47b-54d973c7f861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa59899-4c48-4f3c-b5e7-6c677a908bbb",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b297ce-68f6-4d2d-b08f-5ac4f0784e85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c514c43-9bb6-459a-acb8-27ab668ddf4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077ab9fc-4485-4b2b-82ef-56b171ae2968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689f9230-9cda-4f44-b74a-fab2bf1c26da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c779f11-1923-4e0b-a840-924ae7aa51de",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417906c-ccbe-4655-98f8-fb41b860c315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5e3c1d-892d-4563-a524-5540dad37e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd52120e-b5d0-444d-9654-97d6480a1ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958f19b1-94b8-4cbb-a94e-9238f8e298ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5720e7e6-27ac-4c2b-8748-b29c58f69059",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fae1b3-8bef-4e16-bfa1-366887add780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c21afc2-0745-4554-9e6d-34df11ce01b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cab55d6-5d03-4989-a89b-8b8274c13c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cf0b41-a503-4e8f-a295-ed581c0f9f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b7a49a-44f4-4b1c-9371-e13054c22b3d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986da6b1-27d5-4b0a-9fb1-b0950ca2337d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca239498-e4eb-463b-bce7-36b064623ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d30feb9-0757-4b5a-a4c2-da70193d8ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62784690-848d-442f-b181-9f35c87ff280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887fa895-b2d8-4969-aefa-df3b20f6fc17",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37d6bcd-e3f7-4c43-a24b-a1277fb08348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023540c2-585e-488c-84e7-5dfc29bc37f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da320aa1-f097-4061-8575-0b2d7911987f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24626873-8ce8-4673-b772-0e5a97ef1b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5e5fc4-2ece-4d7c-93e2-d1f083dfd7c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b2f00a-6d94-4d7c-8a60-47e88d0ca6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd65a32c-7156-4402-858c-57e2d862db8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f003b3-a086-4b1b-ab86-f7fcebffc6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829fa848-6a49-4c41-852f-6ad248272a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e927484-8d5c-43a9-b451-0d6c7479b2e1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3565fe03-2f8b-4a0a-9a30-e55407d7c1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce88f72-0bdd-4599-90d8-eb370f5cb483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81eb30c-1ad9-41bb-8e64-21992ea3caea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04474038-cc6c-4375-91db-2e24c11de5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01abed77-e113-4206-ba80-81b84ce4e155",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd3286-d48a-4ca2-b606-8f438918823b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5cd9e37-4636-454f-bde3-d383028dabcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdc5695-6ef0-4118-b1d3-301df127c8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3f36eb-3884-40e0-81ea-e9e4f9c4b6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509ea547-f056-411f-bd5b-468589f37892",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac11441-42b3-48f2-9678-bbe46a06ae05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38b90ad-0d76-41e4-a9d4-572be9bf8233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1a94f8-5317-4b3b-9d6a-8ff849f9ad8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "166d4fc7-5554-4124-a719-30428941254b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5e7bc8-c665-4342-a134-368e39ec39c9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71c4dea-36ff-4168-846e-2318dac96843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41efebbf-48e8-42d5-8456-e6cd6685ede9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaab534f-b5d1-43dd-b677-589327e64c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b61ff3a-16b4-48e3-a0dd-1636231ab5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02c3460-a317-45e2-b4bc-9c833d49c05d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc583a0-6ebc-44c9-9958-52b9edc8fe2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aea0768-7883-44aa-a9f6-29c3101f2cee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a07800-af4f-4859-9f7f-a60a4127c806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7eb2081-6170-4c93-95a3-f8d8c6cb4b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6308ee39-7f41-4383-a31b-5c909ac220f6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cd18dc-e050-4e11-bc13-e0243a1d5ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5df40d-1b4f-45d5-b3c3-08136df9514b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed43fcf-f9de-445c-8e47-aa3a72a530f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d094c9b3-47d2-46fe-951a-92aa79c3637d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92978d62-43ee-4e27-b8bc-b8ce915e5635",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4873789b-8322-4cfc-b30a-a8883f7ce6e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b09840-ee29-4e83-8eec-b642875e1dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c43abc-545e-4b28-89ab-c5ae86616f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48878f9c-175f-46e3-9501-4480fd1f0554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea202878-be64-40c7-8ef1-91c4027f2064",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57286180-24fc-4ad9-98ec-8de9856c00d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a15781d9-d813-4687-87dc-a580ea6761cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034199aa-44be-4673-9b30-bccf81917d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78b0acf-d333-4da9-8353-3c175d058e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad1a94a-05be-4cc9-a3fe-d84624477fc2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d8ffbe-c680-4992-a1ac-c0189d715c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ea2fa04-f310-4bb8-89a8-0db40d40b3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efae77ed-9db1-4ad3-9b47-10a25f46d133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91f2f21-07ce-4f13-a742-2f19357f87fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0126c9f-fee3-43d5-b98f-ed8ad5e628eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e37a7d0-e7ea-4a36-a614-a7ffb8d5cfdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d83c644-93aa-4ab8-8df0-637f65d6e696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d123e9f8-8173-483e-9223-39b5e85337d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edce6085-a8a7-4c7d-a207-251d053a1132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c76009c-a42d-4ef6-9fe4-a1844389e395",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce094cd1-34cf-450f-8615-c7406a78ac04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645630ef-3aae-4a32-91dd-49001837f9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e463b65b-0cfd-4179-8163-193807f143d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c1b045-0884-46a2-991b-face871793ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4ae72b-0dc4-4219-83bf-e40f98944102",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47356b7e-1f8b-4230-aac4-c7c5c1d640f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d8415a-613c-419c-8a99-2fff66a04cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed10ef3-5788-46ec-89c4-d538854f363a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861ccc8d-11e7-460a-9175-fedddae9c474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192654ef-48d2-4c1d-9df3-ef28a52d8746",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00029a55-217a-4a15-833c-a9b664f862de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63173556-10ce-4d20-8f4f-768d61539a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b9e3b9-c42c-4e6c-a928-c6506794ae94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b9f8ca-e69a-4a82-8615-012cead8b7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3010aa99-f689-43f0-ab70-4f3ee277d31b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed37d2d-0241-4487-9ead-968c8fe69fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c6629ef-e593-41e5-98a9-77e3a03c47ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e2aab9-0320-4bf8-923c-d2f93bc07400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b248b23d-6162-471d-a09d-e5d6b442d20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76500c51-7c2f-4c58-8656-a77e6bd43b34",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b9eee8-f602-4c7f-ad5a-01d6ff628f9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "943919ab-c422-4a4e-8075-cad6230a8ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6005216e-76aa-4b0b-9a3b-2137d12856bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2daa42-1835-4028-8d02-7ba02317e3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca25b7d4-4765-4864-baab-0f6e26a81264",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de79837-f9ef-462c-904e-67de19cd3301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b29d22-d3c6-44b6-860f-003e9da5d10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0c33e1-ff73-4ae0-873f-856799e35da4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad57c0ef-ab63-47a2-943f-91a890c9880f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d5bf37-8a95-475c-95e3-72c5ec750ce8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca5067c-eb3a-47aa-8dd9-90bd17aabf99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c1e381-9440-4f38-8219-32f2be9cc2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cb1fb4-4266-49e9-9672-cdc983268ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b745695-f110-461c-8f05-46f49a979387"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ffc37c5-cd61-4930-82dc-5590af636f0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b6117fa-5a45-4655-b378-fdae9c464b52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a62dc523-7c16-4caf-9b4d-018cf706a7fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "093313c2-eadd-444b-940a-210a866bce10"
                    }
                  }
                ]
              },
              {
                "id": "a679ae8b-caec-40de-99bb-53c6ab336b11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61a5c6a3-95ab-456e-93df-169b62a20d0b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d940569-5c44-4d5d-ad89-914ab1d025bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a712e6b5-a091-4595-b3da-6cfb86fa29b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cda8119-b17a-46e5-b52f-5b6641587b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d14e7545-4093-454e-b50e-121a80ad9b0a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "245550d3-a0df-46a1-8fdd-56959b2e1809",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bec3653-0138-4e60-8055-60a14b357837"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab9fc108-7f0c-4acb-8340-721141516215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db419a40-9b36-4c46-a3c9-37496ea7c733"
                    }
                  }
                ]
              },
              {
                "id": "a37cf9d0-87e9-4452-a61e-6b1aee70f97d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2f62854a-d6c7-4f2c-a0ec-627efd656a15",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728390cf-d463-4727-94da-dcfac648525d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bee6c8fb-1919-458e-a92c-c98ac1c80439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75512af8-bb5c-47f0-80c2-c1443f71b8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205a5b19-ed96-4775-9e3c-50820c3d8ded"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b83fea8c-0173-47c9-9303-ad8f2793812d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c0e405fc-ca1b-445c-9ea6-343e2af3160d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47f5e07b-f070-41ae-b446-1eacd54c23fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1d46b41c-9e65-41c7-8755-b4dc1149efbc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c3f5f62-7ef5-4a36-beb3-b0153ab788db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d78e63c5-8533-4a59-bfe9-375a35f9d109"
                    }
                  }
                ]
              },
              {
                "id": "d25d1184-e3a9-47af-9aca-d28a6d2d86e8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c435dec-61b8-4207-a24a-c3e828e97e1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69bb6c1d-ff7c-4f69-a27b-e0538fda2b89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae390c0a-26c3-433f-b87f-90b2e87dd306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4972dd1b-11ab-41d9-8e99-4e3ac3bb67a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "603738d4-8ad2-4e71-889a-7c33741eff92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "edc23198-9ea8-4aee-9e84-cac71152c565"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4193d4da-c317-40ce-9d76-c5b492bb5f5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b6e6859-34dc-4c26-aa85-9666e001735d"
            }
          }
        ]
      },
      {
        "id": "cda1d04f-1e74-413a-86af-7c132bf4bd1f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "81027314-e6f5-4a23-8653-f00c9e9cee2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a96d68ae-05d1-4cc4-8e67-6f3e7e21163b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "451475d1-1a22-4bd2-94f8-ccd775b97653",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d32141-ab09-4bdc-bcb3-ea3afde69465",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae0129c9-a2fb-4c8f-b571-a06d5d47c29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cff793-343d-4d5c-87e8-4e90c8becff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c794f3f7-5908-4b82-b2fe-375de681f9aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4266b10-960f-4d2d-b04c-713e5e785665",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75c6d919-9654-4456-ab8b-13b3700c2f67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9e3d338-6175-4403-96ab-a61b0025fdb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c16c73f-d7bb-46c9-930a-0b38ecc250ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bae3dfb-95ca-4da9-bbb9-6c82aceb344e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "deaad96d-ceea-40bb-ba0d-c99f616a871d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cea380f7-b0ee-42c3-9484-88aee0d55b5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16815eec-0f2e-4fc4-8f58-e43dc8adfa66"
            }
          }
        ]
      },
      {
        "id": "e568ca6d-83d5-411b-8bed-0687e5b992bb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "90fee884-254d-455c-8f5d-cfb005e31267",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25ff41d8-ce6a-40d3-aeb3-a4b8bacb8f38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a684161-7ae1-4691-b9df-d4108f48da0c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71773e39-c5b1-4894-bb56-a4a4e383920b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b25a69-e29f-46fa-bad2-b9a12e0c7324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c545b2-e0e6-4bbe-be7b-e2af76522188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb969fc4-d077-4d67-8f4c-4fe84b798527"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77e95f4c-51d0-4120-ba5a-0ede37fa2433",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1210ef9f-346e-4691-b6cd-c488480b9585"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bad33947-cc90-4abf-8fcb-86c9f79b164e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b97a4fcb-eaf8-4e42-9d7b-b9521cd5a73d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f89b3b6-6a77-4248-92bc-d35146a57a46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72ca3832-2571-4c78-ac7a-9047411d4c25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee1b0e14-07c0-4dc2-bf5f-4da0a369fec1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec16f02a-fa89-49dc-9192-f1150df14582"
            }
          }
        ]
      },
      {
        "id": "65ee2259-dcee-4fdf-baa3-2815ded78b84",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e081dfee-27b5-4ab9-bb11-105834f9eb39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e058651b-e5f2-4db9-9e2e-9d62b6415af6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14fcdb26-0385-4ba2-9088-c479031ee2a3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a72b35a-d78a-4e7b-845d-b1e2ca7f0ebb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8a48072-7a29-41a8-8851-ae7bd27505e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e72b59-cdf1-4d09-b074-1d0f84d2f31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "447c07df-e022-46bf-a27a-fcf29a75c7a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9d397a3-cbf5-45bd-97d3-71caeba7cf3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4f5e272-fa51-4b4a-b6cc-3d4bbe849345"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36ffd4e-7995-41aa-b3f8-95a03899d33f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7caf491e-f282-479d-8c14-63a4e78ed544"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6506039d-0f04-4479-aa20-8e489a1d4c23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4c8bd0f8-8c70-4de0-911c-d7a09d0c6eed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "933dc7e4-2ca1-43ab-9914-4741a8fe9f03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81384f38-afbc-45d0-90a7-5f6dc128e486"
            }
          }
        ]
      },
      {
        "id": "51c0955a-d9a3-4301-a973-fc37ec1ad728",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb29cbf9-ae1f-40de-ba53-e49c60bef3ad",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e29cade4-c665-401c-8124-20986f0f4060",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0f7d8b85-7708-491b-905b-65202b150e05",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "185404d0-b53e-48db-8f15-a64efdbf5d3b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "118caf93-b5e0-4ae6-b6ef-be73f83f24ea",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.68070175438604,
      "responseMin": 6,
      "responseMax": 686,
      "responseSd": 88.68429999821964,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707179623870,
      "completed": 1707179653161
    },
    "executions": [
      {
        "id": "6235ec8c-e35d-4f6d-9360-359f5cd148e7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c0169940-f54a-4aa4-b5cd-07ca165ab8e8",
          "httpRequestId": "fe14d6b4-371b-469a-879a-d0bc990bcd38"
        },
        "item": {
          "id": "6235ec8c-e35d-4f6d-9360-359f5cd148e7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "305dfc13-07fe-4edd-bead-d8bcddd900f9",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "3e9bb57d-bdea-493b-8467-4b46363564b1",
        "cursor": {
          "ref": "d7948736-22ae-465c-ab53-453f2ae8c5ae",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4030cc2f-9ec4-472e-8fd2-cda9c59dafd5"
        },
        "item": {
          "id": "3e9bb57d-bdea-493b-8467-4b46363564b1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "237da70f-77be-46ef-88ce-fc18fffcf9ab",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "3b88caed-fdbd-4006-87f6-7196dbdfd93b",
        "cursor": {
          "ref": "58498c3e-9c78-4b04-985c-c9223ece50a7",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5e1f547a-dc0c-4ad7-82e6-c508b5e6a182"
        },
        "item": {
          "id": "3b88caed-fdbd-4006-87f6-7196dbdfd93b",
          "name": "did_json"
        },
        "response": {
          "id": "6a42ae78-c66a-40d7-a24a-97dafd0b9dc3",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be91197-8697-44ee-ae8a-71fda3248b86",
        "cursor": {
          "ref": "65b8cb16-18d9-41d8-96af-a4952c539133",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cb58147-8fe8-40ad-9b11-793ec8a19d22"
        },
        "item": {
          "id": "3be91197-8697-44ee-ae8a-71fda3248b86",
          "name": "did:invalid"
        },
        "response": {
          "id": "cefceb64-e07b-4f66-85c7-bcdd8e07852b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be91197-8697-44ee-ae8a-71fda3248b86",
        "cursor": {
          "ref": "65b8cb16-18d9-41d8-96af-a4952c539133",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6cb58147-8fe8-40ad-9b11-793ec8a19d22"
        },
        "item": {
          "id": "3be91197-8697-44ee-ae8a-71fda3248b86",
          "name": "did:invalid"
        },
        "response": {
          "id": "cefceb64-e07b-4f66-85c7-bcdd8e07852b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2413a8-d26b-460b-8696-9093caf437f2",
        "cursor": {
          "ref": "f47bdcda-9817-43ae-aef0-d7cfb0ec963e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "97726f16-4ef5-49fc-a8f7-7963b47726ef"
        },
        "item": {
          "id": "df2413a8-d26b-460b-8696-9093caf437f2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b82284b0-2664-4722-9ee9-f14289f7dd02",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03036ef4-ccce-4704-8b36-324b19abb6e9",
        "cursor": {
          "ref": "8ab648ad-dcf7-4aed-a4a3-a5f414cdb7e7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75454f44-cc92-4560-8bce-1d45a9301c4d"
        },
        "item": {
          "id": "03036ef4-ccce-4704-8b36-324b19abb6e9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e3726c64-eab8-4f54-9bfd-f3312f8fa474",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10ebbb0-6430-426c-8bc4-6f82aec89a68",
        "cursor": {
          "ref": "8abf4897-9d8d-4570-98a5-de18f5b74f81",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "10acb8c2-35a6-4f2a-92a6-1d7995940e09"
        },
        "item": {
          "id": "b10ebbb0-6430-426c-8bc4-6f82aec89a68",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "60a6df3a-3762-4d84-a2da-a2b20dde5484",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6be754-50c0-4f23-ba98-f236ab434f57",
        "cursor": {
          "ref": "2167bb93-3f80-49af-b5f5-0617ad874943",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cb11931b-5a56-47c1-b6fc-a1967e14a627"
        },
        "item": {
          "id": "2d6be754-50c0-4f23-ba98-f236ab434f57",
          "name": "identifiers"
        },
        "response": {
          "id": "99b6e99e-3673-401e-8475-791b4fb27dd4",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e531af4-1325-4230-b426-f852708defd4",
        "cursor": {
          "ref": "f7330af0-6652-440c-bf6a-0667085079d7",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4318efad-0e33-42ed-bc62-2c59eaf10278"
        },
        "item": {
          "id": "4e531af4-1325-4230-b426-f852708defd4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "84598a88-7a3f-4bab-8b0f-131d68d52464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f73eff3-de1f-44bb-8c39-e314e61d3d42",
        "cursor": {
          "ref": "7a23c7c8-bd31-4275-9a77-e5ccd6f4bbb4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "818f29aa-c653-41d7-93d3-18ecf4ef2493"
        },
        "item": {
          "id": "0f73eff3-de1f-44bb-8c39-e314e61d3d42",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3664acc4-3b59-495b-a49e-91537566dbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25af2c0e-2ad3-4b6f-99aa-efdaef13d7f1",
        "cursor": {
          "ref": "f4018fe8-5a21-42e1-9609-7274cc4fc460",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "173538e6-05f4-4414-8beb-fefef62c3a35"
        },
        "item": {
          "id": "25af2c0e-2ad3-4b6f-99aa-efdaef13d7f1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9198208b-7966-40ab-8f37-a6d7d6f2f6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f4f22a-0292-4271-b795-9ff9a529162b",
        "cursor": {
          "ref": "a67684df-ac9f-4593-9a3f-5437279c0929",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0a424860-d425-4e0d-bb05-4d7b681bd0ec"
        },
        "item": {
          "id": "40f4f22a-0292-4271-b795-9ff9a529162b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d9947e65-3860-4947-9a8f-04957c5d90c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f41967-cf41-450c-93e7-5ec1df30298d",
        "cursor": {
          "ref": "033b9146-1cad-4cdd-b6c7-f76abb7a25e8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5d4b5d12-c21d-4015-817b-43a8e1994308"
        },
        "item": {
          "id": "72f41967-cf41-450c-93e7-5ec1df30298d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a5883e0a-ab3b-4218-b234-2cbef595bed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb2ff2e-bb3c-4501-9738-ab2ab0bc82a0",
        "cursor": {
          "ref": "b55e059d-d47b-4b9b-939a-296b757476d2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9b4a5045-b29b-481a-b23c-c9144fc6862a"
        },
        "item": {
          "id": "2cb2ff2e-bb3c-4501-9738-ab2ab0bc82a0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8e5da33-3acd-47e8-ac1c-fdfea664be13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4281df-3cad-4a9c-aaff-2bb5c94cb13c",
        "cursor": {
          "ref": "434d6253-c572-4bf5-9e22-96f7b3cdb069",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4273332c-3c30-4f8b-9bb4-d263d11e5557"
        },
        "item": {
          "id": "7e4281df-3cad-4a9c-aaff-2bb5c94cb13c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "415ac893-fb86-45a9-a95b-7c7ac0af0c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8b5c3b-84c3-42a0-8ec9-7643e2a18f6e",
        "cursor": {
          "ref": "678db7a8-07e3-4477-a449-fd0840b2c4ac",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "553be2b3-fce1-4d3d-979d-e3b8cb196c92"
        },
        "item": {
          "id": "3b8b5c3b-84c3-42a0-8ec9-7643e2a18f6e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1ebddd85-20d2-42c7-859d-755c097548d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047ff109-d624-4ab0-8c96-db0c12290863",
        "cursor": {
          "ref": "1db705f0-e35c-452b-8d24-0e2900157dc8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "acff2703-2590-49bf-bc17-8457f8c2e902"
        },
        "item": {
          "id": "047ff109-d624-4ab0-8c96-db0c12290863",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "61f922ca-7664-45b4-9874-350f3bba6279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e80fc9-50e7-4aa7-8f45-202f724a500c",
        "cursor": {
          "ref": "77d4f340-bfff-420e-8658-9e5263783bcd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "33af50f0-f46d-4ad3-a71c-4661bfedba16"
        },
        "item": {
          "id": "87e80fc9-50e7-4aa7-8f45-202f724a500c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2abd161e-232f-459f-998f-92b75ee802cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af622453-a0d8-4db6-842b-ba6ed4c654be",
        "cursor": {
          "ref": "4ffb69e2-26d8-4751-9569-29663226b097",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "31dc7fca-cade-4342-b823-c735c8a6864d"
        },
        "item": {
          "id": "af622453-a0d8-4db6-842b-ba6ed4c654be",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c3d5dd83-2a56-426d-9ac4-b4d08168759e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635ec141-fe14-417a-b2d6-97a4b106d657",
        "cursor": {
          "ref": "c0d450b3-11fa-4198-b638-23ca516e70d2",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0334ec63-0c31-4181-ab98-acb1916f8d77"
        },
        "item": {
          "id": "635ec141-fe14-417a-b2d6-97a4b106d657",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e758cdb2-2c9a-42d7-bc45-80835406d64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5ad9d8-82fe-4165-9e96-570cfcdac5e3",
        "cursor": {
          "ref": "6574ed16-9da3-4095-b09e-972068dd27a5",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "39a53430-b59e-4b78-b4a5-8685719ac540"
        },
        "item": {
          "id": "7e5ad9d8-82fe-4165-9e96-570cfcdac5e3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ea197817-ebfc-4fe2-bae2-94a5f8a80b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff3bd2a-0829-4b9d-a236-28db12d109a1",
        "cursor": {
          "ref": "73b7a378-991b-4e4a-9973-6f0ab087179f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cf8fe709-2e62-4730-8321-d6043d3c0a8c"
        },
        "item": {
          "id": "8ff3bd2a-0829-4b9d-a236-28db12d109a1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "00fca1b9-a0f3-4188-947d-7de0a1b47768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0cded9-4240-4102-9ad3-f17c37c3bd3e",
        "cursor": {
          "ref": "d39b5db0-fab9-435c-860b-3d0cfe858190",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "069e59d8-72b4-4d93-8d49-9db985ab1db9"
        },
        "item": {
          "id": "5d0cded9-4240-4102-9ad3-f17c37c3bd3e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ffbc656-749e-433d-849b-4cd2d43b53a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28552134-538f-4129-bb29-73d5ba1caaa7",
        "cursor": {
          "ref": "c581349d-2cdf-4058-9620-734babc4cfc8",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8f5f059f-07a4-4540-ab28-bf2e2c5861c6"
        },
        "item": {
          "id": "28552134-538f-4129-bb29-73d5ba1caaa7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a9d4fe79-a7b9-4aa7-ab35-ff652330f068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21824699-4b33-4b3d-9132-4ad83c0a60d2",
        "cursor": {
          "ref": "285951f5-3419-4643-b4f3-f57be9b8ce0b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d2fc7bdd-1404-4885-9353-04e55adbde1c"
        },
        "item": {
          "id": "21824699-4b33-4b3d-9132-4ad83c0a60d2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0bd0f8e4-28c0-4f68-9a56-9fa4125bacac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a8479d-d687-4d74-85ee-9448544196c7",
        "cursor": {
          "ref": "b59c77ea-e8b9-4004-9b11-9839c3e93e59",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9c62f4ce-2877-4e8c-b344-b71009445fce"
        },
        "item": {
          "id": "86a8479d-d687-4d74-85ee-9448544196c7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a0d6bef9-3a7d-4f87-9490-778ba43f9e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e89d6-4473-4e74-bd40-8b1bff55ea99",
        "cursor": {
          "ref": "f9d7b48c-5d50-4f85-bb5e-269f53031f63",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "14852d01-d2d3-4b96-a1a7-714704759296"
        },
        "item": {
          "id": "237e89d6-4473-4e74-bd40-8b1bff55ea99",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "09311f39-62cc-40f2-ae21-0b806b65b711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c295e0-2f87-4a54-8ddf-d33a6bca9b6c",
        "cursor": {
          "ref": "edb32180-7b42-4197-be3e-3ffa184e725a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ebaa3d24-2b74-430a-b3b6-59130af2de47"
        },
        "item": {
          "id": "e9c295e0-2f87-4a54-8ddf-d33a6bca9b6c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ab3c103f-6795-4cdb-80c3-ef3638792b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de44a2b8-ccf9-4dd8-87c5-69ea9d87b4db",
        "cursor": {
          "ref": "1e58424f-2bea-4e7e-b91c-cf81222ff33b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "76214e7a-4a56-469c-a542-56697f245d6a"
        },
        "item": {
          "id": "de44a2b8-ccf9-4dd8-87c5-69ea9d87b4db",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "aee4b4f6-37fa-462d-ad7f-634d1c76d1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0955f1-2850-4668-9eca-7ae0bc40cc6b",
        "cursor": {
          "ref": "38c6afff-3a7a-481c-99cf-b0f7b890ef53",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b1ac9631-ea03-4dff-b074-b13b0c7a7d11"
        },
        "item": {
          "id": "5e0955f1-2850-4668-9eca-7ae0bc40cc6b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dc185a49-08ca-401b-ac96-77c8753fe078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0bb9cd-46c7-41c8-a4a7-00400a63931c",
        "cursor": {
          "ref": "9598e977-8598-4c54-b89f-ce498416bbf6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "81c37b9a-7e02-4b1c-83e1-bd4a068c0575"
        },
        "item": {
          "id": "3e0bb9cd-46c7-41c8-a4a7-00400a63931c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ee8e2370-d229-479c-a4dc-61319e8075df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7070e7f-de58-4821-850e-7287d5524cf9",
        "cursor": {
          "ref": "beb03ef4-2c55-43af-ba52-0648dd12477e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3f0301fa-806a-40b6-b777-48e0808a1bf6"
        },
        "item": {
          "id": "b7070e7f-de58-4821-850e-7287d5524cf9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6182133b-48d9-4cbb-9f31-a884a53cdd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d5d165-45fc-4088-8d63-b1f474397d28",
        "cursor": {
          "ref": "08eca47f-9f66-4c53-93e5-4521adf70419",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9ad7eb6a-d876-4039-802d-8fd2fc87b564"
        },
        "item": {
          "id": "85d5d165-45fc-4088-8d63-b1f474397d28",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f76f9ea3-a644-4d12-9d72-96b08fa3f439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98e77ea-961f-43b8-9c5d-5319450d3076",
        "cursor": {
          "ref": "5a1ba851-90c3-4f53-b4e0-79fc95b2cb15",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7dc802e4-211c-499e-9813-82818b716d2d"
        },
        "item": {
          "id": "e98e77ea-961f-43b8-9c5d-5319450d3076",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cbe55e43-49d3-45b6-88b2-dde27dd1eeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25e6322-9232-4e2e-b518-151a10f8a5d0",
        "cursor": {
          "ref": "335c0033-06a3-421e-8def-41b210a3dfab",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2f775f28-fe91-4bca-8271-205c4823607d"
        },
        "item": {
          "id": "f25e6322-9232-4e2e-b518-151a10f8a5d0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0f599085-cfcb-4cf8-b1cd-1893007a7222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371f62a8-7a08-48fa-a490-ac59ea7185c9",
        "cursor": {
          "ref": "b6ff4ba2-5d11-49a5-87f6-d9462dcd9a28",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4c8bbca3-361d-4bf2-9ef9-7d27a0427b7e"
        },
        "item": {
          "id": "371f62a8-7a08-48fa-a490-ac59ea7185c9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a6f7493d-da75-4167-9c4e-f3cbd8209055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f148eb-8c48-4c05-bef6-f08db8ee497d",
        "cursor": {
          "ref": "e2dafab5-0099-4549-b085-81a8ead6970e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2da241f1-7043-495b-acf8-2c7ae8c47347"
        },
        "item": {
          "id": "48f148eb-8c48-4c05-bef6-f08db8ee497d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bf7f221c-8f70-49e6-a86a-f7bd14030635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047b2c5-0325-4661-b02a-5c97831180cd",
        "cursor": {
          "ref": "f36e0f0f-4b0a-4002-bd80-5b70b47afb1a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "029b9173-b83a-4586-81be-306388950561"
        },
        "item": {
          "id": "c047b2c5-0325-4661-b02a-5c97831180cd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c756e698-162f-4cab-988d-2914b099201b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca8c774-5911-4faf-a918-ca6228f1cfae",
        "cursor": {
          "ref": "008d16b3-7328-4330-806a-5d43e9a5a25b",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dcca3810-de60-4037-b4c6-aec99696e9f2"
        },
        "item": {
          "id": "9ca8c774-5911-4faf-a918-ca6228f1cfae",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4dc23bff-da68-4425-88a4-acf2620b9801",
          "status": "Created",
          "code": 201,
          "responseTime": 686,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "41a83e2f-bdf7-4c73-86a2-f7288cd226d8",
        "cursor": {
          "ref": "13a1313a-84de-4afd-b201-37142eb2d5f1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1b186dea-d519-4341-81ab-91c0c25a6741"
        },
        "item": {
          "id": "41a83e2f-bdf7-4c73-86a2-f7288cd226d8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1ac64bd3-53e1-47d0-8adb-1a28646ba27c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "47b1df26-c5e5-477c-b682-e3122d5e4148",
        "cursor": {
          "ref": "670a44ab-d784-47d5-987b-d6fa2d7909fa",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b64851ba-93c8-4096-a6aa-bd59754003f8"
        },
        "item": {
          "id": "47b1df26-c5e5-477c-b682-e3122d5e4148",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7b96ebb8-14bd-453f-bde8-5e9b3d16a683",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3d3e046c-3365-44f8-a869-bac2102015de",
        "cursor": {
          "ref": "cba1f005-3f5d-4904-87ab-92944c0bc62f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8e8d443c-63e0-4ed5-b821-a2de0925afaf"
        },
        "item": {
          "id": "3d3e046c-3365-44f8-a869-bac2102015de",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99977e9d-4afb-4212-a6f6-639744208f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3989a6-087c-4f52-a3f9-158932643956",
        "cursor": {
          "ref": "ae8613ca-2f26-4e62-806e-80dd6ec1bfb3",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2a4859b0-b2cd-4bae-8629-a38e6adebe65"
        },
        "item": {
          "id": "2c3989a6-087c-4f52-a3f9-158932643956",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "94828e06-3404-47ee-8f54-667fcb9933a6",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dc62fd82-df08-40fc-b7e6-4b4ec2cb427c",
        "cursor": {
          "ref": "547260c9-262a-4de3-bb8a-09bad6d7e27e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f585c9a1-f5c3-4dee-ad1c-977cd70def13"
        },
        "item": {
          "id": "dc62fd82-df08-40fc-b7e6-4b4ec2cb427c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9ef3bd11-eced-4616-84e9-7cfef84c491d",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "29efe26b-aa72-4740-8415-2455833c6354",
        "cursor": {
          "ref": "2bdb43dd-5080-4730-a3d9-b5e14abfde76",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "14ab11a1-216a-4492-816d-5739c319ace3"
        },
        "item": {
          "id": "29efe26b-aa72-4740-8415-2455833c6354",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "56886111-7883-46d7-84f4-16dfcd36dac6",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ab84348c-113b-44db-9919-d49b77b8eb0e",
        "cursor": {
          "ref": "c5b93eaa-dedc-4723-9d28-508d37761de1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2edd28bd-f263-46a8-8e68-4541e4513def"
        },
        "item": {
          "id": "ab84348c-113b-44db-9919-d49b77b8eb0e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2089b02c-21c3-4d0a-bebf-674673ca8552",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "319f5eda-fdd2-45c8-91ab-9844d33cc344",
        "cursor": {
          "ref": "f5c99548-45a4-40f7-862f-eb778ae75ef5",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3f108e6a-7583-40a6-a16a-80ef72435d28"
        },
        "item": {
          "id": "319f5eda-fdd2-45c8-91ab-9844d33cc344",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0c5388cc-ec36-414f-b921-8c6a7d571235",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d51bedc-b667-4094-8b7a-9c3feb37688a",
        "cursor": {
          "ref": "6b206fa0-b3ec-4ed0-b965-e8903b7a7e4c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e7012f9e-6198-4913-b2a1-120fa9bcb502"
        },
        "item": {
          "id": "8d51bedc-b667-4094-8b7a-9c3feb37688a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5732b796-54a1-4a8a-bc43-75d6afd772e5",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9587039e-fb3d-45b8-9bd6-791ae1954006",
        "cursor": {
          "ref": "084372ba-313a-4c64-a563-e19e33841c28",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "68c2cb6f-af2f-41c6-9ed4-2f4e23e75a2d"
        },
        "item": {
          "id": "9587039e-fb3d-45b8-9bd6-791ae1954006",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6ec5193d-0492-4c77-a9fa-7b0ff2167331",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "92fc0232-3b76-400a-88a2-8f3ed8050725",
        "cursor": {
          "ref": "f2f17dab-6594-4cd3-beab-bbceffdb566e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fb6a3d8a-285f-40d7-9777-e3f64c1aab98"
        },
        "item": {
          "id": "92fc0232-3b76-400a-88a2-8f3ed8050725",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6c4c230d-79c7-402a-b784-1cbb2b07b953",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8c8fbc9a-ff55-4c7e-a2e3-97cfd5d7de41",
        "cursor": {
          "ref": "a3d90e61-6bc3-4d14-966b-5280ff8a3061",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4289c5a2-7517-436f-b968-429fe2ae28d1"
        },
        "item": {
          "id": "8c8fbc9a-ff55-4c7e-a2e3-97cfd5d7de41",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0bc9c561-cc46-4a63-ae76-fa6bc88a50dd",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a77abe89-4b77-4488-b912-5abb464eb618",
        "cursor": {
          "ref": "850cbaaa-483b-4bf2-9dcb-fa537eafac82",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "67a4a5c5-a44f-4fbc-8ad1-d62cfd4d9989"
        },
        "item": {
          "id": "a77abe89-4b77-4488-b912-5abb464eb618",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b23adc08-3c8e-4d50-aaad-c7fd0fd4392a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0dce1e-96db-44b7-be4e-d2456b49f365",
        "cursor": {
          "ref": "fafd30d1-03a6-4b77-ac11-337ab5c1d671",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "458d7d8c-0758-4b3a-8fd7-aba3382dd084"
        },
        "item": {
          "id": "ba0dce1e-96db-44b7-be4e-d2456b49f365",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1ecaf72a-c0d9-4a6f-914c-33d1ccf299e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd5bd82-a1de-4de6-a621-b193ac202d1f",
        "cursor": {
          "ref": "8cc07665-5138-40a7-9175-0c5b6e679b87",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cd79271f-bbdb-4b68-8d33-9d152f757720"
        },
        "item": {
          "id": "dbd5bd82-a1de-4de6-a621-b193ac202d1f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "97e2fe93-700d-4b43-ba98-a9dd7200b421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eebd05-36e1-4faa-914c-2954fccad8e3",
        "cursor": {
          "ref": "0510bd53-8ce5-4994-b43d-a1103cf6e4b3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f5094048-a97e-4a7e-aa7a-5cf136b19236"
        },
        "item": {
          "id": "c5eebd05-36e1-4faa-914c-2954fccad8e3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8df4e9c4-56e4-4605-a81d-34179de3c821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e14bbfc-158c-4ba7-9d8f-c89c436ff606",
        "cursor": {
          "ref": "b8854752-e2f3-4761-a6c2-bbea3c3ca5b0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "99198871-4e42-4688-80c1-cadaeb2d023e"
        },
        "item": {
          "id": "2e14bbfc-158c-4ba7-9d8f-c89c436ff606",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "62b3c515-334b-4964-a9cb-d61d2c30edbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4e265a-98a9-402b-98e8-49487b2b4d53",
        "cursor": {
          "ref": "a3ccaabf-265b-4d3c-abd0-57809e0988fa",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e160955-c04b-4585-89cf-f2bda27236ba"
        },
        "item": {
          "id": "0e4e265a-98a9-402b-98e8-49487b2b4d53",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d4a231c4-59da-4c7d-a7c3-48af78a059eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48a6ec6-c1f5-4f96-9286-d857290892a7",
        "cursor": {
          "ref": "d917dd90-4274-4823-945e-ef796c497172",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8c006443-bc5a-4eb0-b10e-7ee8d5c766fb"
        },
        "item": {
          "id": "d48a6ec6-c1f5-4f96-9286-d857290892a7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6e2b985a-2486-4db9-aa73-2dbd94604301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10413ed8-b4aa-4323-847a-9e8b557bfbd3",
        "cursor": {
          "ref": "116fdb69-ab0b-451d-96e6-2a063f72c55e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1d5ddb69-db2d-4ba2-ad45-bf7923a4d379"
        },
        "item": {
          "id": "10413ed8-b4aa-4323-847a-9e8b557bfbd3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2dc3f6e3-1160-419f-93cc-e6e921fd701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f08bdc-7e84-4dca-b858-5c46cee8e044",
        "cursor": {
          "ref": "041099bb-6dbc-4de9-9d3f-1a090cc8a3f6",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "06d17820-ba56-4399-a268-69021d5fbeab"
        },
        "item": {
          "id": "44f08bdc-7e84-4dca-b858-5c46cee8e044",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5680da34-6e4c-48b1-baf8-9c05a1c5493b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4331b72-bfa6-44b2-9785-be40916d64f1",
        "cursor": {
          "ref": "0c1c817d-d27b-47bf-916e-cde2499a7921",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c00114d7-5a48-4e2d-b660-e01c28fe9e7e"
        },
        "item": {
          "id": "c4331b72-bfa6-44b2-9785-be40916d64f1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cff7277b-e4af-4a46-bbb1-a8c740926b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cfc441-ecc1-43d2-a343-0e2181bc8717",
        "cursor": {
          "ref": "2923b2ca-2dd7-42bb-a762-bffd50479a6f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ec220eff-19c0-4ac1-8f42-cd01b8288207"
        },
        "item": {
          "id": "c3cfc441-ecc1-43d2-a343-0e2181bc8717",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c325c8fe-ce47-476a-a08f-0f644fa9bf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab811391-eb4e-4a19-a8d9-0ca5d1e2e006",
        "cursor": {
          "ref": "42846260-ec17-45dd-875a-f027814d5ece",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d1af85ef-234e-4b8f-9b9f-2eae9ddebcee"
        },
        "item": {
          "id": "ab811391-eb4e-4a19-a8d9-0ca5d1e2e006",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7c6e2d73-245c-442e-b3d1-d043b9ffa5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5f38d5-8eba-4591-9add-5ad134794796",
        "cursor": {
          "ref": "ffc909bb-1865-47e5-b566-1bcfe1edc2a6",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4acd26d6-2b51-4f91-ad09-4f80435141c4"
        },
        "item": {
          "id": "cd5f38d5-8eba-4591-9add-5ad134794796",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7fcd273d-e95c-405a-84d9-02e17d15f474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b585cce-0425-4d6d-bf2b-d78c74ffa8dd",
        "cursor": {
          "ref": "4f685714-3068-498d-a15b-93e3504d4472",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "edd5b41e-2954-4696-95de-28addc83eeb6"
        },
        "item": {
          "id": "0b585cce-0425-4d6d-bf2b-d78c74ffa8dd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a394fabf-02fa-4eae-ab4c-9d6d1fe45f8e",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "00ca9c50-5fe3-4b87-aedc-7203a8cc8b0f",
        "cursor": {
          "ref": "500759eb-3293-4a23-abe7-5f30ee8ed03a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f847589b-2b65-4e29-bf77-0e55e5145b8b"
        },
        "item": {
          "id": "00ca9c50-5fe3-4b87-aedc-7203a8cc8b0f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "97ef8b84-e7d5-4fc6-a5b4-cf42afc18ecf",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f2f6d625-ad0b-48c1-b4ce-cb1b1998e5ab",
        "cursor": {
          "ref": "fbafd319-d896-4bf8-b73a-bc754240eb83",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d1a4f576-3db2-4ea3-9d92-cf510cc4791e"
        },
        "item": {
          "id": "f2f6d625-ad0b-48c1-b4ce-cb1b1998e5ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0a2e87c5-c0e4-42b1-99e3-7d66bad1beed",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6daafe79-a717-4bb7-b022-192b7db9119b",
        "cursor": {
          "ref": "20ad145b-3109-4937-ab74-fb683b365944",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "933021c6-56dd-40db-a475-85d3596e09be"
        },
        "item": {
          "id": "6daafe79-a717-4bb7-b022-192b7db9119b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3ece7b20-a99e-49f1-b87e-e0f0c363e013",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "10b491e6-b4c9-431e-8a4c-978e0e4ed940",
        "cursor": {
          "ref": "94f033bf-1010-43c2-92e4-b1c848aeceff",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "db8cc1e8-4384-477c-b2aa-7fb5cb36bf12"
        },
        "item": {
          "id": "10b491e6-b4c9-431e-8a4c-978e0e4ed940",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cfb91740-442f-4a00-964d-cb4f75c198ef",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9167742d-34e0-46f1-af68-c97f8eb47a99",
        "cursor": {
          "ref": "64cf233d-f9cf-4ade-bb9f-15dc65812e35",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9be36a50-6be0-4c41-b258-c0cd003a9095"
        },
        "item": {
          "id": "9167742d-34e0-46f1-af68-c97f8eb47a99",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "99cddd63-c361-4603-8d2d-8b4d8e78245c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7aeaad-11ea-4ae8-aeb3-84dac0ce39ee",
        "cursor": {
          "ref": "d622de51-2117-479c-87a3-f226e95c6d57",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3d373cc6-00c6-4d2d-b418-a8f1e1d2b211"
        },
        "item": {
          "id": "bb7aeaad-11ea-4ae8-aeb3-84dac0ce39ee",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6a60a63b-7fcb-4d9a-9ddc-b130e4a65a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7b4d8c-0d7f-415e-bb0e-dd2cfcacb66d",
        "cursor": {
          "ref": "33bde0dc-ba8a-4800-8ab7-842c6b69b60b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cda6838e-e68a-473e-847b-53d956748bc0"
        },
        "item": {
          "id": "5c7b4d8c-0d7f-415e-bb0e-dd2cfcacb66d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "52f5bd31-e053-4c8d-a95b-bb841d3e26dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17dbc86-1f2c-4c3b-8322-c767221d5a90",
        "cursor": {
          "ref": "002ed51c-d2a4-4489-b8cf-5db9de7f1c77",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "60643ff0-f0a9-47e5-a3b4-d1700eae9b8e"
        },
        "item": {
          "id": "a17dbc86-1f2c-4c3b-8322-c767221d5a90",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "61fa258c-f4ee-4977-8762-a9807756bc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117cf283-eb95-4fc7-8a76-f89abeaf6f6b",
        "cursor": {
          "ref": "903ff9e1-a6ea-4dcf-89d9-8a98b097de77",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1bbfd5ac-2c62-489f-a275-9e596d93897d"
        },
        "item": {
          "id": "117cf283-eb95-4fc7-8a76-f89abeaf6f6b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c79a48c1-54ca-4df4-994f-18349b7408ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57830fc-b128-4941-89a5-fc034ff24234",
        "cursor": {
          "ref": "214bde64-f0d0-4d01-babb-8a4481e501b3",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5a194deb-da73-4672-8e60-eefcaeb0b3e1"
        },
        "item": {
          "id": "d57830fc-b128-4941-89a5-fc034ff24234",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5158df2b-527b-405f-8809-6ea918799834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1278a5e8-e0f5-43c1-bc75-2c148d2f93a6",
        "cursor": {
          "ref": "160ba89e-bce5-4304-b8bf-f6df7d9164b0",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "09497e52-90e6-4796-acd9-2a136fa8e4a1"
        },
        "item": {
          "id": "1278a5e8-e0f5-43c1-bc75-2c148d2f93a6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5350454d-1b9b-430e-b914-d0507b036497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e9b1a5-04b0-407d-b88c-67e081771bb7",
        "cursor": {
          "ref": "8cff1b24-d43f-4857-8800-3c89e0be3740",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c11c0039-a528-498a-a8f4-573190a27f83"
        },
        "item": {
          "id": "14e9b1a5-04b0-407d-b88c-67e081771bb7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "58eb1bb9-1977-47b8-9804-3c502034fed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b0ab5c-9f32-42ce-bc2f-9cc40806b433",
        "cursor": {
          "ref": "d4a37df3-84b0-4fce-b687-658ec138fdf7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2e15c673-1d98-45b2-9354-806cb7dce6eb"
        },
        "item": {
          "id": "39b0ab5c-9f32-42ce-bc2f-9cc40806b433",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3d2c85bc-1dd6-48b6-9354-d3a986a2a232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71237c77-d0bf-4fbf-ac59-5591f38fb812",
        "cursor": {
          "ref": "c085c11a-be12-4be5-a46e-cc6b2dbe6821",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "765e2840-1602-4c84-9509-4ae75407aead"
        },
        "item": {
          "id": "71237c77-d0bf-4fbf-ac59-5591f38fb812",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b0bc4ff1-5c66-443f-a21c-1566c93bd271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4de5837-e575-4a18-aae9-168da2ef5504",
        "cursor": {
          "ref": "0c0ffdae-0ecc-4db2-9b44-84e715c2aeda",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "66ace373-f047-4195-92e0-25e2d7e5091f"
        },
        "item": {
          "id": "c4de5837-e575-4a18-aae9-168da2ef5504",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "be497c0e-bed4-49af-b7d5-1d8b4811b854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb640341-9a5f-48ab-b21e-cd8b42b7531d",
        "cursor": {
          "ref": "39addb30-627f-4fde-a68d-1e278ad6a3c0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e169d2f0-3b35-422f-bc10-f8922d022ed6"
        },
        "item": {
          "id": "cb640341-9a5f-48ab-b21e-cd8b42b7531d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a380edd7-3981-4b9c-bcae-e9964bc84327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcc79c6-8028-4010-a005-3559e6d0b9f6",
        "cursor": {
          "ref": "aee207dd-f0c1-4467-91ed-4ab548ab3ba1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7b04e735-9d6b-4777-83c4-a72876e1b8f6"
        },
        "item": {
          "id": "dfcc79c6-8028-4010-a005-3559e6d0b9f6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f665a43d-7b17-44f8-ad94-3702c1e9d9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff74caab-877e-4ca7-88f8-c097ba393777",
        "cursor": {
          "ref": "1e0e598d-feee-4dc7-822e-38147bfb6163",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2515b1f1-8fa0-4b01-b5aa-709a7291ab26"
        },
        "item": {
          "id": "ff74caab-877e-4ca7-88f8-c097ba393777",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "81edc620-9c81-4fcf-8110-e46ba5481448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2565aaf-1ed2-4859-b69a-cd3adfe07a14",
        "cursor": {
          "ref": "141b42eb-2565-4c07-809b-d9a93ca845e3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "60dc5903-de6c-437f-976d-0e159b3566ff"
        },
        "item": {
          "id": "a2565aaf-1ed2-4859-b69a-cd3adfe07a14",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "268826c4-e3b4-47c1-8d93-f822d934f9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6dbc33-6481-44fb-98fe-c6d74693aef6",
        "cursor": {
          "ref": "3313cee1-807c-4d47-838c-53d6ca69c2c2",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4f36c96a-da24-4c25-8602-8846d9fe4801"
        },
        "item": {
          "id": "2e6dbc33-6481-44fb-98fe-c6d74693aef6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "57c7647e-93df-41f6-914c-9677e8bf384b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f947bd-c334-4205-8ad0-9bab41226c56",
        "cursor": {
          "ref": "50279508-e125-44cd-bc48-c5b33a71eae9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cb54367e-e6d1-424a-a92b-e849ee2a45db"
        },
        "item": {
          "id": "94f947bd-c334-4205-8ad0-9bab41226c56",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b64bd70b-894d-4aa5-b4ae-10977fa0c966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a861d304-a8d8-470f-92a5-7914adc67ea6",
        "cursor": {
          "ref": "7efe1d1a-775f-47dd-9e88-70e8472a556f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7e66a25f-899b-467a-90f1-b8af469fded2"
        },
        "item": {
          "id": "a861d304-a8d8-470f-92a5-7914adc67ea6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0b4a19b7-c6f3-4027-9ab2-56ded20259d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11624ed5-a616-42b6-a441-0e12ed13698a",
        "cursor": {
          "ref": "a518e6c8-b3dc-4a64-a809-91c6d17d4705",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "213886af-c356-41e3-93fe-3d620403ccce"
        },
        "item": {
          "id": "11624ed5-a616-42b6-a441-0e12ed13698a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ee580504-49fe-4d49-85a3-8a8d216433e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffb36eb-c61b-47d2-b284-336d68755f1f",
        "cursor": {
          "ref": "1f782553-e19c-49cf-bac2-4fcbdb721ce2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe88363e-7fcc-48c5-a822-c0cba43d0777"
        },
        "item": {
          "id": "0ffb36eb-c61b-47d2-b284-336d68755f1f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3f978eab-d497-4c84-9053-9d921d79d2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6456e9b3-c828-4cf8-a14c-d59dce50347c",
        "cursor": {
          "ref": "d6eb5daf-1d78-49b0-a47f-1e19ae957f9e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5f0ff3d7-134e-412a-9958-97dfcacbf820"
        },
        "item": {
          "id": "6456e9b3-c828-4cf8-a14c-d59dce50347c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e394bb8c-4813-451d-9957-239f7aac6c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa8795e-e845-4dd0-96d5-ce4f50003c14",
        "cursor": {
          "ref": "398615d1-cf17-4a28-a02b-366e651c6046",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "493e7194-e78d-4b73-8905-ef4d63797e7c"
        },
        "item": {
          "id": "6aa8795e-e845-4dd0-96d5-ce4f50003c14",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a78a0a2b-a6a2-4291-a56d-d9f3cb50eafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e30edb-21d5-4f7b-bae9-f9e779c584a6",
        "cursor": {
          "ref": "8dc3bd38-ea35-45c0-999d-eb0c7a3dc6dd",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bdc4ddbd-c81d-44f5-8d5e-0dd16d5350b8"
        },
        "item": {
          "id": "a4e30edb-21d5-4f7b-bae9-f9e779c584a6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "03d5d93d-f62e-44a9-a20f-03c6be4a3754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd27003d-3497-4e12-ab1a-06d7159c03cb",
        "cursor": {
          "ref": "1ccffcaa-c77d-45d0-a3da-2be3515cae66",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4dadbad0-5e5b-453a-bd0b-9074909936cd"
        },
        "item": {
          "id": "cd27003d-3497-4e12-ab1a-06d7159c03cb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "76b9aa90-2703-49a3-b19a-a71ce48988e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85521ecb-60e9-48f2-b442-6f311dffb610",
        "cursor": {
          "ref": "4d5961f8-84c1-4739-b66d-dcfaa5988ed2",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "537063d6-0eea-42bf-aeae-34b517ccfd04"
        },
        "item": {
          "id": "85521ecb-60e9-48f2-b442-6f311dffb610",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cdef2b4f-8b5b-4caa-8625-90d5a358dd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bca00f-9dfe-42cd-a2a6-00453e8a0fcd",
        "cursor": {
          "ref": "dbe6b936-1fbe-4d93-820b-6941c6e84813",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9d4a7251-dea2-44dc-b268-5229b4d5facb"
        },
        "item": {
          "id": "96bca00f-9dfe-42cd-a2a6-00453e8a0fcd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4cf9a70c-b2fe-4295-9337-9b30dbfc678d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377db7d0-2a68-47a4-abf9-ae542d73341b",
        "cursor": {
          "ref": "e91790a8-a2f6-4c45-9f95-282fac930782",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d0448819-ab0b-4e67-a2a4-fa2b8168cf99"
        },
        "item": {
          "id": "377db7d0-2a68-47a4-abf9-ae542d73341b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0d48b6d3-7572-47f2-9be3-e0da0e692350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab4aed7-4511-4a80-810c-eec8948ad049",
        "cursor": {
          "ref": "dd0d0a52-cddd-4a54-adad-5a539c2213a4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "be0ecb08-c440-435a-a614-c1f8e584c4c6"
        },
        "item": {
          "id": "7ab4aed7-4511-4a80-810c-eec8948ad049",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ba4b5049-6aca-4c43-a7a2-44b8ed664523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e358c3-2af5-4b52-9238-5bb2249cb609",
        "cursor": {
          "ref": "1a310c6d-0063-4ec2-bf12-8fcdfb5fc8bb",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "df981139-efde-4940-8755-c40d729f0dce"
        },
        "item": {
          "id": "f9e358c3-2af5-4b52-9238-5bb2249cb609",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d5c68747-3fa5-4706-ac6b-e2236537a931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47123e6a-fb19-49db-a1b4-da60a82f4c2c",
        "cursor": {
          "ref": "7765638a-f495-46f0-ab04-c70de6218ddd",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "59e1def3-0511-4577-b77f-69ce551f8b74"
        },
        "item": {
          "id": "47123e6a-fb19-49db-a1b4-da60a82f4c2c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "febfccaf-ceb3-40e8-a4a4-efa6d261cd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6b9358-e6cc-4b29-8023-2b88a51788d4",
        "cursor": {
          "ref": "94b63d93-b8c1-4d91-bdf8-99b3381a7535",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "630674f4-5e8b-43a7-83c8-fbfe5f77ca02"
        },
        "item": {
          "id": "ac6b9358-e6cc-4b29-8023-2b88a51788d4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9e2b6ad0-c15c-42a6-b71e-6d3bffbffa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0b81e9-c959-4d0e-a1fc-da04c5d27b98",
        "cursor": {
          "ref": "ca2a5d61-ead9-4324-868b-d8e6595cfb6b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1cb450bf-9a95-4fbd-9185-3f6ef56f6326"
        },
        "item": {
          "id": "1b0b81e9-c959-4d0e-a1fc-da04c5d27b98",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "76feee81-a4f0-491a-9b0a-7c2c4a8b4ed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9f6dd0-765d-4496-af9f-0de2a3ccacd4",
        "cursor": {
          "ref": "2216b6e1-7e4d-47c1-9db2-a00a23ea2718",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f8bff524-c23d-4ef9-b4ce-682980dcbdf0"
        },
        "item": {
          "id": "9c9f6dd0-765d-4496-af9f-0de2a3ccacd4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "85a6dca6-24c6-4ac7-8970-25ffca47e713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c8c6c426-ad8c-473c-a8f3-97ba7a8c5b99",
        "cursor": {
          "ref": "ac697223-f16d-4a5d-acf2-00b820974528",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e03feaeb-bab4-491a-93c9-71537a97e0f0"
        },
        "item": {
          "id": "c8c6c426-ad8c-473c-a8f3-97ba7a8c5b99",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d3ebe5ce-4991-4f49-85e6-fcf3d1672de7",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "db117d0b-0b85-4d4a-b343-4d0bab1420d5",
        "cursor": {
          "ref": "9cde5414-e56a-4a71-a25a-10ae05c8813e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5daa65b2-1294-4570-afa5-a50930f81ee4"
        },
        "item": {
          "id": "db117d0b-0b85-4d4a-b343-4d0bab1420d5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "385c46a6-4a9e-4ce8-95e8-b97f8c17adf9",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "940d4de7-1027-49c1-ae8e-1a45d50b826e",
        "cursor": {
          "ref": "83c8fe8d-ebca-43ef-9287-2786c344fea0",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d0fe1a9d-52ce-46f1-bdde-219fafef4f44"
        },
        "item": {
          "id": "940d4de7-1027-49c1-ae8e-1a45d50b826e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1f921990-bf0c-4ac1-b445-a9a8ae9cd21c",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5baa76f-fd1b-42c6-9fef-9f7368a68dbf",
        "cursor": {
          "ref": "f8cbf9a0-5e43-4777-b77b-0299166a3a47",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "66fc47ef-ccb2-488f-af6a-a3cb8200f6a9"
        },
        "item": {
          "id": "b5baa76f-fd1b-42c6-9fef-9f7368a68dbf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ecb5bca3-6119-4bf7-986e-97df027feecb",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecad549-db31-45fa-a70b-95756618f655",
        "cursor": {
          "ref": "4314c494-d562-45dd-841b-08770135b0cd",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "10e87347-ee53-4b06-b9a1-94e77943b8f5"
        },
        "item": {
          "id": "5ecad549-db31-45fa-a70b-95756618f655",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0fca6898-df34-43a4-aea5-bc6603dd97e6",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-06T00:33:58.623Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-06T00:33:58.623Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "76d1a4df-0201-4e3c-bdb5-ef3527d2f78e",
        "cursor": {
          "ref": "b15dacec-6cb5-476a-a63d-c3272b0583a1",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c85aff78-b5b8-417b-bc98-0d5e84c83361"
        },
        "item": {
          "id": "76d1a4df-0201-4e3c-bdb5-ef3527d2f78e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e4a4b01e-fa32-47bf-9430-cf05650e2e3e",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0703e59-3da6-408f-94ba-fbf0dbb5f6a9",
        "cursor": {
          "ref": "f9b9c2f4-a5db-47e5-8855-16084f452e5b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "06c3adf5-73f4-4398-95d2-e755dc87ae92"
        },
        "item": {
          "id": "a0703e59-3da6-408f-94ba-fbf0dbb5f6a9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "67e603dd-a60b-4aa1-8b0c-a367c21d8260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceaefe6-7f8e-4025-955a-1ac36fa4524e",
        "cursor": {
          "ref": "e21e16fa-ac56-4dd8-ace7-610cd7065ff6",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "517cf2d3-e8a8-4544-8761-caead7d7a3ba"
        },
        "item": {
          "id": "4ceaefe6-7f8e-4025-955a-1ac36fa4524e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "67fbc94d-2765-4bec-8c83-a0fb0507bc83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3a5d10-dcce-45ff-b008-4e8926e6e80d",
        "cursor": {
          "ref": "a2596945-ab19-461e-81a2-4815816c6730",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a23ac41b-2a4d-433d-b051-1a355b4baf54"
        },
        "item": {
          "id": "8e3a5d10-dcce-45ff-b008-4e8926e6e80d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "00bccdac-717b-468b-914a-d85d69bd162f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946e57ee-731f-4f90-89bb-0b9a7e92f6bb",
        "cursor": {
          "ref": "e3ec8a15-4c60-4893-a1ab-02d9b8c4c48c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "73dd8f16-84b6-434c-b5ff-64eb1f9ea605"
        },
        "item": {
          "id": "946e57ee-731f-4f90-89bb-0b9a7e92f6bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2002ffd8-d6d6-42b2-8c4d-c0d0842aae00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8263d79-c5f2-4200-98c6-0e7791350ac7",
        "cursor": {
          "ref": "9b189669-514d-4f3c-a020-57a5afe0fe19",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "75c23435-d841-4212-b184-a8728ba26546"
        },
        "item": {
          "id": "d8263d79-c5f2-4200-98c6-0e7791350ac7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "50723c77-3ef7-4699-95f9-712a75417648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b44c1fd-f9ad-4d4f-ae46-40be9bc71c51",
        "cursor": {
          "ref": "c5dad0e8-cbf1-410b-9145-0a3b0d10e34c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6c48c9a9-e93e-4091-8ce2-1bf9eae746a5"
        },
        "item": {
          "id": "1b44c1fd-f9ad-4d4f-ae46-40be9bc71c51",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f77a5de1-34e5-4ef9-85b7-1184ca9904c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7db9636-9de8-4e57-8bc1-19767058245d",
        "cursor": {
          "ref": "964f6cfb-6564-4b62-b878-a086b07c79b0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3ff007ce-b731-4f18-9be8-34a03495564c"
        },
        "item": {
          "id": "a7db9636-9de8-4e57-8bc1-19767058245d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "13be621a-2c71-4432-9d65-9ed286414e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84947bd-ed6c-46eb-b8ba-81350cf2e285",
        "cursor": {
          "ref": "f4d61d79-0bf5-4b84-8024-5517febe5c67",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "66f24191-cdb2-44d0-8067-6406983a2436"
        },
        "item": {
          "id": "b84947bd-ed6c-46eb-b8ba-81350cf2e285",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ad3d7a38-3315-49ec-a1e6-f4de0abf3c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b84ae5a-cfe8-42aa-bfdf-b9b6ed664da1",
        "cursor": {
          "ref": "e791e3ee-8ee4-4361-abd9-e6ae29862aac",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c7a16f6b-c3ce-40b5-9ab3-b035f5e0374f"
        },
        "item": {
          "id": "3b84ae5a-cfe8-42aa-bfdf-b9b6ed664da1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7d92e984-e3a7-4055-a88a-4af09aa1eb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c34afe6-badc-45bc-94cb-107995207ab3",
        "cursor": {
          "ref": "0e4e19b8-3e20-432a-867c-b02a94da8b73",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "583f02a7-a5d0-450e-8301-42e75f5d2a88"
        },
        "item": {
          "id": "8c34afe6-badc-45bc-94cb-107995207ab3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4d239580-c583-4950-861f-4ddbf816d75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371edd3c-0157-472e-a717-7b69d440874e",
        "cursor": {
          "ref": "3e02d0ab-8d2e-4aba-bc9b-f34a76d3adfa",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ac0c0f1b-d3b0-4d10-b1ea-d3c43b74161a"
        },
        "item": {
          "id": "371edd3c-0157-472e-a717-7b69d440874e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "35e5305e-56d9-4285-b16d-5d505dcd99f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7396fb59-e6dc-4c94-bd4e-8e818afeee63",
        "cursor": {
          "ref": "d189c0b8-8166-4449-af13-c5977b42e5e6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8078feec-a8f4-4310-b65f-2fabb1b2b867"
        },
        "item": {
          "id": "7396fb59-e6dc-4c94-bd4e-8e818afeee63",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d196c84e-1979-46c5-92ae-d66e3ef8455f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6ca0c9-f434-4873-b111-cf3dd1eb22dc",
        "cursor": {
          "ref": "a16709f5-76c4-4bb2-9027-005c9c549743",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5413ab9e-0ea8-451b-b5e6-5c5f77702064"
        },
        "item": {
          "id": "bb6ca0c9-f434-4873-b111-cf3dd1eb22dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "14ca0bd9-b530-4088-8f55-2c51b8260d2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1f3b53af-1986-4358-9e6a-79242c71cea3",
        "cursor": {
          "ref": "29676484-9c7d-4dd9-ab8d-d180ddef63ed",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3088413b-d8cc-4135-9854-c61c15ca0ffc"
        },
        "item": {
          "id": "1f3b53af-1986-4358-9e6a-79242c71cea3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ca6631d7-676a-47b9-b17f-b9b6ed1f2093",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4028b9d2-aed6-40c1-91f1-49258aaa0f82",
        "cursor": {
          "ref": "b4766e19-5d54-4340-a78b-b69706890223",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "af292292-faa1-45e5-adb1-e7fa543006e7"
        },
        "item": {
          "id": "4028b9d2-aed6-40c1-91f1-49258aaa0f82",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "52afdf21-1483-4ec9-874c-0c24fc94ae4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e92dd1-8c65-4511-96bb-993854faa24b",
        "cursor": {
          "ref": "f43799c5-d9de-4071-9c91-4f6b8ddbef94",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3af975a7-c7f1-40f9-bd0c-f79e8bcf8d04"
        },
        "item": {
          "id": "e1e92dd1-8c65-4511-96bb-993854faa24b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8f1cdfa5-dc09-4896-ac09-f965621c0d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3ede52-5d25-499d-87d2-2ae30b2ff23b",
        "cursor": {
          "ref": "f31b7c18-5e86-4012-8d35-93bde7521aa8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2e56f70d-d2fa-49c3-bc52-3469580d0045"
        },
        "item": {
          "id": "3d3ede52-5d25-499d-87d2-2ae30b2ff23b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "10f276cd-b31c-4a4e-a4a3-8d0ec94a22a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e42eb7-a5ad-4535-a743-4b66c48db40e",
        "cursor": {
          "ref": "72c47ce9-bde9-4df6-aa8e-8cc64e9fe9e3",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "086fdd5a-9d49-43f4-9d28-fc4f74989814"
        },
        "item": {
          "id": "b3e42eb7-a5ad-4535-a743-4b66c48db40e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1e3053fb-5513-4f6b-932e-2a4a4f4611b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15eb7e39-c0ac-4acd-868d-c27b4ca202a6",
        "cursor": {
          "ref": "2628d260-0dcb-4dbc-ac3d-ae3eaef76863",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9a2d7414-9a3a-45cb-a2e9-0e26fbb11b5e"
        },
        "item": {
          "id": "15eb7e39-c0ac-4acd-868d-c27b4ca202a6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "79b5f1e3-c069-4ee8-a5bc-19fcb016b2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3b80a4-e4d6-4b16-ab08-1629df454e6f",
        "cursor": {
          "ref": "d1278a96-f783-4000-9a9e-bc8a871b4ef4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e0ab6693-1327-42ee-a2fa-7af041f80d49"
        },
        "item": {
          "id": "cf3b80a4-e4d6-4b16-ab08-1629df454e6f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df928e7b-6ba7-49df-9120-c9e21530f727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a146a0-98a3-4ca2-afba-d0393d9b52ac",
        "cursor": {
          "ref": "4218db08-0a0c-4c71-9940-b2042e0b28b8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0b833827-fe89-4534-adcd-8f9656fd8e78"
        },
        "item": {
          "id": "b2a146a0-98a3-4ca2-afba-d0393d9b52ac",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a4749037-d5d8-4821-a052-2659babca2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595df0b8-8d0e-4d08-82fc-21d2786f4291",
        "cursor": {
          "ref": "e4c7b0ac-5759-41f1-8f77-f26fb2ddc5a3",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "139f5124-7b2e-4000-9b30-47b3a2846047"
        },
        "item": {
          "id": "595df0b8-8d0e-4d08-82fc-21d2786f4291",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b4d93eb7-5ced-41b8-87b8-d9ccc853a86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a99853-c635-4b6b-9384-3aa6d8063fec",
        "cursor": {
          "ref": "14768dbd-0f15-44f4-9c7f-9fbc050ff47d",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "39df52d4-89d7-4c41-b99c-43c287f88731"
        },
        "item": {
          "id": "08a99853-c635-4b6b-9384-3aa6d8063fec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "25a5cfcb-30b4-4509-a5ba-4711c0ec52bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fdcb8c-9bfb-414c-94ed-4d9fe2a514e5",
        "cursor": {
          "ref": "fdb7af7c-ec20-42c6-b947-f178c98480a3",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "443c4500-ba6c-430c-8f0d-6d4cccee9b1a"
        },
        "item": {
          "id": "a9fdcb8c-9bfb-414c-94ed-4d9fe2a514e5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "941191b0-fa94-4ac3-ba15-482657342670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dea81b4-1258-47e6-a702-6190ec2c27da",
        "cursor": {
          "ref": "8fccf559-38af-47ce-a5ac-a65af7b8c98a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11d3ca6e-0fb6-4103-a7f9-dc4d782c73f6"
        },
        "item": {
          "id": "1dea81b4-1258-47e6-a702-6190ec2c27da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "69194de9-64b9-495c-881d-aaa2a0584125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaf31f7-6b92-44a4-bb5b-f08f12eae682",
        "cursor": {
          "ref": "0524467b-8b62-4a13-bc3b-4e9234ae92fc",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "93d6da28-6761-4f61-92a7-4ae7b26ec5e5"
        },
        "item": {
          "id": "faaf31f7-6b92-44a4-bb5b-f08f12eae682",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "307dab05-fde7-44df-ab0a-01e6a2cb4a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72414ce6-52bd-4a87-9216-dd65236461b7",
        "cursor": {
          "ref": "b0680d20-f18e-4037-a794-1b2c48371a31",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8163ec8d-c584-4e4a-95cc-a0d0c2567aed"
        },
        "item": {
          "id": "72414ce6-52bd-4a87-9216-dd65236461b7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "436412f5-3e7a-4988-a8f1-c87eb8cfd97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1665ad3d-ffba-4e6e-9587-d3210dd8dea7",
        "cursor": {
          "ref": "04bb0228-eeb2-4b08-9c9d-ba640abbaac0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3bcb6be5-dfa1-4099-8f46-a40d5e03fa3a"
        },
        "item": {
          "id": "1665ad3d-ffba-4e6e-9587-d3210dd8dea7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fafc2cda-61bb-4695-883c-91b388d7bdb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cf5b55-3497-4b7a-95e8-a03c874c38d1",
        "cursor": {
          "ref": "26b8dfd7-ef5f-4d6c-a560-f2f82893061c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "90d7e435-e246-4344-ab39-a3462ee16542"
        },
        "item": {
          "id": "09cf5b55-3497-4b7a-95e8-a03c874c38d1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b4b614a9-cd6b-46b6-8e37-b793b4bbc85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e353760-03cc-41e4-9a74-9545c263cfcc",
        "cursor": {
          "ref": "0c01b7c2-bd5e-4339-99c5-6af0e4c8ac05",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4e19065d-bd12-4b94-a24a-740ea0ffc3f7"
        },
        "item": {
          "id": "1e353760-03cc-41e4-9a74-9545c263cfcc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8d5be558-500d-49c0-8604-6b5eeb966911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905278cd-962c-4766-b3a7-869cf6845595",
        "cursor": {
          "ref": "c32ff9f0-8813-4d03-ae7e-08a0008b9897",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "90156616-33f7-413f-b041-7168d5b5a63f"
        },
        "item": {
          "id": "905278cd-962c-4766-b3a7-869cf6845595",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1642d4c7-d95d-49f0-a956-9588128a9512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cb0d8c-0427-4156-a5fd-1c5568f06826",
        "cursor": {
          "ref": "88ce0714-c2ad-45ce-a7c5-92c04e67266a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "edc0b421-f7e9-4f28-b354-a438a690232e"
        },
        "item": {
          "id": "25cb0d8c-0427-4156-a5fd-1c5568f06826",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "57c65220-3f8a-499c-808a-3bcca39d7a9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 125,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "67b3bc23-dc98-42c9-a52e-219f206c1d76",
        "cursor": {
          "ref": "0a31b088-b43d-4d95-b3ac-db56db468271",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a3a92b18-2c3b-4685-890b-e3c41fd0e35a"
        },
        "item": {
          "id": "67b3bc23-dc98-42c9-a52e-219f206c1d76",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c7542cf1-cf8f-408d-b026-fc04fc06eef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dea643a-4dbe-44a1-9290-2100bd6d2c2d",
        "cursor": {
          "ref": "2e992120-847a-4d01-aa0c-1e886e3a8b3f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "35fb757a-ea83-4c54-8617-7b38e7a3964a"
        },
        "item": {
          "id": "6dea643a-4dbe-44a1-9290-2100bd6d2c2d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "71227339-a64a-4375-8cbf-b7fb92f9ea33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519f8d9a-0e50-497f-a200-262f114b7881",
        "cursor": {
          "ref": "186118da-455d-4e8c-bfb9-edaa77d41bdf",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b619eaf7-efa5-4e8a-ada8-7b0ec367337e"
        },
        "item": {
          "id": "519f8d9a-0e50-497f-a200-262f114b7881",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3af45f79-1d56-49cb-a079-bfeff88fbb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4ee61e-a546-4f29-b773-524a95a76120",
        "cursor": {
          "ref": "59f291d0-a884-45b7-b6e5-f17072caa9bf",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "16bae430-16a8-4771-8806-1823ed55ebf9"
        },
        "item": {
          "id": "0d4ee61e-a546-4f29-b773-524a95a76120",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4dce214c-2535-4349-9aaf-42d9525e6187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f7a00b-b9cd-4ceb-a6e6-169b47af609b",
        "cursor": {
          "ref": "40aa6afe-e812-4265-9ce7-6875ddc0d53d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "636a9dd1-b4a2-497d-83fe-47346db4fbd8"
        },
        "item": {
          "id": "c7f7a00b-b9cd-4ceb-a6e6-169b47af609b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "897a0a54-69ac-471b-b9a7-9590992cdeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d95abbd-ebb2-4e00-894d-fdd346de0af2",
        "cursor": {
          "ref": "0caafa94-7818-47ab-a023-a3f66f3f381c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eb2155df-cc03-484d-b83d-a59d1b25dd16"
        },
        "item": {
          "id": "4d95abbd-ebb2-4e00-894d-fdd346de0af2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5328e70b-d7a1-409e-93fb-81911a7ef54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aac17aa-22cf-4d8a-b390-636064eebd1d",
        "cursor": {
          "ref": "97bee4e5-cb15-45f8-b95e-8e59abd93290",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "83c16ede-fe2c-4acc-8b5f-3fe7560ee644"
        },
        "item": {
          "id": "7aac17aa-22cf-4d8a-b390-636064eebd1d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9c154eda-c51e-4d0a-acb7-f171ed1bb358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3971a7eb-3025-4928-8ee1-5bfb6d23d7b7",
        "cursor": {
          "ref": "89b482a1-b71f-440e-8ba9-b98a12f5e6de",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c597d33f-ca3a-418e-a75f-cf3fa832fd62"
        },
        "item": {
          "id": "3971a7eb-3025-4928-8ee1-5bfb6d23d7b7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a3ce256d-e5af-4e75-94f4-9ff760f0a471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1a5896-5835-431c-bf59-cb47f58ef92f",
        "cursor": {
          "ref": "a69e1fe8-0d25-4663-84d8-798591dc443a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "813de144-5110-4a99-b2aa-fa88230d89cf"
        },
        "item": {
          "id": "ae1a5896-5835-431c-bf59-cb47f58ef92f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d1558149-d3f5-456b-b785-ec38b72065ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f58376-701a-4c96-9f42-ddd7e574b4c8",
        "cursor": {
          "ref": "66ee4de3-02e8-4d3a-abb5-f976c0e66532",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9bba43c1-c4fa-437f-936d-a86386b5698a"
        },
        "item": {
          "id": "30f58376-701a-4c96-9f42-ddd7e574b4c8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e9b829a1-1d29-451f-846c-9ff8e89d11ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86514f1c-fe8f-44f9-b4cf-466387c2445a",
        "cursor": {
          "ref": "5913a1cc-aa2f-45ac-9290-8e2f299d5fc0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7f77fd1c-3c17-43cb-aa3f-43ec84aacdbb"
        },
        "item": {
          "id": "86514f1c-fe8f-44f9-b4cf-466387c2445a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2275b82d-ee35-4231-9fe8-2237e1e08365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ae33dd-83b6-4775-a849-e4fa3e79bc98",
        "cursor": {
          "ref": "a7a1ffc7-6e66-46ab-975b-b438a035b12a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1eb85651-e961-4bec-b11e-93f2417de61f"
        },
        "item": {
          "id": "99ae33dd-83b6-4775-a849-e4fa3e79bc98",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a81ee3b-e9cf-48d6-94a2-47548671c518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3ee898-539d-4538-8918-574882bfa390",
        "cursor": {
          "ref": "142158ce-c849-4b4f-ab72-55de2ad56e1e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ab3ad342-1f29-48f8-a433-534d209d6e19"
        },
        "item": {
          "id": "1c3ee898-539d-4538-8918-574882bfa390",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "00fdcec6-e3fd-4c4f-997e-e8e178b6c580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00047f7-87ee-4efb-91d5-f2c6fb36420b",
        "cursor": {
          "ref": "d1ae7168-9b96-40c1-b9af-78f900667734",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0ad4d0f6-78f6-4efd-b99d-582012aebb19"
        },
        "item": {
          "id": "d00047f7-87ee-4efb-91d5-f2c6fb36420b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee2fc563-4e0c-4773-b4e4-61cafd7290f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a5cf6c-52fc-4400-945d-9955624e7a1b",
        "cursor": {
          "ref": "7efef9ff-6404-4d4c-a2b7-7337b167875b",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4c711351-c728-4335-b89c-d6970c63990a"
        },
        "item": {
          "id": "98a5cf6c-52fc-4400-945d-9955624e7a1b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ffff83e2-b8af-4fc2-8508-89248d2cd7b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "16520a27-3789-4822-9676-6c1df479971c",
        "cursor": {
          "ref": "ce050c84-cf23-4fdb-98de-d54817e99ea7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a19a3d4d-289e-476c-9ea8-c5be2df865d3"
        },
        "item": {
          "id": "16520a27-3789-4822-9676-6c1df479971c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "48002bc2-56f8-472e-bded-1c8a47411244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682dff73-6402-4699-a8e1-9f715a6f0847",
        "cursor": {
          "ref": "8bb9652e-c7ac-4dc1-89a0-59f317561b20",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8160896a-8dfb-451c-ac50-30c185857ca2"
        },
        "item": {
          "id": "682dff73-6402-4699-a8e1-9f715a6f0847",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4969f111-7f51-414a-8d85-7a9abff46689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d4cedc-257b-40bb-92b7-243ad5d9f540",
        "cursor": {
          "ref": "6e620d0b-46f1-4c7c-870a-f6b95a46f1d6",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "858b0d3b-72a8-4898-8ce5-fe28cce7667f"
        },
        "item": {
          "id": "a7d4cedc-257b-40bb-92b7-243ad5d9f540",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "73c6d2b2-d82e-4c42-89cd-18a4020acb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01eaf086-a1d2-47d2-b1bf-9febfedcdd93",
        "cursor": {
          "ref": "b888d8ee-3e2d-4876-9777-a57453b73099",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "704e64d1-4370-4f7d-ab23-1f913731da9c"
        },
        "item": {
          "id": "01eaf086-a1d2-47d2-b1bf-9febfedcdd93",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "820fc1cd-be02-459d-801d-02c848dd4080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e88630-7c67-4c45-9537-a660089fd847",
        "cursor": {
          "ref": "e2896321-81c0-4130-b55c-134f94addc30",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a82abb01-bb64-41be-9a31-3db2ba99571d"
        },
        "item": {
          "id": "14e88630-7c67-4c45-9537-a660089fd847",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "02e9f2ee-2b67-4c30-b131-82689eeda04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d461ce-db78-40a5-9ef7-a004c85b44ec",
        "cursor": {
          "ref": "6d983629-37ff-4152-ae6c-6368efba05d7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c94eb1e3-e033-420c-bf68-be144c299f06"
        },
        "item": {
          "id": "d5d461ce-db78-40a5-9ef7-a004c85b44ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4fe9d884-d114-4234-bbd7-062a3fb408fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8258137a-dbbb-4ee7-baa0-40bce23cc7a8",
        "cursor": {
          "ref": "1291c81c-1218-4e04-98ee-fe40efc65f88",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "21c0d868-23ca-4bbf-b789-520d58bfad2f"
        },
        "item": {
          "id": "8258137a-dbbb-4ee7-baa0-40bce23cc7a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b49a637-18cc-47c6-ad7d-be5eb275d6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70db6dc6-e9eb-4c73-9145-ec1a0d7c6406",
        "cursor": {
          "ref": "84318de9-e9fc-4e73-bfe4-1515a80bd84f",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d0a0aa10-43ac-4eff-ab2e-8987f96ef4ec"
        },
        "item": {
          "id": "70db6dc6-e9eb-4c73-9145-ec1a0d7c6406",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3eca59c3-b5a5-45da-8540-9e4787fa8378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06ae338-3896-4a86-a18c-1bfc3defd570",
        "cursor": {
          "ref": "785560c1-f978-43ca-8fca-9f840ebf3fe1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "37c49ac7-348b-4627-affb-9dc8c36cc0da"
        },
        "item": {
          "id": "d06ae338-3896-4a86-a18c-1bfc3defd570",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aedfcdf8-f564-46c0-97bf-01ff3faa6033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613fbbe9-1993-4495-954f-88aa90a4c332",
        "cursor": {
          "ref": "f0e0b1ab-aefa-477e-87da-a917636f5c79",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b7e46049-de19-409c-a33c-be2c470e3675"
        },
        "item": {
          "id": "613fbbe9-1993-4495-954f-88aa90a4c332",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "14a44310-bfa7-48d8-bf84-c1ececa923c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645756c7-06eb-4a2e-90be-863d0b1d922f",
        "cursor": {
          "ref": "2c8d8e7d-9f14-4de0-aafa-fe1470268fd2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b931875b-0c2e-4ffd-a584-0fb3d9b0b0e4"
        },
        "item": {
          "id": "645756c7-06eb-4a2e-90be-863d0b1d922f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7dc9b265-b320-4b9b-980a-a9d45158b054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377ec278-5b92-4907-905e-77f90c4f1688",
        "cursor": {
          "ref": "8d428269-735d-4687-b889-de3a96b1cf84",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b96486af-e8ce-4a4a-9ec3-67c9dd7dea48"
        },
        "item": {
          "id": "377ec278-5b92-4907-905e-77f90c4f1688",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bf53ad75-402a-4fe8-bbb7-61e231d18587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a9175e-f82e-4368-aac5-ee55c075381b",
        "cursor": {
          "ref": "bbee3399-98cf-46a6-89cc-e54d06732122",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b9525bc0-4161-4268-b484-b5d9d0539c4d"
        },
        "item": {
          "id": "e5a9175e-f82e-4368-aac5-ee55c075381b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cd97f72a-5018-4bc8-afa5-32b3c269cb38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460572bf-00f6-4db6-af61-a57d389b5425",
        "cursor": {
          "ref": "38048cda-d606-46d5-a9fc-8a0405e20359",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9e2415a7-4786-455e-adb3-2b34adab7c67"
        },
        "item": {
          "id": "460572bf-00f6-4db6-af61-a57d389b5425",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "893e620b-963b-4c7b-94c7-f13b5219a8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1196aa74-016f-4ae7-aaad-66859f5aacad",
        "cursor": {
          "ref": "c89a5a52-abaa-4ca4-bf29-1b0133cb6d26",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ee2003b4-640c-4410-b2e0-19bf89c04267"
        },
        "item": {
          "id": "1196aa74-016f-4ae7-aaad-66859f5aacad",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "660ac17b-7a85-4e6e-b3d8-4e1c969189fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6efe21a-4e0c-430b-80bb-b2a74005a730",
        "cursor": {
          "ref": "0f5e4e43-060c-4275-8493-2480af90926f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6b063e68-ebec-4318-9829-8b49a46a8531"
        },
        "item": {
          "id": "d6efe21a-4e0c-430b-80bb-b2a74005a730",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "770f5d63-2415-4134-8bfd-d6d1e9617e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0f891c-4610-4b92-88ca-644e19f9bde3",
        "cursor": {
          "ref": "b349c667-851e-4226-8b09-231dc5af3b52",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "209f70a2-7496-4512-8e49-f009f0e4e808"
        },
        "item": {
          "id": "5e0f891c-4610-4b92-88ca-644e19f9bde3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d9ca47ca-b2d2-4ffc-b875-70141c68aab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb0051b-b55c-49e0-b8ed-e6c5358a4586",
        "cursor": {
          "ref": "18f1adf5-e713-4f16-a770-72f8f96c5bf4",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "387ae729-211e-4cb8-b9f1-ffbe78edcea8"
        },
        "item": {
          "id": "afb0051b-b55c-49e0-b8ed-e6c5358a4586",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a20c1b90-90cf-4b1a-a2a4-26ec335b5954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a43d1b-1642-4a12-8439-666c51c58a05",
        "cursor": {
          "ref": "420c06fc-a0ba-40cf-bf21-c61dd9b8c2cf",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4d56f6a7-1798-4cda-95ee-97c9e455ba69"
        },
        "item": {
          "id": "22a43d1b-1642-4a12-8439-666c51c58a05",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5aeaf8ed-f674-456a-a702-60b484bc21b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1346b45-5822-4004-b2f1-ac6abbb3fbcd",
        "cursor": {
          "ref": "2e435fee-6f9f-41d3-a440-6f13c792e1d5",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c45dfad8-926b-4338-b921-970bdec35787"
        },
        "item": {
          "id": "c1346b45-5822-4004-b2f1-ac6abbb3fbcd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ff5f30f7-7931-419f-8bc2-44e04ddc72a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c788592a-b079-4e61-8eb8-4e4519ae00b9",
        "cursor": {
          "ref": "d0a0e88f-95d9-4b15-b8a4-73216fa78ed5",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "58e46822-0955-4fcb-bab7-6e6ebf0d4536"
        },
        "item": {
          "id": "c788592a-b079-4e61-8eb8-4e4519ae00b9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f61aa711-6914-4924-95cc-27d996f8a833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b300f11-0b27-4462-8fd8-13f31a200382",
        "cursor": {
          "ref": "c4129ce9-3af4-4f53-8e46-bafe219052db",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a2390312-fa72-4f61-9d4f-4f41d45bdedb"
        },
        "item": {
          "id": "9b300f11-0b27-4462-8fd8-13f31a200382",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e79a427f-5eca-47bc-807b-0a2d5a2df6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff701624-a27e-4eb0-96fb-b2b384660c90",
        "cursor": {
          "ref": "3d9701ae-299f-43e3-a141-b24e08c468cd",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "503dfee5-b27a-41d2-a7ce-630a48e64bb4"
        },
        "item": {
          "id": "ff701624-a27e-4eb0-96fb-b2b384660c90",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d6f0327b-4432-4ab4-9bea-48b44341c8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c823d30d-8f64-44f5-9b1f-400fee0e096e",
        "cursor": {
          "ref": "34f27def-c2ac-4d40-8266-dff925610448",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55535a79-18e1-43b2-9e93-ffc6322905bd"
        },
        "item": {
          "id": "c823d30d-8f64-44f5-9b1f-400fee0e096e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de6f7bd0-503f-41b1-95e8-4a01d120e929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2703f1ef-e18a-4686-90fc-eb62f570ef14",
        "cursor": {
          "ref": "730f101d-f896-4f86-85ae-4e803af322d3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "73b24f5e-4cdf-496f-9198-11bc491d488d"
        },
        "item": {
          "id": "2703f1ef-e18a-4686-90fc-eb62f570ef14",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "75b81661-726b-43ca-89ff-eaaaa4df76e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c4979b-04c4-4c38-a836-9148eb19af28",
        "cursor": {
          "ref": "a6bf28ef-8371-42bb-833b-85b5e906ba28",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c28fd1a6-4e97-44a5-a788-d8d9e9642617"
        },
        "item": {
          "id": "59c4979b-04c4-4c38-a836-9148eb19af28",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ce674b58-ec1e-45c6-81a2-cd7306ef7653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9fb64c-8076-4529-8dc4-cdad1cabffb3",
        "cursor": {
          "ref": "1ac52911-c6d3-4d20-93d0-a8d8eb979a05",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "331829d1-6d52-44c4-8e12-c93fb1fefea1"
        },
        "item": {
          "id": "cb9fb64c-8076-4529-8dc4-cdad1cabffb3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fdafe3e8-790b-401a-81f6-eb0da33896a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce171b1-76de-4ffa-9ce8-221f4a2756a7",
        "cursor": {
          "ref": "16aae233-6f38-4845-8ca9-b692e8164d6f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e6267213-ae22-4a75-b03a-b914ec6275b3"
        },
        "item": {
          "id": "8ce171b1-76de-4ffa-9ce8-221f4a2756a7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4cb0524c-af0c-4dfd-b8e2-a3a0a5deba40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5333c61-62a3-454c-a492-60c9980ce3d2",
        "cursor": {
          "ref": "a3c9120f-937f-4c50-b475-aa9120375937",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cb34d3f4-0dbd-4248-97d5-8ebb7a1550f5"
        },
        "item": {
          "id": "d5333c61-62a3-454c-a492-60c9980ce3d2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a02b6074-3930-4e4e-9950-4087cdc49cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22f74a5-7ac5-447a-99ae-52cdf9b7db61",
        "cursor": {
          "ref": "d122bbfa-763f-4683-b381-4b7e94839d76",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a62840d8-04d6-4501-a534-ed754c827018"
        },
        "item": {
          "id": "a22f74a5-7ac5-447a-99ae-52cdf9b7db61",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a038b699-18ac-4fca-b1e1-a650b85fab15",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "45d82882-04eb-4cd4-a5bf-317d9da3a8ed",
        "cursor": {
          "ref": "8a19c361-e894-44c3-b980-352cf0de688d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e69be53d-8510-4d4b-a80a-897921072e61"
        },
        "item": {
          "id": "45d82882-04eb-4cd4-a5bf-317d9da3a8ed",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "25aac66c-140c-4fc0-847c-1cac5cfa9ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ccf1ad-36a6-4684-ac0d-bc649ced45bc",
        "cursor": {
          "ref": "09a739f2-9355-4d9f-899c-b4d3145e7476",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "634324a4-1ac8-4335-b603-e4b6db2cc374"
        },
        "item": {
          "id": "55ccf1ad-36a6-4684-ac0d-bc649ced45bc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a4abde50-1972-4a21-9b5d-74b1622f53a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4e7ba8-12f6-4b95-af29-ba4585778b97",
        "cursor": {
          "ref": "6bf49d2e-8eea-46f3-9130-183b57da8148",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a604df95-359b-43ac-9f21-23342f8675b1"
        },
        "item": {
          "id": "1a4e7ba8-12f6-4b95-af29-ba4585778b97",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8c74af02-1e7c-4047-b09e-4c857e1f4d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5213795f-1e19-47cc-a313-29c08127de5d",
        "cursor": {
          "ref": "7ec909b9-f4f9-46f4-b2d7-1a9c6d858c7f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3e198aaf-d286-4b26-8aa2-0dc48cd85991"
        },
        "item": {
          "id": "5213795f-1e19-47cc-a313-29c08127de5d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cbd97b5b-affa-46ae-b8d5-c211003ab245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaaf604-dbf0-46b9-8c30-b158e589ccd1",
        "cursor": {
          "ref": "fd71055a-7e23-4b64-9194-0ead1f825d98",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "86fdeabf-a1bc-4a95-9ce2-35a245ce28fa"
        },
        "item": {
          "id": "caaaf604-dbf0-46b9-8c30-b158e589ccd1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9db901b9-995c-4643-9c61-1067b274d3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6995455e-2e3a-4a56-b5b3-fef297b32419",
        "cursor": {
          "ref": "8c74c632-bd29-4ba6-bf89-fd271e901610",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "336bb749-5585-4573-8587-d3fb49bebf03"
        },
        "item": {
          "id": "6995455e-2e3a-4a56-b5b3-fef297b32419",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c30776a5-91da-4deb-ba09-3b5c374181eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6290c404-2dde-4749-ae6b-a2731c625ce3",
        "cursor": {
          "ref": "3a6e0c5e-d9d7-4c17-bfab-085242b00682",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5654c0c8-9cad-45a7-9d43-bbf160c39162"
        },
        "item": {
          "id": "6290c404-2dde-4749-ae6b-a2731c625ce3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "dcae09d9-3d32-4ac1-92ba-dd17197473e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188caa94-2d79-4aef-b7a9-71f420618fad",
        "cursor": {
          "ref": "fd92b081-c0e8-4033-90e6-5bd0da46d14b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "abde9920-ec58-4e99-a920-34fdb811aba0"
        },
        "item": {
          "id": "188caa94-2d79-4aef-b7a9-71f420618fad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e2ec1813-72f2-4093-8fe1-6ab8a9ed22ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec773a7-3dcf-4430-b291-ec4f83c6eca5",
        "cursor": {
          "ref": "6c8b5b0b-c49a-452a-a898-2e249fb6d754",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3d3fba92-557f-4dde-98b0-43d95645015b"
        },
        "item": {
          "id": "cec773a7-3dcf-4430-b291-ec4f83c6eca5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "522d05a3-981b-414b-bec8-009e29ebf621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842f6504-9ddc-41d2-bc42-b370b9c6eba3",
        "cursor": {
          "ref": "ce789b9a-ae6f-445c-9f58-ecf4defff041",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "40ceefc1-59d9-420c-bfd8-d776e2055c13"
        },
        "item": {
          "id": "842f6504-9ddc-41d2-bc42-b370b9c6eba3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f2c9de99-f2e7-410c-99a4-5eaeea61d546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8156f42f-8225-4cfc-a1e6-4eb24f3d7392",
        "cursor": {
          "ref": "e41bc735-f460-40f4-bd9d-cdcaf08e29ec",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "24e10230-ccae-416d-bd6b-48cef2801832"
        },
        "item": {
          "id": "8156f42f-8225-4cfc-a1e6-4eb24f3d7392",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "91eb4578-1a54-4d38-8685-969e2e714f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ef57ad-0333-46c8-abcb-b3d9aea69f7d",
        "cursor": {
          "ref": "75611596-88cc-414a-8221-2c9d0023ebef",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5f937870-b90e-4f5c-9ef6-2b922a94af85"
        },
        "item": {
          "id": "e8ef57ad-0333-46c8-abcb-b3d9aea69f7d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1ea52ef7-3f48-4918-b283-dad2e78fe3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfcfa7b-00fa-40e6-8e47-61a968d0801e",
        "cursor": {
          "ref": "b2441908-da48-4e18-8d55-98ceb28bdfc2",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bada8059-228b-4626-9398-1de79c3bb357"
        },
        "item": {
          "id": "4dfcfa7b-00fa-40e6-8e47-61a968d0801e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6413b0e7-7469-4012-99d1-af3939e3db93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615d0d6a-9308-4118-81da-325055aa2e41",
        "cursor": {
          "ref": "8f194e03-0374-476a-a9bd-633d4a2beed2",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "90b7929c-b93d-4c41-8996-a3fcbaf87c83"
        },
        "item": {
          "id": "615d0d6a-9308-4118-81da-325055aa2e41",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5d5c8df4-a86c-4094-ac76-0d659b98ed70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebfd64d-84cb-4a2e-9e41-257b51439d3b",
        "cursor": {
          "ref": "2ef4134d-d65b-4274-992e-8f3a887835e6",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4cd297c7-0e8e-483b-94ec-5e144587597c"
        },
        "item": {
          "id": "5ebfd64d-84cb-4a2e-9e41-257b51439d3b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "69540fcc-5b24-49a9-a1b3-788c640b87e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f285f2d0-ae6e-446c-9434-eb4ee15e7050",
        "cursor": {
          "ref": "1655f8e6-952a-4600-9043-dc233935fa22",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "69033e76-f3e4-4d9e-9060-3ce5b3806704"
        },
        "item": {
          "id": "f285f2d0-ae6e-446c-9434-eb4ee15e7050",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "28b3dcda-d262-49b7-ad7f-b3e3cd01fd15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79430ae8-6a75-405b-95fc-edb570f7937d",
        "cursor": {
          "ref": "e59c56ee-1cb3-48a0-996b-d2218164a754",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0b52a542-09f9-444e-b9b5-3446c40be024"
        },
        "item": {
          "id": "79430ae8-6a75-405b-95fc-edb570f7937d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "30fc4991-eca8-480a-aa8c-c3ed09e1ec39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c58341-b77e-49be-87c9-3eca5c497cfb",
        "cursor": {
          "ref": "68f1d791-781e-4779-a90d-9c94291ab104",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3e518dbc-4518-4fba-b0cf-aabcb2514a15"
        },
        "item": {
          "id": "67c58341-b77e-49be-87c9-3eca5c497cfb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6056f9b3-6150-425a-ab77-a18b5c6974ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344b47ba-9c46-4eda-a119-5010ace95ecc",
        "cursor": {
          "ref": "614a8eb3-1254-413d-a94e-c52a88ccf2ea",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e9b78d18-1c53-4cf5-a9ea-951c75b96795"
        },
        "item": {
          "id": "344b47ba-9c46-4eda-a119-5010ace95ecc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e9727ca3-b18b-4d3f-8003-04b4772096a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1bf1c1-f3a3-4438-b5ae-ed917ae383ef",
        "cursor": {
          "ref": "f03fd7e1-790d-458f-ac34-17e1e5b5df50",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a2b8eb2e-9a33-435a-92d8-fa1df76fc850"
        },
        "item": {
          "id": "be1bf1c1-f3a3-4438-b5ae-ed917ae383ef",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c2ce0701-b1ed-4792-a4bf-0f61cbc030cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b86e519-cc84-4a7b-acfa-21ece1446f42",
        "cursor": {
          "ref": "0b923275-a859-4cd8-82e9-61ee03ad4649",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d451e662-2890-415c-bdd6-c366f86b8faf"
        },
        "item": {
          "id": "4b86e519-cc84-4a7b-acfa-21ece1446f42",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9b81d403-6ec3-46e7-9944-5604e122d9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad70f2f6-a0b8-4ea4-adfa-8564b54d47bb",
        "cursor": {
          "ref": "6f50bc0b-40d9-4b89-bb25-6a2c39f9851b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b2494580-503a-4fc1-a305-e2c9235bb155"
        },
        "item": {
          "id": "ad70f2f6-a0b8-4ea4-adfa-8564b54d47bb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cbeb9656-fb7b-42d2-bd01-e3c78b7a6d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6cbda8-d183-416c-8e3c-2a8bcba38cab",
        "cursor": {
          "ref": "a02ccf80-4a2e-4b79-87e3-6cde7c2d8bf8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e5856acd-b79d-4635-8c96-f018e073f8a1"
        },
        "item": {
          "id": "7f6cbda8-d183-416c-8e3c-2a8bcba38cab",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8b1115b2-c8af-4ad9-afe3-5c7d03e7d967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc10359-dd72-4f59-8a29-4c6cfb4ef80b",
        "cursor": {
          "ref": "df87007f-f5a5-4272-ab2f-b5184b4fd1b8",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0dfc313e-dd8c-4a46-9971-fdbbeeff0d6a"
        },
        "item": {
          "id": "4dc10359-dd72-4f59-8a29-4c6cfb4ef80b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "42a1844c-18f6-4dec-bd70-26af90e0f8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d46940-4ab5-4120-afd7-46ecb659f29b",
        "cursor": {
          "ref": "c56fce10-f4ab-4ff7-ac81-cd786bf94074",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4698e988-b1eb-4112-ae88-18870ac67c05"
        },
        "item": {
          "id": "71d46940-4ab5-4120-afd7-46ecb659f29b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "54c493b1-9859-4361-84a6-0a87ca5f9b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0922b050-1f59-442e-81bc-956299511225",
        "cursor": {
          "ref": "680fc0b2-20e7-4d5b-895a-bb8ce8776712",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "53293c56-e3b5-4901-9ed4-021113a64d6e"
        },
        "item": {
          "id": "0922b050-1f59-442e-81bc-956299511225",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "501eb017-0890-4926-9563-319172ca4bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b22d913-3d8f-458e-b97c-991f041bd311",
        "cursor": {
          "ref": "e7a8fcab-153c-4652-8c45-0430eb616ced",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e8d4f4d6-21f2-4bb3-9332-f50f7c2b347f"
        },
        "item": {
          "id": "8b22d913-3d8f-458e-b97c-991f041bd311",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3534d1a7-d111-47cc-830e-0bc95ab019da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b2379-ea76-4118-aabf-9bd0ebe56ba1",
        "cursor": {
          "ref": "aea4f9bc-672c-43d5-bcbf-0d94d9410416",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "60f092e1-1d19-4177-9040-103d93796e95"
        },
        "item": {
          "id": "fb4b2379-ea76-4118-aabf-9bd0ebe56ba1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "328a3144-2bcb-4599-b7fc-7518513a9665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b34155-2ae8-42e3-ab12-a30330b0ae05",
        "cursor": {
          "ref": "44b51de9-d15e-4b33-b84b-7e5f3b83040e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7af448d4-203b-44ea-8d31-0caa386515f4"
        },
        "item": {
          "id": "94b34155-2ae8-42e3-ab12-a30330b0ae05",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b4e7a198-df8e-4ffb-b44e-18f3afb45d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5cc5d0-a943-466f-8814-8ae7d59d86b1",
        "cursor": {
          "ref": "1f385c62-0187-4081-aaa5-937ba3ee5df9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6af57260-1953-4792-bcdf-0e2b4bbca058"
        },
        "item": {
          "id": "0c5cc5d0-a943-466f-8814-8ae7d59d86b1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2cb23aad-8a9e-45a6-9063-34c6b96df1a9",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "da839b61-5717-44f4-8710-d561f24ea4f1",
        "cursor": {
          "ref": "9e3844c0-76d5-42f6-931b-46b7afa2d9a7",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cf5cc7f3-7faf-494f-b31f-7dd7da6c9a81"
        },
        "item": {
          "id": "da839b61-5717-44f4-8710-d561f24ea4f1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "565b6f6f-3e66-4070-aa40-59174aa8ff74",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c4bff0cb-40b2-4a21-9e30-1f4c959bc3c1",
        "cursor": {
          "ref": "b3d53890-b24b-4c88-8466-bfcbb386ef2f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "316e047c-0bc0-4eed-96e5-3b18e33180a5"
        },
        "item": {
          "id": "c4bff0cb-40b2-4a21-9e30-1f4c959bc3c1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b9159635-925c-424f-8a15-3445208446c8",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fd2d376a-485d-4b6c-8697-8344c6a766d4",
        "cursor": {
          "ref": "59c72c06-29e3-47df-9659-bd1083e40760",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "49a560eb-e0e0-48a6-9bba-6e010ea3aee0"
        },
        "item": {
          "id": "fd2d376a-485d-4b6c-8697-8344c6a766d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0df9457f-0b42-4b79-be61-3c8136f239a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c6931-c6fc-46c0-a0c8-dfe2479dd7f9",
        "cursor": {
          "ref": "7c5fbd67-3569-4177-bf5e-68ca809c5c1e",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4603f70f-b3de-45af-939e-fcb2763a6f48"
        },
        "item": {
          "id": "1d1c6931-c6fc-46c0-a0c8-dfe2479dd7f9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c8509609-8537-466b-aaf0-e3bec8776ce1",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "03b616e7-a322-435d-b86c-1db288d7ae85",
        "cursor": {
          "ref": "3088bace-d378-4d52-b29a-d410a51e8259",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e4eff4b7-70fb-439b-9b22-df0238e14fb3"
        },
        "item": {
          "id": "03b616e7-a322-435d-b86c-1db288d7ae85",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ecc87fe2-04b8-41ac-a040-78c32d42dd69",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3fb8647a-c9f8-45b6-96c9-241b034714d8",
        "cursor": {
          "ref": "78463b49-eb32-4703-8037-703cf25330dc",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "38d521e1-aee6-482c-954f-58af0eca3842"
        },
        "item": {
          "id": "3fb8647a-c9f8-45b6-96c9-241b034714d8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "383aa7f0-72f0-4bf7-a9cf-229796c9ee9d",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6a8468a4-7c8e-464b-a687-270686c778ca",
        "cursor": {
          "ref": "ef3fe6cb-313f-4cd1-a106-b45a1c9bd2a3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c01df185-62e5-4862-94ef-c29039c66335"
        },
        "item": {
          "id": "6a8468a4-7c8e-464b-a687-270686c778ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "234b87ca-ab47-453b-ac12-c4b0f8c70f8b",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "989055b7-869a-484e-935c-6347580e5641",
        "cursor": {
          "ref": "18c68f97-06a5-410d-b795-5d4db3adec45",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "619f81d6-168a-42ed-90ea-952a41556ce2"
        },
        "item": {
          "id": "989055b7-869a-484e-935c-6347580e5641",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0255e319-b684-483d-b682-3867cc3be421",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e9f6d6a3-2331-4fcc-883e-dfaf6d40d07c",
        "cursor": {
          "ref": "2b1e5e0d-c937-4597-b8c0-861e44259e3c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "99ae081e-7480-49b8-9251-f5157b583398"
        },
        "item": {
          "id": "e9f6d6a3-2331-4fcc-883e-dfaf6d40d07c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4ec3a0bd-dda1-4f10-82de-55d8224c3bd3",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "88da4a86-1a19-473f-b789-f797ceb883bd",
        "cursor": {
          "ref": "1df5698e-2f41-4507-97da-9984a33f4762",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "32096b9c-a1c6-453f-90d7-55ddbf2e331b"
        },
        "item": {
          "id": "88da4a86-1a19-473f-b789-f797ceb883bd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f275b584-61b1-48dd-b4be-4555c3b14c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c013b210-ca82-4c03-a45d-8232cc2ef585",
        "cursor": {
          "ref": "2c46494a-000a-46aa-bcc4-ee187697ea57",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4c2799cb-5ea2-4eef-8a17-6dbb485f09d7"
        },
        "item": {
          "id": "c013b210-ca82-4c03-a45d-8232cc2ef585",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "57ae00ef-3afc-4f5e-9338-30e10f7c5c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f85383-0e8d-49e1-b8f5-a3b24739a4a5",
        "cursor": {
          "ref": "6d88fd60-5dd8-4d3a-94d9-df99828e2c4f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d67cd252-c08c-4098-81d8-a84b0dca28a0"
        },
        "item": {
          "id": "80f85383-0e8d-49e1-b8f5-a3b24739a4a5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b2e34f97-bca0-42f3-a091-474d3bcb4cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f49007-b521-47fc-9051-bf9d019d11fc",
        "cursor": {
          "ref": "afeb37b4-a94c-4a00-a541-7001c2dfd2af",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b2f8afb4-8cbe-4694-86e5-8a3a20c61a91"
        },
        "item": {
          "id": "29f49007-b521-47fc-9051-bf9d019d11fc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "306ad849-7e91-4b4f-9053-f5bbacee5d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3ed28-d3c6-4e39-8c32-b147cd0fb9ab",
        "cursor": {
          "ref": "1dc3168e-4e87-41b5-b188-ec0521260462",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f098cd26-479c-42fe-a579-852cedf4ee4f"
        },
        "item": {
          "id": "bee3ed28-d3c6-4e39-8c32-b147cd0fb9ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7a7523be-c849-48eb-8a41-8e71a2b1e33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a284f5-87d0-4997-912e-f46b216531a9",
        "cursor": {
          "ref": "5e69c511-56c2-4850-93ff-d12cad4ea05d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8adbd1d5-8556-4e10-a73d-5f6c807014db"
        },
        "item": {
          "id": "79a284f5-87d0-4997-912e-f46b216531a9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c22f220d-ff03-4332-b291-109b38eb1433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e142561-d97b-4881-970d-7188760a6c84",
        "cursor": {
          "ref": "29227c0b-bf1c-4b34-852c-9d597bd1b367",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9f155d23-d9e8-45db-b43a-943d1759a25f"
        },
        "item": {
          "id": "2e142561-d97b-4881-970d-7188760a6c84",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "39fba7eb-4013-4297-93a2-49a0a91c4eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f03206-5e0d-460a-83af-7a4a4dc8b12b",
        "cursor": {
          "ref": "9977dc7b-d700-4209-800e-257d9e51fd71",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9cf98760-da9b-448f-97d6-66cccd145f06"
        },
        "item": {
          "id": "50f03206-5e0d-460a-83af-7a4a4dc8b12b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0539754a-fb66-43db-90cd-db8ae6c2a800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c728e3c4-4053-421b-91f0-8106a44fe6bd",
        "cursor": {
          "ref": "50d502ed-4504-43a7-8f8c-640413cd499f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "41279bf7-2426-4936-93d7-da1bc9f67ac3"
        },
        "item": {
          "id": "c728e3c4-4053-421b-91f0-8106a44fe6bd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a1f08b93-3378-4876-ad3f-988174a5b91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d06360-f9e4-400d-9464-3395f588ebf3",
        "cursor": {
          "ref": "cf9fea1b-0932-4846-8653-2cdad76cf298",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0d48b51f-e879-4e18-8626-f327a80c64a0"
        },
        "item": {
          "id": "84d06360-f9e4-400d-9464-3395f588ebf3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e1ae05de-bb5a-4b5b-adb8-f8467bd51dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b469a8a9-c502-473d-9646-320f28912767",
        "cursor": {
          "ref": "f4ff346a-d28e-46fe-a2df-87b99b8a276f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d75371ed-995f-4d56-b38b-aed9e9b6956d"
        },
        "item": {
          "id": "b469a8a9-c502-473d-9646-320f28912767",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "afa4cae4-38bf-48ee-917a-96562ebc3a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed436c9-fef8-43a8-82f0-97829f53d5dd",
        "cursor": {
          "ref": "8d38db4a-c2cc-4c31-885c-8f1e0f237fb6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "069d68d1-e779-4172-a989-f4aaecd042cf"
        },
        "item": {
          "id": "7ed436c9-fef8-43a8-82f0-97829f53d5dd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "23a37b15-2431-45b6-a3e0-4522ba7695dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c518f46-bcce-436d-a4eb-9c6e0c139f04",
        "cursor": {
          "ref": "8f8f30c2-4178-4817-8a2f-eda44b17a301",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1c764c02-0375-4605-bf97-2b26083b21b3"
        },
        "item": {
          "id": "2c518f46-bcce-436d-a4eb-9c6e0c139f04",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cdf58a7a-8387-49f7-96df-039a2884ebdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfeebc66-f2c1-40ae-a68d-31d1955631b0",
        "cursor": {
          "ref": "564d3e15-bdd5-4c84-8532-b1872d9d0fbd",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c43eb5ba-08e0-4615-808e-40d77d251d1d"
        },
        "item": {
          "id": "bfeebc66-f2c1-40ae-a68d-31d1955631b0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "83282b2e-9268-48b3-b400-c556e49ab80e",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "40d14f34-5851-4a2b-a5e5-e4c246f20265",
        "cursor": {
          "ref": "67944dc2-a032-4533-bd70-a51742bb0809",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0222308b-ce83-4641-8859-5a75435c6516"
        },
        "item": {
          "id": "40d14f34-5851-4a2b-a5e5-e4c246f20265",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7a9cb5b3-b40f-438d-b468-0377dfb69510",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d4341ac4-c0a9-46c4-af4b-9faa8c273f16",
        "cursor": {
          "ref": "7e0e8e80-8421-4f2f-bfed-76ac4ee0d1d9",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "66128f88-f9ab-4253-b5d7-58a96105a7aa"
        },
        "item": {
          "id": "d4341ac4-c0a9-46c4-af4b-9faa8c273f16",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f7dd2e59-935f-4f8d-8d57-04bdc8e2c04a",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "098bc7a0-1c8e-4dc5-ace2-3bd775996282",
        "cursor": {
          "ref": "10a6ec8c-794e-49e9-addd-74fb581598a9",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3a076a08-face-4366-8ba3-fc46aaaf3a73"
        },
        "item": {
          "id": "098bc7a0-1c8e-4dc5-ace2-3bd775996282",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8a15c18c-22ba-413e-aaa7-b770c9942c2a",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "34dcb85d-d97a-4fb3-8385-887ec6a22450",
        "cursor": {
          "ref": "08abca7a-fe71-404f-a78e-a48b9402526e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0159d6ac-a420-4c66-9039-ee8a090e1dae"
        },
        "item": {
          "id": "34dcb85d-d97a-4fb3-8385-887ec6a22450",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6386c29e-a2c4-4257-b3e7-eb48339843b9",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f1feff16-5478-481f-95f4-1de095766b34",
        "cursor": {
          "ref": "a7d139a5-912a-461a-9ac9-b57536c718ec",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d91d08c4-83c6-4d23-87af-eee05ced685f"
        },
        "item": {
          "id": "f1feff16-5478-481f-95f4-1de095766b34",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ef877795-e224-4283-ba7f-171acf437a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762fd1af-d586-4091-80bf-ae5a12ebcbfc",
        "cursor": {
          "ref": "ba2688b6-c90e-4807-9a81-0a0c3cd22a25",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9e69602e-b8e1-4304-86c0-944a4c08eb12"
        },
        "item": {
          "id": "762fd1af-d586-4091-80bf-ae5a12ebcbfc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5e890d7b-d4ef-4f6b-907e-984820882fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b445e1d-b422-4529-b32c-ffc33b7962eb",
        "cursor": {
          "ref": "9698f9b6-11c9-4852-9f37-39a970814ab1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7547e093-c772-4ff0-baad-daec76c93d43"
        },
        "item": {
          "id": "2b445e1d-b422-4529-b32c-ffc33b7962eb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b6a85c90-5778-49f0-a0b2-04a637ed8d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600b67e1-032f-42f0-a47a-6697929629b4",
        "cursor": {
          "ref": "29992dfb-a681-4777-a879-7e96758910b8",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b762d69-29a8-4fce-aab2-29e5b9b7d74a"
        },
        "item": {
          "id": "600b67e1-032f-42f0-a47a-6697929629b4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "757dfbcd-7db7-4d19-8e11-9444acdfef55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6de02a-8d4b-4d1f-96f4-f93b198b1434",
        "cursor": {
          "ref": "7ba2d6de-928a-4768-a3cc-61352d21ea22",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c8183cc7-5661-4fb0-8436-dcbf9ab11cad"
        },
        "item": {
          "id": "7b6de02a-8d4b-4d1f-96f4-f93b198b1434",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b634d154-f63f-4b70-a838-4a7ab36b9faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e63373-4262-45d8-9c7d-43798cb88433",
        "cursor": {
          "ref": "091f081f-fdab-43c7-a053-79e1c2b835b9",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2a34bc46-51e7-40b6-a1bc-75c6a758eec2"
        },
        "item": {
          "id": "f2e63373-4262-45d8-9c7d-43798cb88433",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c84b8e94-d791-4d38-a049-3bb2c826067d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d794cf73-f320-4d4c-870e-48a9cfaa9e25",
        "cursor": {
          "ref": "78ee0e6a-f926-4d28-a5aa-eb461ed80c7a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc2063f7-812b-40d9-9921-72e915b69d90"
        },
        "item": {
          "id": "d794cf73-f320-4d4c-870e-48a9cfaa9e25",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9276f1d9-f66d-4762-8772-08dc57e84fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4bfcd7-5009-4a16-a5a1-67ae5ca4d101",
        "cursor": {
          "ref": "adb7a1d7-b165-401f-b2b7-90f81f94692b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7e79833a-58fa-47f4-bd2f-897eeac30ab1"
        },
        "item": {
          "id": "0f4bfcd7-5009-4a16-a5a1-67ae5ca4d101",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b877e058-1c79-445b-8cfa-6275630aac00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45261c2e-d86a-41da-92b3-aa775dddfb0f",
        "cursor": {
          "ref": "1fbc47e4-99cf-42e5-ad59-8667aa6846bc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4d5efda9-7950-42ea-87ae-4031b6c77537"
        },
        "item": {
          "id": "45261c2e-d86a-41da-92b3-aa775dddfb0f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "24d2b224-ad9f-4ba7-9ec9-da2446942ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4343df7-1278-41d4-abfc-f56a0d317a90",
        "cursor": {
          "ref": "e0ac72ef-7bc8-4645-a91c-41f69d2db521",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a16228b5-109c-4424-af3e-06be1ddde6e5"
        },
        "item": {
          "id": "b4343df7-1278-41d4-abfc-f56a0d317a90",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b6cd8c3b-f818-45d7-9e68-952b090cdab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2c3652-e1ce-4c71-9e93-76c02f82252d",
        "cursor": {
          "ref": "dfd79b0c-623d-435d-b446-3a9b0864cdce",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b93ea81f-5590-46ae-92a3-c2df0b152875"
        },
        "item": {
          "id": "8e2c3652-e1ce-4c71-9e93-76c02f82252d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ef0e29a1-827b-4f0e-931f-9791e2aaeb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa59899-4c48-4f3c-b5e7-6c677a908bbb",
        "cursor": {
          "ref": "8a4fbcdb-9d7f-4593-8ca2-0b6647de371e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ee7e0f0d-28cf-41af-87e3-8a3d4ac2336a"
        },
        "item": {
          "id": "9fa59899-4c48-4f3c-b5e7-6c677a908bbb",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b6903ca7-76a7-4302-abc5-ef44987eeabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c779f11-1923-4e0b-a840-924ae7aa51de",
        "cursor": {
          "ref": "89ce734a-756c-477e-8e67-c1e3718213d2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "193f862d-4690-4354-909f-7b66835653c9"
        },
        "item": {
          "id": "3c779f11-1923-4e0b-a840-924ae7aa51de",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "645659e7-c752-41da-91bd-521bdebb5e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5720e7e6-27ac-4c2b-8748-b29c58f69059",
        "cursor": {
          "ref": "3e51cb74-4c0b-4d4f-9e4c-5d81abe6bf8e",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "53de03b2-c8fe-4d25-8ed9-2d21d537c2fc"
        },
        "item": {
          "id": "5720e7e6-27ac-4c2b-8748-b29c58f69059",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "409bfd7c-d477-49f1-8fdd-8d1bc94dc135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b7a49a-44f4-4b1c-9371-e13054c22b3d",
        "cursor": {
          "ref": "2c633807-26df-4299-a90b-c0e37e45f557",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "27db294c-969e-4357-93ae-acba4f5dbd76"
        },
        "item": {
          "id": "06b7a49a-44f4-4b1c-9371-e13054c22b3d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f515e289-d8dd-42b2-8ce9-84f832255eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887fa895-b2d8-4969-aefa-df3b20f6fc17",
        "cursor": {
          "ref": "88f1c6fd-09ff-49f7-8ee9-911964785815",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ecbd249a-c255-49f9-9ead-e4032a888f82"
        },
        "item": {
          "id": "887fa895-b2d8-4969-aefa-df3b20f6fc17",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "17e42ce4-db2e-43d2-af83-d3969ce51aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5e5fc4-2ece-4d7c-93e2-d1f083dfd7c3",
        "cursor": {
          "ref": "f1d0a5a3-794d-4f84-bc1f-d98fb2fe7b5f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "db7a0356-27e2-4f35-b3f4-955620e6c24c"
        },
        "item": {
          "id": "7e5e5fc4-2ece-4d7c-93e2-d1f083dfd7c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8702692b-9379-4ebf-83c4-ca8f63491458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e927484-8d5c-43a9-b451-0d6c7479b2e1",
        "cursor": {
          "ref": "ff0c9ec0-6613-4edf-a08d-2226e45f5d20",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e6b6576c-9423-4361-81e2-e78fce36d951"
        },
        "item": {
          "id": "7e927484-8d5c-43a9-b451-0d6c7479b2e1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c0aeda1e-06fe-4aab-8871-e7fd2beeaea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01abed77-e113-4206-ba80-81b84ce4e155",
        "cursor": {
          "ref": "28aa70be-6862-435a-a8ba-94b38c28c334",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "de63fa6a-bf22-48f5-b5d0-ce444280bf91"
        },
        "item": {
          "id": "01abed77-e113-4206-ba80-81b84ce4e155",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "29e29771-729e-4589-8c99-defbf9125623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509ea547-f056-411f-bd5b-468589f37892",
        "cursor": {
          "ref": "eeda5978-e0a4-4af6-9426-b9c3228b6a34",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "53b9bce4-e7ac-47f8-b4a5-d3337277c629"
        },
        "item": {
          "id": "509ea547-f056-411f-bd5b-468589f37892",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "36a60881-e64f-4020-b4be-219ef2e4357d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5e7bc8-c665-4342-a134-368e39ec39c9",
        "cursor": {
          "ref": "71ca07bc-89f2-468c-8acc-07fa8a48db97",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "de83a5c3-c1f6-4b84-b3f0-d69af2bacb48"
        },
        "item": {
          "id": "0b5e7bc8-c665-4342-a134-368e39ec39c9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "be4ecb72-2702-419b-994a-3c5d8cea7aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02c3460-a317-45e2-b4bc-9c833d49c05d",
        "cursor": {
          "ref": "592fcbb5-efca-415b-9458-76815d12a3fa",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f46e4208-accb-4199-bf19-38716419fb4a"
        },
        "item": {
          "id": "e02c3460-a317-45e2-b4bc-9c833d49c05d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f550b196-52f9-4683-a25a-be1d1432edfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6308ee39-7f41-4383-a31b-5c909ac220f6",
        "cursor": {
          "ref": "e06388f2-b9b9-4cd1-88a8-49ba4a1a9307",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "023325e2-ce74-4a9f-a8e3-06d3c40aa1f5"
        },
        "item": {
          "id": "6308ee39-7f41-4383-a31b-5c909ac220f6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f3da5a26-4e00-417b-95e8-a44641f783b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92978d62-43ee-4e27-b8bc-b8ce915e5635",
        "cursor": {
          "ref": "d8464f08-fd75-4b83-8ec7-8563a81d93f4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "031e561f-6b5a-4308-819d-44bbaab76bff"
        },
        "item": {
          "id": "92978d62-43ee-4e27-b8bc-b8ce915e5635",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7acf9253-afd3-4e37-8de2-fef230da9bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea202878-be64-40c7-8ef1-91c4027f2064",
        "cursor": {
          "ref": "b384e469-e645-451d-afcc-5a16171259a7",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "49d13ee7-18ea-4fe7-8b99-3f86271c2d92"
        },
        "item": {
          "id": "ea202878-be64-40c7-8ef1-91c4027f2064",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cff6543a-b25b-43af-a7dd-a8bc2865eed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad1a94a-05be-4cc9-a3fe-d84624477fc2",
        "cursor": {
          "ref": "3241cc2f-1dcf-41f2-9641-be4133dc1f41",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9fe1d5d9-ca91-4dc5-8dfd-6f054fa5940b"
        },
        "item": {
          "id": "dad1a94a-05be-4cc9-a3fe-d84624477fc2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "297223e6-b44b-4970-b8f0-8d50fd8b269c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0126c9f-fee3-43d5-b98f-ed8ad5e628eb",
        "cursor": {
          "ref": "71c4ca36-fa49-42f1-b618-3144e5592298",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "89fdaa42-4b3e-468e-b556-eadc6f6efd5c"
        },
        "item": {
          "id": "e0126c9f-fee3-43d5-b98f-ed8ad5e628eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1a30e414-a261-4ef6-beb7-d7e1031f3cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c76009c-a42d-4ef6-9fe4-a1844389e395",
        "cursor": {
          "ref": "55d318f0-6c28-441a-973b-f33828a8327d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ec19af18-bc17-45c7-9de9-6a8f765df82c"
        },
        "item": {
          "id": "8c76009c-a42d-4ef6-9fe4-a1844389e395",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8b92bd5e-16c3-4d69-a81b-729da30f5c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ae72b-0dc4-4219-83bf-e40f98944102",
        "cursor": {
          "ref": "6cdbbc74-0ee9-4d97-b242-f4182d4d9531",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "95e380d4-f00d-4c77-acc8-4d4049cf5cc1"
        },
        "item": {
          "id": "9c4ae72b-0dc4-4219-83bf-e40f98944102",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2ec52161-0bfa-4f43-961f-71a960cd3474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192654ef-48d2-4c1d-9df3-ef28a52d8746",
        "cursor": {
          "ref": "0f1986d7-be74-4afd-be6b-4ee83910f2c2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "58228e67-95f8-4ddc-81ba-7bb4a1690e13"
        },
        "item": {
          "id": "192654ef-48d2-4c1d-9df3-ef28a52d8746",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b68bd7cf-a43b-40df-a593-e6f3ca35da31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3010aa99-f689-43f0-ab70-4f3ee277d31b",
        "cursor": {
          "ref": "dd9cc86e-0d70-4c5a-bebe-177d62ec6af3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a7b9f68a-09f8-49ae-8b40-e919078ff845"
        },
        "item": {
          "id": "3010aa99-f689-43f0-ab70-4f3ee277d31b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c2d8d9dd-271c-4d39-8b1c-cf248e333463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76500c51-7c2f-4c58-8656-a77e6bd43b34",
        "cursor": {
          "ref": "1744fa3f-ebd2-404a-a704-13235ddbf233",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "09e5f92a-05b5-4d8c-90b4-cd27a10d75ec"
        },
        "item": {
          "id": "76500c51-7c2f-4c58-8656-a77e6bd43b34",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9b25e086-c50b-4651-98eb-40249480171f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca25b7d4-4765-4864-baab-0f6e26a81264",
        "cursor": {
          "ref": "3e450426-3971-4c33-b12d-7fbd44f6bb01",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4199335f-29d4-4416-8d6c-420c0a6b55fe"
        },
        "item": {
          "id": "ca25b7d4-4765-4864-baab-0f6e26a81264",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3ef044c5-3143-4e10-a5c6-862a573e1503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d5bf37-8a95-475c-95e3-72c5ec750ce8",
        "cursor": {
          "ref": "d9883ad3-2fde-434c-89e2-e989031fd91b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8113661e-f825-48d3-a644-562b9004e25e"
        },
        "item": {
          "id": "f0d5bf37-8a95-475c-95e3-72c5ec750ce8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cbb6bc14-3c69-41d6-82f9-17665b784457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a5c6a3-95ab-456e-93df-169b62a20d0b",
        "cursor": {
          "ref": "3406ab4e-5ce6-426b-8890-ef51c8b7b20e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "84968e4c-8cfa-4e10-8b78-e8a1ff439834"
        },
        "item": {
          "id": "61a5c6a3-95ab-456e-93df-169b62a20d0b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f5b4e786-da09-4e39-8c0a-136d953e7259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f62854a-d6c7-4f2c-a0ec-627efd656a15",
        "cursor": {
          "ref": "88faba6e-1eb0-4091-bd3c-50c3961dfeb5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "6fc7a6c8-dcc3-427b-ac2f-4d24db4401b1"
        },
        "item": {
          "id": "2f62854a-d6c7-4f2c-a0ec-627efd656a15",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ead5f167-b14b-451f-8bb1-7ec71ac1ed3f",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c0e405fc-ca1b-445c-9ea6-343e2af3160d",
        "cursor": {
          "ref": "d8637241-4e39-4ca1-b407-cda7de0076b6",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3fa4ecbd-8b62-4ad3-ac90-237bf9f78596"
        },
        "item": {
          "id": "c0e405fc-ca1b-445c-9ea6-343e2af3160d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "26fd3f09-fa2a-40c6-8aaf-4105582c1463",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25d1184-e3a9-47af-9aca-d28a6d2d86e8",
        "cursor": {
          "ref": "ab10bb85-201d-42ee-9508-0b443e48aacf",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "169f9d36-c1ff-49e0-b70b-c45ca1af74b0"
        },
        "item": {
          "id": "d25d1184-e3a9-47af-9aca-d28a6d2d86e8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "cd3904dd-8631-47e4-aac1-b096f6d10058",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "451475d1-1a22-4bd2-94f8-ccd775b97653",
        "cursor": {
          "ref": "f97cffea-5809-4ccf-a83e-7e3d330872bc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5345e5a8-f53d-4c42-bf97-97ddb0e0cccf"
        },
        "item": {
          "id": "451475d1-1a22-4bd2-94f8-ccd775b97653",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5569d410-cd55-4ba4-94da-0bf4e4d1e391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451475d1-1a22-4bd2-94f8-ccd775b97653",
        "cursor": {
          "ref": "f97cffea-5809-4ccf-a83e-7e3d330872bc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5345e5a8-f53d-4c42-bf97-97ddb0e0cccf"
        },
        "item": {
          "id": "451475d1-1a22-4bd2-94f8-ccd775b97653",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5569d410-cd55-4ba4-94da-0bf4e4d1e391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a684161-7ae1-4691-b9df-d4108f48da0c",
        "cursor": {
          "ref": "3589167c-03e7-4a39-8240-ff74480e885f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "049af0c2-21cc-4eab-b317-d12ab275c0c2"
        },
        "item": {
          "id": "5a684161-7ae1-4691-b9df-d4108f48da0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e6f0b234-6f39-45c7-8eda-26fb24e32644",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fcdb26-0385-4ba2-9088-c479031ee2a3",
        "cursor": {
          "ref": "1c9a4b78-5957-4240-9ca5-f10d8ba41a06",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9adf9199-dfaf-4c6c-bf08-949de5fe3b23"
        },
        "item": {
          "id": "14fcdb26-0385-4ba2-9088-c479031ee2a3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30a8192d-959f-40a3-9c1e-a649994e5bbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}