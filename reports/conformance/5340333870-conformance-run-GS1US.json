{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3e620e88-1254-4ce4-9056-bc1d879d81f8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cb7ef8ca-3ee4-4ac8-811a-295a95e12380",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b01fbfa-b8e7-4cb3-93cc-33859915da3b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "04cf131e-f010-4499-9b8c-0504424a6f77"
                }
              }
            ]
          },
          {
            "id": "3c4b66d8-e6ee-4433-807b-9e881e1d0c6c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8187f6e7-9151-4030-85d5-596ab3ff5826",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6efc17bc-7732-4642-b288-41061a799d17"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "32f8c7c0-faf3-49b9-bde2-c491a2f4ef41",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "13d7ad7a-b9fc-4102-8684-5f133451106a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd1652a8-d682-4be6-a04b-c1e989d8e3b5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "974f2992-c7d2-46b5-9f50-2c3b491355fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "755cc7b6-fcb1-4f36-bd34-80c18f83e500"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "22c6edfd-af95-4493-9875-d1481a44fef8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0eefb098-1492-4685-9f78-923ce0c14e29"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c3f89f9-0a73-47db-ba8e-7ad79a36edbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e7507c5-90ae-4b1f-a24b-ce53be2c5d74"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21f93648-f847-432e-b398-66dd9586f3d3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2f4c16fc-56f6-40b5-8a2b-bff5935e8e3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbf9d99b-04fd-4b45-9cc0-92aac2ce29f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10197f95-717c-4174-888e-293f680c9438"
            }
          }
        ]
      },
      {
        "id": "13a2f3e1-12f7-473b-be70-1a2cdcb04c73",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3b58f3ec-676b-4f05-96a3-3bc2804d4b91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8543834-4d16-4ebc-8eff-8470d27ed897",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ab572e59-cfa2-47b6-a332-40a467af9304",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6046385-cdb9-4d5d-bdc1-75db6f01a626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4533b38-eb11-4f8f-a13a-5770cfaa65b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d80cf87-b902-43b4-bf2e-abba6bd61ad3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2bf3db-4aaf-4914-a801-11b4284b0c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "710028d5-0d1e-4ac1-9168-e23b3b03e2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59987e0e-a8b5-4ee0-bb92-b68ede6d1d3d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c852ce50-ce11-44e8-816c-5675b8beb6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ecdb6ae-16cb-4660-842c-2de1fa27b3d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "923c7450-f740-4dbf-b66d-2e994812a0ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d56a524-d932-4431-ab9c-d58be162ff3c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b837f773-dfa4-4a55-a70a-487075578a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b94639df-4bf6-49f7-abbb-68394b8eecfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446baf87-fc30-4cba-b7ce-35cede2cfeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5a9793-4de4-4b6f-9cd1-5a8ae9a4785f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e73c8741-3bfe-414a-ad32-9b06a4594d56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4479a919-8dd1-4e2e-80fd-8ae083c057f3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c98deb4-f2df-453d-a4b0-b0d075574b59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0684fa52-d8f0-4b96-aca9-528aad9eff1c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83c9b579-928e-452a-a8db-8a3f9cf677a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fd49b4d4-ed68-4ed1-a8d2-64ca111c61c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01657e9c-e727-4b2a-975b-c1f175569878",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee168495-77a8-45b8-af7e-764b0af62382"
            }
          }
        ]
      },
      {
        "id": "201561b6-fb99-4d05-86da-9709fa87520b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f9245462-6f1e-4e7a-b919-f25571f0ca7d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "242acc09-34c3-456d-a6a5-871d4be44ad2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "23c9f78e-4ea5-4d57-b63f-3ff6ea59f42c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ad307d-b0c2-4c88-b680-030c08d55d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1988cc02-2f6d-4766-9630-73a42de81e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16794590-3903-41de-b54d-7d617587be64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5c2d073-aa7c-48d5-a61c-bf494605ff0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e36440-4a28-437d-b723-a5c566a13179",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d681b7-0a53-4bf1-8ef4-5206bae2ce38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3418eba7-5b6f-4269-bbd8-05fbfb17a7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8327920c-0866-450c-ac1e-1ff46dc120f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c121a49e-e643-4c03-b404-c7a99c53d47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a7eee9-bc90-4414-b268-b4d22076be9a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def1c693-5c2f-4e7d-b462-3ad754effc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8b00d6-3ed0-4321-9973-6fc50999644c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc81122-6ed5-4a3d-a270-d2b90053a3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "548e8d7d-5cc9-4f1e-b7db-109547f1d206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce643975-2cf8-4ef9-b1fb-5ce051475183",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e62bb74-a297-40af-b418-207e7d1ff173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0ea684-8d7f-4c43-afbc-dd2ff8cd41b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a499292-ea14-461f-ab32-8936b4b22fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26ec2cc0-a767-4fe2-9153-3557ceae3aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2244e208-94fb-462b-8169-ff7fe49e11b9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eead237f-420c-45ef-87eb-f822cf244a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4110f583-14d1-4fea-b04d-5ed2ffe58b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0ecc60-75b9-49b6-baa2-2ebd32b46b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cff4bbe-97ac-4a74-9c23-266801a9440f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccb9138-59e2-453d-9303-a3d5c6fa350c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d34eab-0bc2-4326-9f21-9398d31065aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6867de1-f145-4c7f-a71c-d38b5e938ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9be4baa-5718-4f89-bec0-58d5961c6684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3642d3e-1673-4b58-8fe5-ed9f49915ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c82769a-c813-4fd5-b352-4092945ba51a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2a24cf-a3ce-475d-a709-8fd4066c1d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc652ed6-5ce2-4a47-819a-07640ecc4954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0b8742-82ec-408a-ae72-3b8de0e5cbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb9a4754-78bd-44e3-b14d-ec295808399c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487453fa-2cbd-4d70-b2a2-18eeac5e25bb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37c464e-9a57-44df-9406-d739dd502572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f53f42-df1c-4a68-9cb5-447e62e99762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5a86fc-c677-4134-93e3-0c79c0ba7655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90097d1a-58bf-419f-9c68-33192e8faf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56117406-4a3a-4e63-a62e-cf119b0ba96a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a247ba-4d71-404c-aedf-5a744f533958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed651607-d3fd-44b0-95b8-5ae5229baac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee22e019-169e-4cb1-b6d5-d7afa5ded28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca7872dc-5dd1-44ac-907a-a92c8bf7db80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6478b021-e1a7-484c-a150-8f681e338803",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cce5cca-ddfc-4851-ba7f-f114827c94b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0a5516-80ee-4e16-a07d-f5dde2d14154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e7d80-0648-4f9b-8bcf-d04ec14a1fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6868f05-01a2-4b9f-afd2-90fa3d327351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d1d8d1-a818-4f4d-b002-46112791a150",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9ffde2-90e3-46c5-a23e-bd2c20671e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10efe4e0-0a43-4cf5-9044-31836b1c8e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7204eb78-35e5-4aae-beea-fe2d770e5b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f2a45ed-be89-4e1b-9d51-551cd912e6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31b6630-beea-41f2-b5e6-f1bb34429482",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb8cd5a-0587-40d1-b122-b59aa40eeab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdaf447a-2bc9-435e-a862-2040c8ea839a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bd6b63-35be-469e-b3e4-d2f05a4b6ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1cd5405-22dd-4307-8ba9-3b3cd1dd04b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6922c0a-1223-49b6-be50-36c410eeda17",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0d91bb-ce93-4c04-aabc-04463dedf3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1fa5d6-d14c-4072-9064-a851356f1644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3a3b23-3aeb-4594-996f-d3e13819d1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e59f8864-7de3-49d7-aaf3-4452768519ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1511350c-a197-4831-8877-311b8bddb5ba",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efa553f-55db-429f-8dd4-ae57c73be4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a24c1d6-b697-4069-a9fb-8fcfaa65a91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fc95fe-6036-4c39-94c9-971feabd5835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9c6fb41-6f45-41ac-ab37-6ed22842bd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5da255c-3ce8-4df1-abfc-723ed066e92d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0464bd1-6fec-4805-8e40-a7d8c1f38100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1c9ed1-1893-454c-844e-99fbb47fca96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765b70c3-c77c-4f68-86a0-29a0629691d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edde83be-a7fb-47c2-883d-3b16162a081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500ca4a7-f45e-45b3-984c-010eedf58ca3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5421b8d7-7c28-41cf-8c5e-b586ba769b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de5d5de-fee5-4113-9689-2c592ecaa711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3af277-009b-4ed6-ab5c-2fed00448442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1fbf3fa-ca36-4d29-8e62-5fa768ba0e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fcad49-376f-4626-b979-63a8284ab59f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f695df1a-4941-4356-a1af-3f50c8904043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3e61d0-c82c-400c-8f23-0f198de514bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7b8de-a49d-471c-925e-b9a518c2c515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee0ff93b-6e70-402d-afc3-acc846e58593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72156c3-af6a-48ad-ba55-2552e11d2bcd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e7ad1d-e580-43a6-b440-8afe8dd6e675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e24dad-13bc-48dd-9079-a8868fb82088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb48f81-4fff-4307-bca4-dda15867a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "87fd9ff3-c386-46ef-87a7-d97234bbfab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a66a895-5764-4647-8e51-da2fe2101bb4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f5cc7f-41d1-49dd-a505-9249e092c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347ce2b3-702d-41ed-93f6-56cf913bc5f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23324fb-be2d-41ab-ae6b-92563a38cec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49c50a83-5a08-42fe-82e8-2fd1efa29ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c2a4ac-c6b2-42da-8cb5-fe90ad8e1134",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b6518a-3196-4315-9f36-d2ea57928196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8902d7c0-929c-4be9-89b1-3d9eec0fca80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58492f48-cfd2-4c2d-b6aa-e987bd16911c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77415563-7602-416e-9584-f364699fb1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47865f9-cd27-466e-9edc-ad108aceb227",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5e41d7-7b9e-4b19-a497-f945c64b798a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95629f0c-44c7-4d8c-bec1-9b4b27569163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f68dd21-c1d5-4748-8ea8-dd2a5ad2f2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b33a01-43af-41f4-9011-2f5ffdef360c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57815084-4021-4d46-a931-8c20e707f8ca",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35df90d-a3cf-4ad7-a45b-799a539cc63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b84b2d-957c-4726-8dea-c80b2727839c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861f4d9d-a0de-447a-a6eb-14aca151626d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1264734-44a4-43df-a9fe-3d539c44f8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4c94f7-f9db-4140-9a6b-a4114890e720",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fec791-57b8-4205-a5e1-614a24d68136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a03e48-f485-49db-b249-a4fab6ee005b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01556f0d-dc0f-499c-8b5d-81ca28533192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f552378a-c470-4696-9404-184547fa36fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcbebbd-3d18-4806-bd3e-68d44ee9ed30",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82f298a-e89e-4916-9dd5-c4063f083c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5fe09e-6ccb-4185-8f14-1ebba7e1e978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f4c0af-de6a-43cb-b1ac-4f1294b39d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d344213-9aba-437a-86f4-0a8fd06f752e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd370dcc-9ace-4fa4-a49e-ef3a035cc58d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55063be6-4027-4ad5-9152-76ffcd88535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ee80f4-f218-46e7-a0e8-5df1da3ac755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1219c4da-4f0b-4512-b036-092bfd8af13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee08b186-b11a-44d2-8201-6b4ab9dcad42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbb1b76-c3db-428c-aae1-0fd1e095f66d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eedbc6f-d4ab-43ce-a57c-a29509a7999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c75e9c8-b387-468a-ae9c-f40d7b51008f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f681a8-409a-4a58-9f5f-53162ee1fad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6924f4e8-9937-4a8a-b885-4eebdeca3ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f69aed0-cfb9-4944-8582-e31dc0ab32eb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bbd95f-7d57-4c50-9175-45ed1d15ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39dcac9e-4bb9-4a42-83b3-15a2bc8244b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b2d104-8cb5-4385-ae2c-440496da1d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c982ef72-2d90-40f1-91a5-aef590fd129e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a6a721-f390-437b-b170-fb19f006f481",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ccb2fe-5dd3-484d-aded-b045484a7c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e72e8a6-1a27-45c8-b31a-26a0281fbc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5426e374-556b-4b5f-80c3-532cfdb808df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "032ce2ac-a2c4-4545-990d-2e91819e266e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36366d5d-8330-4eb0-a6af-4ba84c48ecf4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9194f642-06fb-4ca8-9c02-754d66650161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0f462d-0edd-4834-bf53-70d0af76d216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b40453-786e-4535-8196-c4af7c5b49e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49adabd3-c21a-4f17-a88e-676d0ebe57ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c32786-3f10-46ad-a4f9-1ebe77c9c041",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da034b0-e815-432b-b4d4-d2b7d19c6a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e744eb-43d3-4513-bb2a-028d2901e54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f19f7d0-322c-491e-83ae-08d2508247ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e714944-5d68-4f23-9646-636d4d19a635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed88024e-af8b-40f1-baf9-155f73a7fe3b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d50c999-0e7a-4d01-aa5c-06d1c953a71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0a86c2-b33f-424a-8c3f-d79a3bcadba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e79516-f005-4ad6-ab6b-be2f7c9df6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce3e0ab0-5dda-4bb1-95c5-751dfe18e540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce0c299-cbb0-42bd-aaef-7857d9bdfffd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda3593b-c630-4ff4-861d-7e07a9ef3a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ee9356-cd38-4cf0-97c3-d45c3f781447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4c6674-00d1-43fe-b934-ee3625d3fb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee6257a-e8cf-452d-a1ef-1e9556351e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e825481d-be14-45e9-8bc6-98910de76910",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc1f530-0f75-4a0a-b156-3e8db7b38735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4a32b4-39d4-4a5a-b9d7-109156d065f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c46611-dbfe-4d70-a3f4-0ca10f711835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14e305b4-0dca-4005-94eb-ea5245ad91bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f33bb1c-6621-49c8-8dbb-beadc3bf833d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80068ea-1f6f-4a68-b1fa-885c13fd7ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6f4905-975e-4980-a32a-497620f8dac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4114cd-9d96-4c21-aab6-9f647dd94fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05238b6f-5d25-49ac-b478-5f71dffb59c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0997ee9-c3f5-4b75-a3d5-3abeca6d9d69",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7326b013-0b74-483b-8f94-e92f74f29d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c79405a-eea6-4a53-90b5-8e380f1e05da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3b90c0-3ba6-4837-b67a-864b9a21e2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f91b5261-b603-4775-a897-f519dc65fdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad63d68c-4c6d-4264-b85d-a1c6f951316f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838ca63b-bdba-4342-96c7-81643f338eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d70fe9c9-53f3-48d0-9a66-f9995672cc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30abe0e-5263-441d-8121-ce0d7a40fdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a2b5c7-809f-4e6a-95be-594c1f506aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8bf2a9-f43f-4dc6-af8e-ad93af345036",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8051b9b-6008-4eb9-b7ad-4817cbea390f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62531e70-2536-4aea-961a-17148541737b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c71d23-cb8e-4a2d-88fc-6b0760b38c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f79d13c1-06b1-47ef-818c-26970f266afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee7653f-3be2-44e7-9e84-d668ed7428c4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad05981-a5ce-4b8d-8c0b-841c5e224732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c76e9df-510f-44e0-9864-acac42cc98e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b2651b-28eb-45d2-965e-3eff7c493d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8414c612-2ae9-4530-92dc-6050cc247088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023f627e-b6e1-482e-9052-80f51c60db8a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88168586-a04f-4fa8-a53d-ecee6fe44ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0914a3-fc7e-43b8-a22e-d667329e6654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f10c53-e444-456b-96df-857b541d6096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45aa0906-f7d1-4bd4-9d63-5992662eb3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bacc7d-6f44-47a6-9739-3e75d728175d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d55d32-a504-4ccb-a89a-1b4801dc165f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddf2db3-723b-4077-93e1-91d7c9f00afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce15037f-20d9-4735-a620-29b44a98de95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "47bdab81-6a97-4533-a33a-dcc08a0eb108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814aa53a-5a15-4442-9975-417b297496b4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b369e2-03ad-46d3-9896-1b0a83eec1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825247df-17d0-4984-8831-e793228e3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90f8431-178c-4984-bb89-0c8641d3d908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78cf078e-1c95-4939-8a75-7e14cb8c9489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa6cc5d-5882-4676-b979-94f1da4276b5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506ea894-2f06-4e77-b0a8-704c58861189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168a9be7-d4ca-4982-bf4b-99cfff1e5fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a702e11-7bc1-4944-908b-7e5c5e513efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "07894903-59c6-4268-90ee-2b35846b8f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f1965e-a40a-4f8f-8353-697a3a1e06dd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec68b6e-f192-47ee-8fb2-1890ec3b9948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d45f44-8093-4891-857f-d0b5e102f992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee6b629-c823-4d8b-ac6c-8182d293eec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee21878-9fa9-4f7c-9f91-d1bc858b6440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4837ca12-ecc0-42f1-9350-fa275a4488d4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa2109b-e3c6-44b5-9d46-704a19adce7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a929da-9286-47b8-ab91-ce9ccd9c6ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427fa958-167a-45c5-8a34-8b21f48b9cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "037f81e5-7422-44a7-a41d-986633c5c5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d8982c-a7b6-44ed-8449-9ebdef84a5ed",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3aab5f6-fb28-45ad-bcf8-84578982b3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1caa4c5a-ad27-4206-a314-0610579ccedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083bf2f0-709c-448c-a3ac-20dd5dbc3d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9529c17-6abc-41e4-a8a8-0ff836cf0918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f863855-59c4-4e2a-9613-421db12b1e26",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c6c67d-136c-4292-b252-627d97470e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34f8e56-ee72-4d40-8dd1-9e923f7a33ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990ed221-fcdf-4a04-b78a-14a8391d9b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "382c2141-fd7f-448f-8099-87817077a075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c398724-d646-4e1e-a75d-f665cce11d87",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f160812a-b141-4818-b4e6-6f880cefe30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6359638f-4719-4a6b-9267-d6399b1f1411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c6022a-b252-49e1-8234-fa2ff36984ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faa69555-5e9b-4f94-a0a1-4403c2be3d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74cd35f-0628-4ec7-9865-0938ae5a200f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60fdf4b-3741-40ff-a88e-5ea50b7dac72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ef2172-cd08-4d68-b132-1ff2b687ff9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65316cf3-784b-49a9-99ca-33a01444cf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e68d91f-b876-440a-b22a-ce3eb399a867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38faf0f-e1ef-407e-af43-8bb8fbe4c3c6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb64ae0-6224-4ad5-9d49-07dee481e2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5429b81c-b6ac-4ffc-8f36-dd4560864b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12640917-d604-4ef6-afbe-81669447c66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d96fd9e-7d2e-4cfe-b4a7-eb03e5d84989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93900d1-80f7-4755-9c85-3ff691298f15",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ca9ca3-33b1-4edb-a8dd-2513e6d9c52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3568dc-fff1-45eb-8413-0ca9e9580287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26efa288-e466-4fce-9367-ab479a31de5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa15323-d754-4e1d-a4b1-259df2be23db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e993e17-6b2e-4419-9a18-028aac8fc2f2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf6a93e-5dc0-42a6-81f5-e5f2115c8a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0082fe7a-4282-455e-bfe5-b576e551a8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb8ea0f-825a-4545-8862-107325187bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e62b56c-b384-4633-bfe8-e4d5d80212cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c2b1f1-2ffb-4725-922d-7aadc7a98498",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7da7e4e-289f-4b3e-a2fa-0cc855b1422b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f9cf2c-5c98-4f31-b7e1-714ccb8b6fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cd3959-13d5-4be5-b9a1-bb7648c84b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9750e679-19b8-4fe9-b965-5a2a8f02634a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d042ea9-48f5-4889-87fb-08dbdf29565f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04666afa-0f37-4df7-967c-d929d9f7a970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4811d4e-63c1-4b56-bd44-0131587292ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0edf20-826a-45a5-95e2-4a3ea9c956bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e462c8e-bed9-4ac7-a743-a94ea09858ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdd94a1-8625-4362-a4aa-1c2da69cb631",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1740d872-301b-40e9-a7e9-de82f7e476bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28b9ebb-440b-46f3-b47d-b7e4b4ebf086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049325fd-bad6-41ea-8782-bb0e6ef3f102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd26ebb-4a65-475a-9870-41182c4c8ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9869104c-edee-43cf-a50a-55ae7e9eacd1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6c92b6-574c-4eab-802d-26425e572fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a6e6b7-2965-497a-b8b7-a0c3791cdd38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d71bce3-984b-492c-b728-c6f23076a937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "faad2713-81da-4b8f-a65b-e3b0b00b24df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bf8141-e96a-4ace-b63c-93bc4d995920",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a64872-28b9-4537-989f-1e8b79d508d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3721a034-28b9-4f2c-8bee-1c94eef9593e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d9e559-66ac-43d8-90ff-f2e391b7661d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4b55000e-de6e-4450-98c7-874904aab2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcb7c41-7e5f-4808-aec5-5ac87fcdffa1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8b9ea0-626c-4ae7-9bc0-a04573ee7da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc923b75-7bd3-4f51-92a9-00728fa9d326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d19e0aa-61a9-441e-a5ff-fee5be951d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e613d2fd-8be0-4895-be0f-3f84abe79521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd385266-03ff-4907-9a57-4308c3c3b63b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43756507-8743-40e9-977f-63068fb367c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547ec4d7-6fe0-47c6-aee4-fc0efbe57872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb88aa14-95ea-4dcd-99b6-a5e3bed8923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3389353-0bc9-4977-8508-30e199faef39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf74d45-6481-4baf-9832-e66a9161e6fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57ec1cb-931d-4fa1-99b0-27180fea7178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c618575d-dcdf-4618-9502-765933ce29c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99183a6-0676-4e21-a850-5a0104518f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be4f7a92-c27b-45b0-a3ed-644b362642e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd582b1-af84-4fde-980e-4e3974754137",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f62089-cdbc-4f7e-a07b-0a4a0562b044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f220d2-7e5c-4439-a11e-5502bafa7396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1930ab-8fe4-46a3-8c1b-e84432fc8ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f03978ce-7f19-4515-8004-9fd6cb82a21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae54344-fb00-4848-ae93-c2ad2b2ee18e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4868ded-d45d-441d-a661-4f5a1bb2601e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4595782d-90c5-415d-8221-614b4330dbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da65c7e2-3612-41b1-a290-d94ff38d0cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b47e8758-9389-4e5a-aaba-12a48d492e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cb86ed-9f60-4be4-83e5-bdde2215a69e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be65d1a9-7a48-4030-a8c6-28fd02cf335d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cad73d-6b92-4097-aaa4-822115d3f738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f22f179-0c9c-4900-8c7d-197e7bf3625e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "321ebe12-f945-4db9-a8cd-17245dda92fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494cd9d7-fe20-4534-869a-e1c061987e84",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2cc941-7b1c-44e0-b617-0cf753bf561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582d309a-743f-4959-b996-10643be8ae89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01429519-475f-4c92-a9a9-a46a608d04ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab05fa09-c747-4667-912f-b38a7478f815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f7f0d2-96d3-48cd-9bea-73974ad37052",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdb743a-5531-4592-a443-17a707cf22ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b41e2a-c4af-40a4-b8f5-2f7bbcd73d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8848fb2a-f412-42fc-8df3-aad5aa008304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b233af3-48e4-49ca-a267-d40171368dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c484ad6-9324-4601-bb1c-e06a25c2c5fe",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2e1317-8f18-45de-b868-52d6ab31f7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7712e986-ea52-496a-8b25-0450c6febd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5e337b-c169-45a3-9a17-49f778268c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a98928-b85f-4cb0-b410-4d495610771b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b664f239-4177-45f2-9f89-3e94f617bfcd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5caac917-1301-40b2-ace6-3ff7575bc966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfb4f33-cae2-4e6e-b635-08b3a8f8a8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7296dc8a-52a5-410b-8fe4-e396e623c120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a854fe50-543d-42c0-b700-51d3314c58ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d633b4-b687-42c5-ab9f-b7659aef05f0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0766dbbf-2c91-4a37-9a27-dbb4af10829d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65decb0a-ffc6-4c4d-9b46-ef50b7ea96cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b2ba00-3149-49de-a329-e275ae5d77a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9da87b-6b5f-4b8f-8d44-ad66b68e8c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28ded1f-2e7a-45cc-bc51-2b49c84e30df",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008e054e-c744-4715-b4aa-ebf8807b2727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584979a8-5a6c-4817-8cdf-10d3841bec8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79354b36-a582-455f-b452-dffdd2e3086c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5bd789-d445-46b8-a301-e307398a851d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88e1446-a49d-497f-a18b-12486b05380d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d66fdb0-6811-4dc0-a57a-664bff025c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f721922e-a720-499f-8e52-181c3ae4a670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cec032f-a973-4c82-a731-42664c20645f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "33e55ce6-a0df-4baf-97c0-9830c7afcbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109b9aed-8963-4dbb-96e1-b21b4aff74dc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d5f57c-272b-450a-a82e-bf3f5944d301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a58eaa-d81d-4c84-b3df-1e094969f8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a64a7e-6fc9-4baf-aecb-1843f7ccbea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c796f139-20a6-4c54-b6aa-a463f559df16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc1dd6f-f6ff-442c-b45f-22de5dd387d9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36f2875-42ca-42d3-b065-00a7e7be7b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b471e0-95b6-4cb6-adbe-0603d717e50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc87762-bf47-4edf-82c9-165d05f66655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4dd264-decf-47b2-a134-5cb2c4538961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8cd85cc-cf24-4a64-8315-db4055ab49f1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9ffe36-0193-464b-a4a2-82fe3de20aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d1285a-25ac-4a41-ad7c-24636e43c0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b756da68-1d1b-4801-ae5c-ca8d8f662006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05b42a52-f469-44f2-b608-bac0aa5ee1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddc56c1-7127-4e6e-806a-bc119284a21f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1976e8bc-9825-4daa-9311-2b0a91e769bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442a26f5-ec00-4f22-b2c5-da49c0772977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457a7ada-d1b9-4af2-afe5-4cd854aa087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52634aef-a0ba-4dfd-b0a3-b05af1a59e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314ccf9d-3538-4ab6-a5e3-db8ae1b6fa30",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a6c443-6df2-4e42-992e-6ca66d7dc269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffedc83-f9ba-4f3f-9669-9534f8c8514d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef0641c-ba97-4f07-9f4d-8a0a231d2320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4af56c-0535-4e91-82df-42793f3897e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777167d7-5782-40f7-af59-9a3314cc7ae8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fb23b1-41b6-4b2a-b87a-8d028a316465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd06189d-689c-41c2-ac5b-51bd491ddda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca13479-b60e-4b65-add1-8f3293d19ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b96edac-d655-4593-9f1c-947012e60c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb735507-c2ad-4ccb-b623-6685eaa76cf1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd34a02-c557-412f-9e1d-a7a57e9873ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a927e65b-bcef-4d54-8183-b4525e5b7ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ed5756-97e9-453a-b157-57eac680f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49b6ba44-de16-4b1c-85e5-ce4f9199392f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d2782d-3caa-4bf0-ad14-eaed06d19dd6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9c2610-7169-4bcb-87f4-6ea0d6c066e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d31262-f279-4edb-abee-8a7651c48d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcad2da9-2dc6-42d2-9990-34691beb08c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d04ffa9-bcc5-4109-9a5d-b993f5af2e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a8de51-e0d4-4ac0-a9e9-5108ed3fc113",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0379845-7926-4567-8866-96282de2b789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f5ee46-4ec7-4ad6-90c8-483aa76fc1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad60ef9-5881-4118-b7fe-9b51a03e2cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "295f7e1b-105f-4b84-92e1-919cc0e395b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec6cc30-f15c-452a-b33f-1196b4871883",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d3bd7c-50f6-485f-be6f-cfde47ec0760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686c99da-0159-4f7c-bb1e-f66b3ae299b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a4541e-71ee-47f0-a8c8-f20197264189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6477f5-00a6-4c25-9daf-ff13b7db524d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3c9471-ad67-4dca-ae6c-db860789f1de",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2838a30-f9a0-427d-a8b5-1b995bfc2bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2338521-d73a-48f4-b99f-bd8280c6ceec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885bd2f4-bac8-4887-a049-13c253c38a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76263159-777d-4729-9ee2-59c2c46fd6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967d3cce-8601-4d2e-b05d-7dd419f8755b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c594b83b-0452-4ccb-8f4b-681b012e4670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc5f0e9-bed3-464d-9faf-3d7965ffc88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bd0618-d0fe-44cd-8b9a-c7146c25a0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1eb8455-fe1c-4c5b-8187-b317d74d011a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e794ee68-4433-43d7-8e22-94fc684583f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e12377c-33fc-4130-adab-b497a3849210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b4a52c-0a3f-4695-902f-e07fef86266b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6cba10-8d99-4339-8a47-76931c84705a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8806d3f0-eb4f-435a-b127-5f36ad3a6466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6da113-3394-4afa-950b-433b29afce3b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203e7dd2-6a5d-4138-a978-be666b0b9476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08069214-a211-4950-94b9-11c1e68559a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e773da-42a7-4c51-8eaa-ab0e92442185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2be2ac-b424-48f7-8353-7999354c067b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd17c9d-8683-409d-a11b-80121d7ee989",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422efd39-1598-4179-bcf8-5e3352b02821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf4407c-6dd5-4168-831f-c9358e7bd9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5814f0e7-960d-4d07-b3a1-c6afd1e7c845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1efed6d-89bf-427d-b3ef-8464335e7029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4427987c-46e2-46c4-8972-66c52e40911c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7dcbd3-de18-4839-99f3-369d892b646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcdd06b-baf2-4cfa-babe-7c10ad237aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13a1903-b31a-4a24-8925-7bfe65084620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d672db68-fc81-49d9-8f24-ea09ff84716d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af74a86-d9a3-45d0-a1a4-f7718e259540",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d24029-59b4-4428-9a02-08199beaeec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431f59cb-6c0d-40f8-a3fa-bdea416e5003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81395b07-2646-459b-b989-9c210cd9fc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bad16c3-f787-431b-b9d3-8ef7d3aaa37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0359f7f8-aa0d-44c2-91f8-6cf7b416399d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897bb0b7-8bea-4d98-8971-3cdf8e862c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f66068-5288-4813-9917-8877388eb495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6698db68-9a63-48d5-8905-a8da84445c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "83635150-114b-4b30-b985-0e87c79a9099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47f84fa-a830-43ed-b04e-cff217f9d312",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb9b28c-a6aa-430f-8d0d-a80e485cb70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d490bf-12ba-49ac-8cdc-03ee4a6eecef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bb5ea6-faa9-45f9-a2c7-b913338b5f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d26cf6-8937-4eff-8bc6-2b31f5061750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d875a3d8-ee64-4cf1-8930-753c49876579",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d8ab16-bc90-4476-af06-c55a3b385069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fbd9ee-7a30-4b82-b391-9948ed2e8471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140b6741-a0d2-4107-8d94-19a68b145308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9972882b-2727-431c-82d3-6f234820f5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e776ae-033c-4742-9eb3-d3f4edc10d11",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c9da4e-4047-4d0d-8492-81cd6c1589d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f73bf41-e364-47ce-bd1b-ae04487df140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a4e77f-eaa1-466d-90c6-56e865647ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fd217e-aa8e-4dee-8f11-47b1a2ee3cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85022f0b-91f5-4b18-b9c0-41a27bcdc520",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3503698a-ad96-4bbe-a6d5-599aac963202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f083b59-e72e-429e-ac24-1749430cc1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831c3be4-bcff-48e0-88c8-52a863c42cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "67762344-ec50-4949-9430-dffd5126e641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9267ec4d-9e9c-4f40-853f-f55870e3c2b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf595f27-db47-45ab-8c32-3e0d874cee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e9995977-670b-44d7-81a9-2366721d5652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a96277f-1161-4a2b-a3b3-b57984334892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "874ab638-9b0c-40ff-a9c3-9982ff6fcf99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f069e79b-e7e2-4908-85a6-10729cd350e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32d37c54-e1f6-4d05-b6bd-850cbdc01a1f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d391e3-4c03-4435-9bf4-b382dc8a6f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b092b0e2-a9cc-4a97-a20e-9f573ccce4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a70232-8361-47a7-a963-375cc91714e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f7e7a85-35b5-4b49-aefc-58350dee875c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c45b4ab-efca-4676-90ac-a5fef5f29fad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b850e330-3d6e-4bae-be45-bbea7a82a822"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ea5ac58-bd21-48bb-8ef7-8d20265466d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38b2225e-2a2f-48f2-a52c-2cd48dc7fa28"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c76a3c05-6069-4066-a298-c35a66ef9dde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f9bce11-f073-4010-8205-f30d63b0df9f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bbbd5d95-b73c-4dea-86c6-6d5d66e98957",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b599306-498f-44dc-9da1-b6e3a70d413d"
                }
              }
            ]
          },
          {
            "id": "e0089a90-eb2a-40fd-8938-19e10d4929fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7f11fab-4890-4547-a94e-b183d2034511",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b014d98-c82c-4a2a-92af-4b327dd74383",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "744768b5-4ae2-4b2c-a810-0a1d631ce408"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f9c8732-8678-48a5-bf01-0100ee22cfae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e02b390-d7bc-4ed4-a007-1a8ba86871a4"
                    }
                  }
                ]
              },
              {
                "id": "38cd1ee3-93e8-47e0-9262-f7765aea32ba",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e33e65b-b355-403b-8548-84d87db77c80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccc3164b-0acc-4f57-b708-6689ed479ed6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "306f3660-c3a0-483b-9c2e-ec89ed7c9a26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25a24b8d-24f6-480f-8db7-3afd29bd6950"
                    }
                  }
                ]
              },
              {
                "id": "0f9590cc-5c53-4997-ab32-5dae47451ec0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de880a82-5492-45f1-8220-98486b8c6722",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "225e55ab-3651-40e1-b2d0-3ebb13cef180"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f5a21b4-1db1-416f-9656-bf89afcd7656",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1cde9405-8e2a-4aaf-8cf6-62f29e79625e"
                    }
                  }
                ]
              },
              {
                "id": "d9d7d824-176e-426b-ad4d-261174a100cc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c5a66f5-b8aa-4248-8b8e-76bcac864185",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9807053-f664-44c4-b44d-6a81034a02e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67f454a2-405b-4a32-855c-232f36f0c06a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "33799dc4-39e7-4969-8e55-a04c388749e0"
                    }
                  }
                ]
              },
              {
                "id": "fdcc3333-baf9-4648-b99f-7d11986dbb0f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6afe545b-e5ae-4338-aea2-6f766e85c714",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4745cd3c-eef6-4691-87af-ca74a0123e0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b53f6614-413a-4f32-8d1b-d61ce4cdd463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9829cfa2-c392-4bcd-8949-86eb8bac377c"
                    }
                  }
                ]
              },
              {
                "id": "06c297c7-0086-4618-aeb3-5bfa902715e7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "346da698-d2be-431e-9c9b-c78c19af2a56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2145335-cca3-404d-a3ac-0b8aefb88c42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e921c72-ba97-4620-8e46-addb669142d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8a130ee-4674-461f-8869-789848b51bdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "462095f9-2410-412c-9550-462d7f66687d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "897728cd-7ab9-472c-a2a7-bb3623759947"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8cb3039d-90c1-4d32-af00-0b8155f76f6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40a0ffc8-1179-481b-ba15-fe9936e1c57f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec419616-dee5-44eb-a6a4-a98a4da7d8f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "74fb9e9f-a0c4-4c69-a415-b506ceaa2158"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef7ac552-d68c-452d-80fb-c570bff3fbe5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8020bc5e-bc93-4c01-aa5e-6cb2838d80a9"
            }
          }
        ]
      },
      {
        "id": "be9953ec-17d0-4374-b714-b51ec1291ed3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2d8b3677-492c-40ae-af6b-c223eeafee8e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af272044-0f7f-4ede-82b9-3bbfe36a0d96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73a29f17-615a-4735-91e7-6871154510ad",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327e9415-8d43-4f09-b85d-a4a466ae80a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7cf155-112d-48af-8a49-f89041e72eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e797ad6-ae99-476e-838c-f540772941de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8adc4d-12f3-426e-859f-1d5d9166d8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c55b2f-04be-40be-8491-502e96c1f97b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c13fcf8-833d-42c8-a0ad-468c24447173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b07ca7-593d-482b-b7d1-2a64a2857fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a161812-3867-4381-9832-36be37451be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77658688-222a-4da6-ba48-35a489bc72e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1167f7e-3f00-4e01-a788-18d002a38b39",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15c0862-db0b-47db-87a2-c0fcaab4b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9eb6205-ddde-4a0f-a657-3882a8fc2fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52128018-89e6-4eef-9f99-3809545c00f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02912506-c9c1-4784-808c-e6f823e5f08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b065b68c-e32d-42f8-aaba-34c1065cfb98",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a217377-0410-4a79-b34a-5fbdd8a73f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a9f841-2424-4e19-b057-4d94ee5d3e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbb297b-2b2c-4e75-b73f-2957b7305dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d71621-ca7e-4168-a149-9441364fc8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e6eb5e-ebba-480d-9898-67ecc3925dc9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab0a0d0-8a9c-442e-b107-8a950f8b3024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9254b5-7a7d-4d05-8d31-b83ce864994d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903ce172-604e-4545-b037-267e7dc18c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15afa225-6244-419a-9156-3e45131ffa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00968c3-a4b3-4f0c-bd6a-e0dc7179a07d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83811d7-1fff-4538-a89b-9bad32b7882d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f29afc-52dd-49c8-80d8-9e6bff795c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551cb9ef-d889-4457-8b2c-edec083cbb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d44b4d08-39ed-4f6d-baec-d57864f3744a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e127307-f7ea-4dc5-a15c-01b74ca4e509",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17da7dbb-a66d-4e41-821b-792be401f41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc1f179-4fe8-48bd-be74-c4e876eb1d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e7032e-301c-4eca-aca0-e0bf2f39918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e23109-d523-4fd2-9d89-141029000f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d0207d-a163-43b4-988c-a536880155a2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10442e3-15f5-4d63-9d59-e7c6f650dfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6246678-16e5-4958-9dfc-efc1a18544b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abdd2e2-b553-464b-b8c9-ac7abaf695fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78536fe-984d-4df0-a45b-d93ef235db84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d75492a-af9e-4b4c-a71b-1e5154e4cd72",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef74470-ae95-4659-ab87-423f72f71789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c2460a-7818-4df9-b3db-59156af71539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9856d6cf-1aee-40bb-ad6d-eafe1b743a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64029d2d-14d9-47c5-a467-a732a837a52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72e0075-6b34-463e-a426-836d949e5d4b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f004f61d-b4b4-4e3d-93c9-1cffc06b7af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ea2764-4d07-4ba8-a0b9-e332fc81f45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7533a4-af9a-4935-850c-b4b731dc2e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b22e85-6a2a-4a30-af2e-245fbf11a773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0376ca3-e181-4cac-b375-151ffbe2f900",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825cd31d-06ed-4f83-b989-fac70911b615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e707b0-a925-41ad-a575-1ecbf6453504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24371012-c4aa-4478-bf21-6f0f8061130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4c7729-620b-4439-a21c-8b86f58878fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff77a96-2d29-4d3b-9b59-47657aa5e9f5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0280a1f0-b340-43b6-a715-186f4a98f852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871934f9-25c7-4694-8372-a41e4cf30901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70e9301-f8cc-4983-9124-2eeb0d8007ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72462a07-4bd7-4144-a00b-59bd7b05ec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed27b4a-2253-4cee-8915-39320fd39be2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5431e26-41b9-4cc3-b6a9-5326f82dc0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f50c1d-92e8-460f-a706-9932ceed6286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423e48af-da79-452d-b3f1-76689b90099b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e6c780-21c4-46dd-a0c4-c7c5706baff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0792d8b-393e-4a59-bfe8-c12db782ad9d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d80956-cfdf-46bd-9339-828ab31f53f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba23cb12-c68a-486f-8aa5-822cd2d5f3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1b1a3b-e49e-4a2a-9636-db68bbb95731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99dac85-0143-4e7e-80f2-e71116ddb208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcb7476-d26b-4bbd-986f-6e2c5076cec2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b973bd-fa4a-4e6c-b23f-2a60fa74854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa645cc-45c6-443c-8bfa-b6a59e059d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107f34c2-e5b9-4e49-9c8d-314fe50a2a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee2999e-a4e3-4d46-94bd-7370b8674735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6818dd24-6970-43a4-902a-a57962bd9aa6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb74bc-f3f7-4451-9981-edc16fe356f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df683c3d-4c1b-40c1-b650-385f2f210173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aa0e82-331b-443b-81b0-fd900e9a38c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7303982c-9907-458c-b72b-05f03f8ce22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa0fea4-6511-4ce2-98c7-ca4b714bdac0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca76b265-5c12-433a-b5f5-9d55028dda90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25dc13fa-663a-496b-9819-c62743b6b6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b1cf35-3c6f-4ba4-a2e1-2d8eafdffaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eab5256-fd32-43f9-9645-3a62339d3437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea6a851-66b4-413f-b8ef-e6666ec90f4e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d408b5-c47c-4e8c-ba66-903c69432e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb26db12-b8ca-45ae-b248-0a0434817135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8cc6e2-6935-4c27-95b1-22d6df6ac460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83952a6b-5e8b-4251-80ce-0473a79f46fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8abfea-6dc1-4450-9fe9-444c219145b8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881dfcee-d0ba-426d-bd8e-b765a85d9736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ab58a5-91fd-45f5-ae13-edb03834209c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af79563-7574-4c3a-b948-4c908565e56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da21af36-d8c0-4e4b-9268-40bd75f52b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0c7822-a5c0-4e10-9127-5d00471eabfc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0b15cf-6ca9-4ee7-a7d5-dce04f7a72ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1509e7-9b48-475c-a16d-4f3881dc31dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c47c23-0e35-4c93-88d5-076dfb891347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97e3f666-39fe-4979-bcb2-cb83354adec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8b5563-4339-498d-b3b1-9ab5336a85bf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19232b1-9011-4658-b8e4-32cdb2bb5652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d58914-c8da-4b62-8874-de6c454d2bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c576926-0a48-4339-a2fa-2dea9a8eb876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16faabb6-3dfb-4502-8611-fb046c0fc347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f76cd2-e594-4c12-b5c7-4d831fe4e732",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279a92c0-5870-4ada-8778-2d1cdc520001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44929e8d-a4bc-43a3-a8e2-564450137121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51935c10-cddd-404c-939e-ee024e2bc815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7994f3-bb5b-40cb-9251-f3e13251f093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f38936-aaf7-456a-956f-243b8ba40557",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aa2247-8dc8-4fdf-9d1d-58e0275b8113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a51b49-1788-4b49-81e2-d5dfe3a391f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea50b66-5990-459b-89ab-83869b1d1469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "496c0fa2-d751-4226-9c46-3a9778e65150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc262a6-289c-4191-be17-2767ebdbf599",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfed1e0-1b4e-49e5-ad8c-2281e714f67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7823f5c-389b-44ac-9a56-cf66e28155a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620f0fb4-6799-492f-a883-ceb80248bb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f237732-979e-4980-ad2f-8c6331710ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4006719d-f988-4e46-857d-f6c87b6ba963",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde1e79b-4865-47bb-acc1-f2b3c237e67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3f5426-0692-4cd3-997e-74d4c95a4c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a40cbd-7e0a-4967-ab6f-c6cf1448af79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "466aa26f-373c-4829-af31-138089dc4999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf99a8cd-9019-41d0-885e-95598e40e12d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871cdad5-8c48-4cb7-a508-f56e4fb1834c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2e6223-d5b5-4851-bae4-559847da7f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9a21ab-4da9-4629-b54d-c4c67e838ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b34b77f-1aae-4037-823e-b758056e247c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754d4454-885a-4937-92fa-4d3539dafa02",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4065c81-1ffa-4e11-b223-f64bc28aa071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbe0a82-5d80-4c22-b8d8-4c12e5f33d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b322cb79-d9c0-43a4-aa79-34ff70773046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a62f6f77-9e55-4ffd-8ad8-2c99b4777e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b778854f-5b8b-444a-ade1-065df209840e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa7c71d-28c6-49b1-b930-4e1bb57f6f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0286536-d9db-4c7a-86cc-46b433f8ce37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8057d0e9-62d7-4838-b9a9-55ff3593bbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a41e5e-0347-486a-be2b-4b2ed9e68abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4d83b5-c0d5-43a2-a616-ff520c085d3c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2255b213-fdab-422a-b508-d0fa6a6734f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee29e88c-cffd-49ce-874b-8cfda9488a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c3b1e3-c047-4281-ae37-1016194f142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ed879a-11fa-4694-8778-5c03b3e3e517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea6c8b1-116d-4afd-b62a-1a4031ad34a8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9104136d-1308-4021-9021-f6fcf4556e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49845746-8378-4dd3-94ea-ebbdca79a62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c82440-0df9-4af0-b026-95649fdb8b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f39f3e-7ec0-448b-8b58-e0ec7aeb7a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0faa7e5-c4a3-443c-80fd-398364a81949",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f52a41a-f3ab-4203-b8a3-5934ae646591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92791897-2e17-49ee-a2de-92cca1a302be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba3446d-4b60-44ae-afe3-34f9ee7460e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7aad754-c3ae-45de-81e8-1de638c452bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3c3769-d491-4e0d-9e3a-5db412251ea4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb69307-8488-41ef-bcd9-b4c46833bb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429c4dba-dee2-4f28-aebb-616d60b44532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b1ac2-e71e-41c2-a2c4-e3a73807dd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b85afbd-d812-4723-b711-bc09bf9ddaa3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e501f566-b4db-4fc0-8f4d-150bf34c9aab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f70e3267-7eec-4f55-b05e-7de94a75272e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf63d4be-4f7f-46fc-9d41-e8b951f6e935",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5fdb2bb5-4d5e-4eda-9efe-1dfab1194261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55740a9-d872-4f3e-9831-dc0dcd9fb161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2567a49a-3b5a-4c7e-bfab-de0736ef63f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b4148be-4df2-40b7-8db1-6b38a0d0cfba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f9316b2-aeca-4e95-a99b-7edad7e69327"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3025d98-b595-459d-9c05-89f94450976d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a20b46a-af31-40e3-bd7c-cad21a8c51d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3387bc19-03b4-48f4-a1fe-c0a109ca58d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a150158-36b6-4f69-bf29-38be4c0860e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56eab7eb-fdc8-437d-8eae-1684e4f54834",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "baba0a5f-3096-447a-a030-69416c265c79"
            }
          }
        ]
      },
      {
        "id": "22e9ae3e-fbb4-4917-b5bc-8d384a829c3a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a7ea2f5e-b02e-4667-bb02-464215a8d256",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43561e10-f42f-4d73-80db-1ba7c774bef5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e488b9b0-65c8-4879-8731-56d30caaecc5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2c5171-a837-4f07-92dc-8552d9cf4dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03589517-0e97-43ee-a4d8-19cd0d49ff64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5c1d96-ebda-48f9-8960-686071d50686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "225b9f7b-313a-4435-b1e7-dbdfc71f3fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bd7fd8-87ff-48fb-b948-6c9466ae0ac3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8436b76e-68dc-4b67-a338-346a79ff4b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5184f08d-eebf-44ca-a9bd-dd8372c09077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7946e79-9378-4d47-8742-2f3039eddba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7365553e-b209-40b0-825c-9a631ab644a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16806a81-54d0-4f20-9286-4d525591ea7c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9652b34a-4fe1-446b-a4f2-ef20a4efb448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba54c56-a215-4647-9b0e-b8a10ac64d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dad1c26-e31a-46cf-96fd-03898fe7aab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c321bfc3-9aec-41df-943a-4d4df0f79bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b1a689-9870-4d0a-bc6b-84c9423dee4d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3931de-a8b4-42b6-9f82-c57e67d6995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e47a3c5-4ea4-406b-934f-18ac8f43e1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e932739-141c-46aa-a2c8-becf3f2d18c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f2afd6-9fcf-4cf3-b16a-2970144edc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce8f126-a610-457b-8a27-b5819b6e82de",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fac5f5f-eca6-411e-8888-d0c63d2d987e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f82f1d-8799-474b-bc78-d980cdbc4698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b39fbf-b0ea-496c-a070-1da14e8b1ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97b93317-7da8-43d5-9eab-a9f22552c848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e9b03-ce80-4c86-a66b-24b9a5021ad8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd937458-8525-41ee-8944-60ff9d461cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bb3735-226e-4c14-8873-8f4a0e3f60a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b65391-f737-4585-9a7c-827acf7b70dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86be9508-61c4-4785-8d60-73a15074088a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a84954-375f-478b-9fc0-a13d6a125b53",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab33e3e-37a8-4295-b7d7-aa0db1072044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38dd939a-b43c-4ce7-8952-39762f2f7999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91577468-4d97-44f7-9f96-48b180a4209b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe7440d-bccd-424d-808f-5903a66a390a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e7667b-0563-42db-9a42-f1fb2c9f3307",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9af95a-1c74-4902-b8dc-2af970c70190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498b4fe5-fe8a-4dde-ba93-f99290b406b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11f56f8-bbe2-427d-b85f-31e882e081c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0228a9c2-1f55-4090-ae47-c3941707213f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41272a4c-fde1-40d5-b13a-be6c0a472da6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2da4fa1-7022-4d57-b224-ece29272f93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c70d11-e66a-4e93-8786-f6bc8af95e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8f3dc4-c3bd-4604-8c58-50727a1ef322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45fad744-2151-43be-8439-9721637b389e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d23fbb-1016-4272-b8f1-8301535243b9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a799b45-cdc9-4ff2-91f5-b3310bccbd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b5d455-32eb-4c4a-baa7-dd18fe069644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a1ea8a-84ec-44b9-a2a7-6472c4346839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ffb7d9-9fc7-4a5d-9979-1c0d9c79255b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14569f06-dc97-4afd-a2ed-5edc1bba75f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6cf63c-33f8-47c6-8401-83a52371b9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d27e431-1a19-4b87-89dc-90feb39972c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f789a8-1c2e-4c92-a10e-575a26925a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "513c38fb-1d3f-4de1-919b-227f6a6e8afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3953a832-1e22-4673-b0cf-eba492690249",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a33ddf-e16f-4e67-b164-ac85b967fa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc33988-39b9-45e6-a564-bcfe37835394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4622f2ad-7532-4b8f-aa59-19e2ab565156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3515ee1c-5e53-46f8-b5fb-0d07ecafa91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05230f91-ea3a-4afd-b200-0a0d0b08e16f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abdc9c7-254f-4ecc-a281-ca5a6754872c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40511a5-03ea-4188-b1ef-7cb47c4cc09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d146d68-e74f-4bab-ade9-e2e6f6f808aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3570f38-fd14-47e2-b946-f234530cbb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcdf55e-78fc-4173-a34d-06b1a30b626e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967a9ef0-b068-48a3-970f-2e83d5be65dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a22de1-3f93-4974-994e-dcbc3625197e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ffb788-4dcc-4dc7-aa40-b54ca11cce37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "95662e8d-e405-49cd-a897-628f877c510a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0402c519-a0ad-4b5d-8a1f-7e22a34d5ce4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99785b9b-bea5-48cf-b5a2-af1537621686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb06cc39-08e5-4119-a503-efe538ae054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388b4414-2a78-4ade-a4bc-0f6b745372b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d1201c-5bed-45bd-9146-a82563cd733f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7face7a1-90ce-4965-a97b-069dfb3902fe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2b63fc-a167-46e2-a5ef-bca2e5ac75f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5187d6e4-e2af-45cb-a926-038efe407cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41871c47-4c7a-449d-9559-822251a7187b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3edd46d2-7b74-4b50-aff3-c9889b80778c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da673d4-54a8-40bc-9dd2-54754f5f8eae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898da962-bb01-4f1a-bf41-5835b5639c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9498586c-8dfc-4e99-9856-8076e7d82cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d21b44d-ad74-44c2-93bf-76938d447068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a17db669-fb91-4ed0-b5c3-cfe7cbc046aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99390e69-a4c6-46c2-9f98-b97af324b795",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9b9c32-6810-4c08-89d5-32294be69734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298d9a3a-e442-444d-81af-1b365bf61026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f95e53-835f-4e68-97d1-861c7c603648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b13c5e5-64cc-47c2-a569-07e2988a586a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f55b71-feca-499e-a28b-d59adfcfae18",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09562d2-c872-41a6-a099-4057e91e3c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acd9b7a-387f-4734-8c2c-6002b0e7ed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c315c648-2a83-4176-99a2-585e48cef0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffbf609-b10e-4888-977c-eba9bd65c442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e3e354-8fc8-47a0-8052-201723faf137",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611f5b09-a1a2-41e1-8ed0-93caf15f5988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc17c62-9c79-491e-ba22-4075a95cfbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4947963e-c2a2-443e-aed6-80a851c24bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c03f42c-2f2c-433e-9548-12bf52116bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a6179b-7bac-475b-a2e0-1f90236ef9e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a173f91a-52e0-4af7-b206-9d3bec6cf00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0829784f-f533-458a-af34-00296893fe19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb05e984-5b30-4c2e-8124-8a799546eb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1849184-bf40-4185-9487-62e6b4933cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328f25a3-a25e-43bf-9e9d-3e9d97cdfe85",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f077bc86-178d-4877-85f2-fee919efa8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c457a8-01db-4cf8-88ac-c58a34a56866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f47e1b-40f0-4aba-bc08-9d29e2d2a182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bddce089-150f-4071-a80d-15703144f9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158efe56-47b9-458d-addf-fe374c175bcd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b9c880-578c-4146-9545-d3eaf35205ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288f86ad-cfbd-4ac3-b75b-38a285073225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9185f943-f9de-49e0-8607-9c706706a429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f71c3e9b-488a-45eb-aefd-90f8ba89c100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ec2f93-4d2d-4943-94bd-d9bec06319e8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf090d5-1a8c-4b38-85d0-72305d5bd9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c975e1ab-0b6a-4357-b5d2-1c70c8df9cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23cd72a-4988-4bab-888e-789d0e3740a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0eaf77ad-c739-4592-b3d4-c2dd9c315d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbed5332-9d07-49b2-8f18-c91dc6e2df1a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb52d91e-66d7-4bcb-af76-ea9685573f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6272e0-a5c4-428c-85fe-40884396e44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a92e49-6e68-4f6d-9e22-6a40b3045cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38778be9-6945-4424-823e-9e9f5b5f1eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debe0b79-60c7-4d0f-93ce-b120beb73997",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f551b62c-ae34-418c-b023-939d9461a222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1cc341-5fe2-4ff1-a780-e8d9dbf7ee16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b3fe70-b611-4ee3-841b-883e6a9f0746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a08aa0-a83d-4064-aac5-abd47e8a7827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7004d8f4-04e4-459f-b970-4947c43a31a8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b355d7a1-4cd6-4650-a26c-a9a08f1f8f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa529c4-c286-4e95-ae0e-acfc1ff96cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b562415-9fbf-4cac-b3f8-4e8675027c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f69e1b7-a735-4efb-b449-67fa9f897ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae807ba8-d290-4673-92f6-b9ffa5dc2c04",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c86f6e1-70c0-4f1e-8ead-d5d36609f0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fbcdd2-a106-4cf0-b926-2636160403b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce529490-3fbc-4c49-8691-842f30314084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "783ce8e3-1542-43b8-afc2-915f737fc0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04407e70-2010-4a1e-816f-9ddc03034bd2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2790a85-9f00-42a1-8750-6766ce253d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76b8ddd-165a-412d-980d-fcd761dd1300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f8be86-1826-4342-998a-9ad10e5855b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0876ecbd-9dd9-44e9-af2a-6cdd5d2510fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655fb08d-f8d4-4f20-a634-5112be975c94",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11484b3d-33ca-4e78-99c5-98132f908776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0a7714-1fd5-441b-b7e5-1af1342d386c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62775207-d366-4559-978f-27ee22b0f0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4276e403-0a44-4d4e-9829-6a88687b1e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb9a4c9-4cbd-48d3-8388-7f91b4683971",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345393c8-53ed-4a8c-8b2c-42f43c1d19c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc0d8efe-abb3-4ae8-90d7-ae6ff388cfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2489f56-5856-4ebe-be0c-9c0924bc166e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40962df0-0186-44b6-942d-fb6d7d9c01aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84de56c9-9aba-46ab-95ef-780530cbe421",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e6ef06-3172-4df6-9b3b-0550d3d834d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5d8502-0800-44ca-ad28-e05588051fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435fee7c-6122-43de-9845-3a5c2dea51d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba13853d-95ba-4ddf-9cd9-381807004f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cda7694-4a6b-4937-9c5e-b79b0852b9e2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911591de-f314-41e0-a783-e577bedfda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fb6ab5-47da-45f3-b18b-0dad3008a1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533931f2-d731-4b58-b8cd-8083e5534ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4adededa-b523-403c-a76f-45bd06fd238d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47635799-d980-4937-9883-c6891d17528f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d78a08-dcd1-4517-8cdc-f746f114460b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84ef9e1-1fb1-454a-890f-46b3f3391b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7636d84-c279-488c-84c8-bdb57cb8ae73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0ca486-78ff-4246-a00a-cb4b6af57138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9066c98e-f202-48e6-beb4-c544b804f4ce",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3375d5e8-dd99-4c07-b918-4c8161f9241c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bc07e0-4765-42cb-87b1-14ee628b49e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c21b0fa-f533-4bfd-b8ca-d19a0d06604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35077e38-2e63-491e-894b-3d63986fd562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fe5627-a27a-4e2f-bd50-a108894a6c87",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e74842-37de-4358-bf23-dd6c220e5868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e6b945-67ec-4114-9a31-e6585bd947c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a41b0f-cea6-4a3e-bb0f-b1c7eac7d044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "693a8459-0fe2-4658-bf43-1d331533cfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d05498e-ad5e-4cce-a739-396b1830231e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182ff57a-59c2-4466-812d-5568e0884a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb549a8-bbc8-4e54-b397-e8da63e43ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d16af7-265a-44dd-b1d8-3ad586fcb195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01ed260c-41d4-4390-ad39-53bc221f8b7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7e39f532-fe53-4fc6-a880-b9afacc3a4ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8753d9f2-8793-4f16-bfa6-4df3e1e374fa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8821a9e9-82e5-40e7-8767-4485ceb0b1bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d5e115-5249-4cf3-ad79-08dde2af0b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c304de-2960-4505-9075-7bc39110e24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d4cade3-e140-4c50-92e5-046ccab45aca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8774665f-bc9f-42f5-b97d-c37a7a454416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b08a6c5c-523e-4035-a403-e3d1f93cf979"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dca1247-5d07-4e11-8116-b274eff4255a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "572ef2da-fa38-4468-9e9f-3e727103beb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15cc2576-adcb-4b04-a84a-d1ab04b05a36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a31a0f1c-ad34-4950-8964-043dbbd2232e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0583f56-3479-4cc5-a440-ea2b160c75f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6978b091-9d24-447f-a326-3cf6ccd2a06d"
            }
          }
        ]
      },
      {
        "id": "284d468e-89e2-4e26-b311-0c8b8b14ab3b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "050efa38-fa5d-4846-b255-4716d4f6fdac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a56b37ca-707a-4fd9-ab0a-876b0c5a4edd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a4e77c0-d4f3-41f8-b7c7-28a80a9ce0e4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6938dbfa-29d3-4c91-b107-2e58a91dea5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a1c21e-3d70-46c2-b994-efeb8a6c3bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ace22b6-6f73-4bf4-98f3-7183e57d04a9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e852141-b471-41a3-a8c5-784e179c977d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27db795c-5152-4eda-9343-57e82ec46ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79df8874-8c7e-4678-8e58-e49b5abd7f8f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7990d4d-8522-4d06-8fb0-c9a186f66021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca497a44-5d17-49ac-91de-d276eeb9ab7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9e9798-53b3-4e35-bad8-8fdf1e5f41bc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfee4444-0c49-4a22-9548-0b6fb141a6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f143d010-e53e-4396-8389-c742739b8c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac086dec-4409-44a9-a8f4-92b7f9454fe3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7799d3f4-7c29-4f9b-ac50-adc2af2a1d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f08806d-09c4-446a-87b3-5838001a942e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dd8cad-933e-4d88-9a8a-94011b4d7e43",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c8f719-7449-4e4f-995d-4ea564623e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54e2658-8a86-4694-af5b-00fa1eb811e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c1639c-08ca-476b-aa27-b3f6863ad0e4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dea750e-1bea-40fa-b330-501020f8cb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df8d401-36bc-4e36-b87c-727c01ce6b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e8da58-0300-4143-8176-6abcba84f2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042a82c5-ca9b-41f1-a149-5d447a44f866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c66ba7-f6a5-4fea-9c73-6a2faabc9bef",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116ae441-8e93-43c8-81c1-6383f720cb1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d270a5f2-0f2c-429e-9617-c4a5a4090463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4993f958-5e05-4c0d-8a8f-cf02286809aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848d0ff0-ca37-4c4a-b115-01e1fc891a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f80c96a-ef1e-4f24-a32e-21a1059bfb0b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77be7eb-7cde-41d4-9360-ecc98d1de7d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dbb9d1-5534-43d3-836b-936aa4a400a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9f2162-b89a-4e3e-9e1a-5ce855006050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ed547b-9ddf-4dfc-b65c-db5df4ace849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72740ca3-0587-4b10-8998-d47aecdce075",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fceca4d-e5ea-4a84-b465-b4b1551bd1c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a0aa62-be9e-411f-b68a-3fdd13695464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242bf864-2e63-4f62-89dc-73c8d0430146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdea29a4-542b-49bb-9180-c62803a16945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef69203-4348-409c-b7f9-ab437a7a5889",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6109d3b6-c98b-4740-b156-610a03d18925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58784a2c-c6b7-4718-a75c-00d73c719403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2f2ec6-1196-409e-a605-f80b446b1f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5491ad9d-9c02-4a80-89e8-8b77b0596098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8c3ab0-2df0-4ab1-a37f-31575abfe409",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e6a3dd-c7a5-47ba-bf11-c1c3ac33ef5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bde56b-acc6-4b88-8fe3-96cf309fb0ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc6b44-0e10-4982-a077-107787b16013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a566cb7-cce0-4a32-9788-9408ed1f089d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b635ae-69c6-43bc-8778-f2cb37736b33",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b975eb3-a4fd-4962-8865-ef6978abd666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4464b197-5345-4d8b-bda2-485727607c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cbba09-8618-404e-9d32-8ed4996c1fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab589a5-3aae-4f0c-bbb6-f824d9bb9d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b290bcc3-a1b5-4c63-9e1b-11730ae1192e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecad5ffc-24f3-4f9c-a506-4358d8be79df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2acf4f2-7c95-4472-9f58-4103b44c4b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a32db69-42f4-446d-a947-dbc876c513f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052aeeb7-bd60-4eec-b8a4-5719a3f22877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232f7b1d-d41b-41b3-976c-c10a1910b5f9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9ad04b-9937-4b61-a3ff-bd956b578544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c2f71b-e4db-4973-b79c-28321119e450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315c9d38-8645-4156-81da-0241108ec9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c460ad4a-779e-423a-9704-57aa2fc96eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e96746-57a2-44d4-a846-bdf6454b60aa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3b34aa-b85e-44a2-a292-ab5e5b72bf13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01de2b79-620a-4ba3-b634-7edf060aa503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ab00d8-9242-4fcf-a276-02c04e1c1984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d94b997-a6e8-4357-b9fc-44353b1c61f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d25110-017e-44e8-a153-36f60f554537",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c71111-29dc-4cec-9adc-53452c54b7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b3b93c-8e34-4097-a368-4e9dd406fa47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406dfa34-f88e-4a7b-80d7-4a8e076a61dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6614b6c-3c6f-4a38-8292-67881e41ee46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc30c4e6-0699-4676-b510-19c3f41b2117",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944e396b-0e9f-497f-bf96-70dc9a2fca9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5433fa79-7687-4079-9314-f1fd91311c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90223213-7bee-4259-b356-5a7f09787691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5c5828-fba5-40bb-8e10-26aebfa4d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a3cd23-1ce2-4f04-bb2a-4df00510dfc3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95121662-3ba8-4393-9b9c-e2e759e0ac6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f70b81-6e3d-479e-a878-59bd3c118882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4481dd3-8c0a-45f4-80b6-a3958691e777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd0f895-461b-49a0-b6aa-9d6526bb2add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44327177-578b-449e-b3bf-e51d095918f4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8183050b-aa65-4b0f-9fa7-8abee8788729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdb9b5d-0e58-4747-8b29-ca4d13f3e824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095e8870-d0cb-4ef8-8dee-9c692212711e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43993d5c-30a5-4060-b9c8-6f6205a33c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4392f0a1-efc7-42ec-b108-1efbbd51000a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0870210-e35d-400d-ae22-e1ec9909f58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3579b0c-3acd-4b81-aa58-49e2848222be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c3c7a8-75b0-459d-b0bb-101e8959163a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe321ede-dfb3-4392-818f-d6a81bc10596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2520307a-7a38-46ec-ad9b-a6036188ee88",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c74f959-4bc5-423a-8a40-d3b63cebbf3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8285af9c-ce61-4534-bb43-fdf6061ce83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb74d75f-ca59-4314-bffd-c908fbae73ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168cc81d-e95f-4eda-858e-7e75f3f23197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a32a5e4-0560-4d11-9579-50293ec5d202",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1762139d-83ac-4e02-9501-badef82b5c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8ccba4-c32c-4f55-8750-422bcd44373d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c2c5b-2908-4140-b161-7ec4bee0570e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4907ac-5cad-4baf-9dcb-037295178da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a195a0-40f2-47c2-8f60-cb37b6d9a2f5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d176258-7d42-4533-8e62-7b33db32bf76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "696a475a-332f-48b5-943a-d003a86e8409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e19228-bf9a-4743-9956-057cf1ee6911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0657206-0da2-456f-b2b3-a48e55e64a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cef0d3-2aa0-4500-a614-34959018456e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2789c0d1-76b4-4b05-94ba-0d639ca196a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f4ea1d-83b2-4391-9888-dbfbbb6fdd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344511df-2acb-4f39-900d-c0ef1064793d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea021ebb-23ae-4196-9f45-0020f6da92d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fb63db-6b4b-45c0-85f6-dd5f921647f6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985d761b-1d5c-4852-b24a-9a1cbf42504f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e124f918-d455-404b-85d6-050d1a917075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f534b93a-62be-4938-8764-b69da291a5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef1f169-44d3-4e5c-a321-4e23e6b4e3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f24a18-f86e-44d6-ab29-f6814abea921",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683647d4-5af0-4ede-932b-55e80d1842ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a4f3587-c9b3-460f-9cea-f31f28bee385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42786ff1-d022-48d5-842c-0158c4b2de27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322b860e-85e6-47cf-be0d-c684e38b1c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8735f068-8623-4d44-8308-1a5a2478d43c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a6ebd8-570a-4fa2-9122-5981924a0fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd30e26-d624-4161-83b0-55c63675892d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8d09ec-7195-4822-957e-9c18eff6ad07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfdaa37-01c2-4e89-aef6-c4b5b88b61e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e77587-bb03-4d80-b4e5-1491130e1b09",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583d2430-bc66-4688-9f6a-ebb9aeaa6f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb74458-cf92-4d2c-b14a-c86ef1789668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42209cc3-dde0-451e-92f5-409810d09eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e9263d-130b-44a8-82f9-028b1dfea425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd05d60-f1b4-46a2-89e7-00b80fc17d0a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ff2498-643a-4519-ade0-dd579426c84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c978914b-8379-4994-8511-8fee9afe3ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c2aef7-f3f5-4aa1-a214-b95e323184bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12dce4e3-e676-430a-a256-55007839c18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7992bfc-cccb-4830-bef2-866922bf82c2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c90cb4-5b9f-4d82-a739-652c9a73ffd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b16eb402-5df7-424d-8d44-88b69012440b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0183913d-f84a-43c6-978b-46d596de553e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d14924-057f-4ebc-9191-8da828f225fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75db0f19-cd99-493c-a977-4cf8e4cb1a69",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3631f1d-0bd0-463d-88d0-2c961fee844a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a831a23-270a-438b-993a-627b12719960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d6e92a-f29d-43ef-9b0f-e78a5958aa68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe51b353-ff1f-4e59-a1ce-0753b3fbbb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa62d61-a80d-4626-b1f9-969945038347",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57108ab0-5f80-4a96-a8e6-4a2cc38171ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5dc08c8-7eaa-4fd8-94da-67e7f4213dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33fc6cc-3c35-42b1-a287-17aaec39d68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4479aa-a0e5-49a5-b02b-3897a510c660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eca0cb-2783-4950-92d1-4f677b8d2994",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0665a7-962a-4409-94df-f8963dac3261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1f6b1c-1805-4dfc-bd75-8b73d5f24c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdbac8c-dfb1-4d5b-a075-a55f0ea20ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee69cff-d15d-4dab-9128-9cc1efffbc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed4832f-d4b4-483e-9ca6-24e3fdb57db4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4defa71-9deb-4dcb-9895-6db88c9b970c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821c18c0-6a66-48fd-84ff-838a85f8ca8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90ec2f5-26b4-4cbe-89c0-e5c341de1441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216ad024-5477-44aa-b556-74b05d950456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d5bd68-8edb-4c5d-b580-b2f835a57231",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0686519f-570b-49c0-9c4a-553b8fd29b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2470f471-394b-48ef-9901-b8a828d1db14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285de46c-6642-43fa-b3c3-3a5c8d621744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd91acc7-dbda-4382-a503-d3e2ab66c455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344d301f-9952-4b51-88ea-dad57432edd5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9b92b5-c47f-46d9-a2d4-837bf2b0ad58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cd0504-b218-47df-ae58-5b75598c2b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf005066-bd2e-4c9f-9064-8dab174c1d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d0df59-4757-4ce8-99ce-24b4d26bfea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a711bd6-b7d3-4557-9440-7fba797cfe23",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c561cf1-d6c7-4d38-b1ae-ce116792932b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2063cd-e5f0-4cf7-932f-476be7a29638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a446fa34-2ead-471c-b415-2c18929fa230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202db393-4490-4ed5-893a-32fb08fcb517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118aae10-f7e2-493b-b96d-39ce4e374931",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd7cccc-ea8e-46f4-af5a-a9abf5c829a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c5cd57-1e4a-422d-a076-2fd586ee286e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5597c8cc-909a-4384-9d57-363307339ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d1af3d-b038-4620-bcf4-a8e7225ee844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187fef2b-7a7d-43af-862d-0f026a8708c8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebb4247-12a5-4a40-a31d-18953102d8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f14dd0-5962-4eaf-8a51-f0b283dca708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f8fd4f-09e4-4ea8-8646-46627c337ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fdc711-a2a7-4725-9880-f9afbd52cd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc3c119-6b38-4840-a1d0-ab0a27236ae2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ff36ab-b43e-425c-a46f-3026509bef14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ef036d-716e-42e9-acf3-fd285ec01a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a186da1-d8f3-4860-901e-5ac46dce777a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76360432-a221-484d-acde-5ef781d40135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f78e9f7-9ae6-44ce-8688-50b8aae062d3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26f163c-1233-4179-b6a9-fb14717ac95f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84568209-c3d6-40ef-9aa0-4ba21e2a9381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebe3485-569e-4636-b5fb-4a79a86fd4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893ad090-1db1-4667-a87f-78b70832cabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afb3479-a754-4922-b311-85fc15c98f5b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c989f-0c31-4876-9551-5c4f065626bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104ea7c4-a899-4fbe-93cf-4f8215781ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8195ec8b-f935-4e46-b66b-b8959af65570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfc6d09-5398-4a11-a604-cbb3fd3f8844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f21a9db-40ec-4df6-a317-a1976e74fdb4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585da4d9-3215-448f-b284-dcba0fe36933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60af27a-a2bd-431f-b1bf-5669055ab76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a7511f-43d7-40d0-a190-204f2f4ad1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af54007-637c-44a0-91d4-c1306a352bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1ca857-dc1c-4d1a-ba59-ae09b4baccad",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f95da45-f399-4146-b3ce-27955471f593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31dbf0f-170c-4250-96f4-56a40887c2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae2f174-9c4f-47e1-b947-e24ff669f571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c0fcfe-c0bc-438b-8172-850887e224bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d46a2d1-748e-41e4-9867-948b8871ab6e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3d62b6-252c-4dcf-96fa-b25b13c9e3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bcbd7e-2d4a-48f2-ae41-cfe80a2d9844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba92599-1f78-49f1-a66e-c21b64ef4d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb476b89-4611-4eb9-8dc6-c686065a109a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35854f0f-4767-4b67-8426-7cba630b4e4a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0c198c-5026-44f1-8262-ea3d90036955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cc62e6-7259-4457-9cae-2eb1a41e3337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dd5f7c-7dec-44dc-9d78-7f0fc5e24272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d782ebb-f283-4efe-9abe-95824c6922f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9388bcb3-6c54-45ee-80bd-0a30e0624264",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af28b765-9834-4897-ac80-3e403a087e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb22cd1b-b9c4-4d80-926d-6799fea1bbf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb39d16-4513-4508-9bc6-2fd7dbd58dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df6a022-fc40-48b3-8b68-5245a00e0aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10152322-8e26-490a-8db3-8bc365313040",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481855fd-2c1b-4b7d-bb93-f2db7b6eb111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85815007-0f84-4720-b9b7-774fb1ad35ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741bc20e-d178-4aed-a7f8-4a6bb58a784a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cf1004-2a28-482d-80a1-94307e70d030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e10c9e-de98-4ef7-97f8-b31dbea3073e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344a5a48-0179-4252-a40a-eec666e6602e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcbe5f1-454b-4659-9d9c-40f2bc61941d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b81386-2a16-4ebd-8dbd-8ace41e1feb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e981f67-c8cf-4fbe-b640-e113038bcdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72f5a06-2661-46cf-8aa8-ed258ba0887d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de30435e-5fa7-4e57-ae12-2b526e1f00d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dfbce2-7e6b-45d2-a2dd-faee4169eab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dea163c-c942-4d0a-ae22-ca3644d732e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2245169-3c64-4494-8401-b72e3a4f6993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec87099-1836-4dad-83d1-3b91f1954957",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a5a9b2-868f-4d27-ad0d-08637b7a563b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57dda093-3d77-40d8-972e-4fa999a2d204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3ea0cb-b3b4-486d-b887-d71e72415dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50f42fb-6f5c-4b05-8d43-5f80b7d23747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43736d06-93d5-466b-9ea3-28f2b2401492",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34382575-0cb1-4c3b-a258-3f5e847dbca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862fafef-96c2-4573-810c-14117da24d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033b4af5-1579-42cf-b770-123fe963baa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7388fc5-969d-477b-818f-00af9df8baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b796479d-7262-493e-97f2-4d4f9f292c99",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361c6b24-2fb2-442b-8bd3-7315bfb356aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5e0770-fd0e-4cf0-8a47-3a898d56f6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8b81c5-a049-4484-9fb2-4a5aae6ffaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd395798-6a5b-4bff-96ad-12a2aca16e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0758d14b-3996-442a-ab8b-7f5e1d44e905",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bd19f2-7391-4b1b-917c-47eb238154f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a126b1-2bd9-4541-8270-a03b779c1dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7b1711-2b52-41d8-a93b-31b5af2a8f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbf11ae-4a37-4f5d-a8a2-a8e09b61bedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a424141-ae28-4519-a860-1cf1d4437df1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9067e0c1-c137-4020-8e34-328661103c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdd3c8a-a4e4-4d04-b9ff-0a5d853d3015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd9cf93-28c7-4ae7-bce8-13251a989a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7681bc-7e20-4fe0-b3b7-e59ba4d1e5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca23acc-1f7b-46db-8122-e5e551584137",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56de70b-72e1-4b28-a8a5-2c8d6d59f5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e742326b-deda-4416-9541-8941ad8bf5f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96ceadb-82ec-4a5b-8ca5-e2d2816e58d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2d527e-a47a-47d8-846f-25089838f16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f14d38-548c-43a8-a221-cacf8449341f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9608a91a-dd26-4ea2-8529-e43248743095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64c7942-4726-4d72-a3b5-2b056d0e8417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e23e7f-72d6-4dba-aba9-4683844c52c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5efbb23-427c-4f1b-a694-33a6edb1c6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f563f3a9-bffa-4df4-926e-0c94df4a2714",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ac4b1a-1d09-4f2c-bd05-d2bf73919d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9d8f62-7f3e-4362-a022-90ae54cda7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64586fb6-3eea-4c0b-af21-32ac9ceff3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f09ca9-686a-463c-8f73-8f31bfbeab51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5438f3c7-25df-46f3-a64f-de9be4dc40ce",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f2b1ad-16e8-4955-9ed5-f1e6e6f1da37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bfc75e-d319-4387-9365-89e083b0e386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2a180e-4e56-440a-a296-139250c3ca93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3492da35-d2f3-403b-87ba-9cbf5dd97402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0544b7-323e-40c9-af60-d925a820eb35",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a771f67e-794b-48d1-8bf2-4337c6062c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce2e6af-4e2e-4ec0-af9c-c3d244a3f4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821ee4b5-e8b1-4252-80e6-c987220b0463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdf32fa-9e7f-469a-84ce-e6c0b552cbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26447be-b9c9-4e87-b309-d4068601375c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7b92a9-e53e-462b-a904-73847d9ed145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6dcfb1-efa9-46a3-8a19-ea8663dde6c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665a947f-8792-4fb2-9787-d046cae29d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b877c01f-2aaa-4fcd-917a-33b9baf22953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563e102b-79cb-424c-a661-4f88bbfbe7f1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8353530-ef03-4593-9d7d-9e066e2352ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481ba312-2a1c-4bae-86cf-f1feba750d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58aea5e-c06e-4504-95be-6f175c0b00e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9445bd53-646b-47ca-92d1-7ea6f7575e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d9377-bb2d-48cf-91d8-88119e3e5bc2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500081fd-d603-49e6-89db-5117b14bb49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8404e4-35f5-45d1-9e49-c1ee9f711d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa719ec-4705-49ce-932c-1b0028ac20ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a858217-1ee3-4524-a4d6-fe5cecfba41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26c85f8-ed7c-4ace-9fa0-2d06fb25d560",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942bedcd-8e47-4c38-9fcc-75f2a9330084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c93c5f-a300-4906-b622-3a634b63a612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24380047-2219-459d-a159-4e6eacab23e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ff321d-f5e9-451a-9a51-651798578371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b643c52-44c9-4b05-8492-46b9923f3d5d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddf04d5-6833-4d8f-b7e3-be6d7ebe3053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee246f8-43c9-40e5-87b9-e93e9cd3c449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f1e061-591a-4ae8-8042-4b74d54b4da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea12462c-14c3-4bdc-942e-92e2be0e433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ddae5d-8b28-4275-b51c-0327d46b71d4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ddfd3e-a88f-4d60-b3ea-a583622e41b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455c70df-29b3-48e6-b424-b36366cc04a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd66475d-1655-409c-865f-4e0319b1973b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a8401a-5816-4917-bd72-7c7a9720f429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a04bc2-bbf9-4e47-a6a1-faf817093635",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9893506-dabc-48be-aeb9-b98290d96bc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39577f8-bf14-4880-9e69-9619bb573549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b540960-2a40-427a-988f-5555e9164086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217cd018-00e8-49ff-bbcb-a93a85addc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa68dd37-f507-4fff-9325-5d67e5e17597",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36120182-df59-48ea-aea0-17f21d725cae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0419eb01-f376-418e-b59d-5ad58d3c4ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aac3f2-4903-4624-a526-5c051b3ee617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc0ec7a-08d0-4e77-acb0-2ee8ca0a00d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c977dd9-2a4b-4aba-bea8-cb7f3b5ef5f8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c340c2-6357-43c8-b7c9-dc8d5ae5b068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "738beef6-672f-4a62-837e-54a65c7dc557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2e1ec7-3874-4e40-99c0-c247a10e06f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0adbe607-b68f-41e7-8d7a-c1e4789ca2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac50d08-7a7d-4240-800c-0122223ccef5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dab8eb-192f-4a48-a52b-e90a4566710b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbdda4c2-d367-4c96-a97f-5b18dddd0e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efda3210-4a66-4b1c-b9b3-373d805be7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6281271-8f04-4673-829f-0221b3911858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25c0ae9-70f4-403d-8a74-d322570bfc6d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb93489-caf0-437e-b3d6-996e10408546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e49bc18f-c866-49de-89b1-bc2e1cf012b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7422f88-6abc-4888-9fb2-a67b997c472f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332c99b1-32e7-4f66-9b23-33a23b12537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1ef489-8175-41b0-82be-19d0f06f1ada",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451c72f7-ff67-45ee-a68b-639fece3c8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c89b8a-4a3f-4d77-85f0-6e8a6f956c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ddd83-8bb3-420d-860f-55149fd7cd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e4da52-d515-4b1e-95ee-e12c7a6ac678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259eaf41-0d73-4ab2-8d76-9d04a1577b0b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a09520-c3fe-411e-a88e-6d1a57032ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd000bd1-70b6-4800-9520-d5b15e28c8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b2807a-56e8-4f3d-9f84-02e4e05df358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55558cb-07e7-402e-a7f5-a1d8a480a2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d260349-178c-4fcb-bb30-d97611ae1f3b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad3e363-565d-4b90-9c3c-c57aa529588a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51493f2c-1202-41e9-a087-5d18ccaa8b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aadcf2-ea58-4e97-a849-b5a24ed7a6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da9f633-5259-429f-96b8-6c6d98b36531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871cd284-a891-4d55-b08a-8f7c0b88ddb8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f01725-2e90-429a-9dc5-bb29a5acadba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b03acb2-84a5-4807-9f02-306c897947e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea6ce0a-71a8-4a85-8d63-5954edc5a2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e851b529-968f-4c42-af89-4dc36b13fbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc271d4-338f-4413-b469-8832c7f35141",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784ec3e4-edf1-4099-a8df-11e888bbc177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06dc7341-934e-4705-935a-cfcb07611d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3958d076-75c4-4f3d-b890-0feb23e713d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e1c2f1-8f76-4ffa-a152-33f422dc86a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1c5813-791c-4ee2-9ee3-fb45b08900ee",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d87d802-e39b-41e8-9be9-3b0c61149fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01cdf454-81ed-4ef7-a52d-4749844f1910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389daa6-d7a8-432b-829b-11bed71c0800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bfe101-3834-42f4-b176-ede5b2b0158b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8e56ac-e526-4821-815b-7fc8357b3065",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11b5c9f-58cb-4722-8d20-9a79b748e29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e1241d-5f45-49f4-9c5e-984b89889c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed089af7-1ba1-4c5b-b52b-5224807c308d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aebef28-2141-4975-87f3-73e33f657257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21c252d-6500-4bd3-a26c-cf9bcabefa36",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5686f01-1b8a-40c4-825e-2574259951af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b664c93-c498-472a-982c-a64c0f11f968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf167be2-4068-479c-b464-053573c68933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781d4e6f-0071-441b-9235-de0d0784d655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e875d7ab-21b8-4d94-9f72-1981e44a74d0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5fd544-af5f-4eb6-9df4-bbd525bf564b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b45a18-6d7a-44a2-8910-2f0e13b703f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce956e1-6903-4e0f-abd0-c02b91fe3194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c062b0b6-7991-4c6a-b373-11bc8d93e427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23290212-0a1c-4c44-a3b3-27ce545ae295",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f8a163-f1d7-4622-89a1-ba4bdcf586b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6b3255-e66f-4b7a-ae7e-c8536a6de6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c637df-f3a4-446d-9851-b92094802198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8a626d-520e-461f-8a7e-c5edcc173ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b4a4a7-046b-4e0c-b103-09b6c53bc927",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a847524-06d9-4ee7-8676-3019c419987c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "868ebf58-8c3f-41c6-9c6f-c86b0c059b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abba2829-bd01-471e-97ec-37754295c5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c669c2ac-cb15-4bc6-b082-f5a90020557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76857070-7bfa-4521-af82-37a2d79d531c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25de9da0-cece-4361-9888-af7db79fda9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a82a2462-daed-4fb2-92e5-7749a74e4d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6b8cdb-9da1-4838-b032-07a848d0a977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b650656d-f5f7-41f5-bf46-d8756ad678ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3da7c92-2a4d-4b54-aa0f-fabfeffa6c80",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6137ba-9cbd-4b2a-a9f1-dd579f177f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9048bf-ab44-4a25-b75e-6a8b89886f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa95c6-d87c-4865-8c0d-854022405098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6065bcb-b475-419c-98fa-d4dbe3695333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db4f1bd-fdf5-4020-b228-4d4d08f39089",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9d133d-3efd-47c6-a42e-85a2ae0ef1b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0d27b3-c08d-42d3-954b-6b726b6570bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42269c11-cc18-4f42-a932-afbc3f977525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f9e8ab-33d6-47a5-b8df-48d69094cfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c55aba-e2a2-4dd8-a29f-30f846a372c3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155591a9-fc02-4af8-a072-637995a3580f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dad2bb70-d1c6-4f54-ba6a-d2153d8b4e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d4158d-a2a1-4755-90ab-e1dae472b55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c2970e-6480-4c7b-acf1-7a9659f87647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303ed805-c243-4f67-9add-1df1053b4874",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06d3ad8-9def-4e34-a3a7-01b611f1160a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87468718-8364-4eec-87c9-dfe2c1e854ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a2b819-9958-4c26-8d44-2a2b5158d82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06dffc7-317a-4d58-8034-a632bb8e6d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94631ee9-156f-46fb-a3ad-c898217551b6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27eeef99-6cef-493e-ba6d-3e8887872c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d1b83e-03a3-4d4e-9679-9416ae6f6ae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae53594-1c80-4303-87bc-6f50d2e13ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195ec580-271e-425e-99ef-270a35f9cd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845ea87f-e252-4806-ac74-1f4ec1280561",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e33e96-ebfd-4bf0-b393-21fbf9163f8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbad83c9-8640-4fad-9016-c99b4b65459e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04468c21-84c6-47d3-ae4e-43ee337c2c68",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055d23df-18ec-4c40-bcbb-9feb0c9ef0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6df358-4410-4992-9f74-5a8e44c5a66a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3983e2-5295-4019-8b71-06699e9f06f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e78b618-36d6-4e46-b0a7-b9aa5b005464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfe975b-78f7-4885-8694-954efc5c1043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9d4714-72ed-46e5-9e01-d26ce2fccb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d828f32-1202-492a-8d05-3198ea4bcf4a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b8f79e-acd5-443c-b59a-3eb1ec1d5bef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9306ff64-16c6-43e3-b118-185d784ac0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aee062-1b6e-4841-9232-5c1f999cbbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac824e2e-17af-4633-868c-f0c38164c344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba6b10b-d425-4dc6-a8d1-a4362dbebe45",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fec76a-854e-42f9-8231-e6aeadca7663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d1395e-5a73-4080-8ae8-cd0dc17f2228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ae7dfc-47c2-4c0f-976e-58b965d8a0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2ac74d-03b1-497f-925a-2f751a4fab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616ee741-23a3-4475-816d-6592ba6a044f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbf0ebf-6789-4005-80e3-1727cd955a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef5f987-1baa-44ba-8ff1-e635f45f42d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a869bb0-bd91-4b59-88bf-b89bf690ab18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d7c899-ed93-45e5-b0ec-225069b072df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f79b76-e87f-4ec5-8631-e2ce02f299f0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a72b31f-a0ce-4cab-8fe5-1612cd63cc2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d5ce51-845f-4f65-a9c4-63b1392a8301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a358ca-3cbc-4373-879e-e3768ca038d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d540fd37-113a-400b-961c-9824c3e147f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b1406b-49ba-4e4a-9c61-b76ae41e0588",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399b39de-e6c4-4c2f-95fc-58bca87a4526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0440c769-3e4b-431e-93a5-d7a192c277bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554dfeb4-35ab-4de7-899a-0f40f3a1ce90",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228cc3f6-adf6-4541-9db8-4210b3178e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c54cac2-e845-4380-b6eb-c9f5a64196a6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86c9861-d508-410d-82ab-fb9dbfd6903b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdbecde-7256-410b-b6dc-9bf2afe93588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c340ee54-a4fc-4b06-a44e-1842fad76dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934cf9e7-8921-45a8-a455-26d76f13af54"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f37606c6-9bd0-4735-9bff-04309ae1e1eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "407a71c5-e00b-4eee-afad-2bff04fc38d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96769ec0-af62-4e0d-931c-1ec911aaa7ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9e35968-87f4-4f0c-ae00-a9972c8ebf08"
                    }
                  }
                ]
              },
              {
                "id": "6bf0caf9-9a9a-4182-9821-b7c36e2b2c42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0317c57-6d60-4adf-abf7-01c8f4197d4f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85701505-1efa-46f8-a81e-31f357c5bb10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "01ce0d0e-4fd9-4d31-884f-c610b5b22305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfdd98c-40b4-4ebf-a03a-92ee25a1e69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e59e29d-3a12-440c-b8a3-97d5b3e2e7cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60df2ac8-a9d4-4d5a-a078-ce7707360684",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0932a36-cae0-4cec-b884-c48b12ecea44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "291a8b75-0131-4e8e-b17e-54767785085a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94a091d8-7910-46f4-9f80-c15c8b6992ab"
                    }
                  }
                ]
              },
              {
                "id": "d35545e9-418c-4951-a23f-ed16e483eb01",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c40e0010-09a0-4048-a7ba-5628d1a52f0f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e0fe18-e819-4faa-94bb-6d8b92fadd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "76fa0e04-20fc-40f4-ada0-a0fc941ab27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d35be3-1b3d-4acc-a8eb-70fc3da7d15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750b9325-32e5-4181-b9db-2ad843dd956a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac5c3021-db1c-4612-9489-c431d06285d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88696eca-8b9f-49ee-b973-2602897b7001",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abbafbca-3527-4f14-aacb-c82b61e93c08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0c6de70a-db76-4fe5-8e77-a78114f8ff3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6563d7a2-ef9f-4a10-a199-33faa70227e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c3472f8-df2b-40c7-917c-4f6dc1e275fc"
                    }
                  }
                ]
              },
              {
                "id": "96913159-0dbd-4bd0-8ba1-b5411323173d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d161c91-e050-40e4-8a51-fc59b7893666",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e902dab2-6eba-4ad3-b9d4-4c0478eb3e83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9999e7ef-b9b5-4c68-8261-1c686c2ba9c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84d615ec-7173-4fb4-844c-fb49477a027c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5110a53-6223-44ea-b068-c661b7d3fe01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b2dc347a-9d9f-4ccc-bfed-26587a7df1ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eada0782-f15e-4b12-a392-eb16429379ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dea504cb-5ee0-4676-ba10-8a43198a6e94"
            }
          }
        ]
      },
      {
        "id": "f90c09a9-afe4-4ab9-b9cf-61144efaed5c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7e51a564-77a3-4721-ba9a-617c73cb334b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd4d84d4-8f9f-4c20-8ba4-aa37e981e3d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66ee70c3-87d5-4f69-a92a-a1ad3580e7e8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0755ed94-7fd2-4322-aaaf-a1d31dec7231",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a19c82ab-5b62-451f-9391-39b68edc3656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018bc7b3-60c9-403f-b875-68c0bee61429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d214084a-e8eb-4dc1-b1ee-c087f8348589"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "765c21f3-36e5-4b52-a43a-e0ee39ab5e34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5195af59-62a5-4560-9207-4764611d3e3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b20f46a-9ec4-419f-b5df-11fb27c9d50d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58084e8f-3eb8-4863-ac50-8e4a30d8191f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c1b1d5c-80c1-4b28-9a44-784f071da311",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "04480108-2a60-43cc-b943-993be88b9017"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "463b4793-3ac2-4447-972a-428add251d05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f473aa9-e58e-4a25-9888-f340e562e9b6"
            }
          }
        ]
      },
      {
        "id": "232c1de1-4259-4931-a958-8f8216fa31f2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "97e7ecc9-4306-4989-b376-289c87fe579b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "710d06ae-99e5-4414-99ac-9c2510f883cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4798d616-a0da-4e4c-a069-f0b5389a91b5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d8f543-0fe9-45fa-8cb9-92321681e83d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa717555-709d-48ec-a406-93b647c8b3f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1044fc3-f05f-4837-a6b5-aedede8fc4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf5b96b2-60b3-4977-898a-cbb9c8b6edb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de311d5c-8c25-4e26-bf0a-98eb65ff8185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43ecf974-9540-416d-9e0f-051041db658c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c3f76d8-7528-4df2-9d6f-b1c8f647a2ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac9540d8-9d11-455a-8499-836ab0e8cfd8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f71e4e2-a650-4afa-94e5-50a40faacfc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "672f0901-c4c9-4323-9a73-723f837856e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7ef822a-87b1-4c75-bcb7-4558b7f5d5da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1617d5b1-7f5e-42eb-b5cb-81e09dea25c9"
            }
          }
        ]
      },
      {
        "id": "32862be6-e08e-42f0-8315-26229d7115a4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bf4f214e-d82f-4561-bb7e-297f5b916970",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e67a62cc-fea2-408b-b9b0-65054767d3ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa879d42-b684-405d-9146-a147850fe586",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae43a2d0-df73-405e-a100-47953f36ea13",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bc6fe8d-6539-4a80-b2ba-4f981d51d9c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288b2842-1a14-4a2e-bc5f-c20d4730cf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39752342-52eb-49c9-8e53-cc70dc30543c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8725d65-1b9b-4d4e-8da2-2b8586d5355f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e05b200-1f9f-4511-8cb7-dc011c0b8226"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47aca225-63de-4ffc-a873-d168447e55c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0800d95f-bfc8-4e93-a558-3d583bed8b33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5e50302-b0df-4c96-acc3-c90832aa9c93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ccd126f8-cccc-435e-92d9-c07846557483"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "622f704e-4652-416f-a7a8-11cf2a23cd1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea17f3e1-8e4a-44d9-98d8-6509ae4c893a"
            }
          }
        ]
      },
      {
        "id": "fe4c9d73-28f6-434e-8637-f73fda6c18b7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ded4e8c9-668b-4f3f-82bf-4eedfaffb8aa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01b697c9-07a4-43d1-b862-c16dfe983070",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5ebe37c8-0ef6-4970-a141-5668ddff3897",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78a56881-0ee4-4c4f-bacf-9d1473855cdf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a906b0cf-40d3-4ee9-a8dc-e5e8db0f3be1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 219.52816901408443,
      "responseMin": 10,
      "responseMax": 7798,
      "responseSd": 742.3620580706181,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687394552050,
      "completed": 1687394625978
    },
    "executions": [
      {
        "id": "cb7ef8ca-3ee4-4ac8-811a-295a95e12380",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aeb60881-4380-4d30-9505-4507637d3ef2",
          "httpRequestId": "a57ae8bd-ee78-437f-b5a2-66ac57a512ba"
        },
        "item": {
          "id": "cb7ef8ca-3ee4-4ac8-811a-295a95e12380",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6aaf838d-9215-44c1-8a25-ffe075075b78",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "3c4b66d8-e6ee-4433-807b-9e881e1d0c6c",
        "cursor": {
          "ref": "b0c2cd9e-6201-44e6-85c2-a529a2539de5",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89148413-8692-4c7b-b830-389aadca156f"
        },
        "item": {
          "id": "3c4b66d8-e6ee-4433-807b-9e881e1d0c6c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d5ba059c-c84d-42f1-b6b0-07355b930810",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "bd1652a8-d682-4be6-a04b-c1e989d8e3b5",
        "cursor": {
          "ref": "984602b2-94d1-45d0-9564-ed5d69cf2ddf",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "378cc80c-da72-4ef9-9d9f-6088c3363927"
        },
        "item": {
          "id": "bd1652a8-d682-4be6-a04b-c1e989d8e3b5",
          "name": "did_json"
        },
        "response": {
          "id": "5d378a55-6b6c-4f7e-8ea4-1feeffe31af2",
          "status": "OK",
          "code": 200,
          "responseTime": 467,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab572e59-cfa2-47b6-a332-40a467af9304",
        "cursor": {
          "ref": "0903f4c2-0e43-4f31-b670-3646853cabf6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d84ef8ee-41bf-4bae-9540-762b81e3d2e7"
        },
        "item": {
          "id": "ab572e59-cfa2-47b6-a332-40a467af9304",
          "name": "did:invalid"
        },
        "response": {
          "id": "75cc353a-8b7a-4942-bfc0-bcfe42fc205f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 924,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ab572e59-cfa2-47b6-a332-40a467af9304",
        "cursor": {
          "ref": "0903f4c2-0e43-4f31-b670-3646853cabf6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d84ef8ee-41bf-4bae-9540-762b81e3d2e7"
        },
        "item": {
          "id": "ab572e59-cfa2-47b6-a332-40a467af9304",
          "name": "did:invalid"
        },
        "response": {
          "id": "75cc353a-8b7a-4942-bfc0-bcfe42fc205f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 924,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4d80cf87-b902-43b4-bf2e-abba6bd61ad3",
        "cursor": {
          "ref": "58f82cfa-c0f0-4a99-bced-b0354d5f2d04",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b8216b85-a4f5-463c-8d86-815f488915bc"
        },
        "item": {
          "id": "4d80cf87-b902-43b4-bf2e-abba6bd61ad3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5fbd31b7-804a-4d3d-a011-efd8bab733d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59987e0e-a8b5-4ee0-bb92-b68ede6d1d3d",
        "cursor": {
          "ref": "08f33686-8ba4-420f-83da-60d51b4feb38",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8cc92010-4523-4f7e-8874-3de7350280ea"
        },
        "item": {
          "id": "59987e0e-a8b5-4ee0-bb92-b68ede6d1d3d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6a9e71f1-12ef-4a44-8858-eb017dbdb3ae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d56a524-d932-4431-ab9c-d58be162ff3c",
        "cursor": {
          "ref": "53c68eb9-2edc-4539-be92-fbf53b3bb756",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9094cadc-4363-4a33-b4ae-0f400d3276c7"
        },
        "item": {
          "id": "1d56a524-d932-4431-ab9c-d58be162ff3c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9f982a64-40c5-489c-bf02-c4a595c5d117",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4479a919-8dd1-4e2e-80fd-8ae083c057f3",
        "cursor": {
          "ref": "c96de7cd-a4c3-4cfe-a86e-31cc2f006cef",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "16777a9c-3ec6-480b-aee1-cd8ca07dd9be"
        },
        "item": {
          "id": "4479a919-8dd1-4e2e-80fd-8ae083c057f3",
          "name": "identifiers"
        },
        "response": {
          "id": "373b3252-e9d7-4dbb-b2ce-1e5dbcb5be8f",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c9f78e-4ea5-4d57-b63f-3ff6ea59f42c",
        "cursor": {
          "ref": "71e019d8-20db-4daa-b6d0-cb93d7f8a2df",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "23098358-9528-4b45-83ad-9a5eb0cf2fc6"
        },
        "item": {
          "id": "23c9f78e-4ea5-4d57-b63f-3ff6ea59f42c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f85562fd-a06b-483e-a4b1-539019fa2ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e36440-4a28-437d-b723-a5c566a13179",
        "cursor": {
          "ref": "33cc8326-9098-4643-a376-9f611e99f671",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8b79dd75-d8f3-4a61-b415-c4cfc43a98c4"
        },
        "item": {
          "id": "95e36440-4a28-437d-b723-a5c566a13179",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2db2cba1-b3f2-4fe9-b299-9b04e9412d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a7eee9-bc90-4414-b268-b4d22076be9a",
        "cursor": {
          "ref": "6eb1b4d1-3c18-4a98-8652-c408a139cd00",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "786e18b7-f105-4dd4-9f01-e4b8e2f97a30"
        },
        "item": {
          "id": "34a7eee9-bc90-4414-b268-b4d22076be9a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "903a69dc-eaf6-4da0-a1aa-de4854dab4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce643975-2cf8-4ef9-b1fb-5ce051475183",
        "cursor": {
          "ref": "1bbdd76e-b3c1-48d7-89c2-cf4f3181f7b0",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "50677e27-2ac5-477f-b80b-9fd85c3e6613"
        },
        "item": {
          "id": "ce643975-2cf8-4ef9-b1fb-5ce051475183",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4ebf9b6a-7cd2-4370-922a-7fc76ee3ed68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2244e208-94fb-462b-8169-ff7fe49e11b9",
        "cursor": {
          "ref": "0622d1c9-8365-4ded-93d0-bd39207a70ba",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "84f01309-7f21-43c7-b57f-24fb2cd1245d"
        },
        "item": {
          "id": "2244e208-94fb-462b-8169-ff7fe49e11b9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "78843458-8d35-45a2-a747-c0a0fcf082e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccb9138-59e2-453d-9303-a3d5c6fa350c",
        "cursor": {
          "ref": "ed31bb07-f51a-4c25-9cbe-7a13fd8036d8",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2a04702c-401b-4cf2-a9b0-1d74199b6db3"
        },
        "item": {
          "id": "cccb9138-59e2-453d-9303-a3d5c6fa350c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1b85777b-f799-451e-8870-d52899ceb55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c82769a-c813-4fd5-b352-4092945ba51a",
        "cursor": {
          "ref": "94b5234d-0d87-4180-be32-940663f91c5a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b90329df-9712-4aed-b707-2efb72fc325f"
        },
        "item": {
          "id": "3c82769a-c813-4fd5-b352-4092945ba51a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9d462eff-5194-401a-bbdd-88921942a41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487453fa-2cbd-4d70-b2a2-18eeac5e25bb",
        "cursor": {
          "ref": "ebaf2fae-1739-4c8e-b642-5f8dce23c7da",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bcace038-0815-4eef-b606-31bb3799b67d"
        },
        "item": {
          "id": "487453fa-2cbd-4d70-b2a2-18eeac5e25bb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "38cb487e-66e1-42f2-923f-a637685c21ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56117406-4a3a-4e63-a62e-cf119b0ba96a",
        "cursor": {
          "ref": "af592786-da89-405d-aeef-64ec58b5cd6d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "59ab0157-2d90-4320-ac86-1be675b878e6"
        },
        "item": {
          "id": "56117406-4a3a-4e63-a62e-cf119b0ba96a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fe479fa6-8330-4cfe-afcc-f00b3f6dbfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6478b021-e1a7-484c-a150-8f681e338803",
        "cursor": {
          "ref": "64630da0-4e13-46f8-b331-c5a8a722db53",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9f987feb-c8dd-4a86-8553-2710aef2ad50"
        },
        "item": {
          "id": "6478b021-e1a7-484c-a150-8f681e338803",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fed4fc0c-f266-46b7-9396-b942aad2f1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d1d8d1-a818-4f4d-b002-46112791a150",
        "cursor": {
          "ref": "83eb745a-4dee-44ed-a15b-6f8885422e04",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f230bed2-9b92-4c2e-9409-c942bc3fdc8a"
        },
        "item": {
          "id": "33d1d8d1-a818-4f4d-b002-46112791a150",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "61899bf2-c26b-4748-8ba1-50fb30d42f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31b6630-beea-41f2-b5e6-f1bb34429482",
        "cursor": {
          "ref": "643d5322-db44-4f68-857b-e9c39e5842b4",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eaeb2fb4-3768-4770-a20c-1ad672559d55"
        },
        "item": {
          "id": "b31b6630-beea-41f2-b5e6-f1bb34429482",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5f7e843b-d339-4206-82eb-c848f65d9e8c",
          "status": "Created",
          "code": 201,
          "responseTime": 1756,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e6922c0a-1223-49b6-be50-36c410eeda17",
        "cursor": {
          "ref": "1d67ae8f-e918-4923-811a-0b1e4ec4eb3e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6187683d-c6c9-4dac-8f8d-df6dc674cf94"
        },
        "item": {
          "id": "e6922c0a-1223-49b6-be50-36c410eeda17",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "63c76775-e5eb-4563-a824-1c23b2d66130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1511350c-a197-4831-8877-311b8bddb5ba",
        "cursor": {
          "ref": "ea74099f-be85-4a77-84c3-adde49a39254",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d7aff0a3-1760-4b70-ad66-52f437e08451"
        },
        "item": {
          "id": "1511350c-a197-4831-8877-311b8bddb5ba",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4a4349ed-33bb-4b93-819b-68ab23aa4ddf",
          "status": "Created",
          "code": 201,
          "responseTime": 7798,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a5da255c-3ce8-4df1-abfc-723ed066e92d",
        "cursor": {
          "ref": "ae08b9b1-83fa-4b01-af92-bb1bb9146806",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "445a94b5-6c86-41aa-a08f-e17fead1f80a"
        },
        "item": {
          "id": "a5da255c-3ce8-4df1-abfc-723ed066e92d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "26f4fbdf-510f-4d0a-a0d2-d375b726cecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500ca4a7-f45e-45b3-984c-010eedf58ca3",
        "cursor": {
          "ref": "67915d64-d512-4910-b3d7-013d35e5b6ad",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1443da5e-6615-43c5-bb91-2349a02307d9"
        },
        "item": {
          "id": "500ca4a7-f45e-45b3-984c-010eedf58ca3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a27eeb51-f7fc-45bf-b7b8-1e279f57ecaa",
          "status": "Created",
          "code": 201,
          "responseTime": 4521,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f4fcad49-376f-4626-b979-63a8284ab59f",
        "cursor": {
          "ref": "c383b287-42c7-4833-9d9a-993114ee50da",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3305fbeb-a8c0-45cb-8082-d86856aadab0"
        },
        "item": {
          "id": "f4fcad49-376f-4626-b979-63a8284ab59f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3d7043db-9e3d-49a4-81a8-a71cc00963b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72156c3-af6a-48ad-ba55-2552e11d2bcd",
        "cursor": {
          "ref": "0399f5d6-8b68-45a8-a385-a5cc75273ec7",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0cc6c960-d32e-49be-87f5-d008be4c27a7"
        },
        "item": {
          "id": "b72156c3-af6a-48ad-ba55-2552e11d2bcd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "aca3dfbd-253f-49f4-9e9c-d4b39cd6a65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a66a895-5764-4647-8e51-da2fe2101bb4",
        "cursor": {
          "ref": "1492f927-d50f-4280-9f72-f89ebc94019f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "95f2b9bf-59fc-4a7d-ab36-8e1e59124b40"
        },
        "item": {
          "id": "4a66a895-5764-4647-8e51-da2fe2101bb4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "63a6e6de-badb-4eb2-a4ee-eb27824d6d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c2a4ac-c6b2-42da-8cb5-fe90ad8e1134",
        "cursor": {
          "ref": "412decae-6d37-4910-b8b3-cba28aa74867",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6863a0d0-0f36-4b44-9ae6-30adf7e0bbd5"
        },
        "item": {
          "id": "12c2a4ac-c6b2-42da-8cb5-fe90ad8e1134",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8b42d651-9d92-4dda-b5e2-9dfc1dc73327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47865f9-cd27-466e-9edc-ad108aceb227",
        "cursor": {
          "ref": "3512759a-7ef0-4c18-9ce6-3e7753d0b330",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5a752f35-fedb-4931-b2e4-71ee4fc7ad9d"
        },
        "item": {
          "id": "d47865f9-cd27-466e-9edc-ad108aceb227",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ac501509-09c1-4956-8e26-7df97641d71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57815084-4021-4d46-a931-8c20e707f8ca",
        "cursor": {
          "ref": "feafc89e-4ee1-4523-a29b-167d8f793d6b",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2d76a0c2-242c-4251-86f0-8a40b8934fbf"
        },
        "item": {
          "id": "57815084-4021-4d46-a931-8c20e707f8ca",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "61d1a0ef-fc55-452f-bdff-ecc78bf5cd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4c94f7-f9db-4140-9a6b-a4114890e720",
        "cursor": {
          "ref": "437d3e05-f5a0-4e72-a665-f9850e082e89",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5ef2fea5-70e2-4c8b-83f2-309ee8601664"
        },
        "item": {
          "id": "dd4c94f7-f9db-4140-9a6b-a4114890e720",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "acf28ded-25cf-4dd4-9f7d-7f27f383f94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcbebbd-3d18-4806-bd3e-68d44ee9ed30",
        "cursor": {
          "ref": "d16155db-99cc-443a-8a0d-e66ba72ad326",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c7e276a6-f8ec-41ba-9455-f9f16c3463a3"
        },
        "item": {
          "id": "0fcbebbd-3d18-4806-bd3e-68d44ee9ed30",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3b8fd2ff-f024-42c1-862c-b5560da1a3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd370dcc-9ace-4fa4-a49e-ef3a035cc58d",
        "cursor": {
          "ref": "2b741e6d-0a3a-41db-be35-0dd62950d664",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "df476562-2ee3-45dc-9778-7acfd451c231"
        },
        "item": {
          "id": "cd370dcc-9ace-4fa4-a49e-ef3a035cc58d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d44e20dd-37e1-4fde-b12f-ebe1a455ea2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbb1b76-c3db-428c-aae1-0fd1e095f66d",
        "cursor": {
          "ref": "f1811399-b909-49e1-91ec-7106ad6ce699",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "73cda6b8-05a6-4d50-b8b0-7c486d035c13"
        },
        "item": {
          "id": "ccbb1b76-c3db-428c-aae1-0fd1e095f66d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a7061244-b9d0-427d-aa3b-c77b824477da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f69aed0-cfb9-4944-8582-e31dc0ab32eb",
        "cursor": {
          "ref": "91bc42fd-71c3-4c59-90c9-8b73382dd192",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dff2e5b6-bebb-436d-b27b-1c1afd6bfe87"
        },
        "item": {
          "id": "8f69aed0-cfb9-4944-8582-e31dc0ab32eb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5a6ae47d-cf43-4170-b368-2eddb3df8678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a6a721-f390-437b-b170-fb19f006f481",
        "cursor": {
          "ref": "7e3cb3d8-6b2d-4d64-a87e-e0884bf9c41a",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "429ed7ba-49a2-4b94-aebc-49681654cc2a"
        },
        "item": {
          "id": "31a6a721-f390-437b-b170-fb19f006f481",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0f52a83b-ce18-49e7-a2aa-f44217bd5f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36366d5d-8330-4eb0-a6af-4ba84c48ecf4",
        "cursor": {
          "ref": "8fa12a32-4528-49b5-85ec-64e9a0c038d7",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cc310ffb-6133-49ff-afcc-cda0595370c8"
        },
        "item": {
          "id": "36366d5d-8330-4eb0-a6af-4ba84c48ecf4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "61f240ce-85a9-4507-848e-bf64b4fa2383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c32786-3f10-46ad-a4f9-1ebe77c9c041",
        "cursor": {
          "ref": "7bae2e9c-18e7-46e7-bef1-4764010a5802",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "863bdeed-4c58-42ac-93b0-3cd48d0776dd"
        },
        "item": {
          "id": "03c32786-3f10-46ad-a4f9-1ebe77c9c041",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c058725b-8108-4355-a1bc-e766050ccfc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed88024e-af8b-40f1-baf9-155f73a7fe3b",
        "cursor": {
          "ref": "b2ebcb92-a804-475f-b337-4a0eee4808cf",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ea52f1b3-e796-47f1-98ef-1aadba6a7c41"
        },
        "item": {
          "id": "ed88024e-af8b-40f1-baf9-155f73a7fe3b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "db17a869-9ef2-4190-b282-c927c2e05dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce0c299-cbb0-42bd-aaef-7857d9bdfffd",
        "cursor": {
          "ref": "d68371f9-facb-4e90-825a-ea308611dbac",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cf61fcfa-6771-4470-ab87-b872291b444a"
        },
        "item": {
          "id": "1ce0c299-cbb0-42bd-aaef-7857d9bdfffd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "62676ecb-3279-49d1-9088-3f75275aa9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e825481d-be14-45e9-8bc6-98910de76910",
        "cursor": {
          "ref": "45a5e6f8-4095-444a-8a53-4427ac80312f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "aeaf2992-5ead-4f35-b841-611bd8b98136"
        },
        "item": {
          "id": "e825481d-be14-45e9-8bc6-98910de76910",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "77a256fa-acda-4c82-a60a-a9eabd0fe75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f33bb1c-6621-49c8-8dbb-beadc3bf833d",
        "cursor": {
          "ref": "8c2f528b-98bf-4c07-b3a7-815ebb4b36d6",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "16bb05d7-9d50-4614-94f1-7011201af0ee"
        },
        "item": {
          "id": "9f33bb1c-6621-49c8-8dbb-beadc3bf833d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "03a8f542-94d6-40a2-be24-d226dd23d85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0997ee9-c3f5-4b75-a3d5-3abeca6d9d69",
        "cursor": {
          "ref": "fd09ebb1-be2c-4e27-8d03-40f6ec487035",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "98967e88-3cbf-472c-84af-0e32d989ccc3"
        },
        "item": {
          "id": "c0997ee9-c3f5-4b75-a3d5-3abeca6d9d69",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5ccbb0c4-e007-419c-979b-3e28d9680d11",
          "status": "Created",
          "code": 201,
          "responseTime": 2902,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ad63d68c-4c6d-4264-b85d-a1c6f951316f",
        "cursor": {
          "ref": "24715f12-369c-4781-abc0-020540f3ef7e",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "20ddeb5f-e25b-4533-ac87-02e1fdff5cd8"
        },
        "item": {
          "id": "ad63d68c-4c6d-4264-b85d-a1c6f951316f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1a5bc717-ff35-4062-babf-bece4684b6d1",
          "status": "Created",
          "code": 201,
          "responseTime": 2954,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3d8bf2a9-f43f-4dc6-af8e-ad93af345036",
        "cursor": {
          "ref": "13b87d3d-8e5c-4ebb-842a-975a88c4acf1",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1f96b83a-8ae0-450e-8218-706cdd8431f5"
        },
        "item": {
          "id": "3d8bf2a9-f43f-4dc6-af8e-ad93af345036",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0febaee1-d0b4-46e9-8997-b0646ae33560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee7653f-3be2-44e7-9e84-d668ed7428c4",
        "cursor": {
          "ref": "177ea3cd-4dbd-48af-931b-ecbccc6d3100",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b1fd5606-7c50-495b-87bf-232ddf3ccae8"
        },
        "item": {
          "id": "bee7653f-3be2-44e7-9e84-d668ed7428c4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e56f4eba-e214-466a-9a24-455999661870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023f627e-b6e1-482e-9052-80f51c60db8a",
        "cursor": {
          "ref": "c94fb298-b8fb-4516-9222-4e251e9b6407",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8d19542b-ff2c-4277-bd4e-68f814c97c28"
        },
        "item": {
          "id": "023f627e-b6e1-482e-9052-80f51c60db8a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "259d4a73-7d07-449f-8497-4f53460b2db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bacc7d-6f44-47a6-9739-3e75d728175d",
        "cursor": {
          "ref": "f16504a0-a9fc-4b10-8cb8-e09abf06efaa",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "11b4c64d-58c9-42ef-9f8b-d144ef0e2a0c"
        },
        "item": {
          "id": "48bacc7d-6f44-47a6-9739-3e75d728175d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1b0c478d-ec85-408e-be9c-2a40d5c66e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814aa53a-5a15-4442-9975-417b297496b4",
        "cursor": {
          "ref": "e848234d-63a2-4b87-985e-b56e83a6cd81",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ca31f262-0020-4069-a086-93e0d2b8e740"
        },
        "item": {
          "id": "814aa53a-5a15-4442-9975-417b297496b4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bec8d016-6935-4045-8d72-8c0e61b5a4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa6cc5d-5882-4676-b979-94f1da4276b5",
        "cursor": {
          "ref": "184c3d87-3e43-49bf-a3cb-37164fc62736",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd33d232-b969-4d86-b4fb-fa39cbc73424"
        },
        "item": {
          "id": "dfa6cc5d-5882-4676-b979-94f1da4276b5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9d3c0c84-ac53-4cea-b424-7d8a62de890e",
          "status": "Created",
          "code": 201,
          "responseTime": 2554,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "47f1965e-a40a-4f8f-8353-697a3a1e06dd",
        "cursor": {
          "ref": "e2c93680-dfc3-4cf3-a907-961f52888eca",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5c087909-bb76-49b5-af29-3117cadd9548"
        },
        "item": {
          "id": "47f1965e-a40a-4f8f-8353-697a3a1e06dd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1c35c1af-9b25-46bc-a640-a148646d1b53",
          "status": "Created",
          "code": 201,
          "responseTime": 2145,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4837ca12-ecc0-42f1-9350-fa275a4488d4",
        "cursor": {
          "ref": "2e463bc0-a814-477e-a6a2-762e8cccde5c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e4984ee9-f98d-44ca-8ca8-1a9314a0b171"
        },
        "item": {
          "id": "4837ca12-ecc0-42f1-9350-fa275a4488d4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fbd5751d-8558-4a34-aa98-0774ce410c5d",
          "status": "Created",
          "code": 201,
          "responseTime": 2719,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "88d8982c-a7b6-44ed-8449-9ebdef84a5ed",
        "cursor": {
          "ref": "87c6baa5-2b01-4606-9fb5-2ebefd870083",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "67c9831a-383a-4d55-95a1-3e4f293541f1"
        },
        "item": {
          "id": "88d8982c-a7b6-44ed-8449-9ebdef84a5ed",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5ec54e80-e3a7-4b8c-a124-069f3fa403b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f863855-59c4-4e2a-9613-421db12b1e26",
        "cursor": {
          "ref": "c602c064-acc3-4863-b7dc-69865e1265f2",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bd263d78-13ff-4d52-a143-454fa60d927c"
        },
        "item": {
          "id": "7f863855-59c4-4e2a-9613-421db12b1e26",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c70386f0-713b-4f0b-8f48-e49dba9efe23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c398724-d646-4e1e-a75d-f665cce11d87",
        "cursor": {
          "ref": "326a786a-5d6e-4af3-8447-6c24c25b2d8a",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b7060430-a331-45f6-8fc8-1cc01544d061"
        },
        "item": {
          "id": "5c398724-d646-4e1e-a75d-f665cce11d87",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "72420d3e-803c-4e2c-8918-dded84d8cb38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74cd35f-0628-4ec7-9865-0938ae5a200f",
        "cursor": {
          "ref": "b9180030-c0f7-43fa-b3bf-076d40252150",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "73472cbf-3fb3-4b00-a7f3-73c8a9c119f5"
        },
        "item": {
          "id": "d74cd35f-0628-4ec7-9865-0938ae5a200f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f4e8a34c-56a0-46b5-994b-157932b5e212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38faf0f-e1ef-407e-af43-8bb8fbe4c3c6",
        "cursor": {
          "ref": "138be151-0d32-48ea-859d-f6e85c12c2dd",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "65f07f72-8860-4a24-a1da-35fdfa404306"
        },
        "item": {
          "id": "a38faf0f-e1ef-407e-af43-8bb8fbe4c3c6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "76532f23-4ac5-4b4a-be19-3b22ae9dd7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93900d1-80f7-4755-9c85-3ff691298f15",
        "cursor": {
          "ref": "6494843e-09a7-4472-835c-a15bb3172a6b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fa30e263-1275-40f3-8b2c-64cdc99ad742"
        },
        "item": {
          "id": "f93900d1-80f7-4755-9c85-3ff691298f15",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "70f6b957-701a-4584-ac03-8656d9e4332b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e993e17-6b2e-4419-9a18-028aac8fc2f2",
        "cursor": {
          "ref": "4a238cbe-e552-45d4-80e2-89545ba57a4f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cd6f2f02-ebd5-43de-be79-27b6fe0f2d72"
        },
        "item": {
          "id": "3e993e17-6b2e-4419-9a18-028aac8fc2f2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dc768df1-4df7-4e01-9c22-7694734e7a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c2b1f1-2ffb-4725-922d-7aadc7a98498",
        "cursor": {
          "ref": "15aeacd2-051a-4708-a106-2c8842733603",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b55b5a66-6d6e-4e85-9bc7-78f36b9f72da"
        },
        "item": {
          "id": "46c2b1f1-2ffb-4725-922d-7aadc7a98498",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3e543997-a98d-4aa2-9b17-b8718f4110ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d042ea9-48f5-4889-87fb-08dbdf29565f",
        "cursor": {
          "ref": "91b6b694-0527-4e36-8406-cabb535ba5ee",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "566aa604-7301-489c-97e1-67aa9030fc92"
        },
        "item": {
          "id": "1d042ea9-48f5-4889-87fb-08dbdf29565f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2edb7286-8b9a-438e-bb37-152415120166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdd94a1-8625-4362-a4aa-1c2da69cb631",
        "cursor": {
          "ref": "42af94f0-abb4-48db-b553-9befd94906a5",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3e440df4-7a27-4ced-a70c-a940a0fb1246"
        },
        "item": {
          "id": "ffdd94a1-8625-4362-a4aa-1c2da69cb631",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bed9a263-010a-4270-8140-8352c6bee36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9869104c-edee-43cf-a50a-55ae7e9eacd1",
        "cursor": {
          "ref": "49c210a0-5889-44a8-a57a-b83723303fe7",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6bb54520-d1c8-4e4e-8aa4-c174ad9365a2"
        },
        "item": {
          "id": "9869104c-edee-43cf-a50a-55ae7e9eacd1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "84295f2a-3db3-4784-a66a-8dc3300883de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bf8141-e96a-4ace-b63c-93bc4d995920",
        "cursor": {
          "ref": "2642744c-09f7-4e94-bd90-d895a53daffc",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9fb1fce8-4f2f-4322-8efb-faa5b09ca9fd"
        },
        "item": {
          "id": "28bf8141-e96a-4ace-b63c-93bc4d995920",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "87d33aae-f1c9-4d42-b83c-5cc7e171605e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcb7c41-7e5f-4808-aec5-5ac87fcdffa1",
        "cursor": {
          "ref": "88425028-c2ba-42ea-9c24-a115391951f1",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fb971828-c5e3-4e1b-ba27-4ae0e27f1c49"
        },
        "item": {
          "id": "9bcb7c41-7e5f-4808-aec5-5ac87fcdffa1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "964314bf-8859-44e7-a4f9-9db004d9a94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd385266-03ff-4907-9a57-4308c3c3b63b",
        "cursor": {
          "ref": "9a1ab738-dd5e-4214-a54a-990f2e8791ec",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f10d4192-5650-4d36-bdc3-4a375514f1e2"
        },
        "item": {
          "id": "fd385266-03ff-4907-9a57-4308c3c3b63b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e51851ed-b4ef-4032-868a-2b425a892497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf74d45-6481-4baf-9832-e66a9161e6fe",
        "cursor": {
          "ref": "502341cd-73fd-4584-9830-d2b92a983378",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e5542b52-a7ee-4ff8-9cae-4e3b095ae336"
        },
        "item": {
          "id": "2bf74d45-6481-4baf-9832-e66a9161e6fe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d6367160-1b78-4773-8082-a50fe8c737ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd582b1-af84-4fde-980e-4e3974754137",
        "cursor": {
          "ref": "6223c719-5169-486f-9071-64ea485418e4",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "98529290-5816-4f07-bd9c-3f913240f2d4"
        },
        "item": {
          "id": "8fd582b1-af84-4fde-980e-4e3974754137",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "327c037d-faa7-4335-8d19-ca4493685cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae54344-fb00-4848-ae93-c2ad2b2ee18e",
        "cursor": {
          "ref": "61cab054-e510-4a66-8d51-ff8c99a3d8ca",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9e2890cd-1d40-48a6-b06a-6ae2dad3d13d"
        },
        "item": {
          "id": "cae54344-fb00-4848-ae93-c2ad2b2ee18e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b744dc1b-7ecb-4bf2-9499-6f68e21255e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77cb86ed-9f60-4be4-83e5-bdde2215a69e",
        "cursor": {
          "ref": "354f54ed-6265-40e9-97d1-e886e4ea73e7",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5316614e-6cc0-4560-a923-33b61bf3aca9"
        },
        "item": {
          "id": "77cb86ed-9f60-4be4-83e5-bdde2215a69e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "02e98ad4-c9bb-4cd3-86b1-41c5f409c607",
          "status": "Created",
          "code": 201,
          "responseTime": 2229,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "494cd9d7-fe20-4534-869a-e1c061987e84",
        "cursor": {
          "ref": "f2272467-a176-4cef-944e-a3d1b3203dcd",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6311cad0-ecaf-41e0-8c1c-e974071fcfbb"
        },
        "item": {
          "id": "494cd9d7-fe20-4534-869a-e1c061987e84",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e14bc0e6-eb94-4a29-bdea-43453952dfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f7f0d2-96d3-48cd-9bea-73974ad37052",
        "cursor": {
          "ref": "154c63d1-53e5-4a40-bcf6-3b946367cd65",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7cffd24b-81fb-448e-a5e8-22bf518da3d9"
        },
        "item": {
          "id": "35f7f0d2-96d3-48cd-9bea-73974ad37052",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "99dde7d0-b5d3-4d6e-917a-297dd5c8aeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c484ad6-9324-4601-bb1c-e06a25c2c5fe",
        "cursor": {
          "ref": "c035feb9-a67d-43a2-8d35-72dc5ddfd41a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "636ce328-28cf-4be0-9c72-28d10fdf6b5b"
        },
        "item": {
          "id": "2c484ad6-9324-4601-bb1c-e06a25c2c5fe",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5c7d236b-c586-404f-974a-c87c7897991d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b664f239-4177-45f2-9f89-3e94f617bfcd",
        "cursor": {
          "ref": "56355d42-311f-47be-88cc-f30979934fc5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "41be71ac-99b9-474e-a0ec-d3b95571fb6f"
        },
        "item": {
          "id": "b664f239-4177-45f2-9f89-3e94f617bfcd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "746e0548-d35d-43a7-a920-f76b39b94e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d633b4-b687-42c5-ab9f-b7659aef05f0",
        "cursor": {
          "ref": "6b9bf6bf-dc23-4e32-a885-a785a63852cd",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "54c776e6-55bf-4bb0-8ca9-a9cf10c02652"
        },
        "item": {
          "id": "33d633b4-b687-42c5-ab9f-b7659aef05f0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ea48f2b9-4ec4-43ac-9499-22233c0a7882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28ded1f-2e7a-45cc-bc51-2b49c84e30df",
        "cursor": {
          "ref": "d5855bfb-a456-426f-9a21-b1a7fa969998",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6ea6233d-2498-4006-a1b4-deba1f625bda"
        },
        "item": {
          "id": "d28ded1f-2e7a-45cc-bc51-2b49c84e30df",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5f380cfe-0dcc-43a5-a887-abfdb67af5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88e1446-a49d-497f-a18b-12486b05380d",
        "cursor": {
          "ref": "766eb898-3044-4bfd-92e9-6814f002597f",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2ddecfa6-9ef1-4827-aac9-74f8b678953c"
        },
        "item": {
          "id": "d88e1446-a49d-497f-a18b-12486b05380d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9094236a-7386-40e6-aa4c-5e37e336426a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109b9aed-8963-4dbb-96e1-b21b4aff74dc",
        "cursor": {
          "ref": "769fdc1a-22b5-4381-a758-40165a0d487c",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "71d69c7a-ea4f-4f44-99bd-a16e9e44ebfb"
        },
        "item": {
          "id": "109b9aed-8963-4dbb-96e1-b21b4aff74dc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0dba24f-4166-48ed-a65c-f62de1520978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc1dd6f-f6ff-442c-b45f-22de5dd387d9",
        "cursor": {
          "ref": "012c5f35-2d47-453d-aadf-c2caecbd9344",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0dbf6058-047d-4b63-8fa5-c0b4265d0ead"
        },
        "item": {
          "id": "0dc1dd6f-f6ff-442c-b45f-22de5dd387d9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "56b5754a-8f40-435d-ba5e-cd302f1eb85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8cd85cc-cf24-4a64-8315-db4055ab49f1",
        "cursor": {
          "ref": "aa5cabaa-7a87-4063-9d14-931844363f14",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a7f85b80-5d5d-4ae2-bd0e-3201041f5b76"
        },
        "item": {
          "id": "a8cd85cc-cf24-4a64-8315-db4055ab49f1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "31e7e8c4-669b-4ad6-a66b-d29fb77e0e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddc56c1-7127-4e6e-806a-bc119284a21f",
        "cursor": {
          "ref": "4863c99c-c474-4a9c-a983-34fbd10440f1",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d9fe4611-7950-4f95-b4da-46d6fa211950"
        },
        "item": {
          "id": "3ddc56c1-7127-4e6e-806a-bc119284a21f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f73e54c7-d34c-45b4-b716-12e0693050fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314ccf9d-3538-4ab6-a5e3-db8ae1b6fa30",
        "cursor": {
          "ref": "6264df59-bb0f-40e1-a4b7-8743c93f5d76",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e8946d69-c86e-455c-9ff1-599ee7929b6e"
        },
        "item": {
          "id": "314ccf9d-3538-4ab6-a5e3-db8ae1b6fa30",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7e0bcd3f-bd3f-416f-b7b3-977ccad49115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777167d7-5782-40f7-af59-9a3314cc7ae8",
        "cursor": {
          "ref": "a373e8d7-9848-41c3-a340-d102cd9f5210",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a2e60c44-cf4a-440d-88e1-7abfc0be12bd"
        },
        "item": {
          "id": "777167d7-5782-40f7-af59-9a3314cc7ae8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c48033ca-614f-4fa1-b52d-243a5306b512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb735507-c2ad-4ccb-b623-6685eaa76cf1",
        "cursor": {
          "ref": "abbf0d66-13e5-43aa-ab81-4401c87aa0ed",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "259d7aa1-1783-4d81-b49d-9b9e44d504fa"
        },
        "item": {
          "id": "eb735507-c2ad-4ccb-b623-6685eaa76cf1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "09937d94-b5eb-429a-8513-249f7512f28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d2782d-3caa-4bf0-ad14-eaed06d19dd6",
        "cursor": {
          "ref": "09774e67-8f4b-45a6-ba85-9f62d8e5c430",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "34dc6ce3-a4f6-4ef9-bfdc-5ae4db0d0e2f"
        },
        "item": {
          "id": "83d2782d-3caa-4bf0-ad14-eaed06d19dd6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ec400d1e-dc4d-441c-b392-f84e023ae15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a8de51-e0d4-4ac0-a9e9-5108ed3fc113",
        "cursor": {
          "ref": "2a2a4155-d395-4c27-9368-e26fc378b506",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b526fcf1-4d42-4180-a858-3045915b1fd5"
        },
        "item": {
          "id": "91a8de51-e0d4-4ac0-a9e9-5108ed3fc113",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "76fddde2-d434-45f4-bad7-c50cde6df7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec6cc30-f15c-452a-b33f-1196b4871883",
        "cursor": {
          "ref": "90ff970b-4abd-4d2d-a6a7-f4fe39d6d65c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cd10f606-5119-4b58-a142-b6d588880592"
        },
        "item": {
          "id": "eec6cc30-f15c-452a-b33f-1196b4871883",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0ad4bff8-c6bf-4504-8cff-76dda95ff63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3c9471-ad67-4dca-ae6c-db860789f1de",
        "cursor": {
          "ref": "5f7a7c68-91f6-4acd-b04e-701d90ac34dc",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d63ccd89-47bd-4852-aac1-6aa842e33b60"
        },
        "item": {
          "id": "2a3c9471-ad67-4dca-ae6c-db860789f1de",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "78085ba8-caab-486a-9bd7-ea29e5918547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967d3cce-8601-4d2e-b05d-7dd419f8755b",
        "cursor": {
          "ref": "4dfa6da9-3687-4581-abff-3155d3bdd1c0",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5f5daaef-0737-4221-93b5-288229ac2e13"
        },
        "item": {
          "id": "967d3cce-8601-4d2e-b05d-7dd419f8755b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dc76acce-160f-4c4d-a88d-ed75a7f35ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e794ee68-4433-43d7-8e22-94fc684583f5",
        "cursor": {
          "ref": "f425caf5-f5e6-4c21-8445-7abfb722091d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "033ec624-4151-46cf-ba63-f4676815e3c1"
        },
        "item": {
          "id": "e794ee68-4433-43d7-8e22-94fc684583f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6afd52b9-79cb-40fa-8986-66e7146c1170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6da113-3394-4afa-950b-433b29afce3b",
        "cursor": {
          "ref": "e378d878-410e-4c96-9a7b-3852277a7afa",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "97e71500-a61a-446f-ab52-f6ae7efa329e"
        },
        "item": {
          "id": "8e6da113-3394-4afa-950b-433b29afce3b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4cb783d5-5777-4a2f-ac31-84de0acedd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd17c9d-8683-409d-a11b-80121d7ee989",
        "cursor": {
          "ref": "7dc059c6-a53f-4722-9545-c9c0ad4d795b",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "635a8684-df14-4150-a30e-967cf751b392"
        },
        "item": {
          "id": "7fd17c9d-8683-409d-a11b-80121d7ee989",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ea40d12-6148-40d7-a94b-e84e9ac203e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4427987c-46e2-46c4-8972-66c52e40911c",
        "cursor": {
          "ref": "f7b0be70-6c48-4b96-89b6-04cd537fe90d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a269c581-f71e-4e52-b185-8905eb83f606"
        },
        "item": {
          "id": "4427987c-46e2-46c4-8972-66c52e40911c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "64927b15-041c-4fce-ab56-c81a3292f97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af74a86-d9a3-45d0-a1a4-f7718e259540",
        "cursor": {
          "ref": "8eed942b-14a8-430a-b410-8de0a65e8179",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "238b2b33-4246-4515-949e-2f4dcbf4df12"
        },
        "item": {
          "id": "6af74a86-d9a3-45d0-a1a4-f7718e259540",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "60d34abe-f6ee-47d7-be54-4bce6ee38d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0359f7f8-aa0d-44c2-91f8-6cf7b416399d",
        "cursor": {
          "ref": "d2deb569-6578-4365-b11b-db1499c47534",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ae91c582-8e7e-47db-91b2-8bb04f6f1388"
        },
        "item": {
          "id": "0359f7f8-aa0d-44c2-91f8-6cf7b416399d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "24b728b0-ccd3-4e70-a2e2-53fab38ef07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47f84fa-a830-43ed-b04e-cff217f9d312",
        "cursor": {
          "ref": "8e96695d-998a-4b87-a326-45126a450afe",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c56985a3-acbd-43de-9628-60055d54865c"
        },
        "item": {
          "id": "d47f84fa-a830-43ed-b04e-cff217f9d312",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ac352e93-1805-4558-91e6-f17f7a7fbc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d875a3d8-ee64-4cf1-8930-753c49876579",
        "cursor": {
          "ref": "210c2352-60a8-46ca-baa2-bebf3303eed0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "38d2f580-ebc8-4184-8db7-fe679d321eb5"
        },
        "item": {
          "id": "d875a3d8-ee64-4cf1-8930-753c49876579",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "188b0ed7-cf38-4473-8db5-ba014910373d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e776ae-033c-4742-9eb3-d3f4edc10d11",
        "cursor": {
          "ref": "a560f643-a470-44a0-8d30-d6bd37f5cca8",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f3ab9f58-9962-4d23-a25f-fba2547c6aab"
        },
        "item": {
          "id": "12e776ae-033c-4742-9eb3-d3f4edc10d11",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a4251ac1-14ba-49b0-92b6-99dbd33999a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85022f0b-91f5-4b18-b9c0-41a27bcdc520",
        "cursor": {
          "ref": "b22dacb0-7e50-4419-acb5-7b3d7061b3e2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a0c0c127-4471-4b31-8b06-68359d8eab3b"
        },
        "item": {
          "id": "85022f0b-91f5-4b18-b9c0-41a27bcdc520",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f3e49f03-fb0d-4009-b3f4-520573ff3024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9267ec4d-9e9c-4f40-853f-f55870e3c2b2",
        "cursor": {
          "ref": "5decf778-e71d-4c5d-a208-6521670888bd",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7eee6054-c0ca-49c5-8e7e-630317924934"
        },
        "item": {
          "id": "9267ec4d-9e9c-4f40-853f-f55870e3c2b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1de5a50b-b390-4d47-bef7-8d1ecb5e5806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d37c54-e1f6-4d05-b6bd-850cbdc01a1f",
        "cursor": {
          "ref": "b9b26cf9-d0a5-4aa3-b61c-220afd820eb6",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c63858dc-3a83-4a8d-ab2f-36cac4baeb7c"
        },
        "item": {
          "id": "32d37c54-e1f6-4d05-b6bd-850cbdc01a1f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a96573a8-109b-4e5d-9fde-c47a774cb5c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "b7f11fab-4890-4547-a94e-b183d2034511",
        "cursor": {
          "ref": "a000f7bd-23ba-4e1e-8cd6-cb97535a5f58",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d5f67a80-8c95-4e8d-be8f-dcb7cc6444ba"
        },
        "item": {
          "id": "b7f11fab-4890-4547-a94e-b183d2034511",
          "name": "credentials_issue"
        },
        "response": {
          "id": "adfaeade-9b4b-4b27-9b36-fc67c94a54a7",
          "status": "Created",
          "code": 201,
          "responseTime": 2209,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cd1ee3-93e8-47e0-9262-f7765aea32ba",
        "cursor": {
          "ref": "76e9a642-cf5d-4f04-843c-e7db108c1c30",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c22a66ae-67e8-406c-ba80-2c2b696373a1"
        },
        "item": {
          "id": "38cd1ee3-93e8-47e0-9262-f7765aea32ba",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dfb3d2b0-93b9-4dec-ad9f-05460b4fa80c",
          "status": "Created",
          "code": 201,
          "responseTime": 2490,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9590cc-5c53-4997-ab32-5dae47451ec0",
        "cursor": {
          "ref": "0baa360f-2b4e-4a40-ae39-4b00a1b1886c",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a57481d4-f5a8-4edd-9868-ccf110e80402"
        },
        "item": {
          "id": "0f9590cc-5c53-4997-ab32-5dae47451ec0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "af8ef24c-0b43-44c7-b143-71ff32524fbe",
          "status": "Created",
          "code": 201,
          "responseTime": 2510,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d7d824-176e-426b-ad4d-261174a100cc",
        "cursor": {
          "ref": "cab06767-0cf5-42ba-aaf8-affe6ef205e2",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "307f87d2-e1c1-4bfe-88e8-95eeb2a00b9c"
        },
        "item": {
          "id": "d9d7d824-176e-426b-ad4d-261174a100cc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "485f9308-d125-4eaa-ab56-fdb6e4ab1516",
          "status": "Created",
          "code": 201,
          "responseTime": 2394,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcc3333-baf9-4648-b99f-7d11986dbb0f",
        "cursor": {
          "ref": "d9ac9337-353c-4d58-9895-a26e1dbc14f3",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a931d717-ae86-4e2b-9252-63675180faae"
        },
        "item": {
          "id": "fdcc3333-baf9-4648-b99f-7d11986dbb0f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b3b76740-17b9-4dce-bd34-58ab41e1eec5",
          "status": "Created",
          "code": 201,
          "responseTime": 2892,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-22T00:43:24Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-22T00:43:24Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "06c297c7-0086-4618-aeb3-5bfa902715e7",
        "cursor": {
          "ref": "c372471c-7051-48c3-bf11-ecdc0e6ac763",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c18455ac-3820-4606-859f-01d58c138d7c"
        },
        "item": {
          "id": "06c297c7-0086-4618-aeb3-5bfa902715e7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "25b17fbe-b7d6-4403-9f11-b6236de708c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "73a29f17-615a-4735-91e7-6871154510ad",
        "cursor": {
          "ref": "fa9c68a5-a534-43dd-890d-684e25642186",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4dac6528-f8c7-4517-8863-fb044ef6305c"
        },
        "item": {
          "id": "73a29f17-615a-4735-91e7-6871154510ad",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f84a0797-2f0a-4608-92fd-56078c20e2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c55b2f-04be-40be-8491-502e96c1f97b",
        "cursor": {
          "ref": "97b75b94-5964-41b0-8589-15a0b7466d78",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f0fc7ad9-c143-4987-99c2-2e0db2836622"
        },
        "item": {
          "id": "d8c55b2f-04be-40be-8491-502e96c1f97b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "666ca4dc-8908-4c18-83db-8a7a9bd74220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1167f7e-3f00-4e01-a788-18d002a38b39",
        "cursor": {
          "ref": "975b281a-91e7-4e56-874d-1a4f6d786a37",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "84200494-08ce-45a0-a30d-3466fc79bc17"
        },
        "item": {
          "id": "a1167f7e-3f00-4e01-a788-18d002a38b39",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "47b2d833-ad77-4795-adb6-b0a123733410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b065b68c-e32d-42f8-aaba-34c1065cfb98",
        "cursor": {
          "ref": "71db06ef-0e47-46d9-a559-daa2d8b410df",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "711decbe-4f86-4cfc-8af8-2ddb7d7ddbeb"
        },
        "item": {
          "id": "b065b68c-e32d-42f8-aaba-34c1065cfb98",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cc32704c-4b61-4c5e-bd13-666755b468be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e6eb5e-ebba-480d-9898-67ecc3925dc9",
        "cursor": {
          "ref": "fed8a492-37ec-41b9-9ab9-7e87a1d42192",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "48540919-d4b8-47c2-9140-8d5f3bd546db"
        },
        "item": {
          "id": "a1e6eb5e-ebba-480d-9898-67ecc3925dc9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6d3ccd95-31e7-4d4c-8613-24f2915706c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00968c3-a4b3-4f0c-bd6a-e0dc7179a07d",
        "cursor": {
          "ref": "17cefa17-9128-4986-a390-722dce959f01",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5b3e467d-9c80-4ec7-8ade-1ba1196a1797"
        },
        "item": {
          "id": "e00968c3-a4b3-4f0c-bd6a-e0dc7179a07d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b9ec1f1b-5808-484b-9d95-346a6512fc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e127307-f7ea-4dc5-a15c-01b74ca4e509",
        "cursor": {
          "ref": "7907216c-8a7b-4d67-ab50-566aa8e05c3a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f2573ad6-c22b-4892-9d7c-503ef9de5868"
        },
        "item": {
          "id": "1e127307-f7ea-4dc5-a15c-01b74ca4e509",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3caaa3d0-a2f3-46fa-866c-f2c6a3642ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d0207d-a163-43b4-988c-a536880155a2",
        "cursor": {
          "ref": "037b9c47-ae5d-4480-be84-7f19e57a68b3",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7f45a67b-a52f-41c7-a959-c2d043958167"
        },
        "item": {
          "id": "99d0207d-a163-43b4-988c-a536880155a2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "47b0731e-6528-43d1-9642-a7228055121c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d75492a-af9e-4b4c-a71b-1e5154e4cd72",
        "cursor": {
          "ref": "9abd1ab0-7f4c-4584-a309-a1a31acfe179",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "66c003f3-8398-4c92-bfe6-5e32d8ef6e98"
        },
        "item": {
          "id": "9d75492a-af9e-4b4c-a71b-1e5154e4cd72",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f05ce3df-aff2-42b9-baf0-57c09e0f3c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72e0075-6b34-463e-a426-836d949e5d4b",
        "cursor": {
          "ref": "d19211bb-a87b-4ab7-9783-e7e1d6b40da7",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "747e7197-3c7b-400f-9bf4-0ff62448519e"
        },
        "item": {
          "id": "e72e0075-6b34-463e-a426-836d949e5d4b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3a1fccb5-5e77-438f-9e30-f5d747456ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0376ca3-e181-4cac-b375-151ffbe2f900",
        "cursor": {
          "ref": "34ca43ea-c474-4099-ab63-a2d7dabdde16",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8bed9381-902c-4fc0-95aa-7e2f867d65c5"
        },
        "item": {
          "id": "f0376ca3-e181-4cac-b375-151ffbe2f900",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "731a3ba0-d3d5-415f-aa1d-7b20a9199067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff77a96-2d29-4d3b-9b59-47657aa5e9f5",
        "cursor": {
          "ref": "b937c1a3-797f-4b11-a5c2-e77e97fe3783",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b186a568-731f-4198-9c4e-e6e82852c70b"
        },
        "item": {
          "id": "bff77a96-2d29-4d3b-9b59-47657aa5e9f5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "47773899-368d-43cb-9809-eacfdb94f729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed27b4a-2253-4cee-8915-39320fd39be2",
        "cursor": {
          "ref": "f0b889e7-4d51-40e7-aa00-867599d7864e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "35d22297-342e-46e1-a9c2-eede249919ec"
        },
        "item": {
          "id": "1ed27b4a-2253-4cee-8915-39320fd39be2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ce98845-e027-443e-84f0-24cc5b0ad76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0792d8b-393e-4a59-bfe8-c12db782ad9d",
        "cursor": {
          "ref": "e017d634-948e-4451-90c8-7f00d0ad7253",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8cb21f54-b506-4b6f-ab70-34dfcb0e8573"
        },
        "item": {
          "id": "b0792d8b-393e-4a59-bfe8-c12db782ad9d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4192289c-7499-4365-922a-06ea7a74b540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcb7476-d26b-4bbd-986f-6e2c5076cec2",
        "cursor": {
          "ref": "c2ddb033-5aaf-49df-8680-720c55ce5d6c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f4305710-7e46-49dc-ad4a-2dc3ae06fd36"
        },
        "item": {
          "id": "3bcb7476-d26b-4bbd-986f-6e2c5076cec2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a64c2911-443d-4c78-bdde-a4de839ce7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6818dd24-6970-43a4-902a-a57962bd9aa6",
        "cursor": {
          "ref": "907bae73-9394-433d-8527-7d754a8f5f9f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fdd299d8-366f-4512-b5c3-426d9b86756f"
        },
        "item": {
          "id": "6818dd24-6970-43a4-902a-a57962bd9aa6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54b62030-8727-460e-9a82-f79af5bfbae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa0fea4-6511-4ce2-98c7-ca4b714bdac0",
        "cursor": {
          "ref": "73104eeb-d59b-4c87-917f-5138041ee0be",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9e24d099-bce8-4f64-b73c-3ac7a18aebf7"
        },
        "item": {
          "id": "faa0fea4-6511-4ce2-98c7-ca4b714bdac0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "660c2cb0-c1d2-4de2-a6e7-83f44a1904df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea6a851-66b4-413f-b8ef-e6666ec90f4e",
        "cursor": {
          "ref": "c268a87d-0c19-4541-bd23-ff90a0497c55",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9c923f0f-c273-4f8d-8cdb-a855608fc999"
        },
        "item": {
          "id": "bea6a851-66b4-413f-b8ef-e6666ec90f4e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b33180d9-7fbb-4039-b768-c79928297548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8abfea-6dc1-4450-9fe9-444c219145b8",
        "cursor": {
          "ref": "484fcc90-a2ff-469d-9d9b-f75595d69390",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "61bfa6d5-c30f-4f9e-8a58-d98f47eba23f"
        },
        "item": {
          "id": "1b8abfea-6dc1-4450-9fe9-444c219145b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "24ae29f5-dc44-4b05-9481-59b634f8921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0c7822-a5c0-4e10-9127-5d00471eabfc",
        "cursor": {
          "ref": "59519eb4-dd8f-4739-a622-02c1d65d97a1",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e9032169-5100-4660-993d-9a654eba0790"
        },
        "item": {
          "id": "2e0c7822-a5c0-4e10-9127-5d00471eabfc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e1b3be6-6991-49d6-b530-6fe32bf9a281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8b5563-4339-498d-b3b1-9ab5336a85bf",
        "cursor": {
          "ref": "ca19b807-2a5b-4c8c-aab0-a295127d3bd5",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "53df4208-4838-4d18-900a-f1455fa4c2f9"
        },
        "item": {
          "id": "5c8b5563-4339-498d-b3b1-9ab5336a85bf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ad78d208-e881-4a4b-928b-a79da4082ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f76cd2-e594-4c12-b5c7-4d831fe4e732",
        "cursor": {
          "ref": "22ffe541-d3bb-4ab7-a257-67a16a6bc2c3",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f6ca188-aed1-4bce-8089-5a56bbfcf8cd"
        },
        "item": {
          "id": "f5f76cd2-e594-4c12-b5c7-4d831fe4e732",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0c0e7254-bd2c-4c2b-9bad-4373aab30f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f38936-aaf7-456a-956f-243b8ba40557",
        "cursor": {
          "ref": "641794b1-894a-43c7-8a83-0eab09a6d31c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "45769890-4c0a-483d-8566-d0c405bf24e2"
        },
        "item": {
          "id": "84f38936-aaf7-456a-956f-243b8ba40557",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e823f64-3fb4-410d-a364-4781f1f81b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc262a6-289c-4191-be17-2767ebdbf599",
        "cursor": {
          "ref": "4493887b-edfb-4fdc-aaf8-f1442c422bb3",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c237a4b7-e06a-44dc-8cf9-1a5bd30af75f"
        },
        "item": {
          "id": "2cc262a6-289c-4191-be17-2767ebdbf599",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "641a0f55-9f42-423f-88b0-97a091f991e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4006719d-f988-4e46-857d-f6c87b6ba963",
        "cursor": {
          "ref": "ecf828f5-294e-429b-b61f-fdb186473ef3",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4f96aa1e-7a62-41f2-82e3-5d6cc3b5e2e7"
        },
        "item": {
          "id": "4006719d-f988-4e46-857d-f6c87b6ba963",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f2efdd60-beb8-4192-b571-15901b6f35bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf99a8cd-9019-41d0-885e-95598e40e12d",
        "cursor": {
          "ref": "48ea1ece-7810-473c-8368-2760a8462bc5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "35aa3c02-5c19-4c9c-b5a5-65369178ed91"
        },
        "item": {
          "id": "cf99a8cd-9019-41d0-885e-95598e40e12d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b8261760-8e55-436c-a265-e4103f023c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754d4454-885a-4937-92fa-4d3539dafa02",
        "cursor": {
          "ref": "f7af5958-4ea2-4d97-85cc-1e6d1694797f",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5df78a21-cdde-4d74-850b-aacbce9f6806"
        },
        "item": {
          "id": "754d4454-885a-4937-92fa-4d3539dafa02",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "981c9b9d-2471-48ba-b09e-ccd1c3463227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b778854f-5b8b-444a-ade1-065df209840e",
        "cursor": {
          "ref": "f93cd8f5-2845-44f8-a79d-92d87a468cc5",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "283b786d-61b2-4ac6-89e0-2716bc586467"
        },
        "item": {
          "id": "b778854f-5b8b-444a-ade1-065df209840e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f739a09c-7847-45aa-8c74-5877a476d1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4d83b5-c0d5-43a2-a616-ff520c085d3c",
        "cursor": {
          "ref": "af60af48-8e34-4f29-b813-eb23f591fa77",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1ec95126-833f-4e0d-8595-040b0f67380f"
        },
        "item": {
          "id": "3e4d83b5-c0d5-43a2-a616-ff520c085d3c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4bb59243-ad69-4767-8bf9-e2ccfeb42048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea6c8b1-116d-4afd-b62a-1a4031ad34a8",
        "cursor": {
          "ref": "96d6d529-74f9-46f8-a40d-a72ad669cc1c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c1c5a886-cc7a-42f8-90c0-530cab5945e8"
        },
        "item": {
          "id": "6ea6c8b1-116d-4afd-b62a-1a4031ad34a8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "78c2bc66-7635-4526-bcc5-37072310cd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0faa7e5-c4a3-443c-80fd-398364a81949",
        "cursor": {
          "ref": "4378711d-417a-4507-ac44-daa141d26d15",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "624a3681-382e-454e-bd53-31d55a233c70"
        },
        "item": {
          "id": "b0faa7e5-c4a3-443c-80fd-398364a81949",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b30a73b5-b55e-4881-9777-ecc3e9c6c891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3c3769-d491-4e0d-9e3a-5db412251ea4",
        "cursor": {
          "ref": "2f55b49a-1e10-462e-ba48-63ce49459f1f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "99e979f5-d667-4476-8e99-f823f5714faa"
        },
        "item": {
          "id": "4d3c3769-d491-4e0d-9e3a-5db412251ea4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4cb22fc4-f62a-4351-bc1e-bc82850bda38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70e3267-7eec-4f55-b05e-7de94a75272e",
        "cursor": {
          "ref": "12b22ebb-b896-4663-9010-86a2c742601c",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e6b1db58-df01-4797-9f3e-a85e9c540ae9"
        },
        "item": {
          "id": "f70e3267-7eec-4f55-b05e-7de94a75272e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "63711a2d-d94c-40db-8569-2797d5f69e7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "e488b9b0-65c8-4879-8731-56d30caaecc5",
        "cursor": {
          "ref": "43c66a29-fe3a-4c20-9aa7-203af308c654",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e5fbd568-91c9-4bc8-b9d8-cb1fc08079ad"
        },
        "item": {
          "id": "e488b9b0-65c8-4879-8731-56d30caaecc5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ed1f1bcc-053b-4d7d-a08f-fd8c9dfce448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bd7fd8-87ff-48fb-b948-6c9466ae0ac3",
        "cursor": {
          "ref": "aef5af12-9971-41c5-b2ab-6005e9c791f5",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "33f28f4b-3b3c-4b5e-8bfd-6a15b90e06d6"
        },
        "item": {
          "id": "06bd7fd8-87ff-48fb-b948-6c9466ae0ac3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "89fb6e98-41e3-4171-87bb-c3ceca725a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16806a81-54d0-4f20-9286-4d525591ea7c",
        "cursor": {
          "ref": "2ac3f591-92eb-46b5-8e23-0292c07f3927",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c328929c-cbd0-4e85-b1d0-089d911e1041"
        },
        "item": {
          "id": "16806a81-54d0-4f20-9286-4d525591ea7c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6863d928-0c97-4221-9f1e-514c5473927a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b1a689-9870-4d0a-bc6b-84c9423dee4d",
        "cursor": {
          "ref": "cfdb9a32-0ba7-421b-a824-fa91a29aadfe",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a5ce2a82-a243-40a2-9d88-4a0949b15951"
        },
        "item": {
          "id": "26b1a689-9870-4d0a-bc6b-84c9423dee4d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3df8efc0-2e89-40fa-bd99-c75ba4bfffbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce8f126-a610-457b-8a27-b5819b6e82de",
        "cursor": {
          "ref": "0a86a72c-f20d-4aba-abba-11d220c0c735",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "be5f8595-b3b7-45dd-b23a-339d2a28052f"
        },
        "item": {
          "id": "cce8f126-a610-457b-8a27-b5819b6e82de",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "27ccd523-8aa8-4585-bd98-cf21408770b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38e9b03-ce80-4c86-a66b-24b9a5021ad8",
        "cursor": {
          "ref": "1da5c4a2-44bf-4ab3-8739-8efcd54f90c7",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "21154ddb-582a-4739-acd2-651016520042"
        },
        "item": {
          "id": "b38e9b03-ce80-4c86-a66b-24b9a5021ad8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fadf6987-04e5-481c-8ba7-052459b9d179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a84954-375f-478b-9fc0-a13d6a125b53",
        "cursor": {
          "ref": "9916b8b2-4b04-4770-971c-ad4029de091a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f3e9c997-8241-4c1b-aae9-0661454b7bb2"
        },
        "item": {
          "id": "30a84954-375f-478b-9fc0-a13d6a125b53",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5cb32798-c924-498d-b54a-e72b3c7cc726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e7667b-0563-42db-9a42-f1fb2c9f3307",
        "cursor": {
          "ref": "d315a9b3-533c-43f8-ae65-1559666845af",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5eb4c074-8360-445e-b6c8-bf1bfea188f4"
        },
        "item": {
          "id": "08e7667b-0563-42db-9a42-f1fb2c9f3307",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0fa07215-8bb1-468c-a33a-a23b9d3e8240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41272a4c-fde1-40d5-b13a-be6c0a472da6",
        "cursor": {
          "ref": "631cd8dc-201a-466a-b38b-ced2b2b611e8",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b3854523-9c68-4b8e-9e4e-522908cccc86"
        },
        "item": {
          "id": "41272a4c-fde1-40d5-b13a-be6c0a472da6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "023557d6-46da-4348-8f98-7767d480cc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d23fbb-1016-4272-b8f1-8301535243b9",
        "cursor": {
          "ref": "959b1a92-9dd1-4666-9a21-f48a9acf2b8d",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "09ceb086-7d60-4183-a89d-2e476f48363f"
        },
        "item": {
          "id": "47d23fbb-1016-4272-b8f1-8301535243b9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "479fa971-1afc-432c-89fa-1776fd79a602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14569f06-dc97-4afd-a2ed-5edc1bba75f0",
        "cursor": {
          "ref": "f15919fb-bfad-41ce-a4a8-6b2572ca7625",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "007f40f2-51c0-4a73-b08b-0ddf0702585d"
        },
        "item": {
          "id": "14569f06-dc97-4afd-a2ed-5edc1bba75f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d2e8c1fe-1cbf-4518-acff-f602c4c94e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3953a832-1e22-4673-b0cf-eba492690249",
        "cursor": {
          "ref": "baf04712-cef7-435f-9c0a-0c0a9cf8e97b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "79b7ecfb-9f1c-4b34-887d-8794df71b468"
        },
        "item": {
          "id": "3953a832-1e22-4673-b0cf-eba492690249",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dbc5be1a-fc7a-4641-bdfc-ea74564dc8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05230f91-ea3a-4afd-b200-0a0d0b08e16f",
        "cursor": {
          "ref": "354ce11c-2211-427b-8fff-f26ae2f27aa6",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5664ce64-f19c-46c7-a1be-7d27d22321a9"
        },
        "item": {
          "id": "05230f91-ea3a-4afd-b200-0a0d0b08e16f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f8361684-0ba2-4cda-a9e9-929bea8d6687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcdf55e-78fc-4173-a34d-06b1a30b626e",
        "cursor": {
          "ref": "fa03d1fe-87e3-4c89-9b04-3babd4be19b4",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9776ae0-9a5d-4906-a879-bb0e1bb647d0"
        },
        "item": {
          "id": "0bcdf55e-78fc-4173-a34d-06b1a30b626e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "11d5160c-7bfb-4a61-86b5-ae6685f0bb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0402c519-a0ad-4b5d-8a1f-7e22a34d5ce4",
        "cursor": {
          "ref": "7c52a496-409c-4404-a02e-8b2a4fa508d6",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "79c67748-968c-4937-813a-3d31a7bc783b"
        },
        "item": {
          "id": "0402c519-a0ad-4b5d-8a1f-7e22a34d5ce4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "512b2d14-bd42-46d1-a4af-0893c06f50b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7face7a1-90ce-4965-a97b-069dfb3902fe",
        "cursor": {
          "ref": "c9efebe1-80a1-49dd-b9cb-83d1b7f0f365",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4f26b754-1a8a-46c9-ac94-6c7367866790"
        },
        "item": {
          "id": "7face7a1-90ce-4965-a97b-069dfb3902fe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b2a65c46-11fd-4157-963d-8c431a3e34b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da673d4-54a8-40bc-9dd2-54754f5f8eae",
        "cursor": {
          "ref": "a087c3bb-74b5-4e8a-ac32-da7d2246cde1",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ca509bdc-5a0d-417b-9faa-f3d3e37941a5"
        },
        "item": {
          "id": "9da673d4-54a8-40bc-9dd2-54754f5f8eae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "229e1686-b290-4de4-9189-a0f9b8b5717a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99390e69-a4c6-46c2-9f98-b97af324b795",
        "cursor": {
          "ref": "7e3e7a58-1a7f-45aa-b7c8-7fa8d9ffc138",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "70d1da91-5fdc-45d3-b5c7-6183bb55f451"
        },
        "item": {
          "id": "99390e69-a4c6-46c2-9f98-b97af324b795",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3abef607-d948-4c95-87e8-9e75bb14fb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f55b71-feca-499e-a28b-d59adfcfae18",
        "cursor": {
          "ref": "c23c028f-682f-44ea-9686-ebd78eec25c2",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f9ab1510-7b58-4493-916b-c95bddc7bf61"
        },
        "item": {
          "id": "b0f55b71-feca-499e-a28b-d59adfcfae18",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b641908d-3f47-4d49-8300-08e0cca90a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e3e354-8fc8-47a0-8052-201723faf137",
        "cursor": {
          "ref": "8b41a0e3-cad7-458f-bb8f-5cfb1ca2610e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f2666237-3eb8-4c81-a250-03d90d95400b"
        },
        "item": {
          "id": "36e3e354-8fc8-47a0-8052-201723faf137",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "137c6f78-06ba-47ab-90e8-0698541e3c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a6179b-7bac-475b-a2e0-1f90236ef9e4",
        "cursor": {
          "ref": "aab6e472-757b-421f-a114-0f6f3d41058f",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "43ec53bf-ace8-4996-b164-cbf93faabb35"
        },
        "item": {
          "id": "19a6179b-7bac-475b-a2e0-1f90236ef9e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "63ca52eb-8204-4ac7-80dc-73be241734a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328f25a3-a25e-43bf-9e9d-3e9d97cdfe85",
        "cursor": {
          "ref": "237a547f-a23b-4bc9-ae2f-d0ad152cf9d4",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5f2be218-8e2d-458b-8eb6-2934534c6f00"
        },
        "item": {
          "id": "328f25a3-a25e-43bf-9e9d-3e9d97cdfe85",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ced7659-c4fa-4cfe-ae14-49ea487fed9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158efe56-47b9-458d-addf-fe374c175bcd",
        "cursor": {
          "ref": "671c5c57-705a-44a7-8cf0-cc41cd8de146",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0cd7fa70-d035-4cab-904d-cee072c79f72"
        },
        "item": {
          "id": "158efe56-47b9-458d-addf-fe374c175bcd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e35165e9-95e2-4474-842f-ba436eed81bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ec2f93-4d2d-4943-94bd-d9bec06319e8",
        "cursor": {
          "ref": "cf7c2e80-886f-4db7-8d64-607dd82c11aa",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c4025e29-118d-41ce-b1f3-7262bf192b0d"
        },
        "item": {
          "id": "00ec2f93-4d2d-4943-94bd-d9bec06319e8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f80f265-0daf-48bf-8f57-1593472f900d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbed5332-9d07-49b2-8f18-c91dc6e2df1a",
        "cursor": {
          "ref": "3a9be233-6883-49d2-9ed0-87818a6463b0",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "635a11ab-d229-42da-b3e4-685590fb1357"
        },
        "item": {
          "id": "bbed5332-9d07-49b2-8f18-c91dc6e2df1a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5d4334de-9aa7-4cee-98cb-707591924025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debe0b79-60c7-4d0f-93ce-b120beb73997",
        "cursor": {
          "ref": "6b8d605c-8c88-49a9-b8a6-f2e0cb977f81",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e2acfec9-be58-49b6-9f5b-e80b64ae7288"
        },
        "item": {
          "id": "debe0b79-60c7-4d0f-93ce-b120beb73997",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "449460d9-7771-4400-bc2a-c423113994f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7004d8f4-04e4-459f-b970-4947c43a31a8",
        "cursor": {
          "ref": "a708b9d0-d8ff-47b3-93cd-d7e3c018e26a",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "be25e620-e089-4228-9c39-9107cfaa3324"
        },
        "item": {
          "id": "7004d8f4-04e4-459f-b970-4947c43a31a8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c65020d9-6217-41c2-8eec-d447228e9362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae807ba8-d290-4673-92f6-b9ffa5dc2c04",
        "cursor": {
          "ref": "79486a5f-0a0a-487b-ad8a-b00829ebc511",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "802a0b75-6a69-4563-81b1-39f3faa3d245"
        },
        "item": {
          "id": "ae807ba8-d290-4673-92f6-b9ffa5dc2c04",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "904eec95-18d8-427a-98e5-7030b2416fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04407e70-2010-4a1e-816f-9ddc03034bd2",
        "cursor": {
          "ref": "286102d8-cf9b-4e3c-b538-1366c0fe61a4",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b0260463-d3a2-40af-afc2-d4da4ceb2ee2"
        },
        "item": {
          "id": "04407e70-2010-4a1e-816f-9ddc03034bd2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "183af5f0-aa6c-4fab-9c68-d4ca53754e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655fb08d-f8d4-4f20-a634-5112be975c94",
        "cursor": {
          "ref": "d8bdeb40-3964-4bda-b211-166f7c23a3f5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7517b7cf-589e-4f25-b72d-3ace8ce3dd94"
        },
        "item": {
          "id": "655fb08d-f8d4-4f20-a634-5112be975c94",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0d595285-5722-4f31-8cd7-36008f9c6772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb9a4c9-4cbd-48d3-8388-7f91b4683971",
        "cursor": {
          "ref": "d6b08c5e-bdca-4d2c-9ee1-d5c8485250ec",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7616b01f-1fc1-402d-859b-0ecc9634a59b"
        },
        "item": {
          "id": "4bb9a4c9-4cbd-48d3-8388-7f91b4683971",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f510a17d-73f1-4917-9391-738d0bd756b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84de56c9-9aba-46ab-95ef-780530cbe421",
        "cursor": {
          "ref": "9b285f75-261b-4ce7-a66a-a2a8ee6efaee",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b2e25fb1-c66a-4f5f-9027-e4fb95c6aacf"
        },
        "item": {
          "id": "84de56c9-9aba-46ab-95ef-780530cbe421",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8681f872-a04f-4406-b750-c2209599dc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cda7694-4a6b-4937-9c5e-b79b0852b9e2",
        "cursor": {
          "ref": "a08d3e66-8e64-48c5-b2b1-661474c6ea7c",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f1dec228-8d78-4a78-aadf-84257e5f492f"
        },
        "item": {
          "id": "8cda7694-4a6b-4937-9c5e-b79b0852b9e2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a07b1dd1-1112-4387-9c7a-9543333eda3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47635799-d980-4937-9883-c6891d17528f",
        "cursor": {
          "ref": "7bc71fa3-60eb-4405-a19a-dec2b0e11fcb",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "21caa6e1-e09a-4a2f-bbf7-bb83fe0567c6"
        },
        "item": {
          "id": "47635799-d980-4937-9883-c6891d17528f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8500a424-02ef-4dec-a512-ed31bfd4581f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9066c98e-f202-48e6-beb4-c544b804f4ce",
        "cursor": {
          "ref": "b58bf3bf-e2c8-40e9-a45e-c1d1c88c4daf",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ef345843-b374-4dae-99fc-cf2f44832136"
        },
        "item": {
          "id": "9066c98e-f202-48e6-beb4-c544b804f4ce",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b4f5e664-2bbe-4915-92a6-0f7b908ebde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fe5627-a27a-4e2f-bd50-a108894a6c87",
        "cursor": {
          "ref": "63f04003-b0aa-4edc-80f1-6e1d755450d8",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a32d4088-0081-4e42-892e-af9a63a37d19"
        },
        "item": {
          "id": "70fe5627-a27a-4e2f-bd50-a108894a6c87",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "69e723d7-176a-4440-b714-ee2bdaef7619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d05498e-ad5e-4cce-a739-396b1830231e",
        "cursor": {
          "ref": "4ded1f72-6fff-4c8f-afd8-c748f58c710c",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1decd90b-859b-41d8-b726-5c0ce501b49f"
        },
        "item": {
          "id": "5d05498e-ad5e-4cce-a739-396b1830231e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4949b756-a720-49bf-ba53-ac9aaef66d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8753d9f2-8793-4f16-bfa6-4df3e1e374fa",
        "cursor": {
          "ref": "0eebcc69-9cd4-44b8-b725-5c85fc03e5ad",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "73d901c7-b4de-44eb-b583-8b67688e6044"
        },
        "item": {
          "id": "8753d9f2-8793-4f16-bfa6-4df3e1e374fa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be032b02-9365-4948-a9dc-438e6867923d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0a4e77c0-d4f3-41f8-b7c7-28a80a9ce0e4",
        "cursor": {
          "ref": "4aadc9e5-98da-4d5d-b82c-82b8bcbd4be3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "250188b9-39ce-456c-8d29-cf35b49ca258"
        },
        "item": {
          "id": "0a4e77c0-d4f3-41f8-b7c7-28a80a9ce0e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9bd6ba38-76ae-44d4-b08d-c98752330da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ace22b6-6f73-4bf4-98f3-7183e57d04a9",
        "cursor": {
          "ref": "f396b54b-bd15-4acd-9c0d-d1818509cc56",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "84b4a394-daa9-49bc-bb3e-1df96813c483"
        },
        "item": {
          "id": "2ace22b6-6f73-4bf4-98f3-7183e57d04a9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a9d0d47-6f45-4bc9-80d5-09066d8eee4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79df8874-8c7e-4678-8e58-e49b5abd7f8f",
        "cursor": {
          "ref": "b1990b61-ec85-4cbc-abbd-d26840b82b2a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "94529665-bcb9-4529-9c5b-5b962ebef124"
        },
        "item": {
          "id": "79df8874-8c7e-4678-8e58-e49b5abd7f8f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "88ae4b42-4dcb-4e3c-b395-eb7e4a790e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9e9798-53b3-4e35-bad8-8fdf1e5f41bc",
        "cursor": {
          "ref": "b0438d99-4317-4284-b4a3-77adf3458e39",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1e3975a8-ec00-4e7c-8dac-94c252de5858"
        },
        "item": {
          "id": "9c9e9798-53b3-4e35-bad8-8fdf1e5f41bc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d25eb28e-71cd-464c-a7a4-00098ccc7851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac086dec-4409-44a9-a8f4-92b7f9454fe3",
        "cursor": {
          "ref": "a66bf250-058d-4b7c-82f9-244841a57d15",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1d682b5b-ab50-4354-9913-dbb2fc8c53ca"
        },
        "item": {
          "id": "ac086dec-4409-44a9-a8f4-92b7f9454fe3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6fbad667-a766-4875-b40b-ffdef8664117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68dd8cad-933e-4d88-9a8a-94011b4d7e43",
        "cursor": {
          "ref": "1452cf28-cc54-4789-a3da-22c20cee12e6",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d6ec8087-84cc-4758-a225-7946f808eed5"
        },
        "item": {
          "id": "68dd8cad-933e-4d88-9a8a-94011b4d7e43",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dd4d75ae-f86e-45c0-bba0-bd6a0822b2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c1639c-08ca-476b-aa27-b3f6863ad0e4",
        "cursor": {
          "ref": "91a3bbb2-6ab9-47a8-b1d9-d128bc7154ef",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "22931d42-8e6e-4cf2-9c84-26a3a09cdbb2"
        },
        "item": {
          "id": "66c1639c-08ca-476b-aa27-b3f6863ad0e4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "53f73ef1-0f98-43af-9b82-d6bd4772393c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c66ba7-f6a5-4fea-9c73-6a2faabc9bef",
        "cursor": {
          "ref": "583f7811-56db-48af-93fd-43b2aa359906",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "97e6cc76-5df3-4d0e-ab31-09f769673d50"
        },
        "item": {
          "id": "47c66ba7-f6a5-4fea-9c73-6a2faabc9bef",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e5543160-eaf6-4823-a92b-ebe3844e8743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f80c96a-ef1e-4f24-a32e-21a1059bfb0b",
        "cursor": {
          "ref": "038e6801-05b0-4f29-884a-ff67f66edc4d",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b7647f1c-6a82-4794-bd62-2ad673feb562"
        },
        "item": {
          "id": "1f80c96a-ef1e-4f24-a32e-21a1059bfb0b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5774697c-518a-4232-9a3a-19e8f76b8db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72740ca3-0587-4b10-8998-d47aecdce075",
        "cursor": {
          "ref": "5e3d82fe-1ca7-4673-813b-e8740dffdf83",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "24ec3313-d6b4-4a58-9eb0-74b04cbeee75"
        },
        "item": {
          "id": "72740ca3-0587-4b10-8998-d47aecdce075",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "75724e2d-f7c9-41a4-a723-bd2e6b651c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef69203-4348-409c-b7f9-ab437a7a5889",
        "cursor": {
          "ref": "c083de11-957a-4884-a64b-9d52a32b114c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4eecdb17-fcca-442a-88e6-b02a6653b549"
        },
        "item": {
          "id": "cef69203-4348-409c-b7f9-ab437a7a5889",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0ab18328-4d34-44b6-9c4d-eb354b6b73aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8c3ab0-2df0-4ab1-a37f-31575abfe409",
        "cursor": {
          "ref": "58cfc645-327c-4e4a-b2a9-ffd585fbb970",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c568adea-1a73-4ec2-83e2-f5e6144e2772"
        },
        "item": {
          "id": "dd8c3ab0-2df0-4ab1-a37f-31575abfe409",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "037ddcb6-ba5d-439b-ae12-0ec7ebb6a602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b635ae-69c6-43bc-8778-f2cb37736b33",
        "cursor": {
          "ref": "b5b0e191-1718-4a80-8c6b-4b21c75b51c3",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "77e46bdc-ad19-4566-8cfd-bc4198e9334a"
        },
        "item": {
          "id": "12b635ae-69c6-43bc-8778-f2cb37736b33",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9037a779-776b-4acf-ad91-5af01492e708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b290bcc3-a1b5-4c63-9e1b-11730ae1192e",
        "cursor": {
          "ref": "c503e607-7f3a-4aed-a83a-d4426558b5b6",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "54b5b189-06e0-4749-a840-c7f3d292b363"
        },
        "item": {
          "id": "b290bcc3-a1b5-4c63-9e1b-11730ae1192e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f40ba30f-0098-4b69-960b-85183261c6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232f7b1d-d41b-41b3-976c-c10a1910b5f9",
        "cursor": {
          "ref": "a6802545-c8f4-46cf-ab32-95108d8b7feb",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "541d83f6-74a4-4854-b596-9ee764e6bdf6"
        },
        "item": {
          "id": "232f7b1d-d41b-41b3-976c-c10a1910b5f9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1fb28194-2694-4e7e-a3b1-055ea86c6fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e96746-57a2-44d4-a846-bdf6454b60aa",
        "cursor": {
          "ref": "fc6bea9b-b573-4d1c-9469-5a7ea9c66065",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9e84ddac-933c-455c-bfbe-dd0e32327302"
        },
        "item": {
          "id": "c2e96746-57a2-44d4-a846-bdf6454b60aa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "84eabefc-627d-4b6d-b9c0-aee738a3e2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d25110-017e-44e8-a153-36f60f554537",
        "cursor": {
          "ref": "a84940ee-2a9f-4d41-a17a-be6f412c4339",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "57f33a84-aa25-4c66-9701-b62f1ab1cae6"
        },
        "item": {
          "id": "19d25110-017e-44e8-a153-36f60f554537",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1e76afd3-032d-443a-bec4-7ce251b76932",
          "status": "OK",
          "code": 200,
          "responseTime": 298,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "dc30c4e6-0699-4676-b510-19c3f41b2117",
        "cursor": {
          "ref": "5f6b1da8-211d-4401-8914-cc4bfd369f4e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "65a88c5b-b50d-403d-b479-6d5855ae9ba8"
        },
        "item": {
          "id": "dc30c4e6-0699-4676-b510-19c3f41b2117",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0c4a6a75-5b23-4085-95bf-5baf524b4ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a3cd23-1ce2-4f04-bb2a-4df00510dfc3",
        "cursor": {
          "ref": "1f1c8a75-228d-49fa-8b13-6b4302fa6bbe",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b6535f14-a79d-44fb-bb01-4d465732545a"
        },
        "item": {
          "id": "09a3cd23-1ce2-4f04-bb2a-4df00510dfc3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78564238-4676-4c57-87f8-5ba030fefdd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44327177-578b-449e-b3bf-e51d095918f4",
        "cursor": {
          "ref": "14e0cb33-a7af-43b0-88d6-77362ebeddab",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d3b34828-022d-4022-8132-38c8b6a5d9d9"
        },
        "item": {
          "id": "44327177-578b-449e-b3bf-e51d095918f4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "978f45f1-ab20-44df-a796-6ef6ebeaf265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4392f0a1-efc7-42ec-b108-1efbbd51000a",
        "cursor": {
          "ref": "b7f6fddd-0aba-4bd1-bf56-2fdac5da6ab7",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "edee1bf8-ca98-43d3-bd2c-965337577b94"
        },
        "item": {
          "id": "4392f0a1-efc7-42ec-b108-1efbbd51000a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e245931e-c30b-43dc-aacc-0478b8a31821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2520307a-7a38-46ec-ad9b-a6036188ee88",
        "cursor": {
          "ref": "b22f95f9-f03f-4f7a-b755-d5468851a834",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b4f0080-b876-4d81-bd84-c57ba9901c53"
        },
        "item": {
          "id": "2520307a-7a38-46ec-ad9b-a6036188ee88",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d21fb860-e82d-4f42-9b30-d29f479b613c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a32a5e4-0560-4d11-9579-50293ec5d202",
        "cursor": {
          "ref": "0bd659ae-b2be-470e-a19f-9efce2476ed3",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a623344c-ff05-4cb7-9bd8-68bda91b53a2"
        },
        "item": {
          "id": "3a32a5e4-0560-4d11-9579-50293ec5d202",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a3ba0e0c-bcda-4b1d-ba04-d204b3fea5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a195a0-40f2-47c2-8f60-cb37b6d9a2f5",
        "cursor": {
          "ref": "93ae3621-7228-4cd4-974c-289f483d1d10",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eb144a1b-196a-4c91-aa01-48718f810b61"
        },
        "item": {
          "id": "e4a195a0-40f2-47c2-8f60-cb37b6d9a2f5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "36681390-c709-4d9f-9b44-52ef54aa8821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cef0d3-2aa0-4500-a614-34959018456e",
        "cursor": {
          "ref": "1d9e8492-7dbf-46d8-be2f-7a578a742de0",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4b3b754f-0629-41ab-bb25-f0f308ce2545"
        },
        "item": {
          "id": "a3cef0d3-2aa0-4500-a614-34959018456e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cdefaff5-d144-46ae-a1c0-5b47e3772123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fb63db-6b4b-45c0-85f6-dd5f921647f6",
        "cursor": {
          "ref": "35478a98-e595-4e1d-b719-09162afa7aae",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "492e1478-6d4d-4862-b2a0-4678b732c296"
        },
        "item": {
          "id": "b3fb63db-6b4b-45c0-85f6-dd5f921647f6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2f19fc6d-5df6-4b20-bfc1-392875422833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f24a18-f86e-44d6-ab29-f6814abea921",
        "cursor": {
          "ref": "908a38d3-5a49-4bde-b581-45fed34d216a",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "44144db1-31ed-4859-bd71-6a300bc58d33"
        },
        "item": {
          "id": "02f24a18-f86e-44d6-ab29-f6814abea921",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da6fd53c-d3fc-4f94-aa28-0c478912a3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8735f068-8623-4d44-8308-1a5a2478d43c",
        "cursor": {
          "ref": "2c66cfe5-39c7-4c0e-8fd5-12e7fd67c3cb",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "99cf894d-3b94-4595-b3df-8716dfdaa586"
        },
        "item": {
          "id": "8735f068-8623-4d44-8308-1a5a2478d43c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad837787-1ec4-47a1-9222-98758c239b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e77587-bb03-4d80-b4e5-1491130e1b09",
        "cursor": {
          "ref": "ca15170c-fdb0-49f2-bd5e-56a5288ca885",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "36eb6f99-2837-483e-8a35-b6bceff3516e"
        },
        "item": {
          "id": "e7e77587-bb03-4d80-b4e5-1491130e1b09",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "201b8f43-5e93-40d6-aaf7-cd55f22df926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd05d60-f1b4-46a2-89e7-00b80fc17d0a",
        "cursor": {
          "ref": "1064df12-7f65-468d-be95-f7b4c68fb37b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "41753d4e-ff37-4ea7-905c-abca8872e773"
        },
        "item": {
          "id": "fdd05d60-f1b4-46a2-89e7-00b80fc17d0a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e6172c73-b2de-4a48-9cbf-daedbb1d79ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7992bfc-cccb-4830-bef2-866922bf82c2",
        "cursor": {
          "ref": "d78bbe22-de13-4aaa-96f9-53ab5322c8c0",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cec3ac3d-75df-4e47-a783-794a719378e3"
        },
        "item": {
          "id": "f7992bfc-cccb-4830-bef2-866922bf82c2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f021e972-f5f3-4a79-8371-e8d51fc7dbd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75db0f19-cd99-493c-a977-4cf8e4cb1a69",
        "cursor": {
          "ref": "5aa26a42-ec25-4a25-a8e4-f23ad67c2360",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "19cb29b3-37d1-44fa-986c-51c92a8d33d5"
        },
        "item": {
          "id": "75db0f19-cd99-493c-a977-4cf8e4cb1a69",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9181555d-a300-4218-aff0-45a39579c978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa62d61-a80d-4626-b1f9-969945038347",
        "cursor": {
          "ref": "623b39f4-ef3d-4603-b951-d88669001f42",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "234a67eb-6204-4ed6-92bf-8bdef75a7a47"
        },
        "item": {
          "id": "eaa62d61-a80d-4626-b1f9-969945038347",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "74df38e3-5c83-4bab-b7a9-94e182009428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eca0cb-2783-4950-92d1-4f677b8d2994",
        "cursor": {
          "ref": "015b7859-c555-4bb8-b729-7bf06efdffca",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d6210e54-fd1b-4add-8559-574af71d0a12"
        },
        "item": {
          "id": "d5eca0cb-2783-4950-92d1-4f677b8d2994",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6701412e-e008-4660-bb14-5631702e3127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed4832f-d4b4-483e-9ca6-24e3fdb57db4",
        "cursor": {
          "ref": "c47b5fbd-3798-42b2-9162-24ab4887a0c7",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "54b8cb47-8a40-4dd2-946e-3c7a58a70b7e"
        },
        "item": {
          "id": "2ed4832f-d4b4-483e-9ca6-24e3fdb57db4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "55943229-6d7d-4fac-a849-6da60d1b05f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d5bd68-8edb-4c5d-b580-b2f835a57231",
        "cursor": {
          "ref": "beecb1a2-76e5-442a-aa89-68c174c10154",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "59d8a8d9-07ab-4947-91bc-f44de73d57cd"
        },
        "item": {
          "id": "15d5bd68-8edb-4c5d-b580-b2f835a57231",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cc74ba25-ba1d-4819-a274-faab3ce6f847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344d301f-9952-4b51-88ea-dad57432edd5",
        "cursor": {
          "ref": "a103c7ae-da38-4bad-a84b-87b99c923be9",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5136476c-fbbd-4c57-b147-78b70f5c16d5"
        },
        "item": {
          "id": "344d301f-9952-4b51-88ea-dad57432edd5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "94bff3e0-a37d-40b8-9cde-867b13e7d3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a711bd6-b7d3-4557-9440-7fba797cfe23",
        "cursor": {
          "ref": "550e7c65-5742-4465-9b98-ca79d2e4898c",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3211bbc1-9c8f-4205-8aa1-487ef4f3731a"
        },
        "item": {
          "id": "2a711bd6-b7d3-4557-9440-7fba797cfe23",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eae01c81-dad4-4e2a-8bff-ca4a256ab151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118aae10-f7e2-493b-b96d-39ce4e374931",
        "cursor": {
          "ref": "533d63a7-b909-447d-8e90-174af9611845",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6244a75a-07d8-4f2a-ad59-0d3bea5445db"
        },
        "item": {
          "id": "118aae10-f7e2-493b-b96d-39ce4e374931",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f3e0fa77-b582-4667-a165-9a86cde75528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187fef2b-7a7d-43af-862d-0f026a8708c8",
        "cursor": {
          "ref": "4321fcb2-7bef-417c-983e-ff66dbefe2e4",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "29ee4614-52aa-4d17-bf5b-4ab428f06874"
        },
        "item": {
          "id": "187fef2b-7a7d-43af-862d-0f026a8708c8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3e7bb140-2969-4864-8170-016b8d686242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc3c119-6b38-4840-a1d0-ab0a27236ae2",
        "cursor": {
          "ref": "60058294-4f83-46a1-8197-a83c63149feb",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fc0d75d5-7427-46dd-b384-9ef9152d6284"
        },
        "item": {
          "id": "3fc3c119-6b38-4840-a1d0-ab0a27236ae2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "efc03a49-7d9d-44a0-90ed-e9d92d9be2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f78e9f7-9ae6-44ce-8688-50b8aae062d3",
        "cursor": {
          "ref": "c85810e1-b69b-45a0-a79a-f0fdf12f4821",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "83aaaa58-3bfa-4844-ac40-ff151f7e8ad2"
        },
        "item": {
          "id": "4f78e9f7-9ae6-44ce-8688-50b8aae062d3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0c1b987d-4062-416b-98f7-e536f944a493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afb3479-a754-4922-b311-85fc15c98f5b",
        "cursor": {
          "ref": "74637906-3e0b-49c7-be87-1b2e84969b64",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4d9e3091-a366-4696-a94e-3985f70af171"
        },
        "item": {
          "id": "9afb3479-a754-4922-b311-85fc15c98f5b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1b4601aa-9773-4d52-a5e7-cb391f2ac679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f21a9db-40ec-4df6-a317-a1976e74fdb4",
        "cursor": {
          "ref": "690b91b2-3593-4808-998a-9632b9e89144",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1acc971a-c5cb-4055-a501-7864b6f7f237"
        },
        "item": {
          "id": "8f21a9db-40ec-4df6-a317-a1976e74fdb4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e8380ab7-b821-497d-bd69-9fdf0cafce89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1ca857-dc1c-4d1a-ba59-ae09b4baccad",
        "cursor": {
          "ref": "e5791ae9-3fb2-440a-b96a-8ce089e18429",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9d5c94b4-beaa-4a7d-80b1-911150caeaed"
        },
        "item": {
          "id": "1a1ca857-dc1c-4d1a-ba59-ae09b4baccad",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "993c44dc-ecb5-4e67-a248-d342a3fc4695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d46a2d1-748e-41e4-9867-948b8871ab6e",
        "cursor": {
          "ref": "b0223dae-9948-4947-b101-6334db5b15cf",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d4c388b8-836c-420a-8c15-9dedb704705e"
        },
        "item": {
          "id": "1d46a2d1-748e-41e4-9867-948b8871ab6e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e6d90a91-b592-40f0-94b0-630ab9dd013b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35854f0f-4767-4b67-8426-7cba630b4e4a",
        "cursor": {
          "ref": "d7297c0e-21df-4700-ade9-82c48384e603",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "db5aa308-25a7-43a9-b271-e384a8f4b4d7"
        },
        "item": {
          "id": "35854f0f-4767-4b67-8426-7cba630b4e4a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "653d1bc0-7eeb-41de-8a5e-372f06d65912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9388bcb3-6c54-45ee-80bd-0a30e0624264",
        "cursor": {
          "ref": "075e2d94-ae1a-4789-97fb-ae084d82ba44",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d63dca43-bdb0-423b-9669-df16617be998"
        },
        "item": {
          "id": "9388bcb3-6c54-45ee-80bd-0a30e0624264",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d1d00ce1-f956-4970-a92d-00f056e09827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10152322-8e26-490a-8db3-8bc365313040",
        "cursor": {
          "ref": "ea80bb90-03e5-491e-9c0b-eb7bec2c40b3",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1865d500-0cbb-4649-8967-b5206c47f9ba"
        },
        "item": {
          "id": "10152322-8e26-490a-8db3-8bc365313040",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cbd9e549-83ec-4ae9-aba2-f88acb211ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e10c9e-de98-4ef7-97f8-b31dbea3073e",
        "cursor": {
          "ref": "c18799f1-7030-4719-83ab-a38342e372f0",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "da0d132d-8803-4840-872e-d71abd0745a6"
        },
        "item": {
          "id": "20e10c9e-de98-4ef7-97f8-b31dbea3073e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "db73e234-94c3-4e29-af44-8ff9337773d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72f5a06-2661-46cf-8aa8-ed258ba0887d",
        "cursor": {
          "ref": "7938e769-c71e-44be-94b2-1e3a8814adc1",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fc59b740-3a6b-477f-a6c3-092368393141"
        },
        "item": {
          "id": "a72f5a06-2661-46cf-8aa8-ed258ba0887d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6b47b69f-b736-466e-8bb0-24bbeb08adba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec87099-1836-4dad-83d1-3b91f1954957",
        "cursor": {
          "ref": "6a3f5a89-0a9c-4de6-a414-69dc4ac6c823",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "67220f86-9674-441f-aa42-a9af33f14dbc"
        },
        "item": {
          "id": "1ec87099-1836-4dad-83d1-3b91f1954957",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6f9fb543-c737-4dfd-91e3-f50d1eacc22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43736d06-93d5-466b-9ea3-28f2b2401492",
        "cursor": {
          "ref": "5bd052c1-d5c6-407a-bc91-3f2d2239037d",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "df467c63-1afd-4d6b-a994-017e5f4b701a"
        },
        "item": {
          "id": "43736d06-93d5-466b-9ea3-28f2b2401492",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "219924a5-a8f2-4d36-bcef-18da3e6b4b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 365,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b796479d-7262-493e-97f2-4d4f9f292c99",
        "cursor": {
          "ref": "60fb1ebe-967c-47b3-9791-3800f93ad445",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "214268ee-fe5f-43e4-9419-aaf1e63c6bb5"
        },
        "item": {
          "id": "b796479d-7262-493e-97f2-4d4f9f292c99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f30fa24e-5cd8-4c24-9833-94aabafe3e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0758d14b-3996-442a-ab8b-7f5e1d44e905",
        "cursor": {
          "ref": "75e03cdb-d74c-4cbe-b760-4abc4478da3d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8bd66af9-93e4-4514-8178-4f358f5354a5"
        },
        "item": {
          "id": "0758d14b-3996-442a-ab8b-7f5e1d44e905",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "63ae8018-b40c-4f79-819e-e4c321ded4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a424141-ae28-4519-a860-1cf1d4437df1",
        "cursor": {
          "ref": "f99a9efd-a431-494e-aeff-a015d7b5d3d2",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "17f70757-89e0-440a-8a46-ec63fdf9b7ca"
        },
        "item": {
          "id": "7a424141-ae28-4519-a860-1cf1d4437df1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "80cd4b5d-0fe3-4a31-8594-c5fc3a93ddf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca23acc-1f7b-46db-8122-e5e551584137",
        "cursor": {
          "ref": "4b5a57a3-b739-4ed6-84dd-9e506b069aa6",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9c271ed2-14d9-47e2-bebe-bb3d54d68ce3"
        },
        "item": {
          "id": "1ca23acc-1f7b-46db-8122-e5e551584137",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "94365186-422a-44df-8186-e0a79fbf36c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f14d38-548c-43a8-a221-cacf8449341f",
        "cursor": {
          "ref": "77d3212f-6516-4606-b746-0c852b8c5573",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "48194e86-c0ea-42c8-940b-3b8325cade21"
        },
        "item": {
          "id": "f6f14d38-548c-43a8-a221-cacf8449341f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5a630f6c-6c7c-44c0-81ab-806ee6d61272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f563f3a9-bffa-4df4-926e-0c94df4a2714",
        "cursor": {
          "ref": "8ea982c0-2dc3-4c6b-9295-e5e47901faf8",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c37a5790-d4c1-4a54-9f7f-a50dd9be9af7"
        },
        "item": {
          "id": "f563f3a9-bffa-4df4-926e-0c94df4a2714",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "60eb6495-7e65-499a-8e33-43bdeb22c9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5438f3c7-25df-46f3-a64f-de9be4dc40ce",
        "cursor": {
          "ref": "8e6002b8-07d4-4ee9-a2e6-806036a0433a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ef6f8a62-20be-4f97-bb90-b68ce4a3d64a"
        },
        "item": {
          "id": "5438f3c7-25df-46f3-a64f-de9be4dc40ce",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9feeffb5-1f4c-451a-ab01-6c08c868a6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0544b7-323e-40c9-af60-d925a820eb35",
        "cursor": {
          "ref": "f6c1d6a8-e1d5-4969-b564-b9950888a336",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5550a76c-75ed-4d0d-ae25-1351090e4fcb"
        },
        "item": {
          "id": "2b0544b7-323e-40c9-af60-d925a820eb35",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "82c26a35-71df-4d1d-b675-689bfefeeb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26447be-b9c9-4e87-b309-d4068601375c",
        "cursor": {
          "ref": "d281f0c7-9b1f-496f-8bd3-df19bc8d8c97",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "719c8525-28ab-4206-ad22-305ec6946f48"
        },
        "item": {
          "id": "c26447be-b9c9-4e87-b309-d4068601375c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "54851034-7775-4f8f-9fca-a2b290d9aa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563e102b-79cb-424c-a661-4f88bbfbe7f1",
        "cursor": {
          "ref": "7b032094-4b39-4d5a-86f7-c0efe03ad1cc",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "29b7f924-b4c4-43e9-ab04-2739be7f74f7"
        },
        "item": {
          "id": "563e102b-79cb-424c-a661-4f88bbfbe7f1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "086eee66-f7a5-47b2-bd30-38b8faf089fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d9377-bb2d-48cf-91d8-88119e3e5bc2",
        "cursor": {
          "ref": "448f7d53-3aeb-4f55-9fe1-c3e9c66707a9",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "53be88dc-3439-45ab-88ad-a741022ee752"
        },
        "item": {
          "id": "9f7d9377-bb2d-48cf-91d8-88119e3e5bc2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7df8bbf9-dd0f-4198-8f60-37802f710144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26c85f8-ed7c-4ace-9fa0-2d06fb25d560",
        "cursor": {
          "ref": "1af358b1-5e4f-4753-bb0f-eb16d96c82c1",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1fe15078-9d8b-4749-aac3-e8521e8cde4b"
        },
        "item": {
          "id": "b26c85f8-ed7c-4ace-9fa0-2d06fb25d560",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81cae5d8-d5cd-4778-89d8-5bfedbdd44e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b643c52-44c9-4b05-8492-46b9923f3d5d",
        "cursor": {
          "ref": "c413c6ae-a276-49dd-82d0-0c2cb291f4d7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "602a6691-8c55-4474-ba42-a955560537b7"
        },
        "item": {
          "id": "7b643c52-44c9-4b05-8492-46b9923f3d5d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1919b379-bc1e-488b-bc7e-e39e7ec7a556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ddae5d-8b28-4275-b51c-0327d46b71d4",
        "cursor": {
          "ref": "163e91bb-14b9-4ee5-954c-97eecba5366d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f94bbee5-8091-4575-9a84-20dbe4a8f0d2"
        },
        "item": {
          "id": "f7ddae5d-8b28-4275-b51c-0327d46b71d4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3c73e5d8-1883-4b9d-bed0-85934e2cc211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a04bc2-bbf9-4e47-a6a1-faf817093635",
        "cursor": {
          "ref": "373c7dbe-5edb-459e-a811-e65991e550fd",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fdd4763e-6006-4df5-8711-fe6d6b469afb"
        },
        "item": {
          "id": "48a04bc2-bbf9-4e47-a6a1-faf817093635",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2fb05f7b-8a12-4994-a118-0ea44edd1f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa68dd37-f507-4fff-9325-5d67e5e17597",
        "cursor": {
          "ref": "afccafc8-d80a-480e-b6f6-b78166b13055",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd4c2e50-7dc9-4c92-beac-9e17ed074629"
        },
        "item": {
          "id": "fa68dd37-f507-4fff-9325-5d67e5e17597",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "12ae93e8-1478-47dd-a086-e257048129e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c977dd9-2a4b-4aba-bea8-cb7f3b5ef5f8",
        "cursor": {
          "ref": "c9fe30fa-c246-453e-abf5-e0761a4f27ca",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "09dd0329-2411-4a38-ba6e-4d5939b5bbba"
        },
        "item": {
          "id": "9c977dd9-2a4b-4aba-bea8-cb7f3b5ef5f8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3ae9a446-677b-44f3-b8f9-1f851ae1c6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac50d08-7a7d-4240-800c-0122223ccef5",
        "cursor": {
          "ref": "b0935b42-0c7a-48c8-8b3a-9e06c9a1886b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3cf25b93-0425-4112-8985-b09e40bd1ba4"
        },
        "item": {
          "id": "1ac50d08-7a7d-4240-800c-0122223ccef5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6b95511c-f5d3-4212-b77d-7b097fd35ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25c0ae9-70f4-403d-8a74-d322570bfc6d",
        "cursor": {
          "ref": "3030107b-7937-427f-8fb7-c67f6ad00b81",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ba0697f2-a23c-41ab-ba9c-a755bd173b8c"
        },
        "item": {
          "id": "a25c0ae9-70f4-403d-8a74-d322570bfc6d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b2c2370e-19a7-4b6b-a24b-b2ccf6ba7327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1ef489-8175-41b0-82be-19d0f06f1ada",
        "cursor": {
          "ref": "df21c4fd-e77e-4698-ab3f-67fc1b5e307f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c8635367-afc5-469c-a450-cc1d8fbcf198"
        },
        "item": {
          "id": "6b1ef489-8175-41b0-82be-19d0f06f1ada",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "988deaef-37de-4faa-b619-180fadcbba8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259eaf41-0d73-4ab2-8d76-9d04a1577b0b",
        "cursor": {
          "ref": "43a363ec-73b1-4a77-a039-8d470021b83b",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "eaae9f01-8e9d-4377-88fd-583710cde5de"
        },
        "item": {
          "id": "259eaf41-0d73-4ab2-8d76-9d04a1577b0b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cb1c86fd-d2aa-4518-9d63-1a4b96054e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d260349-178c-4fcb-bb30-d97611ae1f3b",
        "cursor": {
          "ref": "970749f9-6c40-4427-ac50-bdc543fdb56b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0ae34762-c441-4e4c-84e7-73e5f76fce3e"
        },
        "item": {
          "id": "2d260349-178c-4fcb-bb30-d97611ae1f3b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bfd86c1c-44b3-4400-9425-a43b1ee9afeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871cd284-a891-4d55-b08a-8f7c0b88ddb8",
        "cursor": {
          "ref": "e8050b74-2013-4475-8726-df1fd68162f0",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "79fe446b-28c7-42e3-84de-da03c7871e6b"
        },
        "item": {
          "id": "871cd284-a891-4d55-b08a-8f7c0b88ddb8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fdd845dc-269b-462b-89c9-cf0b9f93bdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc271d4-338f-4413-b469-8832c7f35141",
        "cursor": {
          "ref": "8cbb0086-2e49-4664-ba7e-533716ba7d31",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d8415354-2600-4cb0-9a1b-c81b0bce1e8e"
        },
        "item": {
          "id": "9dc271d4-338f-4413-b469-8832c7f35141",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "315ff12d-b098-41a1-8367-56c00ef68b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1c5813-791c-4ee2-9ee3-fb45b08900ee",
        "cursor": {
          "ref": "3b626f2d-3957-4315-b1ef-53620f287ebb",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "be506136-e0f8-4e21-82f2-fdf7b0ad7cbc"
        },
        "item": {
          "id": "3a1c5813-791c-4ee2-9ee3-fb45b08900ee",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "94ba8a54-d653-4da1-8b8c-e345d459548b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8e56ac-e526-4821-815b-7fc8357b3065",
        "cursor": {
          "ref": "e25dc8cb-9ee9-4531-8da2-106d657b8f51",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "84f7a59a-c2fe-4b17-b4c2-1a0b29d29a9e"
        },
        "item": {
          "id": "0b8e56ac-e526-4821-815b-7fc8357b3065",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5ee52f69-6573-4710-b3e9-a989537e9f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21c252d-6500-4bd3-a26c-cf9bcabefa36",
        "cursor": {
          "ref": "1ceb3fc5-bd3d-4d2b-8659-683e9badafe7",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2859af7d-a164-4862-82ba-b1b27e29d110"
        },
        "item": {
          "id": "d21c252d-6500-4bd3-a26c-cf9bcabefa36",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9cb9394f-1458-42cc-ab28-09f286b695ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e875d7ab-21b8-4d94-9f72-1981e44a74d0",
        "cursor": {
          "ref": "414ed49c-e20a-4aad-9bcd-c1d29a7988d6",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e6e00d12-3663-4854-83a9-8dda79b8b564"
        },
        "item": {
          "id": "e875d7ab-21b8-4d94-9f72-1981e44a74d0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "39a7ccd7-affc-4cde-a0c1-01187faac153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23290212-0a1c-4c44-a3b3-27ce545ae295",
        "cursor": {
          "ref": "4f15322c-343b-4c5c-969a-57e36e88a55e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5a93ed8a-863f-4b1a-9fb8-c698e69aea37"
        },
        "item": {
          "id": "23290212-0a1c-4c44-a3b3-27ce545ae295",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ac1ca726-195f-40c0-b8cc-66a9874cc753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b4a4a7-046b-4e0c-b103-09b6c53bc927",
        "cursor": {
          "ref": "07e71089-faf6-4538-80ea-d58d96658011",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c176472e-da4f-4c23-923e-bebf859dba9a"
        },
        "item": {
          "id": "80b4a4a7-046b-4e0c-b103-09b6c53bc927",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "be0a3bbc-0547-4947-ac5f-1826d280fac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76857070-7bfa-4521-af82-37a2d79d531c",
        "cursor": {
          "ref": "a5f8c6dc-505a-4e11-9003-184105d69af3",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "75e2b8a0-c5a7-4a84-8594-f504fe612c5c"
        },
        "item": {
          "id": "76857070-7bfa-4521-af82-37a2d79d531c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "62d048b0-4219-4f3d-8154-fc74cc1f6089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3da7c92-2a4d-4b54-aa0f-fabfeffa6c80",
        "cursor": {
          "ref": "26c7b47b-df9e-4dff-ad75-7556a56d5f14",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c1dbe8f2-08b8-40ba-b9f7-5d2da8933087"
        },
        "item": {
          "id": "a3da7c92-2a4d-4b54-aa0f-fabfeffa6c80",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "305aa829-fd0c-421d-88c3-09d434927174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db4f1bd-fdf5-4020-b228-4d4d08f39089",
        "cursor": {
          "ref": "b44bb620-6fe1-4d90-afa7-1bf38bff471d",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3a6cdfd9-791f-4382-916b-51b6f1e5771b"
        },
        "item": {
          "id": "1db4f1bd-fdf5-4020-b228-4d4d08f39089",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "38e91b80-a182-4ee1-9d9b-c2f240e873e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c55aba-e2a2-4dd8-a29f-30f846a372c3",
        "cursor": {
          "ref": "e294162e-a34b-44bc-86f2-f76afbd85bb8",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1c993dcf-c95a-49d3-994f-096a81521a75"
        },
        "item": {
          "id": "13c55aba-e2a2-4dd8-a29f-30f846a372c3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bbe07052-1ae2-49de-a3f2-a378eee1f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303ed805-c243-4f67-9add-1df1053b4874",
        "cursor": {
          "ref": "191efdfa-5911-47fe-8ba5-df89469d33c2",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "248a1895-89a0-4df2-8048-dd0568cb187f"
        },
        "item": {
          "id": "303ed805-c243-4f67-9add-1df1053b4874",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e82bac2e-3af0-496b-98df-980db6e9333b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94631ee9-156f-46fb-a3ad-c898217551b6",
        "cursor": {
          "ref": "c8f86921-0120-4996-bc6b-2c988f9ed3c4",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d9662de9-5040-4c4f-8981-a7fdcc4b8a0c"
        },
        "item": {
          "id": "94631ee9-156f-46fb-a3ad-c898217551b6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b0e760bd-e711-4c66-b482-5924b2fa043f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845ea87f-e252-4806-ac74-1f4ec1280561",
        "cursor": {
          "ref": "25418e8c-fb32-4757-822f-62db2e04cd1f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0c218fb9-4742-4f54-9b63-fab1d8a3b393"
        },
        "item": {
          "id": "845ea87f-e252-4806-ac74-1f4ec1280561",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d7bb0466-f5d8-4743-9556-76cbf21fecdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6df358-4410-4992-9f74-5a8e44c5a66a",
        "cursor": {
          "ref": "0c3e342e-838c-45cc-8a09-85d962112cca",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "655457f5-4972-42fe-9d11-a97dbc9ad737"
        },
        "item": {
          "id": "9e6df358-4410-4992-9f74-5a8e44c5a66a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e63d0eb5-e370-4591-ae81-38de852ed2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d828f32-1202-492a-8d05-3198ea4bcf4a",
        "cursor": {
          "ref": "aabca095-c8f4-4752-b774-51e1260b7534",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6f2f9928-404a-4e73-b0cb-c32cf2173bab"
        },
        "item": {
          "id": "4d828f32-1202-492a-8d05-3198ea4bcf4a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "afe34ce6-d724-4361-87b5-264e94fb1744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba6b10b-d425-4dc6-a8d1-a4362dbebe45",
        "cursor": {
          "ref": "56298d9e-e659-4163-a7f3-6bf7091c6405",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d6cdb2e6-3a20-4b2d-91ec-3ca94b352d29"
        },
        "item": {
          "id": "4ba6b10b-d425-4dc6-a8d1-a4362dbebe45",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5367a8a7-deba-44b4-bb19-399667354b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616ee741-23a3-4475-816d-6592ba6a044f",
        "cursor": {
          "ref": "4daf66dd-6a34-4cec-91cd-b9610fe1af8a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "45f11369-0e94-4421-8cbf-2d6430811988"
        },
        "item": {
          "id": "616ee741-23a3-4475-816d-6592ba6a044f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "072ccbf2-ef41-46a8-9394-85c69deb1a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f79b76-e87f-4ec5-8631-e2ce02f299f0",
        "cursor": {
          "ref": "1521afac-1bf2-4479-bee4-8a623a98f230",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "e4b9a253-8a37-4ffa-9029-97e3d53e90ed"
        },
        "item": {
          "id": "20f79b76-e87f-4ec5-8631-e2ce02f299f0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a86ba5e9-3144-47a6-b345-d1ce7b0ad63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b1406b-49ba-4e4a-9c61-b76ae41e0588",
        "cursor": {
          "ref": "31c8ff0c-f03f-4f81-b19e-8039ce7b8bc7",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "543f9118-ec7e-4352-8448-b70296f8e0fa"
        },
        "item": {
          "id": "37b1406b-49ba-4e4a-9c61-b76ae41e0588",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "04eb4f32-9ff3-4b06-bda3-2c4a9ced0e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c54cac2-e845-4380-b6eb-c9f5a64196a6",
        "cursor": {
          "ref": "ccd1d566-78dc-4f7f-b92a-b2b0bc9c5444",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f85b4aab-45f0-4013-b6dd-79dfbefeaff8"
        },
        "item": {
          "id": "0c54cac2-e845-4380-b6eb-c9f5a64196a6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "269e6cc2-98d9-450e-8064-54887944e147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0317c57-6d60-4adf-abf7-01c8f4197d4f",
        "cursor": {
          "ref": "4e86e7d9-c95a-4393-9f8b-a5e837a25a74",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e8a00324-ab88-4f7d-a82a-810db2b38fba"
        },
        "item": {
          "id": "e0317c57-6d60-4adf-abf7-01c8f4197d4f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "66f4bedc-5dbe-4be3-842c-9520473f5c96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "c40e0010-09a0-4048-a7ba-5628d1a52f0f",
        "cursor": {
          "ref": "c9a3916d-0a09-4c60-8b69-b97c74fba9a2",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0dc78e0f-301e-4084-af4f-730e86743a37"
        },
        "item": {
          "id": "c40e0010-09a0-4048-a7ba-5628d1a52f0f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9421be9d-59ec-4ecd-81a3-e2d95599c5f7",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "88696eca-8b9f-49ee-b973-2602897b7001",
        "cursor": {
          "ref": "f3e6648f-6a5a-4e05-83f8-d2d388aa780c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a9835376-969b-49f3-acd7-21ff40a8f31d"
        },
        "item": {
          "id": "88696eca-8b9f-49ee-b973-2602897b7001",
          "name": "credentials_verify"
        },
        "response": {
          "id": "23232bb6-0f48-47e4-a329-dd1b103a99e1",
          "status": "OK",
          "code": 200,
          "responseTime": 1878,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "96913159-0dbd-4bd0-8ba1-b5411323173d",
        "cursor": {
          "ref": "f7f6ad39-c052-4bb3-be68-f3317d501044",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "870fbb32-8762-47af-9ca5-f166f3670775"
        },
        "item": {
          "id": "96913159-0dbd-4bd0-8ba1-b5411323173d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1c87dca7-ee3a-4273-b07c-f30b06826b42",
          "status": "OK",
          "code": 200,
          "responseTime": 2320,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ee70c3-87d5-4f69-a92a-a1ad3580e7e8",
        "cursor": {
          "ref": "f4cee0a1-5022-4fc1-9a74-ddd7507d1590",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bfd4c0f5-0fc1-4e82-8d96-5d8a77a27633"
        },
        "item": {
          "id": "66ee70c3-87d5-4f69-a92a-a1ad3580e7e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9e53b012-c531-4ee3-9d4a-a0a3c4a58baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "66ee70c3-87d5-4f69-a92a-a1ad3580e7e8",
        "cursor": {
          "ref": "f4cee0a1-5022-4fc1-9a74-ddd7507d1590",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bfd4c0f5-0fc1-4e82-8d96-5d8a77a27633"
        },
        "item": {
          "id": "66ee70c3-87d5-4f69-a92a-a1ad3580e7e8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9e53b012-c531-4ee3-9d4a-a0a3c4a58baf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "4798d616-a0da-4e4c-a069-f0b5389a91b5",
        "cursor": {
          "ref": "185e6c2d-4607-46a6-93e9-d12f68261688",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ca9633bd-83d3-4b7e-a512-b7abd328b6f0"
        },
        "item": {
          "id": "4798d616-a0da-4e4c-a069-f0b5389a91b5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a4c0948c-e555-4fdd-9f0f-282f79fe1da9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "fa879d42-b684-405d-9146-a147850fe586",
        "cursor": {
          "ref": "32b787b1-36c2-4968-990d-b8ebc350a6e3",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "59726e6a-ecab-45d2-b706-a532758570a0"
        },
        "item": {
          "id": "fa879d42-b684-405d-9146-a147850fe586",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "37987bcd-24a0-478d-a661-4a9735e88d18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}