{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1b7866ed-2902-49ea-b1dd-77809247742d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3e503777-ba02-4f37-affc-cc2c8f6adcbc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70a99698-6369-4ad1-8475-efdd6c993dd6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ecb1b17e-e56b-41ba-b556-9ff6416e4dbc"
                }
              }
            ]
          },
          {
            "id": "efdb0d80-5b11-4b9e-a8b4-9dcdfc78bf6c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ae012621-45e9-439d-9517-7d7728811cb6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "09281e33-4d9c-4558-b886-9e4224eddb7b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c76a0823-4828-45db-b2e5-7cf6e182e420",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "82d9069d-3f9a-4869-9acf-a0d9d10fe80e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f54ae6e-e2fb-47a5-a573-967b9572e372",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "579f2e66-651b-421e-93b1-352847be2452",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3d511ab-db4a-4a4c-9c1b-b197e87f20bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcdab97b-37dc-454b-812f-e620745dd080",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34aec0a7-f46f-4860-88fe-8b2386347150"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d37e0bd-916b-4d38-a333-31a1bdb66d05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa54d4ef-be5d-42dc-810d-5fd324edb27a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8251e663-1c88-48a1-8dac-aa882dc558d2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "54dacfa4-d705-4abe-814a-0c2fb3d02e55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57336b85-55b1-474e-a21f-06255dc5b26f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eedda756-1d80-4dc4-bbaa-9b1b43207233"
            }
          }
        ]
      },
      {
        "id": "c2c990d6-024f-4db1-9c00-ae3ae0793cd6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b5b99bc5-a0cd-4113-ae0b-4b89976614e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "635729c6-37f0-4a5e-b7e1-ab37e53b31da",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f2d21c6c-d860-48f7-bfcf-adecfd014c0f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007f2b41-538c-48cd-a134-5999d1157a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72300f78-1e64-4f5e-bcdd-ff84a7822e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0d838b-b3f6-41a6-a8a7-afa7b52a6247",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67123889-452c-414a-89f3-80b48d4949a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94cd4dfb-e87b-453c-9009-32fad26938c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6168bb3-52a2-45c3-909d-59b3566acc7c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1317f62-a8ad-4cc7-bb71-75ab8b348160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c2c90e5-eacb-46ca-9cbf-315465d9180f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "320c1b7e-603a-4b5b-92ed-243c0dad5f57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67ead699-122c-4de3-8aee-d5ced1c962d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593b7468-2872-43e5-8cda-db3b8f91ed7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac41f651-f466-41c6-840e-112a5c255c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdba6e5f-d234-4579-899c-f4bc2e614452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd7b1b6-05e7-4f42-8a97-6a7aadc989b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61ea3e03-2dff-49da-b932-238fe8c73042",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8fe2b92-76b4-486a-9377-960dc4e976a4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6131abb9-7e52-4ce2-a288-cedc20e4d2a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9854d47b-99d0-4ac8-87e8-901159861fc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aaccc36e-36b2-43d6-b8e5-fc2fc59d1117",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "40068579-f23c-42fb-8ce6-7389f00b8f3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5002482-baf2-4683-ab15-c37a6b3aa1d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52a89239-df4e-44c6-9258-ef0c4d8187ae"
            }
          }
        ]
      },
      {
        "id": "b8dc5987-51e6-494e-b861-4e67cee33836",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "17db1d69-4cc7-4b3b-95ec-b02c7eb5fae8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4365f660-0ae7-4071-ac95-eae5005a2543",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5e05dc82-2501-4bf5-94f0-211c8a199331",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb6d2b-2843-44d0-aef6-a3aac73c652b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f85735-29db-4942-84ef-e52bc0a46914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27640b81-e997-4bed-b900-3f8eb86c3466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac950167-16a9-4dd3-9bd9-fdcbf071b905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ea4926-9a9f-46d4-a075-912571821db8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c844b52-6c51-4370-93d8-bcdde90ee512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e4dc49-497b-4e26-a5dd-6c5e7c3ea846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f56421-5c7b-48a3-a93f-22424cb58305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b0f39e5-3ef0-46fc-9a82-ad5af4e6c40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cb1d81-090c-467c-97ba-dc1664a777e8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad8518c-dae1-4e2d-b84e-db23d0673706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97777cc-3e13-4455-abe0-5fcc970ed826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ecdd74-1c03-418e-9ecb-c837ca1b71e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6eacdc39-e6c8-403b-9fe5-3cb2ca1a7b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d56eaf-283c-441e-afd7-894d65388655",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f993278-c9b1-4ad0-ab29-44ce9b4b12dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40f0ce8-d512-4a32-bb52-1e870e5ff774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d08ea27-aeb0-407f-910b-6d7bacad37cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f5b6f72-a856-425f-b85a-ef4dc8a63779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f6f78d-3def-4236-9547-38e3785cf846",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc30c55-046f-4cf3-b585-4559cac634f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4253af22-cb9d-48d0-b391-ddeaf6c8df5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d737b9e-8126-452a-b734-4f89f18301c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d93cce0-ce1d-4492-83cc-fb615bff2bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45c39fe-3f17-4fe2-950e-fe40e0909430",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60f3c72-0092-4f79-8cb7-53bb05c90103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4976bc7c-6c47-48d3-b9ef-4ab4063f5ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c254c3-007b-4c13-b3f3-9b2203e36f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21b1757d-f6a1-4792-938b-a771a609fbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc7eba2-2068-48e2-aa05-6c9b3168fec9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432a9554-9ad3-467d-825c-785f306ae10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31413035-13cf-467d-ae8a-f2925ec28255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb81327c-2319-4e51-b300-7fed61ef27f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5d3dd13-ac69-4058-9342-69903a59474b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17724170-076a-4e2e-bcd1-3621d07b136a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86799880-c05a-44be-bb77-482febb74010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab89bcff-8835-4ee3-b3a8-5177b95fb59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0202ec7c-01d4-4d61-ab95-4274b49642f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd9e520c-7bc2-4f67-bbf2-355fa2cd1fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b22a035-16b4-4dbd-bb98-c6425f62899c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759e2d87-de42-4af7-a690-498e6b169675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb69a055-5516-430e-b1cb-964d6171017b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af64290-fd9a-4f46-abee-ee6ae1ddd09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412389a4-b32d-4345-a5bc-746bc73d3037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2bc23b-6fb4-4ad0-8140-2eb4d72c0f3f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233f2ad3-c35a-4f90-ac3b-5950ed69506a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c777be-76b5-431c-a4c7-b63be364e824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259e5188-f9fc-4c96-9650-fba2daeaa3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7875c80-ad26-41d2-a13e-67e163909845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723b884a-643d-4024-9d7a-bf3f484e70e2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e382a9d-79c8-42d9-ae10-b22320cb30c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c43b818-d225-4779-8319-3fe3806d7a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1deaba-2444-4d6b-9559-49f2fcf3b3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4483541f-2476-4a6c-94d1-f2f961de52b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342d93f2-ad97-4185-ace6-ca95994ff463",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b5e05d-ed68-4f9b-9c80-f7a268219010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7044a23b-d9e2-42d2-b97a-25392efa77a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52a59c9-6cb6-43e8-8201-e3f699edd3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d73d8564-4db9-4be5-83c7-ad2a700b3154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9371d03-0627-4f09-a9fd-4ddc7676eb72",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3619d7ea-acd0-4ae8-bf53-5a9ddc82112e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8724560b-c7cc-442f-b9b8-89a851620d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e0cfb1-596e-4c62-912b-0b5141b938c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9077b4a2-7fdd-4dc1-8548-f9750fd84864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2a22f8-e986-459e-b0aa-2c9c1bf68ea3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c21e9a4-81bd-442f-919d-e8c1d7d37594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a893740e-614e-4eab-821e-e76fc01929f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1266fd56-4d1d-45a9-a18c-ac5c8cf1a099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f34cedb6-c75f-4cd3-8e7d-8d9c439391a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44157f50-430e-4b0d-a546-658d606508e4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4de23d-b719-4143-a716-728188b22c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecea4190-1bbd-4583-9535-c7170963e2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e4478b-e099-459e-90ab-d4757c138d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aad6c50c-7c0e-47a8-b074-d68d020fc8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3415148-fac4-4e90-8bf2-355b3153e284",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe78d84-87bf-41e1-9d2f-4b25d73f2965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b96466-a4aa-47c5-a139-4937b766fcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b1e720-cad4-4a77-9c65-415e2d562921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72fcbad7-393c-401a-b8a5-092612c19474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e4e431-0b5e-448e-b92e-214992fafb0d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54c4598-4e74-49aa-816e-6e06df38e969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26881838-78f9-4c88-838e-50246eceb096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b866a8-f74d-4603-b61a-fc0c6a89962f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9673add-6332-4843-b761-ddf411b1f208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd622f24-a549-44fc-96c2-1ca25cca78dc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073b675e-2325-4dbf-b625-aaec6ffe4adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6f178e-6ab1-4c42-9751-569f625cf28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84759f3-0b74-48c6-b8ae-374c7c77a0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be03a0c-1468-4b66-b9e5-c5bbee1001ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859df894-5cf3-4dc8-a811-b126967458cf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdaf974-7e31-4c43-9c49-5343e25be48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b6a428-7813-4506-ae12-25d265ea3865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5211d1-d1b6-4c3a-8e5e-0395569ae943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff127128-32fa-4dc4-bb6d-a8d3e7f6b7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b116cca-a5c1-454c-a3a0-9c875ba828be",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c7312c-7d70-449c-95ba-99059138442c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2918b540-a732-4b0d-9712-a955ceca26f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e392a5c-4aa3-4504-aad4-bfeb60ef425a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eae7c2e-19f1-4a04-b9a3-2706b2fb6eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f527ac-b741-417f-bd2a-68aa3e21be69",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aa1ab3-7495-4884-be1b-f0f68bcbc7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083c442c-079b-4666-ab02-fc25cdd0c7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1c0ca8-8063-4f1d-bf39-9996fd21e56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47100475-e806-46a0-b043-958050b3029c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120bcf29-94e4-4000-952f-8405380a33e4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72faa71-d4c0-4243-b0eb-134128e98b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de59aa47-541b-4514-8ddc-5a5b33f6decf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7631d12d-8722-46b7-823f-93b1b66d3586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e714ee6f-be09-48bc-a9b1-d28262c7bb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbf257d-d15c-4dc8-a7f3-57a9a0ee788d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98d71fd-fc1c-4708-9568-9e9bbac2945d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c371825-72b1-40a4-b64c-81ec25604f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750c8765-5772-41b0-9c5b-aff694455da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca31238-a7ec-4f53-b9b3-bfe55c0b7974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a84d2e0-a9a1-4123-837f-f41fe85715cc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28ba440-5e1f-421e-83b0-e629fad8a1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09156f10-aaad-40e4-b513-117aea087128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798c8638-fcf6-4627-9a06-7294193034b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0fc28f-7152-4799-84dc-434e569a902e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fad7f6-066f-421f-bee6-32d17338bfdb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323c00cf-1fd8-4219-a302-dd12c96efe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7294b865-8ff1-499a-9f6d-521b11626afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590c6b77-9f61-4826-9ce4-e27f2d471638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f789240d-79d3-4d98-b37f-59d8fd6b4911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02555dc9-865d-4534-8e6e-f7245caa6bec",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547b22cc-3821-45af-80f5-27fc533c0aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cecf5a0-60cc-412e-bd3c-b2ffba80111c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328457b1-80cc-4756-acc7-fe501768d13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd8626b-9390-4bc8-82a4-7e70e0117602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae227e9-3e95-4301-98ca-3dac28a3987a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52da9660-03cb-4039-b6a0-e66ba860f2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502a78e1-2707-495b-86e1-32abb9276617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238afe6d-3eae-4c1a-8903-7ca7bccef47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a65c96e2-6c39-400f-9364-6dea8107e9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b55f666-be45-4a10-8497-077f702c99de",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9431da4-8f0a-41c2-8d14-b117e274716f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb391065-e195-45ea-86d8-073e46571305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b33aa5f-f75f-4908-b0c0-c7dfa2aeb821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46d5ca48-e8f3-48d7-9fc2-241b53c10621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152b9f28-bc5e-4493-aea3-bbc85c7bc21c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324389eb-3770-4ec6-903e-df4b21588ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d9d8aa-9b2a-4430-b513-c97045cb6705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8abdad8-2566-4812-8da1-240127e12c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6c1aba-199b-424b-9cc4-50fd38d45c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a7d8bf-4973-4228-8c32-915b8c4130a8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10a9d96-ed94-4da5-814e-2e12f953a684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6436e4fb-925b-4232-aa23-80bed4159778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d0860b-4a81-4e81-8111-dcfb24721d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed720a17-e2aa-4df7-9af6-ab6e06d704bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717131a7-f162-4ed9-bd73-af8b37e53eef",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b1c3d6-2df7-4222-ac42-a1461104bea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00713e9f-1d07-4fee-a45e-e50a6b5475e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717529e4-3116-46af-9fe7-627f8111416d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc24c72-e3dc-47ee-900d-c1664ec43dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab655a22-d2d4-4415-a1ec-9e90647e31b1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c0403d-f1c0-4db5-ad03-75fc73b8ab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9bf2c3-127a-42a7-99e5-0b7a03b733f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adcc8c5-4e60-4c00-bf62-4b5ea3a112ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e87479-7508-4de6-9a33-1f0c94bdd286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7148bfe4-bdde-4087-aca4-f374307283b9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae87c5c8-9239-4da1-be79-28c8c8a80a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea28548-cae3-4d15-b9d8-646301bfba51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fd0295-f6a3-4a6b-ac5e-16dfe51a4f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86d8a6cb-10dc-4e53-8004-aeffb4a8e38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8898b51a-5cc8-4ec3-bc64-f2888512224c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1045d616-7349-4b2f-a47d-8054d7d3adbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a810b9e9-0dd1-47f5-8487-b8de450156d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a8809a-d0ce-4dba-b4b9-5ce6c8abbd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbec0bdd-77c6-4d47-b6d9-151eac29d081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7140686-a554-4775-9050-65c3f4fe01c7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1e0642-0e1d-4eb8-b470-b67b2c509b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cf1483-1edf-4149-b4a3-a018c2a227e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b0ae35-60a9-4905-8940-76e5b7bb221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "694f3513-d9e2-4689-9330-b3b419a8e54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e4f2a1-0ced-4e69-8458-48fd752dac53",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16b9358-9020-41db-a129-af137e8e5b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa6e2b78-4d4b-4b44-a2cf-c21ba241e2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51fd60e-4ae0-43db-9231-9c917ce23431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b71c333b-22c4-4f10-98e2-1263690d27ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f901b6-2250-4b06-92f7-e63b37ab6d1e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8600e5de-01ec-4025-8a4f-771a0b4c81f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c58aa07-a3f9-492e-865a-e4e717836966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a038982-bc23-422b-8052-4265e6179a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "daea8c6e-3d2e-4325-a735-cab4b87fdfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da30c448-9aeb-4c86-a68c-cb177f33626c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5ebc9b-30fe-4a4a-86c3-cd72cb4abce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34786d1d-05fa-4fbd-bc56-5860776e9ed7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9c2397-79eb-4c81-9b7c-2d3ff2ca4084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6644886f-bdcd-4969-932d-953a6c04f2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebeb908-eead-4187-bbab-068d77a54315",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbb05ee-5506-4a8d-baf4-de154cbb8903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8c47da-4cf6-4955-8f7d-9281fda3010e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51eb905b-1d58-4acf-97ac-6b00a86320e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f521563-11a4-441e-afda-80e204463ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6341234c-489b-46f3-88f7-150a1abe6221",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cedee3-ec3e-4df8-913f-4675a8ed085f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628f3825-0ab4-4077-9490-5b0e009d8491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf5bc23-e3dd-45f3-bfd4-cef03b793847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "37cbcb9c-1703-4e37-a757-0b3f48aecf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a50cfe-dac5-450e-a95d-17797ea4883e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a394ed-1b2c-4f16-9120-3727719aeef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da249c9-2a8b-4fad-9cd3-3d558b339fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bd02ba-6d99-4ee1-9baa-cf937a5abbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "320c9738-de54-4169-a0a7-fc20e28bc367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ec1aaf-305b-4da7-a3d0-d35c38a3f95b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad8b7d3-b112-4810-a277-1aecb910e136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd15a787-2539-49bf-a6a7-bac77ffa9e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7663ec-59b0-49a1-b1ea-19d704535a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0c2748-cb59-4342-86cd-5ae21e216211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f833dd5b-c703-4c38-9319-3ee2a558d2ee",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e32899b-f553-4c4a-ba23-1d5bc38918c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830a9427-2448-41ca-a2cf-bca4414221a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e14aaf9-e298-4b6f-9f34-fc37fcebcc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae9d0f3-fd8d-4a13-ad67-41e5512c3bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60004a92-306c-4e51-8270-479d1623b742",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5653e318-5dc9-4a52-9532-35f4a74a7a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710509b6-d5b7-4f1e-9aff-c56c01777e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2c8b7e-bb4d-4683-8e22-7e6e16b7fd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d31e447e-f9a1-4896-8f18-69dd067e5b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e7d936-cfe0-48a1-bb13-bf0e07934601",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8ff56c-2959-4e92-8ac6-c1c2aebc17c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d79b929-ba23-4c50-b6ef-2064083e246f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9684e05-b796-4094-963c-5fac98d75fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bec106ab-fb8d-4c89-b5dc-d99a6df46b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a8638a-e1bc-47af-a0c3-e9640d9dde06",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9bcb82-bbb7-42ed-b43a-9e1af1b3c000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a724d05-5464-4c1c-b6c9-85fd1ad932ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc437c5-ae32-48ff-b074-f75a0ec80ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d38aebd-60c5-4cd2-94d1-553266057a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d4f1d8-12d0-4761-be52-4819b2c7c6e9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab92e56-6640-45e8-9702-364d94a1f551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17be6533-928a-47a9-9398-c8e183d66588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b03a4c6-6416-44d8-9523-34dfe19a5a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "507d1fab-5db7-4efa-a6d2-a30f9025774f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d40cca-fcbc-4af6-b236-2480611467df",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c21ae5-4a0d-48f3-af9c-661ad4265aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfa3db6-cc61-427a-ae83-b28a67c4b9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b046b8a-52d2-4e91-806a-7995b968a841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68677c01-8293-4d6c-93ac-5149dc482e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39c8a32-563d-4bf3-98f6-a9084d295156",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b1e828-977a-489c-b6fd-d0b7c33d5063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f84b57-45d9-4740-b9b2-e5b85ca9e7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bfa375-cf52-423e-9e68-5c75f6502a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6aca02-638f-454a-a8e9-67cc2d75abe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1514849-7f7a-496a-8b7e-fad2b3f72060",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db8150e-fe8e-4fc4-903c-81f48d5ed242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845a45da-f9c1-4f16-89c4-6111713012e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a67968-598a-46f1-af98-8457613547c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "775b697e-3a5b-47f8-92e4-a0d625bc0b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba17769-1180-4f27-a138-f8f9b5727951",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b71ca0-b78a-451a-a9ec-528743342ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fed5e70-2ef6-46b7-a4db-87aee7cb5c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5060fa2-7645-489d-8786-ad138ca5d2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "187bf066-7b08-45c8-980c-020cc0f9213c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f142459-f434-4fe6-b25a-a48b633942c5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb9c00f-abbb-4df3-9991-d843e1a17cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e95550-b252-4a85-b188-f99766dc6c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b28e3e-1250-4640-a7de-b63dd3bc7935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec72553-6a61-4bd8-bb3a-a22dc4316ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dc58c2-991c-4d8a-beb0-c65988b4c688",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed6f1e0-8d80-4b0d-a532-fc1d90ca8916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dac12c-038c-4bff-b39e-82499fd0c397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430d1bfb-039e-498f-99fc-5963c6852873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41c11e87-6b32-4beb-be3b-af5401ed1218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2528b603-fed0-4a8c-9886-eec61c648fb0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00139d83-e641-4b71-b909-7c5043b60ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b79f9c-31ab-4ebe-bd0d-761bf58f3e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830efdb7-ca5c-49e0-84c2-7a2795c80740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b23b0b-0619-47fa-a30b-ea3a0ac29f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edc1e9d-c1c0-4e9d-adcb-02ef337490e2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc6c27d-30a2-4ea8-ac8e-46c16561847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "722839f0-b5fc-4747-b35d-76c9fac4ca70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111f1269-c7f0-47d2-8d01-871ec416d127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bed7824-fc88-4586-9a53-b79283590a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a1203d-e0ee-40a2-9ab6-d21aba3f0764",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188c3cc7-c816-4a3d-823a-ff0e490bcdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08986533-99f1-4267-8cee-870d3219e6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59b4075-7819-4d11-b038-a6b554358fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "db39453e-c1d2-4e3c-9f39-188c7eb11185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d18ef7-83c2-4948-a59a-08e1cc3e35b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78b63a7-2a42-4804-a0af-0621768ed0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad50255-c63f-4459-8799-facbf0e0aa9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9145fc-2457-4b47-b2f5-e1ba05ddae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0f0f24-90cc-40be-a6a4-a54a1205a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087633e-2312-4615-be43-6f4d01f64076",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf62e03-a8f1-4aac-aba8-5007c6aceccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec58f8cf-887a-41f4-922f-47a1f73ddbd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdba020-573f-45db-93c1-7772bae75a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dec80e30-2baf-4680-9d46-1d548958792e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce5d3d8-fe9e-4b4b-8641-6b9e6c76ba12",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e48d288-88cf-470b-ae5c-46f5ff1049fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503bcff8-5989-4cae-8afa-496ed5be41cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b7a447-d676-439c-b89f-6f197c816e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e90cb2d-fbf4-4b47-856a-2405f9b9b8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc6f481-cde8-4b77-9cb9-cdb952298066",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf82455-51bc-4e38-9fb9-18bf69672f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf32e93f-cb58-46e9-b594-8ea48f954ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ca7504-54ea-4738-9c10-e2629b089ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7acc36-d469-4cd7-bf6c-067584ebfade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61242d3-f337-4bfe-8296-67c60404581c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0afa1b5-dd42-4b97-b7a6-d61a958383d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d26b1e-e8be-4033-99cc-28f9262b5db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3d3503-94fe-4929-9525-d08ec840df19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ddd253-ab6c-49fa-aed9-ac6eb5924c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7d36f1-6d8f-41cf-a33c-8024c370e166",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84dd333c-968f-469f-9d15-1f2f1b65a399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94db60da-723f-47f2-b66a-55fb1caa1c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6214bf-b884-4ebe-9205-54bdc79d73a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "27231124-3168-4f95-8172-c65bcdec617e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bfba87-8632-4836-8b50-2bc13800bb1e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3254fe-db47-4b7f-9497-5b2f3708b242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5611a2-5fd5-49e4-b54c-10b0fd4183e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4979349e-42cd-4512-971c-0f46ecd68d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7db85f2-cde5-4a8a-b9d9-e34b6622c3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290146ea-ff1a-4a2d-8a75-60182f3df86d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f767918-cd74-4725-b8cd-09ef70ea04d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29314bb3-4f6f-4a6e-a908-26e3ec399a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b313e1-16fc-4077-a379-d836d8e9e9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ae0a7e-27da-4df6-b149-bb1baed43075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba8201d-203c-4c26-94cf-c3070b8d7cfb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc9892e-c178-4af8-83e1-2c51559d3e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67f73d4-4b93-4777-8b25-5f22fa3454b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef56f9ab-0a5d-4783-8b8f-2b494a922f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "225832b2-953a-450c-af5a-daf525a4227c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123f7595-2908-4cba-ad0c-d4addfc14bdc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc299918-cbf2-47f3-b2d9-d9d03569df2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe62e76b-7631-483d-9b52-cc336593e80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165b0a90-0bf8-4ced-b222-3a2feb67b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "121bccb5-fafc-4729-993f-0145377aa0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33ea273-e6a1-47f7-b4f4-58e9f0d17913",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b908fd76-12c8-4e46-b647-caf80da30c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eace417-828b-4f8c-a21d-f2810dfa17aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219081b9-ceae-4022-a33a-248a8503e8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "601e850e-fc6f-4da2-a0fe-f10b06211e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee478e7b-23ae-4c49-aad4-4b257e036568",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d717763-33e1-4a1e-9eb0-97916125b8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1557e0-60aa-4930-9dac-0a42ec5981b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a11ad2d-c727-4f65-b5a6-ef09f3b8a118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e771ea-97e6-4a5b-8966-15c460d06d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f026a30e-246e-44f5-bfe8-9b7761e5ea63",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffaec3d-8ff2-41af-b7dd-a794785d69bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c4ec87-f085-4690-80d6-4e6930c2513b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b834f4-4139-45ab-99d7-63bff9e4b679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "25632925-1a56-450b-986b-d876c3bf245f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff35166-a07d-4963-97cf-326996899284",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47305619-7617-4399-85ba-186724c05902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38d14f0-1018-4ea5-ae5b-dc0ee9be24d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34daf0ed-8435-4c2a-b41d-a07777178b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a79748-68fd-4679-8ef0-76e9b6067a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81fa5c7-dc5d-4d52-9049-16bed18cf73e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636af51c-cc8c-4f6b-8281-5f0dc6c01231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26e2f4d-435a-45bf-932d-4c866d7325e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbd0294-49c2-4f32-b405-a4b29fb3e556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a0cf16b-ddb4-4be9-8181-487973d8dd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f749cc-cf83-4387-9a1c-fccd714fbab3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5e2864-7e9e-47a4-bf75-a96537efb5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e011a4bd-d87a-4223-81cd-a0effe061509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccdca87-13db-4455-973f-01649942ba4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b0e030-fd2e-48af-a2b5-26a07ea93233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df5cc41-350a-421f-a401-211c70a46c8f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8511b635-29d0-4d7e-9f79-50f1ab5875ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21630c23-a76a-4edf-86ef-184542907a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b23635a-d207-458a-a36c-5285ecab3e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b02be2e7-c288-49aa-986e-3aa0b42bf221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23f764b-c47d-40ec-b22e-a22fe2ba4a66",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219f12f7-117b-4e17-b55a-7dcf854dff12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4e0320-509b-42a3-80cb-9011e6786b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed67d847-2580-4fda-80d1-a8e1fb3d2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f895b0b8-edbc-4ddd-a8bf-366b409e2b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b723ea71-c1d2-4cd5-ac05-d17e07eb11a1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5d052f-6fe0-4fc1-95d2-3490ab8b63d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c74627-9be5-4164-9d94-c53716d117bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4566c8a2-b14a-4b98-870a-435ca9ad19b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08754251-3c7e-453b-a5ed-1178452d3fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1745864f-c23b-409b-8004-43d1ef597ad1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e7a2f1-be65-4d51-a1df-9d43e97e4441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d8f668-f9b0-465d-af61-f4d775fa0fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf3aa55-fe7b-48ee-8efd-ca2397b05d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f690d1d-976f-42e0-9cd4-70ee9e607a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795a5bc5-92c2-4fb8-9d2b-aa27568f52b1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eb19b6-5e48-469e-bee8-35fa40fbc2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ce462f-0357-4ab1-978b-2e9cc599e876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0e2056-7b71-4dea-8782-6304894e9985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52eb28ab-8467-4b52-a056-775f24f48d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7280b3-98fa-4fb4-a31b-80c1b8cb16cd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136e8755-8df6-44a3-85ae-ea5475644744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ebd560-98ac-4050-a42c-ba4b5e8b7450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061e67f2-6b96-47a8-9455-55dd0c336dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e7ddcc-e7c5-400a-a737-39c800280fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028b13f4-14a3-4b39-b8f4-68bea04b3180",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122a1e94-2a23-41fa-9afe-3ef330228ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab967154-4221-4238-81eb-a809b36a677b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c051f8f-62c0-48a2-a262-78d7d173b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8388b8e7-cfd2-499e-a91a-865547c87284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63335de4-6040-4d42-85c8-84993d6ce039",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82eb6b3b-251a-4300-a4cd-f043364be184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0b876f-827e-4283-825f-75f56e353b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1623ac7-a3f7-4e6e-950f-0a0ade92e01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c8e12b-99ec-449b-b4c9-83a9f412a209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ca2910-0978-4220-8618-df41f17a7bde",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c602ff94-8a06-4439-91da-099f60aa0030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fecdf0-0fe8-4968-998d-f54525f04a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bed4a6a-aaef-4fec-b0ab-d052a149cfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f2a401-0514-4c45-bbfd-d6cc028f8fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c0c030-df01-4639-8308-de6cefec546d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191081f0-51c6-4ba5-b185-16dee1bc9e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3913bc0e-0fcc-487b-9223-1d36a811fc69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c4cdac-2dba-4a52-b299-4e12c0da64e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21dba35c-88c4-44e4-ad33-00c08fef326b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ab874c-6551-47f6-963d-081c9fcb54c6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aacbf6-a0b2-48e2-b2d4-d2936a424605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad583c1-17cf-4d8a-93f4-83e3e736e5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3feb6f2-076e-4349-86e5-b64e64d85f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45d61a5-25b6-48d4-92c3-55ae78e5b843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc88eb6-3f2e-4bdd-913e-837d11cc8002",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6087b62-eafb-491a-85d6-21e0a914593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d404a88d-2838-4c00-a813-6248eee4ebe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef475a8-b549-4419-a892-35cba6ca65e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "883589fd-aa49-4c35-a3a7-49c70e0db78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f10933c-67de-4ab5-9af4-edc4fd810991",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2c80a5-8fab-40c0-88fa-b0ea1a80867c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4356e1-e806-44dc-94eb-583f0bfdcb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b2ddb5-3321-4553-9a61-b9ad8650d493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13ce943c-2f40-4cad-81a5-3f0c60d09730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80043979-d4ed-41ff-be59-cb5d4c8c6e25",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72d150a-9fab-49fe-a5fe-30e7386b072a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8383bc9-a380-438c-a9b8-409c78dea777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59a17c2-7865-4eb0-90a0-cc807fc6ddfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f88d8516-05ec-49c0-b30c-431797905905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6943640-6675-40b7-ac19-d419d2fff46d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ebd0a0-60b4-4980-af5c-394f52daac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0fc156-842a-44af-8200-c30c3a132d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1ebceb-f7ff-4ab2-8a4b-a08409838a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2356fd4a-4c35-46af-a788-4608256169a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed6534d-0aeb-427a-8643-907aea470c37",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214771a3-5f76-46a8-833a-3884ebeae603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d50feda-e7e5-4c9c-a78c-9316825df2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80cb58c-2a27-49d3-afa9-a13a542a97b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7dfb9b-9c8e-44f1-b746-613410c06cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fd6fbe-e8fe-4b93-8383-399b452419ed",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c6dbaa-6c84-4c08-a377-e2686ae92761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae62cb4-181c-4436-99c6-1b60778355d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71546cbd-2346-4331-bb60-16106e8175dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15ecf6ee-b324-4931-be90-ac285cbca4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0367dee-43d8-4057-b204-61dece165e39",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "effca58e-5357-41ae-9527-0ed389040cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1555fd23-e31e-4988-83be-95a663c4ab7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ddacbd-0ba3-4c04-9f35-d4992ef7323b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c65c41b3-dc85-4588-9615-eb90138bf2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054def35-efda-4dee-90fb-0db608702abc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6087991a-b8f8-4f5f-8cfe-8022fbe88c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1007810-bff9-4bff-bf02-b80faa3d512b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3336319-b33b-4c2e-b02e-2903106bcdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa02d1b-97a0-4ac1-91a6-10e97865ec51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5de621-53a8-473a-a1f5-31fd9538ce10",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c52decc-338c-469c-bb73-b4b8dbab4e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6879cb9e-a5f5-4d9a-abbf-a86c5e132482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa447e11-307c-4922-b5f6-d29c19d2fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "385d9566-be28-42f7-a045-2bf18f037cca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "10114e0b-b201-42f5-84a9-4f893fcdbfe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc94c8c4-6c7a-478c-8528-6ec2c3d70c4b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c6fb37-9c54-418f-8123-bb99a0aced9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86350ff3-efa7-44fa-9020-06fe054d75f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318cd448-62ac-4d0d-8bf8-d003d80631c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "654783f6-677b-4ad5-ac98-4dbfe4d1523b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "862f2277-d92f-4fc3-ad2e-a8310382bf21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b979ae2-8189-4a86-ace8-64d02a8fb676"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2a0ca33-5b40-40d4-9998-bd45b5698401",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55dac088-fb53-4b93-a040-90e4ed4e4f0a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "672a9ed3-ab2f-429a-86e1-45bcb93b0748",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47503c29-a83c-414f-8673-4d090b98db3f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7d65d7e4-d6f4-46a9-a9cf-dd6487387c17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afa7f635-d897-4dcd-a3a7-f05107554ca0"
                }
              }
            ]
          },
          {
            "id": "cfb99961-7749-4a29-9813-f5836afee265",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55ccffb8-0ae7-4b0a-8536-6936b2a62905",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7a37d825-fd68-4a6f-b449-e6d1cda79453",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8bb325-23b6-46eb-83cf-a289f49837bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4b4285d0-1cfc-4724-9b48-1788ca1bf682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8330c968-0256-47a9-8b02-02641a38c25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8c759f-0209-4efb-bb0f-7ba08ef24efd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9792c0ec-be54-4d68-b867-427b9bd37dfa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eec7e5bd-f664-4f58-bcaf-0d071e37649d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0625adee-66af-4d77-a3c5-cd1e6fc6e861"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88e98c2-e969-43ab-b069-8e37438d7a68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "634222e0-8191-4ffb-b0c9-f065047a1ceb"
                    }
                  }
                ]
              },
              {
                "id": "864e7449-4057-476c-98e1-378d0bb3e182",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f2836a1-6555-412e-9a9d-d050858c3e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6276302a-226c-44d9-9c25-45e5ec40eb9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "299cbaab-02a1-4919-9d6f-4de35ef58179",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "210970a8-aa43-4f84-9056-e90f4fd8d2db"
                    }
                  }
                ]
              },
              {
                "id": "7eb8db9a-b89e-4f84-a9e0-5fb372c951d7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f695341-aef0-41fa-b988-c1564c56b3b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b34283bf-d3e5-4583-b2c5-48700187c53f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63eb66fd-8d40-4230-9d6f-fc48f10654f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a58f05c4-51fb-4d2e-9e9c-c9d5b26b079b"
                    }
                  }
                ]
              },
              {
                "id": "ae7b9b32-e853-4a89-83b4-3dbce092fe6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9bce511-2ecf-4010-a331-e4ddc7d5bfb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "563f8092-e187-4a8e-be91-23c20c14f967"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52e61225-8fd1-4d88-a35d-ca49528415e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c6c4ad76-b2a0-4a0e-a1d6-3860fc5ea71b"
                    }
                  }
                ]
              },
              {
                "id": "b2ff3cd6-1ff7-4961-84e9-5d6e1d48fa62",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86cf39d6-41f9-494c-be78-2ac89946f219",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a70e24ac-1090-4ff0-ab9c-67fecfb18834"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f8c538f-adb9-44b8-928f-4dcc1da04f53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "408105bc-2eae-42a7-8cb8-7a6c9c238ffe"
                    }
                  }
                ]
              },
              {
                "id": "c8bb6126-b32e-4eea-97df-23fe2592a0db",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e977af9-28ae-4526-be5c-112fcc9cf7e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b82d9068-e608-4c14-8a46-d53a7948e275"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d12e131-1b3d-40b2-802d-6bddf5a1d137",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "16f9823c-d30d-4b59-b510-b8a12a9b75d0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "095cb3de-fe6c-484c-b0dc-cf83286ef559",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c4ab802-9ee6-4120-860e-7d288643e746"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95486eff-c948-4ddd-bbba-1c5d6ef0a284",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76145aec-0c5e-4275-aa8b-21d04b44ef74"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96291771-ddc9-4852-8295-3b669e7c5465",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ae3e737a-1c60-45ff-9d85-cdfced1b03a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e39e3535-7c22-4234-97d7-97fca9a17bae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df548b5e-2da3-489d-860a-d08a9dc61f9d"
            }
          }
        ]
      },
      {
        "id": "4a56a992-c057-4e81-9727-727f349a65b6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9920d00d-ca04-4a31-8172-33372d610bc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfaa080a-5f48-4841-8fbd-f9012033e880",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "68159b8c-718c-4152-9627-cbd97cc027fe",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8444e51-48e9-4ca3-ae9a-bb71ff16f0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616740b1-ea24-4971-a665-69374e2f31e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344002e9-0d92-4dac-bf41-fdfff73b06e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "29875a0f-77ee-4150-be75-0a341d0c2774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e38e4f4-911a-4327-aac9-a6d366a22ee1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f220c40-f27e-4cda-894d-6121ef684ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b67b78-c747-4756-a8d5-b23c2f4effa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ae2427-6a6b-4dc2-96ec-540b256c104f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c75fa2bf-1638-4e52-aaa4-b2c90ed9b18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabb971e-d9a5-41ae-9b59-dc77ef047c3e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce826ee7-eca5-417a-8c1a-39d1850ff8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69243289-5e45-4fe6-b677-30b82b0c257b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea07fdf7-3a27-4b31-aed7-5062afaa50eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb61361-7cc8-4d95-a284-f11f7ae1e9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc4ad30-1a4b-40d3-b6a6-8d72a6b84411",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb13ae36-e498-4026-ab09-9d4d1dfc61d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380b1eff-a256-40d2-8ec4-9e64b7a5e1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c64e95-1f30-453f-b319-6f47fff91f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c005ee4-cf41-4d0e-8aec-be9828675780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72289b95-c9f7-4bad-84e4-44f74dadcece",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f29991-05bc-4974-9968-23eff9439d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975b2b8b-9705-4149-b443-59308173dbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a008a8-1222-44d8-9c62-316d5fea1e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a83e916a-eb42-4832-89ef-78313d5ae026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f207ee92-ada6-46fa-b00f-33a62f82bd91",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f789d44a-bb4d-4c7c-945e-1740094bc018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735491ca-2ce8-41ec-9c8d-964be86c450c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700168e7-1d20-4720-bbc2-a24ced213f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0b8e81-a6fc-4e4a-906f-0c75d1b1b0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd95c7a-1954-497b-bc69-6e558c5ecd8a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1211f249-77a9-4b8d-9907-a27350cf687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ed7541-8b9c-4b93-b082-5b773dcf9c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411f49d-1b39-4436-bf9f-39e957563935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "11628b91-5657-41a4-aff9-af4d54b009ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f562ab15-af89-4785-9670-ffebec014838",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236f4802-5ec5-4dec-bb27-ee7a4b37281f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591bcfa5-988c-463d-9f66-f6085aa32dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4512501d-4757-4ec1-82cc-013d25560586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9a429a-f5b1-449f-8797-ca8569ba4692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbcc160-e374-435b-9bcb-f7393ee971a2",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501f7a02-30b2-4aa8-bd82-e7adae8ae9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4244128b-f55b-483c-82e4-9c62bd23a932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8186df28-db5c-4cf9-bd80-a1da897360ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e71e9e66-837f-4bd9-b1e5-ffadffdf1a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e9a0c8-884d-4b0b-a352-8eb49137d104",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569a860b-4a4e-477d-a6c4-688af641c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42462f9-cfc4-4920-b6ab-4c8a43f8db49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53ecbcb-6227-4be5-92ab-3a6020127c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e97918-af70-4b01-98e8-c1ea0d14141e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a47e6e-b9c8-4471-9d42-d5b954dec6ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136d705b-fe6c-4050-bff2-edb8e5c15d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e87910-01f4-4cae-b57e-eb89a326f312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c2eb05-403c-4245-8787-d4360d01e426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9e39468d-c75f-457e-8b50-71ee18148b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabdd0af-c9e6-40b4-993f-91f36276262e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3275c64-2cea-476e-9259-84eaee343984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8d5d78-9139-4fb1-aa24-9f8283b7845d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d19ff84-365a-4486-9bfa-51fcd20159d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97d092ad-80fd-48e8-ae1e-612e900b62de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1852c147-3e65-43b1-a0f4-4d7cc6c57be2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07749867-68e0-4631-8f6a-81cb6dc39d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17af62b3-cb2f-4709-8d69-70ddf32d24b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47af8e2b-9770-4008-b0c6-1e8f15da353c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12f5da59-a338-4b5d-aabf-87f99f204589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe37e3fe-50e7-4f81-8ac8-4a9a9c34913d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c2fff9-4d98-4aa6-8c2a-ed94380b227f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453adaf5-ae89-4b05-9d7c-c56a1afc0c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230f01cc-2dd3-4002-93bc-cbdd70b405f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfd43d3-0c20-474b-82e1-d163e7a6afbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202a8b8b-fdbc-4a15-9c44-cd4c82b785e8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b55c34-b285-4bf4-a0b6-274c32373bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff335b8c-25ce-459e-8a8a-699fd110d3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9357b643-6e12-4c2a-ba12-436ba8523a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb4a6ae-2683-4087-968f-d38a278184d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7008f0b1-b034-47d5-9884-fc8ff1cfc7a8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbc2701-5d4f-471a-96fc-29148436c9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3002551-ea02-412e-89de-5e5809a176ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2ced75-5978-4248-a528-5095ab130494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6829707b-762e-4699-b16a-7b665a0f6e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64373b69-449f-42eb-a5da-1fdad0e98902",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ad8b57-fe74-435f-9010-91d42008ea8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2800a5-db41-4933-82ab-20d9751740d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3a909f-6895-44af-9d2a-dccf8fc4e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fbe4126-7ab3-436f-a3c7-3d361657b0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0736539-ce4a-4805-b8d6-0d250caf21d5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8c768d-d3ca-4287-86f0-5ee564ffdd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd16699b-9af0-4509-bd29-1d20793f44c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a467bdc4-81d2-402f-b83a-c9bd2523c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c94a4da2-abf8-4a5b-a5e2-26a2eee40b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df71580-dbed-4b23-ac89-fe5cc3b99e3f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b523f1bf-dc0f-417d-8fc4-3ed7a79a3df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb93ab2-544d-4f94-9422-bac9d31fc615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6a7833-3154-4ad1-b00d-db50454ca914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebbd879-9994-43a0-99ae-10809c0a90c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c94785-9c3f-4b21-8592-1aa863d9b91f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b858443-1394-4643-a79a-f69110aab6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae1b90b-b6e5-4106-bcac-bf411bb23b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58bb5de-529b-46c2-8240-42235363dbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b0320c-92c1-4dea-b80c-3160bd5798f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328b4088-e19f-4568-8fb1-72bc4b207a96",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04ed434-8758-40dc-bf45-5069ac017406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319628e0-1118-4d98-8d03-642a1468e364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a224f6-6bf5-466e-8ec9-da691e70e432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c46c79-119a-4954-b272-bf7f98a9a1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e8c7c4-34e6-42da-aac4-1e50c72ff7aa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1688ede-154f-4e4b-95e2-6353cccb4fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27508356-e26e-46c5-9488-a85a5aed4c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dcf433-b85c-42ee-ae04-376b7050f810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71491475-4e0f-43f4-ac71-7a47bf752ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4658b9-bc4a-4473-aef4-dba30f36e989",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10541fec-92a9-4786-910e-d5c9dbc915cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21fd42f-4ce5-420d-902e-ed1d7792564c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13e147d-b280-4c49-b23b-eb108346e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d69d33d2-ef86-4c71-9dcd-d00f5c862996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215972ad-72b8-4452-8f18-2c14c1dabf80",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b38e32-a86c-44bf-bd78-8575e194bb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5d4f3e-523a-4636-8fe5-d1de15e80e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1f0015-d0c9-4a46-a987-460c8b739cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d4b88b-0e19-48f1-8a0b-1287759c23d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd01700a-0f79-4ba5-9a45-077b1866a595",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56afb325-17cd-4322-abe8-6f2a8341a35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17c05dc-1611-4b1c-8e0c-c78b80a54404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b452a3-31d8-4d90-82cc-0bad96c64a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49ebae6-ce1c-49ab-8b9f-1b2a556cba7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3930e4de-b2c5-415f-9e74-ec82445a9ef6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdab09b-3f18-47c1-8818-11e126ca0d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc91e845-118e-464c-8eef-bd2f147c1c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67971891-29da-4fe5-bb5b-161033c78180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf26ae3-5520-43b0-b770-620456e17969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75511b19-693e-4676-9ddc-06fea31f6fa6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0902b7-bd08-4645-8be3-6ab3ced5a76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdcd7b89-3529-4dd5-a158-4789b9e6914a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a74712-6565-4ed7-8197-0eec4bd7cf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7073639-3e40-481a-bae4-ae1fe7436752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916d53ce-67e9-4fed-83a6-b12ef716d609",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b690b517-3529-4429-bb22-984e2449c681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91098e4-95e4-43f9-bc88-2b18df067a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdd2ea9-9533-4070-9c61-93c6269fdf28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4efcba-2831-4528-9435-225264bba6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c50f603-22c8-42de-aa09-a1b521f248c0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62820073-cb7b-471e-a967-1e642d29ead9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f1afb4-2464-4bb7-9277-71f77596e96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286ddb38-6230-4d7d-bc04-cd3c16342207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b4fe34-b6b1-42cf-af78-e29b4861ed4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ade8555-5c68-4f4d-bcdb-18b052ac29da",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5dba63-fd4a-4303-a2b5-25b16bfbc5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148d26ad-d676-49f7-8a31-8a1b95a5e003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a9409a-24b0-4701-8b46-4496f5ccd87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86631393-94c3-46c3-888f-5d6a63591953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f26a6ad-9241-4c51-b41e-80d7e66b86d0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69fec8b-ad1e-42d1-ab4f-0710e6c3c295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c95592-7618-447f-965b-d1a4f0e6d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbe14b0-081d-4c65-8fd2-97063f811ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb8d55e-73e6-431e-8baa-09ccac607aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a451abfe-b03c-42ed-bc49-14bc95ae5fe8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7581a81-9110-42be-a1eb-9176e582a27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394640be-c5ae-46a2-8be6-e882054a5f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9a407c-c0bc-4d00-bcf0-7bfd9a81b675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a019a978-b06a-4151-8616-476b60e6aa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0ff71d-2016-4899-910f-4ca8d239524a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8709b5b-b927-42cf-b93f-69e1d8047647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf0e369-7001-41d1-833c-84d089b73d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fffaf07-4583-4cc4-83cd-6b9cbd0bc41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "216bde97-7033-4baa-8cd7-a521edc06b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569f69ba-44b2-4573-8822-96237ff668c4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63068f7a-2720-47de-9e8c-5f30e012c992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1537fe2-385b-4ba2-8c83-1233c501789c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe2c2ae-a452-44ee-9b13-5058b24a0b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf14302-1dcd-44ea-a835-afe69f2ace56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8c382e-2fc2-4d5b-b013-a18dfd6a8c74",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d953619b-4f2d-4e1f-aeb9-a070d00a7206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8104fd-e352-401d-a4f2-39946e7ef7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3f0323-c14e-4901-8db0-7c5e42caad71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c18adeda-45f8-4174-85cc-73c627a1dc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6a2a45-d0b7-43cf-81f1-0d4d9232441e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3cdf20-aae2-4701-89a3-3987a7b76579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29944a4-cb33-4074-8b1a-911eb56680c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7657bbc-012c-425f-aa98-051e83450e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1a40d0-5f0c-4ca6-a42d-66dfcf91d353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccb799d-e2cb-43ba-9446-94ef3080316a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12821c2-8091-49ef-8dcf-74a80eebe2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc6c3c7-6fd1-4293-b961-8241e6cee9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a3e5f6-9e3b-438a-ad9f-fe3a8cea4f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f2d6f2-3415-4695-b2d4-e8aa8c845bd8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef01ab96-2ff6-46c9-b9d0-b59c06f1da37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cec80285-db43-4f46-b74d-f4a549a6acb0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c0fc1f-795e-45a1-9d0c-50b066e22904",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d04db233-20be-413f-b420-545b989fb68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874f98d5-79ce-4cf5-ba1e-7ae8dbdb6d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6084c92-4679-48d0-8861-1bf09b3d5c1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1f14f12-138d-4c49-b2f0-3624d715346a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a73eafb-777f-407d-8655-bd76f0eade73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c96b58a-68c5-47a8-a147-8d0b2d3080e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5956fd14-22fd-40d1-86e3-ec38a27255b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce335e5f-1695-48cb-90c3-0dc4a2d28757",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dbe1ca9e-c584-4e92-8f5a-91f5ba532863"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c6b9885-1a2f-41ea-9eab-1da7150eacc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42643f62-3454-4a97-bfdc-4975df4ffdec"
            }
          }
        ]
      },
      {
        "id": "a93867f5-ad95-48c6-bfec-3e2e6a063803",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5a9639d0-637c-4f84-a974-3a9ba4195cbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cf96d24-19f0-4077-af1a-09cb2fc855f5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d7f4ba7e-1c15-43c0-a4d8-3e7ff1eac65c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb32f64a-b0f8-4cc6-ad62-a6943ba7a917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07958845-4e54-4c38-8d81-aa5a855f9650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e4e7e4-6c0a-40b4-9ba3-ac155b351f2a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309c5079-273f-4758-99aa-5b5673181b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bbaf633-57c5-4c53-a2cf-51d1f3a6b9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cc79c7-0ca3-4079-9019-c20860359720",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feedbc6c-d784-4baa-af61-c9c772f2102c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf597e93-835a-4c86-b13c-84b291840735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282409a8-d0d9-4b34-a824-8afd98593b0f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3096269-ae96-4618-8488-b43d1f7854b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746e106b-9b39-4750-9f25-c8607363d1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9303a3c7-d9bd-411e-b9cb-d0e756d9387f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525a9d0b-f65b-4f1d-9fc6-1a5d47c8c3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805d0f77-6a53-46eb-8b7d-3f9b52d74f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e5d8a7-70eb-4017-af86-ba0a01b0b939",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8dc60b-efd4-497f-89d2-0d681a211d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3419a2-4e76-4a70-b686-e8fd03785de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74afacd9-80df-41db-85fd-3296aa00db16",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62c0569-57b1-4acc-981b-bb8a7ca0969a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b8017b-aab2-41ae-ad2c-7938cee078ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7260937b-fab1-42be-8ffd-ed24b948cc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b37b1af-f58e-42fa-8219-920c0c0ffdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de42035f-838f-4b74-a90a-bfbac2fd6246",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae2470b-bc3c-4cb0-9235-eff23981a0d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e72aad-4243-44e5-b52c-431674a0f17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058bd451-0fd5-480b-958a-a1d0d8a9990f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9eb80ed-49fb-4877-b32a-ac89c5ae659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e79d5b-3d79-4005-8a12-dc2c93c33e0e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e31b0d-e53a-4139-9041-d8ef7c7fd20b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89fa0097-a613-4bd6-bc89-5b61adbd7758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1332fd72-c6f3-4e0c-9c76-100c69394033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767f3dfd-a20d-448d-8a8c-32afd88f3ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16834a4a-a275-4104-82a2-7deeb4443c9f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1f7018-8e42-4581-977b-4bdd1e80bdf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9154dd0-a0d9-4e31-833e-60687d950465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58666b5-b55a-4185-a9bb-6e3099c732cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ac7de6-388d-49bd-9439-f439c605f912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0654e3-d3af-4121-9136-788067727fe0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a04bfa-d4e8-4d31-a67c-1cfea8da447f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec1c22a-d2a5-43a6-a00b-b3eefd3274ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e38b560-fd6a-41f3-ae4a-6c0cb55fa317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d46239f-e6dd-44d6-bff0-10ad19383040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eb71c4-9fdb-4ffc-9c76-fd4f8bbc0b16",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53072a60-da7e-4639-a98f-c6e98c4f1560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a78cfce-ae32-49fa-a8fe-45d717faa896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8f5381-2639-4f7d-953a-6c97bbf2b951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb32db42-51f5-4ee1-91c1-b6eaba6c78e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e405bf-b78c-40c2-ba2f-008ab6b1c7aa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed22d7e2-5769-458d-b3d7-3529f5d97f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b6e6e1-f278-4ef4-8464-444137aa6fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609b5b7d-a12d-4a44-89d4-4b0e776bbc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efa70c4-cb72-4b10-a75a-dd45cf54b84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acdc5b8-701f-47e7-8c47-5ab04114b97e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b444961e-6f4d-4be3-8947-243b384fc51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c71a58c-7dfd-441d-9a25-d4c9cb38bd32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd595e89-76f5-47f2-8cd2-f34e58a57085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987fd192-17b2-407f-a87d-74082bb69e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec00a5a-692f-4814-a672-fae66b5d9cb4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f949540-f6a6-45d6-be2c-f0eeb790f38c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6a73e01-654d-4021-9f0b-d82b6b6c1f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002e538c-7ba2-4866-8e6b-15a8f98a52e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4ffb2f-76db-4c95-a057-86abb7661ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128c9466-9db9-472c-a5c5-c0e0c2fd053a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673fcbcb-9b62-478e-a458-9d1a847838e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea78524c-4d25-4c80-bd61-e1395ef3ba91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697f6e4b-f8f5-4c7a-b350-29da8e1a6aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c067c6-25a7-47a2-9909-e12583a9c271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9056e8-cd19-40e0-b593-419f6c034310",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab22dfbf-5ae9-473c-b90b-6cc072ba5860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65495560-f9e9-4644-bd16-28efa481914e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf11fb1-ef9c-4eed-81d7-94caaa846014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3fc2f5-b0da-46db-ae14-0907b77c1a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52430464-6177-44a5-9827-b50f6f04f6af",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b7c677-717d-4e89-9b48-adaef4ee16a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe55c9b-7612-49d0-b969-1e8a5e27aa37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa426aca-610a-4e4b-9a52-1b9cbf653108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b036cc4-0b99-4b7d-8342-0d519e703898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac8b649-8550-4357-832d-bbf6b2ceeda2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf57b497-92d6-435d-9ce9-3ac709af5028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac1a589-6d86-4a2a-9dec-87729bed5a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b6d8ac-d0c5-4e95-a00c-505b985a3280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60865a9-9ea4-4d8e-900c-6c02b485722b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9902bde1-301b-48bc-9288-688aadef664b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a738ae75-4673-4750-9fb2-ce3d79f611a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b19f2b-a7cd-4b0e-a8bd-671feca2a392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984eb87f-d791-4eb5-ac36-744b4a92f146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd376b5b-97ce-4d8f-a802-7460db0a435e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45295c77-853e-43f9-9cf2-efa96bca3431",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226f6937-e7a4-40ad-9b9a-10f3d18ba80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f27dc06-f926-4593-a14a-f94dc2f9ea6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9762e2e0-361b-4c8a-ab4c-69480c2404c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1de9a02-edbb-4b62-8482-f6b19debc0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb40526b-a061-405b-8ea7-5e9611c423a4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4765e0b4-335d-4366-bd0f-0c1d57b2c0a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0023a172-a194-43da-bdd9-5bf864be2000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6897a9d9-c39d-4bae-b7e5-2a63652df75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523724a2-c607-4f00-92e7-1e436d6b9aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1875dc38-e717-4466-81a6-ba2309bcd691",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8114b03-5fa1-490e-94b3-8732896d3eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f67fee6-0830-4231-85fa-0922c911b6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec855ae0-4384-4286-975c-ae6d15821bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d7abe9-0e89-4e52-9e04-bb28b8216e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2d9c6c-8cc6-4b84-8659-c5e00cdbf49d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede70be5-a45d-475e-b062-ac6e8057cde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4207656f-d119-4b65-9bf2-f5daa34e5f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3974bc60-d16d-4c96-a0d6-6d6e17bbfd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48932dfc-27cb-4744-a375-2c9f83dcb5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea7398e-704a-4d9d-aea7-0a8210914337",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a67005-6c6b-463c-b88f-76f4f5aa3ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59e9d8f2-0d7b-4b03-a193-0828ffce1d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0c02ef-ec0e-472b-828b-3cc712905f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a1b21f-d130-4583-9225-db1b6d62decc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d649cc-774a-494f-8396-a9fcc3cb839e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de28fe60-a93f-43cc-b38b-fb8f1c64f286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c31d530-2bc4-4ec1-82b9-c9c5b5ac1f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3e353f-b5dd-4760-a38f-49a4a2279ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bc6ab0-e5b5-4d74-be9f-59a869ecad52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4213530-2729-410c-b78a-c0b51870162e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2dfe62-cbfc-4b5f-bbdf-706cf125968c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97c40a23-af74-4efb-b6a3-ba1c89693661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0212b24-305e-414f-bb13-a53714c7f002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6be161-a23b-4923-8d73-a44a445a2dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cac05ec-89d6-4cb4-ba6e-9f7feddd5579",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431b2d52-d5d8-4cce-8ba9-66ace2af9ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc170042-8802-47d4-85e8-474b4dafd051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc96a1c-5e11-47af-bb85-455b3702928d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492fea66-60cd-4e75-860a-ff8516da2551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e6384c-9413-4b0d-9392-4ba14355adf0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedcc46f-df64-4201-9ca8-6fe92cafd43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf512a7-25d4-4fa9-b2b0-cf47d47d2b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a73db3c-5850-45a5-8914-6b8b77fbd3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3df58e3-3893-4ed1-9f81-48032c5071eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289cba9d-b68f-47fa-a1ab-2bd6df5b57d8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867da794-cc8f-4f4a-90da-f916e673086e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fb3cdf5-94d0-43ee-a408-295e26b1988a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f196762-ae67-4cf2-9de8-9bc9cc63f169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83c188f-eb14-491a-9bc5-597120ee3a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a16604-fa70-4765-adf9-72f93e0454cd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311afc94-549b-4bd6-9507-0ef49a6ff303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e7d486-1632-428e-8b47-031a8ea55e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2418b0-2ff9-4583-8cb3-fb132309f48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8f0d3d-9c31-4ec5-8d39-40d1906a7977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e60c02-d1db-4c1c-9574-6a55b43af300",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdf2aa5-849b-42d5-b161-8d914eddab66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d65b8b0-2dfa-4646-af40-5ed6190e56b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bb79b1-4a99-45b1-9bd7-7441ad53ca86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576fb9cc-dc9d-4598-a243-bc91c8a7ecb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f977022e-79fe-449d-ae86-f89c071e40d1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467b8d17-9547-4842-8fd1-aac085558e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a3a96b-73cf-4ad9-966a-149593fe1aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a83776-bc59-41aa-b606-5825e5350bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2302f028-dce8-43bb-a5db-5c8a40a8c1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfa6798-4b13-4eb1-9df3-792753aae1f4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661cfc3f-b73f-4d9a-ae95-6640bdab0bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a98c82-27c6-4c43-89f0-12e3c8d02275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1419fe6e-005b-4bc1-9f07-5bc1c3486220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9193a7-0448-4ad8-94e1-24366b1fbc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb7c848-370b-4d06-b4a8-902a4908ca40",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429a67a3-985b-49bd-9add-6eeec23bec64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9848331-b173-48af-95bf-1ab92c634214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af3b83f-c79b-4497-a2c6-0639cde2867a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e10a93-f893-49a4-af63-796ee011185b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cc3c76-bcbb-4e2b-8e7d-82f75d2b4228",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d988d7-9c42-4dd1-b7ed-ec1bacf888b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccac6607-b0a6-4018-9ebe-025a6eb2fe1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bd554f-389b-4e85-a058-46cd7054a8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7968802-435f-4a8f-a7be-742ffeb318a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee36ba4-2ce8-42e1-ac00-9225b9f01dcd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a1069d-c0f1-4d53-8ea4-da7502f89f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4b8cd1-1c52-426e-b2a9-6928eabe6801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f41bde-00e0-48d8-b68c-70015c7f3bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b0715c-390a-4054-92e4-6dff6e4ae17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b28178b-c9e8-437a-8c80-353636971a75",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75a2979-867a-4848-9607-aee2e1a4abd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146046e9-3b65-485e-8b94-9f08e1202f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa427627-91e7-4c95-a115-8a625a2acc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb594766-6e25-41bd-b8f9-291978c61752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c41ba71-2b4f-46f9-90b4-3d8732977b54",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4652c1-7804-4675-9fbc-8b85b6e337d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb91ec2-8e9e-4497-a58d-831c6d21b07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50f93f5-7e91-4f21-831d-271b72a1de4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd5500e-d23f-4fe3-9a75-cbd387b6a30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2705baf6-9ff3-4d28-a4ca-175d773b1936",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd57b39c-9dc7-4f12-a16f-adaa7e942fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f7a6a6-c5e1-460f-8aa1-ab9ce538871b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4207e93-df01-45a2-975e-f557155522a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f99179-aa39-4f97-a435-a6ac63cd4329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba378fb-d9b0-459f-a315-9d578eb21f70",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd32795-f58a-4d17-85a9-f0cb1e13d07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939981c7-30dd-46c7-8b72-7943fe9e159f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645adcf-de88-4a1b-a8cc-5a9f2c7c57a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d2d478-a016-4765-85dd-d0ce50a4def7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a632d29d-6d6a-4b25-b9a1-9637ad5fdc5f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf65d4cf-2f1c-498d-bb68-8c6445eb99dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273e6bd8-8fc8-4f73-8d9f-b2936bf4e055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6adbe3a-9e30-48ff-9bcf-49441e895839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5920e7-b36c-434d-9ecf-6f47beab7088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2cd405-ef74-4ce4-8def-7d6c8ed00809",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cee6d83-770c-413c-9f3e-5f5c786eac8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154828d8-2847-4913-8e7c-30460c5f491d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d369b2-ac46-43de-9cb2-f74fe1ce31ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e878c1db-2c4c-4212-888e-2aa1bb28b850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519a4fa2-826d-4b11-b75d-7cd353d02abd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68df886-2fc8-453f-ad30-5f0866adc3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eddd236-d4bd-4899-9ac0-6b1f1a9e203b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de709871-c5bb-409e-8457-3e3e9880a4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd220aa6-779e-458d-a9f5-216faf18e4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c048f9-3fd1-493b-a5b3-0445bf1a61b6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d810a5-395e-404e-b382-465b368798be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85082c43-1c9d-4240-9321-75255fbf1c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f227423-bd14-4453-91a5-a30dda33ebd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155f9df1-23cd-45aa-9cc3-387b6395b307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c56428-d9b6-4dbc-bc0a-941e703ccb77",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa463288-5377-45e0-8754-0be5991b75d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8faba38a-822d-42e4-b122-3ea0aebca328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f8e138-bd57-4bb9-85c9-b8917724645f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c11c42-f4fa-46f0-877f-179eabf63c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0028b24a-ae38-4636-9b06-c0fee82c8721",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3ea9e1-8946-4525-a71f-69b0a2a9211f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcb5e9fc-c2a7-4aa3-ad87-538ab11bf6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9177773c-5baa-4047-bffe-3633118120ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee16d022-802f-4225-9d90-5eb3076a87ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9045974-b1c5-47be-986c-8f03f5c6eac4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48af4d0e-9736-4248-8b4a-5eeaf21f0e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c39853b-15b4-4d93-ab58-3688fd776a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc6130d-e890-44aa-a113-a72c1bfe47d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da126bb-73a7-40a4-872e-954ccf4cdcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9ba79f-4251-499e-901b-fb1c57df973b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1da5df-a8fc-4da1-9af6-49d2e8db7141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef28be45-bac5-461f-80e9-57353ce225a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcb17c1-fa4b-4ad3-b1c2-6457f4bfe888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3b045e-83bb-4f8c-a263-e5bfb0d529db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7246b27-b9ac-4f39-a0b1-6ebdd3f739cd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ea5e3-d10f-4803-841f-a2cdf7115fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12c0256-b9c4-4ea0-b3ba-5bc89ed622fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd22d62e-58a4-462f-bd2b-86026d29c66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7936cb77-e383-46b4-91cf-e89d20316055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c671319-9f91-462e-902c-2de224757b29",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5aba51e-617b-42be-8601-835b6c9c8883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067f1b8b-2264-4e73-b479-af35c5ca7647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a880397-289b-4377-a7c3-7d8eaca2ebfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7ce442-c990-42e7-bd29-4d5b72fbc34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889a892b-bf7d-40db-9d93-809d618b3cbd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68ff49b-70b7-4da6-bb0c-97f55cb51114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7a6d8c-ac5c-47d4-879f-e756d4ff06aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174fb415-cc6e-42cd-b9df-3ba964bc41e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c212a5a-a889-4fdb-8190-19caa6d6f5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f892eb29-e75b-4d83-bf12-03a7174ff3c5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f18efc1-184d-4f18-b177-81570fc1c1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8912742c-7f3c-4546-a3d3-1cf6c73eb3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2da26c3-77e2-4413-971a-8e7e3c1e29aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a0df00-02ef-48fb-860f-b6cee8ad6e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e448c9f-65c3-4c37-bff4-eeca11043b19",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ee704f-c04c-4fd5-8198-d7713573230b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b47b701-5e42-4cbf-9409-4dcd0ba7cac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d4681f-3f2b-440e-b43e-5446246c350c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a624ae-abf0-40e0-8dd7-49d8fe7fdf92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c7ec05-9609-47fd-a381-2f2459b48261",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ac01e0-f0d9-40da-a3c1-a68bfefb2933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5f7a13-01ad-4aaf-9e74-defcefe7ed0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60b858d-93fe-40e0-99f0-a735e49da1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602120b2-d602-4b7c-b74c-81d752f96b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669e05e4-a81d-4c30-8f7a-94746565f703",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e52888-e01f-441c-9983-7c092a5cfdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba7dbe1-687e-4be3-a977-c6198595efae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f668ef6-cc13-4fb7-b4cf-2969c2ae6584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ce783e-4cef-4e31-8cb6-11d442622b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df38a376-a9cd-4844-ab84-9bce1faad2f1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1e65ff-0e84-4d32-bbb4-fc172fd94658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba54283-7d74-4abf-9e81-e04e6e02fb35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71946f2c-fbc6-4876-b50e-01bc7c49c910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0199ea0c-e568-4dc4-a3b9-c7163af11858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c55720-705d-48a2-8e41-2be8650481d8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c98cd6-c04d-4a23-b3a1-356131ca1d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a875ed3-ee08-4bf3-883b-053fc14ccb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6baadb-85ba-46a7-ae03-d3b21eff5c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df8a148-0d31-4fb6-a7cb-7c82152c01dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffaffb3-5140-4cce-b184-5e53943c65e1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d999d7c-cf28-4c56-b9db-ce0f9f5ae855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815e7498-b0a2-4acb-b976-d6d57637fa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75c38c4-2040-4029-b72d-63d032eb2a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6eba67-2782-481a-8e63-2a81e47c2cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553a1b6a-b425-4bae-9299-78895594bf91",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f765d67c-2b8a-433d-8683-d501c54fb549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec2624b-4880-4b72-afb4-b8036b09d34e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0403b08d-22e9-457f-91b1-2c956212e8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e53019-f6d0-4d05-b84b-3f395488568b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fa12a6-61e1-4d70-be97-fbd0396d8a3e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe79049-b6ed-46d5-ab2a-ffa2785e5d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48f3795-4776-42ca-90fd-c210fa7cd11b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26d76e1-511b-47ce-bc18-abba5ef0e104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bb6a88-8b1e-48ff-a0e3-8f09c554349d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1db5db-9eae-4fdc-8cf1-2df44c632dea",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a37bd0c-2b16-4c75-a0e7-0849266b46ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f3b7c7-077d-4c3d-bced-d77f3eb58166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0956ad-27f3-4242-bab4-ffdf23f4ff0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ceabd2-ee93-4a61-afcb-9ce2385bda99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414c9038-dba2-468f-9015-0a42400111af",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3197a67f-a375-4954-8eaa-adf77d7e5042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f15841-673c-4d89-aaec-a76ce046d742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce8c9a0-e338-4d49-9232-17300f658a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090e92d2-7863-465a-a2e9-b0bb31ff63d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b18120-0188-421e-a672-55eb4828307c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9682893e-4325-4e09-9b05-4b693bc9383a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555cef95-d89c-440c-a5cb-473508982ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fffc9ef-72d5-44fe-8dc5-69c9ba91ca06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05042f2b-087c-4cce-85b4-4087da34750b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2ebb14-6030-440c-9dbe-241058474e19",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b124768-bd20-44dd-a837-679ca66f8e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0771eab0-b745-40f1-a6c3-a2202955415c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcbc774-a9f0-4046-8592-cbc58feb56f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8ec1bd-fbe7-4022-a824-add3cec57a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec6373e-55a2-450d-89af-58eba588c8ea",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b3d9ee-dbfc-4251-ba37-a41e1fa8be24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c0d0da-9d63-46bf-a077-6b7166049d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f498cb-5d4e-468a-9719-6a6bcedff45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482d7a90-8b84-4d19-9ef1-aee7406deca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cef05fb-43bc-4822-a861-bae741d79a0e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0a95e5-381e-4f9d-845d-24ce64585636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8176601-cd4a-4ec3-aa59-14bec5a13efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bcae18-7f59-4676-a87b-b98eb1420615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96d4b24-0094-44c8-8ac5-55e5d0b401d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f7753a-1f7f-4673-b1dc-1a004a678955",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6c43cb-b55e-410e-83df-147b541ea5ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6939f699-b43f-43dc-a754-e6e9969ee8c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450200d7-07d9-4aa2-9a4a-c8a6405d2cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb233237-bc66-4238-9803-944504d4588f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426293e5-553c-4bd3-b4af-4f26a7c95b08",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410df971-0a73-4f69-bbae-860f86db6c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f653608-3fe7-455c-91c5-0749037bf071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b591e368-5224-44e7-ad30-db49bdc25334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c858b8-b049-4b7b-a6d6-bd3de8e0f227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923e5476-97fa-4413-8cfd-20e474c62106",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186da5af-198d-4baa-a44b-dd3464cbc2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27a2b12b-5a69-433b-9466-2b0184064ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270b7815-f90b-4b48-a894-46e8b48bd717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f7c56d-4eeb-4518-a36e-439fd0ca4c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d1a769-839f-45b3-aad0-c0432a2cef8a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0e234d-bd69-49af-a3dc-cceb7833d7e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e2cce4-4cab-4fa9-8021-ba2426839885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62645ec0-05b5-49d3-a5ee-97269500a7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2555a140-ed66-44f3-8595-5dc3094511d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6763c39f-dd3a-4b8d-8ae5-68570a5b15ed",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790c6e06-3699-4ee0-90ca-1036d38e7f47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1792ef-c19a-4d0a-8a5d-a37a9f6903b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8370b7-4be8-442c-8f69-c4f6197ecd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ef872c-83ff-4a54-a019-dcff2d890b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e88c9ce-1108-4972-901c-fadfe4c15d26",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca10c32-bbb9-4dc7-bea9-e1d408dcabf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eaca0c5-48ae-4b4c-87fe-42cf8bccc8fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940fe579-6c4a-4941-aaa6-537e51ae40b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506a4ecb-6cbb-47c6-8078-c0d0cb236802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27814f51-2d1c-43a7-8c90-474015f22fb9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609e059e-28c8-4b1e-bce0-33605bda1835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0c7b7cd-0f04-4a53-b88f-d5be3caae19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cccee3-431f-4615-a2bc-c5b0b4259071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14dd7b5b-dc9f-46c5-95c6-eb872a2e407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767a3400-d82c-47a7-9e4d-a1b98704b466",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea7af89-4960-47c3-a638-14a251ff9e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "397d5c0f-170a-4850-b450-b41bc1dec8fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af2a251-5684-49c5-91f7-852520197430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9d4c1e-c342-43a1-aae0-c52e258803c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d55e2d-0724-4e8c-93c4-faf4c0801c3e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422f659f-1be2-4d9c-bf90-301dd6d634ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da33dd1-b0d5-49b2-a400-59fea3a28d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959e42c0-d140-4d3c-87fc-71f8e190a353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba53a2a-7f89-401a-bf62-e51f049559b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f250df-edb8-4456-8274-05c8b8a33274",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b756f21-16bb-43e9-975a-903bd1ecbad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a2f149c-13d6-43fa-a706-5142464be713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac354191-06a4-45a9-a433-7ee647980151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae55c230-253c-4eed-9ce7-78d805ed6bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799b3e11-91bc-40ac-b98f-9abf5dd3cff0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c51d1e8-2090-4024-8db7-39d5a395c08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a02473-abb4-498c-b084-b283bd026509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b952540-ac20-49a8-b417-1cc44753aa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb24f3d-10f5-4b08-8f04-7eee93154c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8252c5c5-817b-4994-b8f3-06bbbb2e0931",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddac167b-20d0-492a-8d9a-81ad04a31aa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9945f5d0-4c8b-4f2b-847e-c8d70e1da392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f57d03-9c7a-4db7-b826-f5fb74b25bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b07dd0-a1a4-4e6e-a71d-5a3f23470da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3abf320-ff97-4a79-addf-3b1918009df5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b279a0ca-c294-44e9-b3ea-f4e1f9297815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ecb1fa4-cf94-4569-b8ef-196b20896dbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3919cb5b-faf5-4b2e-ab27-8694f20d5e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d637bbb-c660-4ee9-b4b4-3b283c6b3cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253a8c5b-bc03-425a-a1fb-e2d37338f5f5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f2c2da-846d-490b-adf8-7667a3112ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5667ab-2996-4f44-bfec-9da57ed5b4c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464e0445-a69d-4a3e-948e-cc133efc78fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babbc766-0382-4b79-b864-8383418508f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0dee55-0dd0-4483-98f1-ba3761e3a855",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9493763e-2e46-4402-97f1-f50ca3880c78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1827e78-52e3-4aad-abeb-8d7eb36ede73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c123a0-a6c0-4457-8705-e9073b2a9675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c82fe51-70ea-4b8c-b916-183e3f146bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b197381-916e-4465-ac7b-994b2a3bc864",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22cf32-8baa-4421-a2b0-a1909deedb7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9496eb93-8b95-48bc-9b92-aedff5fe14ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ced753-ad6d-4027-a683-f085dc4c6919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19e8046-2125-4562-b7bf-b1ac444e5057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4a6128-3ec1-4511-9674-98d23486bddf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96db5a2-a568-4a02-9141-f4ec7e01a8a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02f89852-ae8e-497d-a52b-04dc2f544f56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4901a5-0825-4b6f-a040-3380b23581d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11e8430-7550-4d6c-9cd1-b7614d8b5d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62b588d-f3ea-41b8-bb74-89606204893c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e0f951-6d95-4cde-9335-8658be05785f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e848a34-1991-4bd3-8432-82d26daba58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4225d1-5158-4567-b387-3d9c41c04c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fdb032-efec-480f-8c2d-41aedf062dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df9392c-375a-40dd-8fbf-96694d667dfb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05dbd47-04d9-4b49-908b-ef676d58bc77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25aba0a3-924d-4522-b215-81b1fe96ffe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cdf539-712c-4ef6-b0e8-6ec015246290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9e12f2-cba0-4dc7-9ef7-4641182659a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221f9f02-233e-41ac-80ea-67bc5907c5a1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742b7841-91d4-4bd4-b9c2-269d73ebf646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e292ca60-607f-4137-af02-11e53716e117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527eefe7-0a94-41f3-8511-480c35146cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983dce29-f625-4cdf-8e09-69d29ceb5a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8864ab21-1edc-4822-b2fc-f450d50ca1ec",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f724dd-4189-41d0-9162-18de395de7db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab60850-407c-4d54-8fbb-a1bdf64815e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfc4b32-1345-4ad1-b600-f520ed854c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddfaece-9bcd-498e-8a86-8c221e643464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e23e6a-0992-4265-9a1a-a22bb4ad9963",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9812baf1-ffec-4dc3-be28-3bc3ea5df7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bcdec3b-eae8-430c-8071-e533670b7a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113eac45-9a8d-4f84-aaa7-61e3ee2490f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176a427b-aeda-419f-b97d-3c26c25df4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd7442e-2d0e-4f2c-8c78-f16a2fe638dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdc5a2f-dde3-4c0d-8115-ce0b9b520c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007999b8-9b60-4d0a-93b3-ebcca106e650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f519a96-9347-4cf5-a51c-6bd5acb631d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6efe7ba-b8c0-4056-b3de-b7f86ca9a34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ed6ffd-7ef5-4ea9-9fb3-5a00b28d2375",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6b5760-80dc-4070-8aaa-8178d67348c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4fab296-d6d4-4d93-af23-91b553ac373f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0b3f94-d44f-49ea-8ffb-e19d6cdcf8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205d3ee4-e1d3-45b7-8575-678c8c525a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46319d6-10ce-459a-a93b-d7f67149d699",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d0dfc8-5cc0-4098-a3e7-ea127afa1387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa1821cd-936a-4fff-b598-4cc48b3aeb14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1816adaa-25a1-4f1c-93dc-f9413a53bd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbae0a9-ca43-40a6-aad8-c227d92e1c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce57f442-5787-49ea-93ac-719ed494fc33",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dab5e63-31b8-4caf-94e3-91d31ffd90f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a6ec9b-5d8f-4538-bc78-c294a2c30019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe9eb1d-1ce3-49d9-a697-e81006ca5d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d045c0-229e-4f3a-bd77-778b8bc1ce2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd44f1b-8ea9-4461-bc7d-cc047376f43a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600650f7-c7c4-46eb-ba62-108dfc43312e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7370a6-56f3-4c65-8dec-0a6e88c672c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189173dd-19f0-4b40-9dd3-8f87c6cfe3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df728a0-06fb-4614-b0cf-650c5960b80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167cf329-be74-4443-98ef-3c4cbfa35a06",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacfe3d2-45e6-4992-b0e4-f0818d1df344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c80fd51-0795-40c4-9172-9464dbb306c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69bf8aa-fc5d-4151-a645-74f024b4df27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a4e51e-99cf-43bf-9786-f44773c123a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4c7d8-f468-4f7f-b91e-8c80b2be1d0a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c8ab5f-cf47-486d-8e49-49cc962f3eb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca21fee-dd6a-4de6-bc3f-49de76de306d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8ceced-35c2-4d9c-891b-78f2d0026d8c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7775efd-f641-47a0-a624-95e184e8ed15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cee8402-1948-4b2d-995d-1f7c9edf1cff",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994c0c9f-1f23-405d-96eb-e4ada5f6cebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c215fc-83c1-4995-b78d-3c5f332804de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5b8422-3d74-46f3-acfb-86b7675cefee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7daa94-1e40-4d5b-8e01-4c012014fbc0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e8ff0f7-8f7c-4ba3-99b7-4e1e70749ce6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d17c79a-0a00-4ecb-9003-cb2178636125"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dafd8c76-9dda-45d9-9d57-f2b95af22aaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c19e6f53-731f-451e-9ea0-378fa69b2a64"
                    }
                  }
                ]
              },
              {
                "id": "01431ff1-7e79-4623-b03d-fb9eb05f6bd9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4809e0a-4b32-4cdd-9a7c-94a793143dfa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b297fcb4-f7cb-4244-8906-bb2875cdfbf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "287ce098-725d-4409-97b4-6f70e23dc50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850d9c33-c427-4771-899c-1c9fee462940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7af28e00-1b19-4473-b553-9360ce1e585b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc03e85e-7cc5-4336-8bbb-1afb74d303af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d90b7c5-e76e-4a71-bbba-dd4e0c65624c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87d5b281-285d-4f3b-9fb3-92c56bd4be77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8421ae21-13b0-4ce0-8a1e-12578213fc68"
                    }
                  }
                ]
              },
              {
                "id": "ffa79ee9-4f9b-4035-ae90-cedaf8e4957c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "227eac66-fab5-488d-9f7e-79c6581d51fa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d5cd93-d50f-4b5f-a098-0dab223a8445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0a04c8a7-6460-4424-9241-80e598b6fbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e4cbd6-73a3-414e-9dde-e83f94d04f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a7f521-1b06-4edb-9870-97ad3273eb4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "51f54d29-edf9-4f22-9923-e639c991f537",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19bd7910-dab2-4201-90ce-ce839f1e7160",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3be26127-58e5-4559-bb50-f036f41982ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6016a290-0307-4a2e-abe6-a8fd6dea537a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4525f328-2e15-4a5c-b167-f36f9a8225ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b40a4f91-8eed-4be5-8aa7-ab5170a33f47"
                    }
                  }
                ]
              },
              {
                "id": "9955acc0-1f4a-4a5c-971f-2d148918a8a8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f1e428e-639f-4a30-8969-35e109b18e5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ad61e56-29c5-4933-9b03-6198daf715c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c9fc5f7-e14c-4735-acb0-28ed3371d928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "212fb3ab-213b-4e5f-86ec-26ca48c7b4e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "360ef4f1-e22d-4c6a-b0b6-a6abf5ee6337",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "53165122-0082-4ab1-86e2-b392bc1931ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ff3bee1-81c7-4b0b-8f05-be7646a89e5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "245a0bac-3056-441b-8eea-3e0b1502be58"
            }
          }
        ]
      },
      {
        "id": "cfc6b394-73d9-4405-a655-971adf9f8d31",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3d647b56-90d4-4b45-a361-961866741f27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9a2380b-148b-4081-b8c5-e14a8193c27b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c20cb8bd-265a-4115-810a-93e01133c9f8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc50424b-8151-49f4-a8e4-0927c1b57151",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad35a033-e6dc-4675-89da-313b0c771a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01770238-4379-4d4a-a6a5-0172d2c3e63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6626e229-ae6c-442a-9972-56c2a124fd6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "605f22a1-9980-4b89-b93e-4a5b05067b42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d597779d-5099-4928-80ea-2e366bbea4c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c3c9424-26f1-446b-9571-4d6da9bc0b9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f3117e5-f5aa-4594-98fa-aceed082628f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2a8fe0f-41c0-42b0-9a00-00aafecd4dad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ecce8be5-050f-4db3-a698-fd328796bdba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e61d31f2-e295-4eff-ae30-e94ce2ceb15a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "392f4e7f-aae6-4e04-b410-20bba1a5fb74"
            }
          }
        ]
      },
      {
        "id": "3975f1db-8e84-4bc4-968f-6c38ec4531ce",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2c53d12c-649a-4ec9-a641-0533bbffd14d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f077f7f-37e6-4e5f-83a1-ebe3c71572b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "380b6b68-e1dc-4640-bf32-b709e32b67fa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb096dd-1ff4-43cb-818f-1ca9a702dae1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c86330b2-c7ff-4e7c-8490-8f75f2516df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85d68a3-daee-45a0-a8ba-9853c7343261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e404013f-4136-4715-9796-9763d5759229"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8609ce37-e88d-4b97-ac43-e89fc6e21ec7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91863d82-b44f-4e5e-b610-702fb83f00a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afe5638e-8cd3-4e68-9d70-70782cc2c9da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abc15426-e6f2-4966-aece-8b2c2eb5b083"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03cc750e-3774-43d7-8bd4-67c883f892c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbab73ef-f5e9-4ba4-90a6-37ded9a77569"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97aa6f2e-2da3-40ad-8631-9cd8900d9b73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "356c5ec5-7f3b-4e50-acbb-b4be94aa57bc"
            }
          }
        ]
      },
      {
        "id": "5ed589c0-b53a-44bd-a3a3-aa062cad778f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7501c102-ec10-4dce-95e8-82c088bd068c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8fb90cbc-d058-44d1-bafa-e14dabda58f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "531c3b43-a181-44b6-ab30-be06c16fa75c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15c31e7-66f9-429e-af2e-2d269b54562b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bf0682c-d2ce-48e2-b23d-a741c1b841db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9b513b-0572-4c4d-9c88-ba3ccdb00a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3807d76-8f35-4fd9-9887-8eb56d6c5edb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2dd942de-2acc-4dd4-99e8-7d7ded4bb6af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0869bfea-a142-49e5-b1e0-52d4c62654dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b58311f-a374-40eb-87a9-00fec2be36a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffad69d0-6201-493b-abfb-93c5103ac3aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcf05509-3f9c-42e3-9540-c2770036339a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2360f7a3-7715-40c1-bfcf-734d69753167"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cfa7837-1617-4dc6-9e72-15628ed320d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "577b8673-371f-4fad-8341-51047ec3e959"
            }
          }
        ]
      },
      {
        "id": "fe16625a-db22-44ea-9481-d64be3e5a7b5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bc85247-39b5-41e2-83ba-54c01e09b960",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ca3a3ac-7015-46a8-a161-3d91aa204f18",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "abe3661a-b3c4-4b5f-a586-f2532840cc44",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a47d96bc-e248-4273-a2f9-25e205aaa6d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f0b0cf8-bf3a-4525-84dd-ae08aec36e66",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.45634920634919,
      "responseMin": 7,
      "responseMax": 611,
      "responseSd": 78.45194970214905,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716165447946,
      "completed": 1716165474445
    },
    "executions": [
      {
        "id": "3e503777-ba02-4f37-affc-cc2c8f6adcbc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b495bfb7-c7c5-4240-94ad-55c81d9115b1",
          "httpRequestId": "faf657ba-ecb8-4b32-97e1-5b42bf230073"
        },
        "item": {
          "id": "3e503777-ba02-4f37-affc-cc2c8f6adcbc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "71f1ddc7-c8bf-4c65-8569-4e97ce099c71",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "efdb0d80-5b11-4b9e-a8b4-9dcdfc78bf6c",
        "cursor": {
          "ref": "8e88d910-c5da-4fe2-9627-ded6d4311493",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "af230fa0-859f-402f-b748-0bb6e286454b"
        },
        "item": {
          "id": "efdb0d80-5b11-4b9e-a8b4-9dcdfc78bf6c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c9d6a0ee-2074-4c48-9f80-6c94164d314e",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "2f54ae6e-e2fb-47a5-a573-967b9572e372",
        "cursor": {
          "ref": "43fbbee0-2fe2-4530-8736-12ffb794a907",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aa56e0c6-5722-468c-b546-815440cc9887"
        },
        "item": {
          "id": "2f54ae6e-e2fb-47a5-a573-967b9572e372",
          "name": "did_json"
        },
        "response": {
          "id": "885c90c4-ebf4-4a65-b40b-4f25ec3116ae",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d21c6c-d860-48f7-bfcf-adecfd014c0f",
        "cursor": {
          "ref": "7fa897c1-3c1d-4238-bf32-0d6d7de8aa3c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48447c33-cf72-499f-83d7-308b0dd3a208"
        },
        "item": {
          "id": "f2d21c6c-d860-48f7-bfcf-adecfd014c0f",
          "name": "did:invalid"
        },
        "response": {
          "id": "518ac149-dd0b-461e-80b8-baaa67f90cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d21c6c-d860-48f7-bfcf-adecfd014c0f",
        "cursor": {
          "ref": "7fa897c1-3c1d-4238-bf32-0d6d7de8aa3c",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48447c33-cf72-499f-83d7-308b0dd3a208"
        },
        "item": {
          "id": "f2d21c6c-d860-48f7-bfcf-adecfd014c0f",
          "name": "did:invalid"
        },
        "response": {
          "id": "518ac149-dd0b-461e-80b8-baaa67f90cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0d838b-b3f6-41a6-a8a7-afa7b52a6247",
        "cursor": {
          "ref": "96a47b9f-3796-4c95-ad0f-3b1843a8a137",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "45a54bcc-6427-4f7d-ad2b-dde2e0e8204a"
        },
        "item": {
          "id": "df0d838b-b3f6-41a6-a8a7-afa7b52a6247",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bbc1d426-91ba-4987-8da1-0c2e6fe8be83",
          "status": "Not Found",
          "code": 404,
          "responseTime": 318,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6168bb3-52a2-45c3-909d-59b3566acc7c",
        "cursor": {
          "ref": "bbd27b39-02ff-44da-a10c-13ef4c06e850",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb078d0f-58d6-451f-9cef-3ad1351ca0d9"
        },
        "item": {
          "id": "d6168bb3-52a2-45c3-909d-59b3566acc7c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4dbdd3d3-13af-4152-8c99-8cc60a77de21",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ead699-122c-4de3-8aee-d5ced1c962d0",
        "cursor": {
          "ref": "1787b685-bc1f-4a04-aab7-867bc63f50a2",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bca86174-8455-49de-8a32-5358df3c5a63"
        },
        "item": {
          "id": "67ead699-122c-4de3-8aee-d5ced1c962d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "03591cde-dd88-4385-ba9b-8cbb5d7240bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fe2b92-76b4-486a-9377-960dc4e976a4",
        "cursor": {
          "ref": "94601d9e-2931-42a6-b8a3-bd69448a23d3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fb1637cb-4fa9-48f3-aa37-2fede92e6d67"
        },
        "item": {
          "id": "c8fe2b92-76b4-486a-9377-960dc4e976a4",
          "name": "identifiers"
        },
        "response": {
          "id": "8245f1df-dabb-4003-9318-d4aef487cded",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e05dc82-2501-4bf5-94f0-211c8a199331",
        "cursor": {
          "ref": "151bae18-0aca-4c8e-a456-a98f72675255",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c6a7a9b3-3e20-40c9-8398-167f860575cc"
        },
        "item": {
          "id": "5e05dc82-2501-4bf5-94f0-211c8a199331",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f87e546f-078f-4790-9b6e-253de756ed02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ea4926-9a9f-46d4-a075-912571821db8",
        "cursor": {
          "ref": "e00afe9c-c9c5-41f5-80ec-9d615acc5472",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3a36082c-3f07-4feb-9d6a-c5def41bcecb"
        },
        "item": {
          "id": "40ea4926-9a9f-46d4-a075-912571821db8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "71460745-e999-4a21-9d05-e359aa05789e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cb1d81-090c-467c-97ba-dc1664a777e8",
        "cursor": {
          "ref": "2ed2bbc3-7c8b-4dfa-8d1f-54e512bc001c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d2bff702-f4e4-4e8d-b502-bc65cc4bbeb1"
        },
        "item": {
          "id": "e2cb1d81-090c-467c-97ba-dc1664a777e8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bfdf097b-ee07-40de-bca5-aefc5ae7a9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d56eaf-283c-441e-afd7-894d65388655",
        "cursor": {
          "ref": "7510cc65-b3c6-45bf-9843-5d722f15786c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cdbf0023-296c-48b7-acc3-214428a33d8b"
        },
        "item": {
          "id": "e9d56eaf-283c-441e-afd7-894d65388655",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e8dfc145-61ad-47f4-9b6b-64f1d7cdaa2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f6f78d-3def-4236-9547-38e3785cf846",
        "cursor": {
          "ref": "1632ce4a-f0de-4801-9c56-bee33b96c6c2",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b252a566-4ad5-4c37-9eb5-498c5a503c53"
        },
        "item": {
          "id": "32f6f78d-3def-4236-9547-38e3785cf846",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c0c52f62-bf59-49ce-bce2-12f84655dabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45c39fe-3f17-4fe2-950e-fe40e0909430",
        "cursor": {
          "ref": "db9667fc-82a8-474a-9ffd-338f2472a4a3",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cb4f7bf0-4ae8-4286-af9b-a75858f97496"
        },
        "item": {
          "id": "c45c39fe-3f17-4fe2-950e-fe40e0909430",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d4f3edde-e4cc-47f7-8aa6-d2c8f56648c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc7eba2-2068-48e2-aa05-6c9b3168fec9",
        "cursor": {
          "ref": "9107812d-cd77-4609-bdc2-699814a3ce86",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2edd91d2-0ea1-4a48-bc50-337dfea71724"
        },
        "item": {
          "id": "ccc7eba2-2068-48e2-aa05-6c9b3168fec9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "76bf19ab-ef4a-41b8-8bec-ac7d0c746e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17724170-076a-4e2e-bcd1-3621d07b136a",
        "cursor": {
          "ref": "219f9a79-8dbf-4943-9683-a91a96d3f326",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "81337e04-ff32-4d94-9241-deef25e10deb"
        },
        "item": {
          "id": "17724170-076a-4e2e-bcd1-3621d07b136a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "32787a89-ba53-4b0b-910f-92495e36b05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b22a035-16b4-4dbd-bb98-c6425f62899c",
        "cursor": {
          "ref": "fbd5af12-e6c8-4259-a263-7bcca4fd13af",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8137db5f-284d-4a59-856a-109002d3d285"
        },
        "item": {
          "id": "8b22a035-16b4-4dbd-bb98-c6425f62899c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7bce2750-a942-4edb-b5d2-121c84bd3092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2bc23b-6fb4-4ad0-8140-2eb4d72c0f3f",
        "cursor": {
          "ref": "63c1abfd-6d65-4d8b-b7b1-ae64d0580816",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "78645254-dcef-4d13-8908-b9145d8a53df"
        },
        "item": {
          "id": "7c2bc23b-6fb4-4ad0-8140-2eb4d72c0f3f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6668c357-507c-4075-ab8e-ba9262915400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723b884a-643d-4024-9d7a-bf3f484e70e2",
        "cursor": {
          "ref": "4e2271f3-c691-4f16-9a49-81e77bf3a865",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ea77ed33-6ab7-461a-a077-6074871029a5"
        },
        "item": {
          "id": "723b884a-643d-4024-9d7a-bf3f484e70e2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a7ea911f-38a3-4d41-9a33-e3fa92c40f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342d93f2-ad97-4185-ace6-ca95994ff463",
        "cursor": {
          "ref": "75c18270-85ea-4662-a2d5-d64bfb120f14",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "62e39d6c-32b3-4e28-9585-fe91687f30e6"
        },
        "item": {
          "id": "342d93f2-ad97-4185-ace6-ca95994ff463",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7edb33e4-b201-40d7-ab1b-969ad995aaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9371d03-0627-4f09-a9fd-4ddc7676eb72",
        "cursor": {
          "ref": "4115e71e-cf4c-4f95-99de-f3c7f274367b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9b58aead-1b23-4272-8f0d-2f202c756282"
        },
        "item": {
          "id": "b9371d03-0627-4f09-a9fd-4ddc7676eb72",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "972e67fb-3ff4-49ce-b041-52d8f3ab87d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2a22f8-e986-459e-b0aa-2c9c1bf68ea3",
        "cursor": {
          "ref": "2d94ac20-fcce-479d-a344-16176053876d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eff04d18-1234-405d-815b-3c47f66cae34"
        },
        "item": {
          "id": "8d2a22f8-e986-459e-b0aa-2c9c1bf68ea3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b6556c1f-7169-4a5e-a7d6-15f02261ac4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44157f50-430e-4b0d-a546-658d606508e4",
        "cursor": {
          "ref": "47689525-1dca-4b70-a509-1ace64da7578",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c28d951c-b74b-46f9-8c7b-2b48c8b1829e"
        },
        "item": {
          "id": "44157f50-430e-4b0d-a546-658d606508e4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bb1908cb-0a2a-401d-976b-affa7793603b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3415148-fac4-4e90-8bf2-355b3153e284",
        "cursor": {
          "ref": "b51eeb19-091e-4250-87c4-a8ab02530e55",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7231d63c-261a-4c2a-8067-72cff8da1982"
        },
        "item": {
          "id": "f3415148-fac4-4e90-8bf2-355b3153e284",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fed0188f-dd45-4b07-b1ea-b449bfd568e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e4e431-0b5e-448e-b92e-214992fafb0d",
        "cursor": {
          "ref": "d219f122-6e60-448f-876f-51d5659b9859",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "13a86c2b-95f1-415f-94f2-3fd598e5b0fe"
        },
        "item": {
          "id": "16e4e431-0b5e-448e-b92e-214992fafb0d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "96325da0-6f17-4dc6-9be8-900ce4d841e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd622f24-a549-44fc-96c2-1ca25cca78dc",
        "cursor": {
          "ref": "3a1b58b6-25ab-4434-81c7-0b6bfb30bc99",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "01690cb0-33eb-4972-afcf-38fdb529047f"
        },
        "item": {
          "id": "dd622f24-a549-44fc-96c2-1ca25cca78dc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "72a09706-d439-47de-b448-4352f3449f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859df894-5cf3-4dc8-a811-b126967458cf",
        "cursor": {
          "ref": "a0bea04c-9256-497f-814c-06feedae0e87",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5d468ebd-da5d-4382-a781-df03dee90191"
        },
        "item": {
          "id": "859df894-5cf3-4dc8-a811-b126967458cf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cd296a2b-d2da-4f64-8f2d-f522856d9c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b116cca-a5c1-454c-a3a0-9c875ba828be",
        "cursor": {
          "ref": "571cd63c-c643-4c1d-84f9-2617363df354",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3003a7ed-ba49-49cd-9176-bbe96ad9877b"
        },
        "item": {
          "id": "8b116cca-a5c1-454c-a3a0-9c875ba828be",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "73bb3ba8-d60f-42e7-9af7-17476679e5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f527ac-b741-417f-bd2a-68aa3e21be69",
        "cursor": {
          "ref": "c10646e2-5c53-41b1-bcf4-6c48ab7f9dab",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "432b5f76-c3c9-4ab5-ba58-b506f1a1194a"
        },
        "item": {
          "id": "85f527ac-b741-417f-bd2a-68aa3e21be69",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "75f18f19-06d3-4dda-afd1-990690eaa99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120bcf29-94e4-4000-952f-8405380a33e4",
        "cursor": {
          "ref": "fa7e9f72-8a6b-437c-960e-ac3fe961d3c2",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb5ac051-26b0-461e-b164-09e615c7799b"
        },
        "item": {
          "id": "120bcf29-94e4-4000-952f-8405380a33e4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b017c0fa-2dfd-4ddd-9d14-dec9874aac58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbf257d-d15c-4dc8-a7f3-57a9a0ee788d",
        "cursor": {
          "ref": "206b2741-26fd-4d7e-9286-cab9b6d1b1ed",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5a9d5739-0137-4668-ba28-2e9d8bdb307e"
        },
        "item": {
          "id": "fbbf257d-d15c-4dc8-a7f3-57a9a0ee788d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "868aa251-8e60-4545-91a7-c392841a624d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a84d2e0-a9a1-4123-837f-f41fe85715cc",
        "cursor": {
          "ref": "f2e00c00-90e4-478b-9cad-e2390b8b70b3",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3fc15934-813d-4585-90ab-c97e92999118"
        },
        "item": {
          "id": "8a84d2e0-a9a1-4123-837f-f41fe85715cc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ee83e366-6223-44d1-a8c0-90edf9730627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fad7f6-066f-421f-bee6-32d17338bfdb",
        "cursor": {
          "ref": "506503f6-d519-4ceb-a27b-50a8eb984891",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "deeb111e-6cd7-413c-a0e9-ffd277e8200b"
        },
        "item": {
          "id": "c5fad7f6-066f-421f-bee6-32d17338bfdb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ca97bd4f-2f79-4a76-b6c7-9781ca11892e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02555dc9-865d-4534-8e6e-f7245caa6bec",
        "cursor": {
          "ref": "c8688303-773e-4bf7-9301-82a7c2cbed30",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "553a2047-710b-4b2c-b18e-4071b1d92e59"
        },
        "item": {
          "id": "02555dc9-865d-4534-8e6e-f7245caa6bec",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ee2cabd4-b18a-40f4-a66e-4aac9d385bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae227e9-3e95-4301-98ca-3dac28a3987a",
        "cursor": {
          "ref": "30281ba0-abfc-4c92-ab43-ef283ac61dec",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "31b1a28f-4424-4e47-b5b4-48e13397f0fe"
        },
        "item": {
          "id": "bae227e9-3e95-4301-98ca-3dac28a3987a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f8a540b9-2c24-4920-a049-1d8dd4430c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b55f666-be45-4a10-8497-077f702c99de",
        "cursor": {
          "ref": "098d522e-f262-48cd-89e8-7ac9e69378c2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4ec95741-be86-4e3e-80c5-1d466114f456"
        },
        "item": {
          "id": "4b55f666-be45-4a10-8497-077f702c99de",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0cdff493-fa6f-479f-9f5d-cf7f987867fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152b9f28-bc5e-4493-aea3-bbc85c7bc21c",
        "cursor": {
          "ref": "31cdfd1a-12cd-402b-93f7-eff53f60b691",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eac3bffe-bda0-4320-b913-50a26069f6d4"
        },
        "item": {
          "id": "152b9f28-bc5e-4493-aea3-bbc85c7bc21c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ea1291f1-48bf-4728-8d8d-6f3f55b86a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a7d8bf-4973-4228-8c32-915b8c4130a8",
        "cursor": {
          "ref": "91b60888-b99d-4a9f-8f08-3beb66cd989f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1eccc28f-7bac-4bd2-a485-78028248069f"
        },
        "item": {
          "id": "77a7d8bf-4973-4228-8c32-915b8c4130a8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c331c533-377b-42e1-a3a2-36f068d152fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717131a7-f162-4ed9-bd73-af8b37e53eef",
        "cursor": {
          "ref": "34827f44-1eb8-4fb2-aef2-87412dc9e684",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9c030692-e0fa-45ad-974b-9c6f40eb8d44"
        },
        "item": {
          "id": "717131a7-f162-4ed9-bd73-af8b37e53eef",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6f69b7c5-884b-45d8-aa19-4a4252487a0d",
          "status": "Created",
          "code": 201,
          "responseTime": 611,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ab655a22-d2d4-4415-a1ec-9e90647e31b1",
        "cursor": {
          "ref": "37a4c7ce-27f6-4ee9-a032-4067e9ad3b12",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a2b3d650-6ca9-4327-a275-1d46d2b7d931"
        },
        "item": {
          "id": "ab655a22-d2d4-4415-a1ec-9e90647e31b1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "64da306d-b681-424d-852e-7dcb229950dd",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7148bfe4-bdde-4087-aca4-f374307283b9",
        "cursor": {
          "ref": "e3e3c899-5b9f-49fa-826a-e07a6840e1ca",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "64c59b82-cb77-4453-8ff7-5827af3cb754"
        },
        "item": {
          "id": "7148bfe4-bdde-4087-aca4-f374307283b9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "072b65fe-3b8f-4080-a07c-c13506b25fc5",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8898b51a-5cc8-4ec3-bc64-f2888512224c",
        "cursor": {
          "ref": "2546befb-b929-4c1f-a188-fa2897fa4352",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8012c255-6047-4cca-98c7-e7509937bcb0"
        },
        "item": {
          "id": "8898b51a-5cc8-4ec3-bc64-f2888512224c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5fcd4366-ae41-4ca8-92b9-1025a385ca6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7140686-a554-4775-9050-65c3f4fe01c7",
        "cursor": {
          "ref": "2a3396bb-9ec1-45b2-b85f-cee8967f2914",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5d05163a-0107-4ff6-887b-71c51fd24568"
        },
        "item": {
          "id": "c7140686-a554-4775-9050-65c3f4fe01c7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b17a2a59-5bb9-42ba-ba4e-60b294bfeca8",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "45e4f2a1-0ced-4e69-8458-48fd752dac53",
        "cursor": {
          "ref": "a6878d15-70e3-434c-82a1-f62e6eff7d3f",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0af167f5-690a-47ae-b1dc-07a1f2150a03"
        },
        "item": {
          "id": "45e4f2a1-0ced-4e69-8458-48fd752dac53",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d9a8bb80-f5d5-4d78-a3cc-da6efb77fa07",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c1f901b6-2250-4b06-92f7-e63b37ab6d1e",
        "cursor": {
          "ref": "1db31bac-0aa9-4a8a-89e9-63d6d3728285",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c489db67-7584-4229-8602-21bfb249e9fd"
        },
        "item": {
          "id": "c1f901b6-2250-4b06-92f7-e63b37ab6d1e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c94a4788-4e95-4586-a861-8bc46df72103",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "da30c448-9aeb-4c86-a68c-cb177f33626c",
        "cursor": {
          "ref": "5f60068d-a635-4d68-8105-7ccf0b29a114",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8e635bd1-6a17-4003-bce7-606f5ca52477"
        },
        "item": {
          "id": "da30c448-9aeb-4c86-a68c-cb177f33626c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e3b59228-5251-4674-ae1e-09d08bdd4dd6",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1ebeb908-eead-4187-bbab-068d77a54315",
        "cursor": {
          "ref": "e55d0a8a-39f6-49b6-90fc-d44b88592c71",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "68e65ca3-2ce7-4268-aecd-06228fec9764"
        },
        "item": {
          "id": "1ebeb908-eead-4187-bbab-068d77a54315",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "416fe22b-4b4d-4982-b6cc-075ffb4c4149",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6341234c-489b-46f3-88f7-150a1abe6221",
        "cursor": {
          "ref": "1d7ad37f-0725-43d4-8d58-dfd2e43016e5",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4277647c-a27b-47c6-8fda-098ab992c8de"
        },
        "item": {
          "id": "6341234c-489b-46f3-88f7-150a1abe6221",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a41f1240-9339-4489-88a3-d8bbbbeaaf7b",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d4a50cfe-dac5-450e-a95d-17797ea4883e",
        "cursor": {
          "ref": "fe6e7cb5-dc18-4c91-b9af-d85f9f50049f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "80ed9a32-9aa4-401b-bd5d-40ef29e53e0a"
        },
        "item": {
          "id": "d4a50cfe-dac5-450e-a95d-17797ea4883e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1f0516de-1598-45d1-817d-be821b3c14f6",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "78ec1aaf-305b-4da7-a3d0-d35c38a3f95b",
        "cursor": {
          "ref": "387b5cf5-5eca-4f7d-9ee2-f9fe248bb441",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "db87aad1-607b-4e58-b21c-f1f6f380cc49"
        },
        "item": {
          "id": "78ec1aaf-305b-4da7-a3d0-d35c38a3f95b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6b789f79-32ab-48c0-96ce-3714beaf05b5",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f833dd5b-c703-4c38-9319-3ee2a558d2ee",
        "cursor": {
          "ref": "0a1c4d5c-fc10-47e2-a9b8-adc95698c491",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "693f8e01-a73a-4875-985a-0325b9495d2e"
        },
        "item": {
          "id": "f833dd5b-c703-4c38-9319-3ee2a558d2ee",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5bd2069f-b026-4687-b8a9-75f3a64e7ec6",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "60004a92-306c-4e51-8270-479d1623b742",
        "cursor": {
          "ref": "a0183aa0-433e-4efb-8784-88ce8bf4b4dd",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ff55cfa2-3581-4b11-8adf-963dbf2b2977"
        },
        "item": {
          "id": "60004a92-306c-4e51-8270-479d1623b742",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c3edf718-6188-4642-8aae-812b0de62454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e7d936-cfe0-48a1-bb13-bf0e07934601",
        "cursor": {
          "ref": "a16c119a-3cc7-4525-a0d5-91a832695653",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8ebc6e5b-bed3-4b51-9912-58c70c5071f8"
        },
        "item": {
          "id": "33e7d936-cfe0-48a1-bb13-bf0e07934601",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "672d0a1f-f771-448c-aea1-4b08cc61d712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a8638a-e1bc-47af-a0c3-e9640d9dde06",
        "cursor": {
          "ref": "e82e2890-1b66-45ea-9587-5ec3cdf32fb9",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b258ad26-0eda-4b1f-9033-06235c1e7e5f"
        },
        "item": {
          "id": "14a8638a-e1bc-47af-a0c3-e9640d9dde06",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e030a01e-8d53-4ac7-a97d-3269f11aaaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d4f1d8-12d0-4761-be52-4819b2c7c6e9",
        "cursor": {
          "ref": "cf881728-bded-4b11-8918-0975be609170",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0d55ad44-49c8-4714-8989-597719a83060"
        },
        "item": {
          "id": "05d4f1d8-12d0-4761-be52-4819b2c7c6e9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0531f3ba-55d3-4299-b409-61b6181801a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d40cca-fcbc-4af6-b236-2480611467df",
        "cursor": {
          "ref": "76913004-8782-4dd2-a799-530411b831aa",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7e4ca24b-9cb3-4238-9da0-eada0f3473b0"
        },
        "item": {
          "id": "d4d40cca-fcbc-4af6-b236-2480611467df",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "19068f3f-148f-4620-8ca8-3b16548daa80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39c8a32-563d-4bf3-98f6-a9084d295156",
        "cursor": {
          "ref": "61c6d03e-24b0-45c2-a3a3-9c9bade3b7ea",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3240b019-4948-47b8-a82f-f3dba4515a20"
        },
        "item": {
          "id": "d39c8a32-563d-4bf3-98f6-a9084d295156",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d4c75217-12f6-4062-b066-9e2235ba4dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1514849-7f7a-496a-8b7e-fad2b3f72060",
        "cursor": {
          "ref": "cf9602a7-0743-4a8a-8215-be7f3f07ad3e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c8dc26c6-6809-4f26-ae91-d390f85afb98"
        },
        "item": {
          "id": "b1514849-7f7a-496a-8b7e-fad2b3f72060",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "75267012-c2ab-4e8b-aec0-3147d15e36f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba17769-1180-4f27-a138-f8f9b5727951",
        "cursor": {
          "ref": "90dee8cf-616e-4345-adc1-c62ff2d88133",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d6142303-a901-4c27-a120-8b422aaf8385"
        },
        "item": {
          "id": "1ba17769-1180-4f27-a138-f8f9b5727951",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bfb5f6ff-e7fe-4bb4-8065-9e8426500818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f142459-f434-4fe6-b25a-a48b633942c5",
        "cursor": {
          "ref": "4db69bc4-e912-427c-8b67-d03dd0d854df",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dcb7a58e-35c3-4f04-ab21-bc70614e6d19"
        },
        "item": {
          "id": "6f142459-f434-4fe6-b25a-a48b633942c5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6ef78e24-24bf-45ac-92f2-ac93624c922e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dc58c2-991c-4d8a-beb0-c65988b4c688",
        "cursor": {
          "ref": "a6956c93-5e7f-47bf-9d14-2d3ff36a83fd",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e97d9bd5-c972-4610-96ed-a9ad10008def"
        },
        "item": {
          "id": "75dc58c2-991c-4d8a-beb0-c65988b4c688",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e63b505e-3b74-43f4-a163-c655e4bf8eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2528b603-fed0-4a8c-9886-eec61c648fb0",
        "cursor": {
          "ref": "7aa6da69-30f3-4e84-8107-3a7e617e2f8b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c46a2de1-b632-49d3-a9b7-339e24616266"
        },
        "item": {
          "id": "2528b603-fed0-4a8c-9886-eec61c648fb0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6abad0fd-a5db-4005-97f0-c33052f51955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edc1e9d-c1c0-4e9d-adcb-02ef337490e2",
        "cursor": {
          "ref": "f85aa3e0-3e8b-431e-99e0-821102def2aa",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "167defed-002d-4590-804c-e02bf1f25429"
        },
        "item": {
          "id": "7edc1e9d-c1c0-4e9d-adcb-02ef337490e2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "648e7a41-7bc2-41cc-b11e-2f5a137349bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a1203d-e0ee-40a2-9ab6-d21aba3f0764",
        "cursor": {
          "ref": "6242459d-2582-486a-ab83-e0c425a9e0a1",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fa1efe56-07c5-4902-8613-9731d86d6083"
        },
        "item": {
          "id": "b9a1203d-e0ee-40a2-9ab6-d21aba3f0764",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8b3dc128-73a8-481b-b3a2-6eaf6649c252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d18ef7-83c2-4948-a59a-08e1cc3e35b6",
        "cursor": {
          "ref": "54631cf4-949f-4323-af22-08718026b87e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "54969195-7cc2-4f77-b6b9-09e79eeb147f"
        },
        "item": {
          "id": "d7d18ef7-83c2-4948-a59a-08e1cc3e35b6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c3e0c456-3844-496a-b30c-c39a3d5df930",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0087633e-2312-4615-be43-6f4d01f64076",
        "cursor": {
          "ref": "b0926f5d-9dd9-4e7d-a904-d28c2d326c9d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "facbd0b8-35d6-4908-8086-e81291815247"
        },
        "item": {
          "id": "0087633e-2312-4615-be43-6f4d01f64076",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "696ac4c9-9c70-44e9-919a-f004bae1f562",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "cce5d3d8-fe9e-4b4b-8641-6b9e6c76ba12",
        "cursor": {
          "ref": "8793da3e-0a51-416a-ad10-f82f318b1546",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "79d7e069-d786-401d-94b7-03870b138bd2"
        },
        "item": {
          "id": "cce5d3d8-fe9e-4b4b-8641-6b9e6c76ba12",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3239a69f-3cc1-464a-801e-1f94a1e308be",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5cc6f481-cde8-4b77-9cb9-cdb952298066",
        "cursor": {
          "ref": "a5451a35-81b8-495f-8855-682b7a53bffc",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b99aa482-8ddf-4b57-a5ee-d761710a5e77"
        },
        "item": {
          "id": "5cc6f481-cde8-4b77-9cb9-cdb952298066",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c52d39e1-c4df-424a-8371-10a82303e370",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b61242d3-f337-4bfe-8296-67c60404581c",
        "cursor": {
          "ref": "155ef2be-d1c2-43e1-979b-eb9ce376dd92",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "06aac0f1-74c9-4868-8bf0-7dafe1464202"
        },
        "item": {
          "id": "b61242d3-f337-4bfe-8296-67c60404581c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa8eee11-2066-4c62-afd9-cb378a0c1775",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dc7d36f1-6d8f-41cf-a33c-8024c370e166",
        "cursor": {
          "ref": "aca1306e-1417-46ca-b168-4c607c7f98ab",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e3bbebbe-790f-4b36-b222-70addda77764"
        },
        "item": {
          "id": "dc7d36f1-6d8f-41cf-a33c-8024c370e166",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f91c589d-ceb1-42e3-9fb3-747011ba1885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bfba87-8632-4836-8b50-2bc13800bb1e",
        "cursor": {
          "ref": "065c533e-55aa-4da0-8930-eaed724bf6f1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "29bac5d3-eee2-4587-a6a3-c63578b17172"
        },
        "item": {
          "id": "e9bfba87-8632-4836-8b50-2bc13800bb1e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1da5e626-a6fe-4c1e-b5df-6ba6f6a846e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290146ea-ff1a-4a2d-8a75-60182f3df86d",
        "cursor": {
          "ref": "24033e15-f222-4ef7-883d-5b470bef1d19",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b0ed1916-937d-4d2e-aa93-90d17d457be2"
        },
        "item": {
          "id": "290146ea-ff1a-4a2d-8a75-60182f3df86d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "30d8b817-cd02-43c3-af2e-180a6ccb0f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba8201d-203c-4c26-94cf-c3070b8d7cfb",
        "cursor": {
          "ref": "35cc0e39-11f4-44ff-bd93-2cb5cdc19f50",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c204bfe8-d6c5-4ac5-97a8-e7ce1ba43015"
        },
        "item": {
          "id": "8ba8201d-203c-4c26-94cf-c3070b8d7cfb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5828027d-b277-4d0a-9149-af7015bca619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123f7595-2908-4cba-ad0c-d4addfc14bdc",
        "cursor": {
          "ref": "009f7fa6-4b2e-4f95-84b6-d54161e07b34",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cb4dbe19-c14f-498a-8c7e-399501afb825"
        },
        "item": {
          "id": "123f7595-2908-4cba-ad0c-d4addfc14bdc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "00959353-efda-4bff-b415-4fe4a692d182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33ea273-e6a1-47f7-b4f4-58e9f0d17913",
        "cursor": {
          "ref": "8bd8560e-097e-419e-8db8-9384e23fcec1",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "60c1953c-b13d-4873-b7d8-b6a1e03588fb"
        },
        "item": {
          "id": "b33ea273-e6a1-47f7-b4f4-58e9f0d17913",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2a51e980-1ded-4597-85da-384836e25f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee478e7b-23ae-4c49-aad4-4b257e036568",
        "cursor": {
          "ref": "2dc2233a-d566-4f6b-a9bf-ff08532ac19c",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f0bfbf5b-aefa-4002-a1f2-8080700fe75f"
        },
        "item": {
          "id": "ee478e7b-23ae-4c49-aad4-4b257e036568",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "93195102-f254-43d5-8096-c5781931230c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f026a30e-246e-44f5-bfe8-9b7761e5ea63",
        "cursor": {
          "ref": "b8766eeb-5701-4cb7-95ed-e360b2e6fdcf",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0febd810-0412-46da-8dcc-b2c01325ba18"
        },
        "item": {
          "id": "f026a30e-246e-44f5-bfe8-9b7761e5ea63",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8c2b7398-9e9f-446d-b425-20a295428c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff35166-a07d-4963-97cf-326996899284",
        "cursor": {
          "ref": "a1bc8cf7-cae7-4030-b493-cbf3446ac0ce",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5738f82d-2fce-4774-81a3-fe64ab123558"
        },
        "item": {
          "id": "5ff35166-a07d-4963-97cf-326996899284",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "de04bb24-0495-43cd-97ba-dd6032557700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81fa5c7-dc5d-4d52-9049-16bed18cf73e",
        "cursor": {
          "ref": "dc58acf8-e5fd-454b-b485-c644c714a116",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7ec4ea50-1a8f-48f0-8f8f-ce2f04513432"
        },
        "item": {
          "id": "b81fa5c7-dc5d-4d52-9049-16bed18cf73e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d496baa3-a30c-4929-8f7c-db044b04b335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f749cc-cf83-4387-9a1c-fccd714fbab3",
        "cursor": {
          "ref": "605ed3b0-ffea-40da-8cb8-4f21f2f3788a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "499bb0f6-8dc1-42cd-b23e-23c57fe9ae45"
        },
        "item": {
          "id": "e0f749cc-cf83-4387-9a1c-fccd714fbab3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "530805c6-0981-44c2-8473-b84e1ae254f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df5cc41-350a-421f-a401-211c70a46c8f",
        "cursor": {
          "ref": "76cefd5c-2cab-4fe4-9722-e3eece5c17e1",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ab59ea95-9820-4758-bb88-0617f87b1b97"
        },
        "item": {
          "id": "3df5cc41-350a-421f-a401-211c70a46c8f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c14d52b6-9c59-4f9f-806f-a6572ae74440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23f764b-c47d-40ec-b22e-a22fe2ba4a66",
        "cursor": {
          "ref": "f94a1dc2-236e-4855-a32d-c6b867d26ff9",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b0c22410-bc38-4e05-96c0-96d8a7f80078"
        },
        "item": {
          "id": "f23f764b-c47d-40ec-b22e-a22fe2ba4a66",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c887d5e6-1a16-48f6-9395-940b50a909a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b723ea71-c1d2-4cd5-ac05-d17e07eb11a1",
        "cursor": {
          "ref": "6f5b699d-08a3-4cc9-9f6d-9eaf0e3335a8",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1a0a109e-2f28-4204-a3ad-2ba1f78e941f"
        },
        "item": {
          "id": "b723ea71-c1d2-4cd5-ac05-d17e07eb11a1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3b3c1008-a5c1-4e74-abf0-2c74c9b61ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1745864f-c23b-409b-8004-43d1ef597ad1",
        "cursor": {
          "ref": "9fb1a0c6-b331-480b-87f1-cff970c6aad0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2c915cb3-0d49-44e8-b5e4-7d5ee4f3b3b2"
        },
        "item": {
          "id": "1745864f-c23b-409b-8004-43d1ef597ad1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0efb73ba-567b-4501-b126-aab87e24fc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795a5bc5-92c2-4fb8-9d2b-aa27568f52b1",
        "cursor": {
          "ref": "4fd67285-b1be-4f70-ae74-2ba0275b7b98",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "61fb037f-5cbb-4cc5-8be3-c06e85687eed"
        },
        "item": {
          "id": "795a5bc5-92c2-4fb8-9d2b-aa27568f52b1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d365ba6f-f10c-4521-9cea-209266d2bdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7280b3-98fa-4fb4-a31b-80c1b8cb16cd",
        "cursor": {
          "ref": "3891b81f-dd65-4b5d-a9d3-32ed9679c46e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b00831e5-0e7b-4d97-93f6-08fe46b42fac"
        },
        "item": {
          "id": "fb7280b3-98fa-4fb4-a31b-80c1b8cb16cd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "92d7b0d9-4afe-4c5b-b550-0b8c617fa946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028b13f4-14a3-4b39-b8f4-68bea04b3180",
        "cursor": {
          "ref": "2c60ac96-0be7-4074-9580-e5bf059cb144",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9d2c3dae-24e6-4729-bd78-3b8ae61b036b"
        },
        "item": {
          "id": "028b13f4-14a3-4b39-b8f4-68bea04b3180",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9890304b-5f23-41c1-9083-b3dcec2f02ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63335de4-6040-4d42-85c8-84993d6ce039",
        "cursor": {
          "ref": "a2212ce8-c1ef-4749-898e-61ac3fcd0871",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d2ee8b6c-be4b-4dd5-a533-8ee58c19524e"
        },
        "item": {
          "id": "63335de4-6040-4d42-85c8-84993d6ce039",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4742f7c1-6382-462f-979c-7e4a52f1bbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ca2910-0978-4220-8618-df41f17a7bde",
        "cursor": {
          "ref": "b30c1437-5b78-4583-9295-8dacb6cd7903",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "64ef1320-02b6-4b13-8ca5-26c7c35b4bca"
        },
        "item": {
          "id": "b7ca2910-0978-4220-8618-df41f17a7bde",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b0bb9f22-c4a8-4cb2-b663-fc29f0bfd561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c0c030-df01-4639-8308-de6cefec546d",
        "cursor": {
          "ref": "6c563147-1b09-4416-a22d-daad9739da3d",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "84882663-dc61-4612-8b53-b52cbfd4086f"
        },
        "item": {
          "id": "32c0c030-df01-4639-8308-de6cefec546d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e57b102d-6feb-4e15-ac04-fb7c442776c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ab874c-6551-47f6-963d-081c9fcb54c6",
        "cursor": {
          "ref": "78403b4d-6330-4702-8169-071cdc3ebfd2",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9b3370bc-5974-401c-976b-44f4589d9941"
        },
        "item": {
          "id": "00ab874c-6551-47f6-963d-081c9fcb54c6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2350a44b-142f-4643-b273-b408298701bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc88eb6-3f2e-4bdd-913e-837d11cc8002",
        "cursor": {
          "ref": "366bd364-6dfe-4756-acfa-43c21270b61a",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "481caec2-b315-4477-a04f-480b92518a66"
        },
        "item": {
          "id": "9dc88eb6-3f2e-4bdd-913e-837d11cc8002",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3bf89afc-e61d-4c13-94eb-404c7a07394c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f10933c-67de-4ab5-9af4-edc4fd810991",
        "cursor": {
          "ref": "f4e49dc4-7fc0-4d5d-a94a-281f41a81a64",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e2443b9e-d592-419c-aad4-c00717a59658"
        },
        "item": {
          "id": "5f10933c-67de-4ab5-9af4-edc4fd810991",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f461ecbc-a6d9-42a7-ad37-3f381af2fb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80043979-d4ed-41ff-be59-cb5d4c8c6e25",
        "cursor": {
          "ref": "05af16b3-bad5-4e69-bf0c-a499f56dcb4c",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "03e92686-e269-42b7-9af7-2a1a27decc61"
        },
        "item": {
          "id": "80043979-d4ed-41ff-be59-cb5d4c8c6e25",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "33fb731c-3309-4b5e-8232-4ef736898b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6943640-6675-40b7-ac19-d419d2fff46d",
        "cursor": {
          "ref": "5a74aeb0-bc6c-497a-97a0-e8590c643653",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3fd701f4-f504-435c-bbb7-bedbe965b6f0"
        },
        "item": {
          "id": "b6943640-6675-40b7-ac19-d419d2fff46d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "586866e4-ed53-4e13-b911-70684d151330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed6534d-0aeb-427a-8643-907aea470c37",
        "cursor": {
          "ref": "b4d7654b-e279-4c12-bcbb-95bb08f54b28",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "06310046-5af2-4f71-b5c9-e93e50fd2f5d"
        },
        "item": {
          "id": "2ed6534d-0aeb-427a-8643-907aea470c37",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2e9049e9-f456-4394-8b95-8746f32e63bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fd6fbe-e8fe-4b93-8383-399b452419ed",
        "cursor": {
          "ref": "0de52bf6-4acc-4742-abd5-9d94598db3aa",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b1b012ef-91e5-46d2-a17a-af7684482cd0"
        },
        "item": {
          "id": "b6fd6fbe-e8fe-4b93-8383-399b452419ed",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "348beb35-35c3-4053-9d66-a7867096d917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0367dee-43d8-4057-b204-61dece165e39",
        "cursor": {
          "ref": "b50ad92e-158d-4b34-a88b-15291421f7ea",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "409f8f30-6587-409b-a793-fe0d41e976aa"
        },
        "item": {
          "id": "e0367dee-43d8-4057-b204-61dece165e39",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "21b17951-423d-4ec6-9a5d-7ad90a2496d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054def35-efda-4dee-90fb-0db608702abc",
        "cursor": {
          "ref": "2800f8d0-bde1-4965-82bb-d11d5a326bf5",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1375fe51-2770-47d8-b9f9-00b3a09ece89"
        },
        "item": {
          "id": "054def35-efda-4dee-90fb-0db608702abc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7d787c6b-4db6-4379-9092-857aac6e1d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5de621-53a8-473a-a1f5-31fd9538ce10",
        "cursor": {
          "ref": "b88efda9-c148-4304-b4a0-8f9f24537a63",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "62ed0987-2f76-428e-b5ac-6ec226b0555a"
        },
        "item": {
          "id": "4b5de621-53a8-473a-a1f5-31fd9538ce10",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "201122b5-c439-4f5b-8c47-d3107e2d38e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc94c8c4-6c7a-478c-8528-6ec2c3d70c4b",
        "cursor": {
          "ref": "8470f116-93eb-4435-b555-00012ff7af73",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0f8f6104-a56a-417f-9f79-5d2bc4160a31"
        },
        "item": {
          "id": "cc94c8c4-6c7a-478c-8528-6ec2c3d70c4b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "58793efe-f787-4025-bc64-7d32c87cac46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a37d825-fd68-4a6f-b449-e6d1cda79453",
        "cursor": {
          "ref": "d16d4a4b-f279-45ee-ba31-58cfee5bbd6a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8b848151-24a7-4647-a3e3-f267d2dac6b2"
        },
        "item": {
          "id": "7a37d825-fd68-4a6f-b449-e6d1cda79453",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5b54a9bc-f8ab-4540-b503-bb43936776e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9792c0ec-be54-4d68-b867-427b9bd37dfa",
        "cursor": {
          "ref": "7b12225e-c0ca-4cc2-8cca-0a98d535245d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f98400c8-e3a9-4aff-b159-f85fbc799811"
        },
        "item": {
          "id": "9792c0ec-be54-4d68-b867-427b9bd37dfa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ee96aca-150b-4be8-b0f7-69c776e60f5f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "864e7449-4057-476c-98e1-378d0bb3e182",
        "cursor": {
          "ref": "227cc6e1-b742-432b-9bcb-6531c9aa28a1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1a13a86f-38c1-47e9-94e4-f0ed3c0cb894"
        },
        "item": {
          "id": "864e7449-4057-476c-98e1-378d0bb3e182",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4e35e7f1-92ff-4b5f-9dc4-d6a9bef68a96",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb8db9a-b89e-4f84-a9e0-5fb372c951d7",
        "cursor": {
          "ref": "554dacd0-8ff1-40d6-99e8-b836440e4e37",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "acd6d6ed-8faa-4e8d-9d93-f9b1be6bd5af"
        },
        "item": {
          "id": "7eb8db9a-b89e-4f84-a9e0-5fb372c951d7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "141d9682-36b1-4e2d-9908-1c6a9fc942e1",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7b9b32-e853-4a89-83b4-3dbce092fe6c",
        "cursor": {
          "ref": "32995b44-f260-42d8-b085-29bd952ed85e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "96346a1c-8255-46ee-a107-500b519ef797"
        },
        "item": {
          "id": "ae7b9b32-e853-4a89-83b4-3dbce092fe6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b1ecbb17-9875-4fb8-a29d-36e17afc1d0f",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ff3cd6-1ff7-4961-84e9-5d6e1d48fa62",
        "cursor": {
          "ref": "f13015dd-4e6f-4d5d-b341-adeb81c63223",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dfcf4534-ce4b-4371-9fad-6c90209a2aa1"
        },
        "item": {
          "id": "b2ff3cd6-1ff7-4961-84e9-5d6e1d48fa62",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "58488e51-b5b6-4f3a-9925-90790ed93f98",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-20T00:37:42.464Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-20T00:37:42.464Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c8bb6126-b32e-4eea-97df-23fe2592a0db",
        "cursor": {
          "ref": "7853def4-084e-4bc9-b71e-93b5ddb53cdc",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "acd2f805-4e20-4af6-8643-094d65c83602"
        },
        "item": {
          "id": "c8bb6126-b32e-4eea-97df-23fe2592a0db",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "155e8b45-fff8-4e87-beac-7a1dce90a654",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68159b8c-718c-4152-9627-cbd97cc027fe",
        "cursor": {
          "ref": "9e4d5475-b583-4faf-88fb-0bc02405908c",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f3a22312-361c-40d9-89ef-604e40b07fe0"
        },
        "item": {
          "id": "68159b8c-718c-4152-9627-cbd97cc027fe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c00e910-a4d1-447e-a10e-fa6e15447698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e38e4f4-911a-4327-aac9-a6d366a22ee1",
        "cursor": {
          "ref": "74f37f03-8d4b-4d49-bc51-365a8460b846",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b2844efa-c709-4a30-b10c-bdeb27952ade"
        },
        "item": {
          "id": "0e38e4f4-911a-4327-aac9-a6d366a22ee1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "05e01525-d469-41f2-a825-3a62fe5faa1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabb971e-d9a5-41ae-9b59-dc77ef047c3e",
        "cursor": {
          "ref": "6691afb2-e0ec-44db-b4ca-3de79dca6002",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d78cfd30-53a6-4409-8d9f-f63adf2daf41"
        },
        "item": {
          "id": "cabb971e-d9a5-41ae-9b59-dc77ef047c3e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "10916afa-85ee-4f2e-b3dd-7f0eadb3564d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc4ad30-1a4b-40d3-b6a6-8d72a6b84411",
        "cursor": {
          "ref": "2b4add38-3db6-435d-a159-84362f8ddc7e",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c7d21950-6c85-4b2b-9e40-66ae39bc8462"
        },
        "item": {
          "id": "0cc4ad30-1a4b-40d3-b6a6-8d72a6b84411",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e7e3b161-a2ff-41a3-88a2-d8196e2a2401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72289b95-c9f7-4bad-84e4-44f74dadcece",
        "cursor": {
          "ref": "2ebe1980-04de-4187-bc6f-ad04143bc707",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "10e445e0-92a0-4956-98ac-a68dbf3772d1"
        },
        "item": {
          "id": "72289b95-c9f7-4bad-84e4-44f74dadcece",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6ddf2fda-284c-4a65-a6ca-c2771ea52801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f207ee92-ada6-46fa-b00f-33a62f82bd91",
        "cursor": {
          "ref": "11245187-fbad-42ae-961d-72f89a5a0e70",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e0887215-d2a8-4674-9773-a2765c61607e"
        },
        "item": {
          "id": "f207ee92-ada6-46fa-b00f-33a62f82bd91",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "01c57749-587a-44bc-9f5b-3782b1957380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd95c7a-1954-497b-bc69-6e558c5ecd8a",
        "cursor": {
          "ref": "3f1f5890-7273-47e9-add8-8e01f0727ed6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "62ca9643-3a05-4f93-b707-6014bf0c30bb"
        },
        "item": {
          "id": "acd95c7a-1954-497b-bc69-6e558c5ecd8a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "448eb34b-d08f-415a-95d6-3c9133a08b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f562ab15-af89-4785-9670-ffebec014838",
        "cursor": {
          "ref": "04e74cd9-ff96-4b55-8464-3e7345c793f0",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f7324f2d-6607-45fc-ae7b-796676f753dd"
        },
        "item": {
          "id": "f562ab15-af89-4785-9670-ffebec014838",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9fe449c9-d284-49a1-9514-a6413b6bc621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbcc160-e374-435b-9bcb-f7393ee971a2",
        "cursor": {
          "ref": "e5fcf742-f5d0-43d1-8b34-15e9e39b5966",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2fb7709a-fc82-456e-af3e-476c33454672"
        },
        "item": {
          "id": "ccbcc160-e374-435b-9bcb-f7393ee971a2",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4d6fcf74-a9f1-4d43-9279-3146a882486a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e9a0c8-884d-4b0b-a352-8eb49137d104",
        "cursor": {
          "ref": "76de53a6-d358-43a1-8a26-5ed40ad72585",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2827b99d-74f6-4b09-b1ff-c034920cc191"
        },
        "item": {
          "id": "b2e9a0c8-884d-4b0b-a352-8eb49137d104",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e3fd3be9-649d-464a-a385-990d02183236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a47e6e-b9c8-4471-9d42-d5b954dec6ed",
        "cursor": {
          "ref": "20b266fa-6855-404c-b5a6-ff8df0be73b9",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0fe9a8c5-0d54-4293-9511-6e4c7eefd407"
        },
        "item": {
          "id": "b2a47e6e-b9c8-4471-9d42-d5b954dec6ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f3ca251e-ca29-44db-8874-89f47a9caf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabdd0af-c9e6-40b4-993f-91f36276262e",
        "cursor": {
          "ref": "c2c0e398-0fe3-47fc-b01e-c8c74243272a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "117f99ce-f139-4c60-8751-66ca6c452899"
        },
        "item": {
          "id": "cabdd0af-c9e6-40b4-993f-91f36276262e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e7bc0ceb-d496-4ebf-8c5b-4681a7792d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1852c147-3e65-43b1-a0f4-4d7cc6c57be2",
        "cursor": {
          "ref": "d4331640-9297-4642-a924-1739862fd653",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a68c9c83-4346-43ca-b33e-c5f5f2275ba6"
        },
        "item": {
          "id": "1852c147-3e65-43b1-a0f4-4d7cc6c57be2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "524b4023-c6f5-4d27-be69-280bcb8d888d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe37e3fe-50e7-4f81-8ac8-4a9a9c34913d",
        "cursor": {
          "ref": "3eebdfa8-9e8b-47f2-a230-ca2fdde9db50",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b0246d19-6bd4-40cb-810b-52a20c1f33d9"
        },
        "item": {
          "id": "fe37e3fe-50e7-4f81-8ac8-4a9a9c34913d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e580913e-a85b-4dea-9c89-862c41b0b984",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "202a8b8b-fdbc-4a15-9c44-cd4c82b785e8",
        "cursor": {
          "ref": "f6232a14-7a75-4a46-9c2a-98f44030ee80",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dd14f27e-8c58-4346-a425-aa73d74341dd"
        },
        "item": {
          "id": "202a8b8b-fdbc-4a15-9c44-cd4c82b785e8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "11a67058-a5ba-41d4-b27d-2cdb6d6dc1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7008f0b1-b034-47d5-9884-fc8ff1cfc7a8",
        "cursor": {
          "ref": "9b26131c-68db-413c-b2ff-c6f890aef45b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cd4972ff-0659-4d95-959e-0ff5d16ffef3"
        },
        "item": {
          "id": "7008f0b1-b034-47d5-9884-fc8ff1cfc7a8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b77125ec-2892-49bf-9372-1ea65a09ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64373b69-449f-42eb-a5da-1fdad0e98902",
        "cursor": {
          "ref": "194ad604-aa1a-472f-bca5-fcad514b3a32",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9a97e5e7-edcf-48f5-b1da-070727776bb3"
        },
        "item": {
          "id": "64373b69-449f-42eb-a5da-1fdad0e98902",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bba2b0e9-e549-4e2a-a5e0-016e224cfa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0736539-ce4a-4805-b8d6-0d250caf21d5",
        "cursor": {
          "ref": "ac122b88-7430-4519-b0ea-109077274b5b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0be3b79b-19ed-4249-ad98-4c74a9e72147"
        },
        "item": {
          "id": "b0736539-ce4a-4805-b8d6-0d250caf21d5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1e47de65-f2e3-4781-9e34-3b82c7d20eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df71580-dbed-4b23-ac89-fe5cc3b99e3f",
        "cursor": {
          "ref": "2d8c01a8-ea08-4465-a8e3-555b6c44f3c7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8a664de4-4f85-465c-b067-c2b088455bda"
        },
        "item": {
          "id": "4df71580-dbed-4b23-ac89-fe5cc3b99e3f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3e1d447c-dd9c-47c2-b060-748cae71e177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c94785-9c3f-4b21-8592-1aa863d9b91f",
        "cursor": {
          "ref": "63c24653-e3e3-4640-a02c-955e7297816f",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e3f70d08-4cea-493d-92f2-28edc3b2964e"
        },
        "item": {
          "id": "d6c94785-9c3f-4b21-8592-1aa863d9b91f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "583908cb-0df7-4390-9c89-013e14d47113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328b4088-e19f-4568-8fb1-72bc4b207a96",
        "cursor": {
          "ref": "1bdca577-2519-41d4-bdf1-3944efe3e120",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c6c61fe3-f249-47b2-8597-1d0cf1b340cf"
        },
        "item": {
          "id": "328b4088-e19f-4568-8fb1-72bc4b207a96",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "26a0d8b3-7806-4865-b29f-44a136d90ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e8c7c4-34e6-42da-aac4-1e50c72ff7aa",
        "cursor": {
          "ref": "d4ff2c37-b1d7-41e1-94c0-7c889b858604",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "38e3605f-1e02-43d4-b292-2596f594f604"
        },
        "item": {
          "id": "76e8c7c4-34e6-42da-aac4-1e50c72ff7aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7cd82c62-ee1b-4244-b0d3-a28f24d45653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4658b9-bc4a-4473-aef4-dba30f36e989",
        "cursor": {
          "ref": "c20beb88-894a-4286-8aa8-82935da6a402",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5174cb84-08e2-4795-a9f2-bdbcf323a2f4"
        },
        "item": {
          "id": "6a4658b9-bc4a-4473-aef4-dba30f36e989",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d57c98bd-bcab-4816-a155-79051975b493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215972ad-72b8-4452-8f18-2c14c1dabf80",
        "cursor": {
          "ref": "3da6a0af-3d10-4c13-81b4-f7bc74957542",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5b33991d-078b-4f84-88f4-e86c29a77848"
        },
        "item": {
          "id": "215972ad-72b8-4452-8f18-2c14c1dabf80",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8029ef71-76f1-44ba-be8e-c6bac5f8af09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd01700a-0f79-4ba5-9a45-077b1866a595",
        "cursor": {
          "ref": "65eb83b0-e418-49db-ad9d-36f927bca6d2",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "57d18f0f-2b8c-4232-8617-4d6e5913a4ed"
        },
        "item": {
          "id": "dd01700a-0f79-4ba5-9a45-077b1866a595",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "adb5568f-9f16-4478-9dc2-ba6d277218d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3930e4de-b2c5-415f-9e74-ec82445a9ef6",
        "cursor": {
          "ref": "56409583-b4c3-4120-82e6-35c36aac617e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0506ea70-a296-4b33-a89b-fee8cb758400"
        },
        "item": {
          "id": "3930e4de-b2c5-415f-9e74-ec82445a9ef6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9a288c26-45da-4eba-a259-fff323c9bc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75511b19-693e-4676-9ddc-06fea31f6fa6",
        "cursor": {
          "ref": "6c267a2c-2062-4048-a5a0-ee36e284a5be",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0f7ee5ad-8a1c-4905-bc9c-7be72a70286c"
        },
        "item": {
          "id": "75511b19-693e-4676-9ddc-06fea31f6fa6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f6adc44a-4df0-47f4-827b-c137e0107699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916d53ce-67e9-4fed-83a6-b12ef716d609",
        "cursor": {
          "ref": "07896bc4-4383-4aa6-af2a-275029574cb7",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7406de8e-2750-4943-a77d-a1bc2b67e19c"
        },
        "item": {
          "id": "916d53ce-67e9-4fed-83a6-b12ef716d609",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c8d1bc5-84ee-4bda-9ad9-21eb578caaac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c50f603-22c8-42de-aa09-a1b521f248c0",
        "cursor": {
          "ref": "c7b4a7c7-42dc-4577-b570-8e1116899c98",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1f81442b-9159-40c1-a223-3b67d89779f7"
        },
        "item": {
          "id": "7c50f603-22c8-42de-aa09-a1b521f248c0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b53bcdcf-129e-4bbb-88b2-fdfce8b93f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ade8555-5c68-4f4d-bcdb-18b052ac29da",
        "cursor": {
          "ref": "621d8bd1-d18c-486d-b634-82899a083515",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5b939c2b-048f-4fef-b0a9-03f203c475d5"
        },
        "item": {
          "id": "3ade8555-5c68-4f4d-bcdb-18b052ac29da",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c4dc723-1406-4e0e-a79f-1006c140324d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f26a6ad-9241-4c51-b41e-80d7e66b86d0",
        "cursor": {
          "ref": "b8b15b3f-5a76-49da-9336-0b93d21ced9d",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "546e7ab8-b9dc-442e-ab1e-d66a49cf420d"
        },
        "item": {
          "id": "2f26a6ad-9241-4c51-b41e-80d7e66b86d0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "84b1f559-c5ff-41c0-a7b8-961e5ddee863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a451abfe-b03c-42ed-bc49-14bc95ae5fe8",
        "cursor": {
          "ref": "60f7aa12-3ac3-44c9-b3c3-2393d28431eb",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "54bff74c-4aaa-4809-bc1c-fbf73c18c9ae"
        },
        "item": {
          "id": "a451abfe-b03c-42ed-bc49-14bc95ae5fe8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8dd4450e-6171-4c49-ab87-e86117cf07e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0ff71d-2016-4899-910f-4ca8d239524a",
        "cursor": {
          "ref": "6020b959-43b7-49d0-a4fe-6a23c65dd964",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "15f362aa-f8f2-475e-a2c9-f224c9ba27cf"
        },
        "item": {
          "id": "cc0ff71d-2016-4899-910f-4ca8d239524a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "da34fb8b-88e6-45a3-a4c1-e809f649d107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569f69ba-44b2-4573-8822-96237ff668c4",
        "cursor": {
          "ref": "43203e94-e390-43de-a827-381683448f48",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "19dd5d71-c7d2-4cfa-9eeb-1fd4f5efa33f"
        },
        "item": {
          "id": "569f69ba-44b2-4573-8822-96237ff668c4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "21eae2d9-7007-42be-a398-1ac8d13038c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8c382e-2fc2-4d5b-b013-a18dfd6a8c74",
        "cursor": {
          "ref": "230deaaa-24fa-4128-b352-f41707d5f1e4",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5464d496-ff0b-4896-942a-94c98aa305cd"
        },
        "item": {
          "id": "2a8c382e-2fc2-4d5b-b013-a18dfd6a8c74",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fe210f69-cb56-4b71-bcd1-57f8259f37ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6a2a45-d0b7-43cf-81f1-0d4d9232441e",
        "cursor": {
          "ref": "88bcbd18-028f-46d1-8913-874b67e8ca54",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bf52169b-5bbc-4028-b4de-43b04d36cbe8"
        },
        "item": {
          "id": "ce6a2a45-d0b7-43cf-81f1-0d4d9232441e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b8bc1e49-203f-4313-be87-63f5a40c16ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccb799d-e2cb-43ba-9446-94ef3080316a",
        "cursor": {
          "ref": "e369be91-f25a-4e89-8767-74b8cb4459eb",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cda7c399-4a48-4346-814b-e6e4abff4720"
        },
        "item": {
          "id": "cccb799d-e2cb-43ba-9446-94ef3080316a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a3d0b6c7-7f83-4f63-adb4-9fe69bf269e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec80285-db43-4f46-b74d-f4a549a6acb0",
        "cursor": {
          "ref": "80da7725-974c-4159-9136-838f8db8fd0b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56a301fb-eeb3-47a3-87bf-598abb3877aa"
        },
        "item": {
          "id": "cec80285-db43-4f46-b74d-f4a549a6acb0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6eb60d31-da40-4fa7-9b47-993d0841ace7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4ba7e-1c15-43c0-a4d8-3e7ff1eac65c",
        "cursor": {
          "ref": "d4139741-9085-41e1-9f3f-3a8496854d65",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "22dfe28b-7d3e-4659-9dc8-4e538833790e"
        },
        "item": {
          "id": "d7f4ba7e-1c15-43c0-a4d8-3e7ff1eac65c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "052fb112-6da0-4819-9ead-70010d8be9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e4e7e4-6c0a-40b4-9ba3-ac155b351f2a",
        "cursor": {
          "ref": "ab225d2e-833d-4d5d-bd66-587f1f2fc33e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "90976ce0-f895-4b68-a1be-79da91aad96c"
        },
        "item": {
          "id": "46e4e7e4-6c0a-40b4-9ba3-ac155b351f2a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e3e3e8fc-9214-4347-9007-e46a7a4a6448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cc79c7-0ca3-4079-9019-c20860359720",
        "cursor": {
          "ref": "77ab8e2d-0f21-4cdf-b605-892a702348d1",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "58d4e63c-202e-4e2b-a54b-b03d8c359d7b"
        },
        "item": {
          "id": "c4cc79c7-0ca3-4079-9019-c20860359720",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "78e839f1-c0a9-40b7-b57a-eb6d66aebb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282409a8-d0d9-4b34-a824-8afd98593b0f",
        "cursor": {
          "ref": "e14c7329-ca92-4f08-aeb7-42e4afef2c9d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6654afb5-03e0-4308-b62b-5d62d5253849"
        },
        "item": {
          "id": "282409a8-d0d9-4b34-a824-8afd98593b0f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "90b805ed-0f88-4d25-8de4-6f408347ea97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9303a3c7-d9bd-411e-b9cb-d0e756d9387f",
        "cursor": {
          "ref": "c300a700-88c9-4a1a-b586-d1275b118d67",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "32943db2-6eb1-4825-af4e-975177590f16"
        },
        "item": {
          "id": "9303a3c7-d9bd-411e-b9cb-d0e756d9387f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "44fcb418-c71f-416a-8a57-c6dc23937632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e5d8a7-70eb-4017-af86-ba0a01b0b939",
        "cursor": {
          "ref": "aed717c2-18a7-4c69-89e3-0ca467b60254",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "aa62e0e0-6cab-47e5-a6e4-8bfd33ae9dea"
        },
        "item": {
          "id": "42e5d8a7-70eb-4017-af86-ba0a01b0b939",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "de4bc8cd-8bc9-4d7d-8dac-c4bd810a78b3",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "74afacd9-80df-41db-85fd-3296aa00db16",
        "cursor": {
          "ref": "dfee8ed7-6346-4ba4-94bb-7e33bf69a92b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b030cb8e-6244-4805-ad75-670eba1a7491"
        },
        "item": {
          "id": "74afacd9-80df-41db-85fd-3296aa00db16",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a318bc6c-31dc-41fc-b507-951688091673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de42035f-838f-4b74-a90a-bfbac2fd6246",
        "cursor": {
          "ref": "ab29a398-21d4-4a72-91ce-ede8ca04bc46",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "870eac8d-8c25-4f3f-9e23-15b91db60852"
        },
        "item": {
          "id": "de42035f-838f-4b74-a90a-bfbac2fd6246",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9f44a1d5-a4c1-4f92-9c52-ef145c0ca3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e79d5b-3d79-4005-8a12-dc2c93c33e0e",
        "cursor": {
          "ref": "01dd796c-9582-4ead-8c72-5741489eaab4",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6699327c-46f2-4a62-990b-12c03a0a9fab"
        },
        "item": {
          "id": "83e79d5b-3d79-4005-8a12-dc2c93c33e0e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5e85166e-d2c5-4ee8-bbcd-8307e58f2302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16834a4a-a275-4104-82a2-7deeb4443c9f",
        "cursor": {
          "ref": "b4c8c66c-bfc7-449c-8592-48488db228a7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0a429569-2f4e-4cc1-8925-d878202665b9"
        },
        "item": {
          "id": "16834a4a-a275-4104-82a2-7deeb4443c9f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0d1c5ec5-41e7-4cf6-8f2e-514b1df01669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0654e3-d3af-4121-9136-788067727fe0",
        "cursor": {
          "ref": "94910e83-ba94-4759-84b7-b8624fcf4eb9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "40fbb651-f4e7-4f2b-8c80-fb84fe7a3637"
        },
        "item": {
          "id": "0c0654e3-d3af-4121-9136-788067727fe0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6f4f0037-a6a5-4b74-b81e-9851cb1bdf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eb71c4-9fdb-4ffc-9c76-fd4f8bbc0b16",
        "cursor": {
          "ref": "121c995a-5013-4639-81dd-b55878cf1638",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bf632a58-6743-4109-a7ee-3cca1912d753"
        },
        "item": {
          "id": "f6eb71c4-9fdb-4ffc-9c76-fd4f8bbc0b16",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e4d28422-521e-4663-8499-705837ef001d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e405bf-b78c-40c2-ba2f-008ab6b1c7aa",
        "cursor": {
          "ref": "1d7e5cee-af5d-44bf-b80a-5485cb64043c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0f70f4ba-ccd4-4ee0-8a5d-f92353a6699f"
        },
        "item": {
          "id": "08e405bf-b78c-40c2-ba2f-008ab6b1c7aa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4aeea63b-f668-433c-8a6b-608b5e69b744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acdc5b8-701f-47e7-8c47-5ab04114b97e",
        "cursor": {
          "ref": "7e4f6b0c-2195-4f90-b8a4-b90f29da8b86",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "46d57471-588a-457e-972e-cdbf4fe1b286"
        },
        "item": {
          "id": "5acdc5b8-701f-47e7-8c47-5ab04114b97e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3fe0ae68-cdf3-47c0-8e1b-efa6f343010f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec00a5a-692f-4814-a672-fae66b5d9cb4",
        "cursor": {
          "ref": "0cf0c2ab-d04e-4c23-bb49-fe8c121d6910",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0857da20-3747-49a1-982c-f2af70570aa7"
        },
        "item": {
          "id": "0ec00a5a-692f-4814-a672-fae66b5d9cb4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58fa50ed-dc4f-4f76-b2d0-e8be8c40d703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128c9466-9db9-472c-a5c5-c0e0c2fd053a",
        "cursor": {
          "ref": "cf99a953-6734-4bd5-8cef-0b1c2698a997",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "99b491e6-c438-4797-80c6-6f8fd90334db"
        },
        "item": {
          "id": "128c9466-9db9-472c-a5c5-c0e0c2fd053a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dfd0a33c-ad11-48aa-a436-9612e0fc4e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9056e8-cd19-40e0-b593-419f6c034310",
        "cursor": {
          "ref": "2e0ba4ba-678c-4ce4-a39b-02cd263f6b51",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cbc2e913-f073-49a9-beef-763b465d18e8"
        },
        "item": {
          "id": "6a9056e8-cd19-40e0-b593-419f6c034310",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "aa6ab4c0-9735-4874-9516-b77958685113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52430464-6177-44a5-9827-b50f6f04f6af",
        "cursor": {
          "ref": "0aaca953-17df-487d-bcec-fcd0f60cb604",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2ad7a286-9ba1-4cb6-ba72-50dfcc069df5"
        },
        "item": {
          "id": "52430464-6177-44a5-9827-b50f6f04f6af",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2c229e00-7edc-4735-bd29-09840e1b1815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac8b649-8550-4357-832d-bbf6b2ceeda2",
        "cursor": {
          "ref": "c25f62a4-80f4-42f3-8c66-5971113e1d93",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "54d008b1-160f-4474-aca3-bfb1d1c26e2e"
        },
        "item": {
          "id": "0ac8b649-8550-4357-832d-bbf6b2ceeda2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "30102e5a-b8c8-41c5-86cf-4c54ddcd77eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9902bde1-301b-48bc-9288-688aadef664b",
        "cursor": {
          "ref": "21824caf-e002-4f4c-ba50-790e8b29aeef",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4ba09dfd-7f99-4b9f-b4ea-ed0650ab9054"
        },
        "item": {
          "id": "9902bde1-301b-48bc-9288-688aadef664b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b76d226a-070b-473a-8285-e39c5bb88b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45295c77-853e-43f9-9cf2-efa96bca3431",
        "cursor": {
          "ref": "e6841654-3cd6-47f6-8f5a-33d066d1e87c",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d3039a21-eb18-4b2f-b598-4d31fa3d3520"
        },
        "item": {
          "id": "45295c77-853e-43f9-9cf2-efa96bca3431",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a5107341-bf59-47d5-9878-841592e162a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb40526b-a061-405b-8ea7-5e9611c423a4",
        "cursor": {
          "ref": "ae862e17-6b88-4ddf-9bee-a7dbb1a3da9a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d81ac30f-b41e-475d-9b50-2919af209db6"
        },
        "item": {
          "id": "bb40526b-a061-405b-8ea7-5e9611c423a4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0beaceda-4184-4ec4-af9f-83fbefe208bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1875dc38-e717-4466-81a6-ba2309bcd691",
        "cursor": {
          "ref": "942e8fe7-f2a2-4ef9-a857-e3bca07a2cce",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "79a6b749-f7bf-4f84-9f66-3cafbde1db41"
        },
        "item": {
          "id": "1875dc38-e717-4466-81a6-ba2309bcd691",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "39607ef2-5d3f-4b75-a5b1-242573cb846a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2d9c6c-8cc6-4b84-8659-c5e00cdbf49d",
        "cursor": {
          "ref": "a1d622e1-298d-45c2-aefb-694069d41a09",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e9f3baee-1311-4ba7-ad9c-011d56960dbe"
        },
        "item": {
          "id": "0a2d9c6c-8cc6-4b84-8659-c5e00cdbf49d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "59d62172-a150-48d8-8963-ff4a1e281471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea7398e-704a-4d9d-aea7-0a8210914337",
        "cursor": {
          "ref": "7d5189b6-f9eb-4c7d-95de-7da0fd7fae7b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "403b48f3-ab40-4fe6-b330-dde9f69492ed"
        },
        "item": {
          "id": "3ea7398e-704a-4d9d-aea7-0a8210914337",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "73f2b0a2-3b94-4a33-a727-a9fd89dcdcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d649cc-774a-494f-8396-a9fcc3cb839e",
        "cursor": {
          "ref": "cc973900-a525-4a08-a0b9-361be7ff18b7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "47d8b2ba-5885-45be-a538-f75041a50d37"
        },
        "item": {
          "id": "c9d649cc-774a-494f-8396-a9fcc3cb839e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b5851fe9-32b0-4f2f-b5b3-53b05e21d9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4213530-2729-410c-b78a-c0b51870162e",
        "cursor": {
          "ref": "3be29f0d-6335-4e38-be94-57df3425a635",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b397ca47-06df-4fd6-8946-d86b7717ec8d"
        },
        "item": {
          "id": "f4213530-2729-410c-b78a-c0b51870162e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "22130f55-9d5a-47ff-8515-1f28d5eb8003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cac05ec-89d6-4cb4-ba6e-9f7feddd5579",
        "cursor": {
          "ref": "d989b5ad-97ef-40af-b276-fe62bc61e2de",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5856c7fa-934f-415d-97b8-65872bc7fa8c"
        },
        "item": {
          "id": "4cac05ec-89d6-4cb4-ba6e-9f7feddd5579",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e4a711cc-ff4b-42eb-be7f-902fb5273544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e6384c-9413-4b0d-9392-4ba14355adf0",
        "cursor": {
          "ref": "966d7187-b608-4656-a029-b942d1f87cd5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "43cda8e6-fab8-4bc3-9a02-3e860d2e5fd0"
        },
        "item": {
          "id": "d8e6384c-9413-4b0d-9392-4ba14355adf0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "30e78d57-1234-4264-8960-9c492dae40c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289cba9d-b68f-47fa-a1ab-2bd6df5b57d8",
        "cursor": {
          "ref": "e74e37ea-e201-453c-93b0-8e9dd996c1d9",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "635fdbb4-6766-49ed-8288-28f8fc6e91fc"
        },
        "item": {
          "id": "289cba9d-b68f-47fa-a1ab-2bd6df5b57d8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3afacf2c-6ac4-430a-bf51-70c8ec523042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a16604-fa70-4765-adf9-72f93e0454cd",
        "cursor": {
          "ref": "bea2e1bb-9989-4ae3-bbef-a28679a50b3f",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0b4cbca6-1ecd-4afc-b08b-d52027bc842b"
        },
        "item": {
          "id": "00a16604-fa70-4765-adf9-72f93e0454cd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "14fec3b0-7a0e-4014-a639-9a9bd09464c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e60c02-d1db-4c1c-9574-6a55b43af300",
        "cursor": {
          "ref": "66d709b7-a446-464d-8362-43456e8b968f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dddea1fa-bc1e-46b9-9e8c-9e155ed27f35"
        },
        "item": {
          "id": "f5e60c02-d1db-4c1c-9574-6a55b43af300",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c8070e47-795a-46f2-8f45-1c8b042be06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f977022e-79fe-449d-ae86-f89c071e40d1",
        "cursor": {
          "ref": "3346e57a-13e0-4d25-a2dd-acf043ce7fa1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c9a0514d-81bd-4aab-8a4b-f602f051f695"
        },
        "item": {
          "id": "f977022e-79fe-449d-ae86-f89c071e40d1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6144fcff-2e3d-45ea-82da-833d13e78ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfa6798-4b13-4eb1-9df3-792753aae1f4",
        "cursor": {
          "ref": "4f5f47e6-06f0-4b5d-a98c-e5cdf8a00a6f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "391d905c-e862-400f-be67-6c84cdaff1d6"
        },
        "item": {
          "id": "8dfa6798-4b13-4eb1-9df3-792753aae1f4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f140de9a-2d7d-4dd6-a5df-f396a4b366d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb7c848-370b-4d06-b4a8-902a4908ca40",
        "cursor": {
          "ref": "fdc90dea-287c-4ed0-aecd-5241185975ff",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9a64b030-240a-4079-820a-65e63b43756f"
        },
        "item": {
          "id": "9eb7c848-370b-4d06-b4a8-902a4908ca40",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "136f88ba-34c1-44ef-93c8-91a588b7953c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cc3c76-bcbb-4e2b-8e7d-82f75d2b4228",
        "cursor": {
          "ref": "50aa9329-c9d1-4e30-8c08-a51aec3cd624",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "13bbb58b-de4c-44da-8664-5508ceac9235"
        },
        "item": {
          "id": "e9cc3c76-bcbb-4e2b-8e7d-82f75d2b4228",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cf35fd40-be77-4f00-bcd2-c2879aee945b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4ee36ba4-2ce8-42e1-ac00-9225b9f01dcd",
        "cursor": {
          "ref": "63c3f44f-f229-4030-8ddb-b34dbc184061",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f0a3fe7b-51c6-4427-bb75-502f88bf69ca"
        },
        "item": {
          "id": "4ee36ba4-2ce8-42e1-ac00-9225b9f01dcd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9bac7a7c-4cb4-4b0c-ac2b-2cab10215f47",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0b28178b-c9e8-437a-8c80-353636971a75",
        "cursor": {
          "ref": "2b3cc2a8-11ec-4a2a-9e7c-830d8dc349d0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b0781f1a-6a56-4e32-a397-161855bbe6f5"
        },
        "item": {
          "id": "0b28178b-c9e8-437a-8c80-353636971a75",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "00b8d0b8-f8c0-4d95-88d6-3b502f009370",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0c41ba71-2b4f-46f9-90b4-3d8732977b54",
        "cursor": {
          "ref": "67e2866a-8d82-435b-9b31-c842b31c3b48",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "564c5dee-92d7-4e10-9d96-27d9ae4075dc"
        },
        "item": {
          "id": "0c41ba71-2b4f-46f9-90b4-3d8732977b54",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ba13a34d-0cb8-4299-8c24-8003f0c540ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2705baf6-9ff3-4d28-a4ca-175d773b1936",
        "cursor": {
          "ref": "7171ba8f-780e-440f-b8b6-28e6062d9614",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9e8bcb55-49d9-4ce8-853d-7cddc5680dcf"
        },
        "item": {
          "id": "2705baf6-9ff3-4d28-a4ca-175d773b1936",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "12e64388-2adc-4541-8eed-094a101465e1",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "6ba378fb-d9b0-459f-a315-9d578eb21f70",
        "cursor": {
          "ref": "15b1a73a-7335-476d-bef8-eb334540ca90",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d681a751-46e9-46ed-894d-502b70521b6d"
        },
        "item": {
          "id": "6ba378fb-d9b0-459f-a315-9d578eb21f70",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e9181366-4cd6-4c9c-9a75-6c789bb4c6a4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a632d29d-6d6a-4b25-b9a1-9637ad5fdc5f",
        "cursor": {
          "ref": "ae831b49-f880-4add-b3f7-7cfa134cc1be",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5964d909-d591-4d87-8fc8-9ece7b58678d"
        },
        "item": {
          "id": "a632d29d-6d6a-4b25-b9a1-9637ad5fdc5f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "76dc3968-0c01-4f8c-9882-bd5938a2908d",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "fc2cd405-ef74-4ce4-8def-7d6c8ed00809",
        "cursor": {
          "ref": "cdc9041c-8bf7-4314-a2e1-58293690cf74",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "10b4ec1f-6704-4bc5-bcaf-bd5c920545e4"
        },
        "item": {
          "id": "fc2cd405-ef74-4ce4-8def-7d6c8ed00809",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8fa638a6-6350-4cab-9bc0-dbf7bf683958",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "519a4fa2-826d-4b11-b75d-7cd353d02abd",
        "cursor": {
          "ref": "af82f3f2-8878-487a-8c17-afa1152aa2d0",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "85bf0824-8811-4886-970d-6b3db6b5313f"
        },
        "item": {
          "id": "519a4fa2-826d-4b11-b75d-7cd353d02abd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6b81295e-1aed-410a-b679-446135273dd2",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a3c048f9-3fd1-493b-a5b3-0445bf1a61b6",
        "cursor": {
          "ref": "716377a7-0eaa-4d45-b54f-430fef2efaa9",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cd9feced-a5c6-4778-aa85-63ba2c9ef5bb"
        },
        "item": {
          "id": "a3c048f9-3fd1-493b-a5b3-0445bf1a61b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "37d41c88-a336-4f43-ac2f-095bd8cfd2ad",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "06c56428-d9b6-4dbc-bc0a-941e703ccb77",
        "cursor": {
          "ref": "9e22a5dd-d161-42de-8666-d285302064e0",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9f7b8f38-eee8-421f-b21c-3bdefb024317"
        },
        "item": {
          "id": "06c56428-d9b6-4dbc-bc0a-941e703ccb77",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9388dbb4-3845-4796-9cdc-0f0d9279f659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0028b24a-ae38-4636-9b06-c0fee82c8721",
        "cursor": {
          "ref": "fb821325-4bc6-452e-bbd8-586774cac970",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "509fff28-49a7-42ff-b5c3-2454eb373685"
        },
        "item": {
          "id": "0028b24a-ae38-4636-9b06-c0fee82c8721",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "615071de-703d-4474-8f8f-cf3a156d3550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9045974-b1c5-47be-986c-8f03f5c6eac4",
        "cursor": {
          "ref": "b23fa193-d81c-467f-a731-e6c27be808e9",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cbb53758-abe2-4c9d-8b56-1f6411a231df"
        },
        "item": {
          "id": "b9045974-b1c5-47be-986c-8f03f5c6eac4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "40213d07-8301-4c60-813f-1331163ed1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9ba79f-4251-499e-901b-fb1c57df973b",
        "cursor": {
          "ref": "cfd4dfbf-edc1-4986-b9e0-3ddb5af3a4da",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6e8d68ae-6e63-4f35-96dd-de2a7f6cc0a4"
        },
        "item": {
          "id": "8a9ba79f-4251-499e-901b-fb1c57df973b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "55b65d1b-9e77-4c48-86aa-3e51a5941e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7246b27-b9ac-4f39-a0b1-6ebdd3f739cd",
        "cursor": {
          "ref": "61b389f2-0b42-4166-a614-0202f536d73c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ff68220a-159a-4ffe-bf7f-f8673bf21b54"
        },
        "item": {
          "id": "a7246b27-b9ac-4f39-a0b1-6ebdd3f739cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "de28ac96-e372-4682-83cb-70f54f9f6ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c671319-9f91-462e-902c-2de224757b29",
        "cursor": {
          "ref": "c1b1cb6a-87bb-45d7-9025-ec56836b34b0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2b2e864c-b6d3-4f9e-941f-205e31c87698"
        },
        "item": {
          "id": "3c671319-9f91-462e-902c-2de224757b29",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cf5997e9-b49b-4528-848d-cf1922d1a06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889a892b-bf7d-40db-9d93-809d618b3cbd",
        "cursor": {
          "ref": "b1db0815-854e-422e-beba-5380efe65673",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "40d1e32a-62b2-4927-9c3a-61568588e0ca"
        },
        "item": {
          "id": "889a892b-bf7d-40db-9d93-809d618b3cbd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ce15aa0a-ac89-4c02-98da-74ed63a1f028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f892eb29-e75b-4d83-bf12-03a7174ff3c5",
        "cursor": {
          "ref": "f480a9ec-f8a9-4f76-9d91-df41535c80f6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7e626491-4d4c-4dd3-881d-10cbc3fc3c49"
        },
        "item": {
          "id": "f892eb29-e75b-4d83-bf12-03a7174ff3c5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "82141a9f-938d-4df1-93bd-c8d0c4a3ff00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e448c9f-65c3-4c37-bff4-eeca11043b19",
        "cursor": {
          "ref": "078992ee-f67f-491f-a5ff-319d7dbe3ab3",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6df0b5d3-8e70-4f3d-bb7e-e3c70fe32a4d"
        },
        "item": {
          "id": "5e448c9f-65c3-4c37-bff4-eeca11043b19",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9d37053b-f316-478a-b335-4d0a782a5796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c7ec05-9609-47fd-a381-2f2459b48261",
        "cursor": {
          "ref": "64775118-91f7-4a0f-b5ac-6534f9ed939c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "03587af4-81bc-4181-8422-a3b2edb5037d"
        },
        "item": {
          "id": "e5c7ec05-9609-47fd-a381-2f2459b48261",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9061f61e-c87e-491a-b8a6-866038a95ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669e05e4-a81d-4c30-8f7a-94746565f703",
        "cursor": {
          "ref": "be30bfa3-21c1-4671-9c3c-6d3e355ebf9a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "503fa47c-bb0c-4ca1-8526-2f47ab37e3fe"
        },
        "item": {
          "id": "669e05e4-a81d-4c30-8f7a-94746565f703",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "32dabbd4-3efc-4a2f-b095-492ecde1b85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df38a376-a9cd-4844-ab84-9bce1faad2f1",
        "cursor": {
          "ref": "0c7e143c-6c86-4af9-a08d-03e25538894e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aca67e0b-8a4b-4caa-9652-b38496304621"
        },
        "item": {
          "id": "df38a376-a9cd-4844-ab84-9bce1faad2f1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c2ac3f5f-6b59-4ad5-bcbb-0c085fc59464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c55720-705d-48a2-8e41-2be8650481d8",
        "cursor": {
          "ref": "5edcd4d3-4a15-4b66-8375-42f97a00a648",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1e617385-70ab-41e0-be7a-f962cc466d0c"
        },
        "item": {
          "id": "c0c55720-705d-48a2-8e41-2be8650481d8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b9bafb96-5929-4a98-ac42-f5adf2f865e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffaffb3-5140-4cce-b184-5e53943c65e1",
        "cursor": {
          "ref": "bbdf6537-56c6-4802-8d1f-121c42f7a525",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9f1c933a-c703-47e4-a3f8-cfbb9dfce8fb"
        },
        "item": {
          "id": "9ffaffb3-5140-4cce-b184-5e53943c65e1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5319d514-7dae-4fdb-ac25-958fe8dfff7d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "553a1b6a-b425-4bae-9299-78895594bf91",
        "cursor": {
          "ref": "a4c3715d-d56b-45c9-983e-7f3dcace2374",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9aeb0e08-e40c-4b37-b8f2-daa743dc1fcd"
        },
        "item": {
          "id": "553a1b6a-b425-4bae-9299-78895594bf91",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fc4fc6f3-9b85-42a6-8267-a40d3aa23bdb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e8fa12a6-61e1-4d70-be97-fbd0396d8a3e",
        "cursor": {
          "ref": "f7fa5efd-fe9a-41ae-8d27-066549b760f0",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9c58dcbd-4759-4913-8dd2-585838c7c35a"
        },
        "item": {
          "id": "e8fa12a6-61e1-4d70-be97-fbd0396d8a3e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9eb50164-ce4b-4985-aea9-15c51ccc56ec",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7a1db5db-9eae-4fdc-8cf1-2df44c632dea",
        "cursor": {
          "ref": "6295c1ee-daee-4f59-8069-6dcab14ce226",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "98d538bf-51d0-403b-b9fb-270e7e5fd030"
        },
        "item": {
          "id": "7a1db5db-9eae-4fdc-8cf1-2df44c632dea",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8312fb31-966d-4444-bc27-c59407a5f2e0",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "414c9038-dba2-468f-9015-0a42400111af",
        "cursor": {
          "ref": "44406eb5-7faa-4100-b149-3ec07269c4f0",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fc17d56d-3cb7-4af3-a177-cb7680eff895"
        },
        "item": {
          "id": "414c9038-dba2-468f-9015-0a42400111af",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f7fcef7c-d8d2-4dd1-9ddb-9604465442dd",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "25b18120-0188-421e-a672-55eb4828307c",
        "cursor": {
          "ref": "18352a3b-e4d5-409d-a8b2-88188ce0c3c7",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "13766684-954c-4ee9-b646-4060d7a603cb"
        },
        "item": {
          "id": "25b18120-0188-421e-a672-55eb4828307c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bbe703a0-71d4-4e73-95bd-ca6298b2a252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2ebb14-6030-440c-9dbe-241058474e19",
        "cursor": {
          "ref": "892293d5-126e-410d-9266-cffa8ccfcbae",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "10089c68-6cdf-46e2-9de8-82ba4733a3c0"
        },
        "item": {
          "id": "9a2ebb14-6030-440c-9dbe-241058474e19",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0737ebee-1f91-45f7-96af-ac20e8391e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec6373e-55a2-450d-89af-58eba588c8ea",
        "cursor": {
          "ref": "758d48ed-1eac-4ffb-b734-274d11a59ed9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "59f53929-7afd-48c9-a3d5-6f53475c7f19"
        },
        "item": {
          "id": "4ec6373e-55a2-450d-89af-58eba588c8ea",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cdc08c5a-e8b0-4900-817c-cfefc0e9e86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cef05fb-43bc-4822-a861-bae741d79a0e",
        "cursor": {
          "ref": "85b363c3-5c63-444f-a11f-80bb65071152",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6361099d-36c8-4424-ba85-5fbf024a0056"
        },
        "item": {
          "id": "1cef05fb-43bc-4822-a861-bae741d79a0e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "76fe02fb-6a16-4e15-af03-cc44f05c0831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f7753a-1f7f-4673-b1dc-1a004a678955",
        "cursor": {
          "ref": "2f97de0a-7a64-4210-a509-dd836ff89e71",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4f893a33-c3f1-4fec-aa54-bde3a2e42e29"
        },
        "item": {
          "id": "e7f7753a-1f7f-4673-b1dc-1a004a678955",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2d71e5b9-785c-4fa9-8bd2-04fb6744b53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426293e5-553c-4bd3-b4af-4f26a7c95b08",
        "cursor": {
          "ref": "30ff9aae-925c-49f5-9200-c629e60b9356",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8e1eb7a6-aa5f-4f83-8c0d-6d82ed3ff6d6"
        },
        "item": {
          "id": "426293e5-553c-4bd3-b4af-4f26a7c95b08",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "26d0a234-111d-4805-ad93-b7bfae873db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923e5476-97fa-4413-8cfd-20e474c62106",
        "cursor": {
          "ref": "2aba09b3-822d-4622-9581-198031f2a2e4",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d14a74a5-e3c6-4467-b152-c79733caf543"
        },
        "item": {
          "id": "923e5476-97fa-4413-8cfd-20e474c62106",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7b1ee406-b59c-4844-9841-3f073b18ed2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d1a769-839f-45b3-aad0-c0432a2cef8a",
        "cursor": {
          "ref": "5b687652-db26-47a0-a241-9cbb4034c4d8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "53953b99-eca2-4c71-984e-daa54e58d7b1"
        },
        "item": {
          "id": "51d1a769-839f-45b3-aad0-c0432a2cef8a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ec3012f7-1cae-4055-84d2-a252f5283389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6763c39f-dd3a-4b8d-8ae5-68570a5b15ed",
        "cursor": {
          "ref": "307f6154-c74b-4ca6-9602-d88bfef772c0",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fb829177-d9c8-4663-bd02-d1baa450367c"
        },
        "item": {
          "id": "6763c39f-dd3a-4b8d-8ae5-68570a5b15ed",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9a380877-f42c-4651-97f8-8bfbb6b5c0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e88c9ce-1108-4972-901c-fadfe4c15d26",
        "cursor": {
          "ref": "e3e55cfb-bd99-4220-97ea-a6ff14a210d0",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dc474afb-3c12-4264-beb0-056c9b491883"
        },
        "item": {
          "id": "6e88c9ce-1108-4972-901c-fadfe4c15d26",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "23c03d23-fea8-4041-b874-1edd89356ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27814f51-2d1c-43a7-8c90-474015f22fb9",
        "cursor": {
          "ref": "3ebd1198-edec-4f9d-9e99-ef56f018a039",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7314a808-c9b9-4c4d-ad75-a78a257035e3"
        },
        "item": {
          "id": "27814f51-2d1c-43a7-8c90-474015f22fb9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "665ee5b3-da49-4721-b591-ba6fe8eb9d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767a3400-d82c-47a7-9e4d-a1b98704b466",
        "cursor": {
          "ref": "2143653f-2b2a-46e9-a225-cd0cd3ccd071",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a76a817a-139d-43ca-909f-ffc4861346a7"
        },
        "item": {
          "id": "767a3400-d82c-47a7-9e4d-a1b98704b466",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c30adf7d-a815-4e11-8682-5e6d26c91878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d55e2d-0724-4e8c-93c4-faf4c0801c3e",
        "cursor": {
          "ref": "88b4f619-8c19-48b2-ac57-f801b683b33c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b0cb9774-9ac1-43c7-948c-9988f52c84b7"
        },
        "item": {
          "id": "92d55e2d-0724-4e8c-93c4-faf4c0801c3e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db00c060-1c9a-4612-8d98-6eefb1a7731a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f250df-edb8-4456-8274-05c8b8a33274",
        "cursor": {
          "ref": "8034ba78-5013-419b-ab80-6ac966dec7d4",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f52177f2-5e7a-4c80-865b-b47c0706be82"
        },
        "item": {
          "id": "84f250df-edb8-4456-8274-05c8b8a33274",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cee8936b-1746-456e-ad7c-86668c9aa72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799b3e11-91bc-40ac-b98f-9abf5dd3cff0",
        "cursor": {
          "ref": "2a4e831e-0002-4200-9578-11c89e8422ab",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "438f1a07-f64d-4841-b915-13675a8e5be6"
        },
        "item": {
          "id": "799b3e11-91bc-40ac-b98f-9abf5dd3cff0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "030e60c0-21f5-408f-b99b-7f2e3e53d15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8252c5c5-817b-4994-b8f3-06bbbb2e0931",
        "cursor": {
          "ref": "0291172d-9947-4170-b457-4b1e918dc549",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f5ee40ae-de42-4ca2-9411-49e5c9621e0d"
        },
        "item": {
          "id": "8252c5c5-817b-4994-b8f3-06bbbb2e0931",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "95a7f0f6-69fe-4220-b209-2af3ff912494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3abf320-ff97-4a79-addf-3b1918009df5",
        "cursor": {
          "ref": "afafa7d0-1be8-4948-a1da-61e67757c4b4",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "031571b0-f8f5-43e3-9639-6d0c220cd7ae"
        },
        "item": {
          "id": "d3abf320-ff97-4a79-addf-3b1918009df5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4dd43d09-f45a-429f-ae24-94d9b8dc3f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253a8c5b-bc03-425a-a1fb-e2d37338f5f5",
        "cursor": {
          "ref": "90452983-65c0-42d6-a3f0-580835e9c033",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0e62ebc5-0c92-4c81-856a-7d3938d52aa6"
        },
        "item": {
          "id": "253a8c5b-bc03-425a-a1fb-e2d37338f5f5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "74cf3fa9-5824-4358-a930-f5b15633d25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0dee55-0dd0-4483-98f1-ba3761e3a855",
        "cursor": {
          "ref": "c17b092c-d5fc-4e3b-b4c1-2adbe8e5479f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3467b1dd-8def-486a-9f8c-508b058397e6"
        },
        "item": {
          "id": "6d0dee55-0dd0-4483-98f1-ba3761e3a855",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4a4ba267-9d97-4fc5-bd0a-03ba16c0c832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b197381-916e-4465-ac7b-994b2a3bc864",
        "cursor": {
          "ref": "fa0bc323-ba19-4bee-95b2-d179ea0f20f7",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab4e5ed2-b456-41d4-ae8c-4672234b5166"
        },
        "item": {
          "id": "5b197381-916e-4465-ac7b-994b2a3bc864",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b39a51af-76b2-43bd-b49d-357ddfcfab78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4a6128-3ec1-4511-9674-98d23486bddf",
        "cursor": {
          "ref": "becca4b5-03bf-42f1-9a30-86a5d35946f0",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "183cd339-9362-461e-86e7-44118c4ea35e"
        },
        "item": {
          "id": "3d4a6128-3ec1-4511-9674-98d23486bddf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1040d7bc-69eb-465c-a217-cf234f8e4d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62b588d-f3ea-41b8-bb74-89606204893c",
        "cursor": {
          "ref": "6f65c258-28f2-46a4-ad01-51381abbf0e6",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8b739161-6e6f-4009-a21d-dde97d1ac0d3"
        },
        "item": {
          "id": "b62b588d-f3ea-41b8-bb74-89606204893c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "64087e4c-cb91-4399-bce6-71862a378720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df9392c-375a-40dd-8fbf-96694d667dfb",
        "cursor": {
          "ref": "95976001-6828-4bd4-a58b-ab9b83fa6961",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6ae3150a-dad9-4e45-9985-4c6c6428de08"
        },
        "item": {
          "id": "5df9392c-375a-40dd-8fbf-96694d667dfb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5c75f94b-ca09-4088-b7aa-56b34da56623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221f9f02-233e-41ac-80ea-67bc5907c5a1",
        "cursor": {
          "ref": "734bd57f-923d-4dcb-a93a-6fa7b765e306",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6682c1bf-51eb-4703-9d06-95c14ca26dce"
        },
        "item": {
          "id": "221f9f02-233e-41ac-80ea-67bc5907c5a1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c324022e-42c0-46df-9369-9d7d82c0cacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8864ab21-1edc-4822-b2fc-f450d50ca1ec",
        "cursor": {
          "ref": "694d0f8c-7234-4cc3-ac80-a3fc18303d90",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5f164e29-908a-4fff-aa0b-4760138e3c7b"
        },
        "item": {
          "id": "8864ab21-1edc-4822-b2fc-f450d50ca1ec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bab276d4-5d5c-4064-bdb2-52447e4e3d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e23e6a-0992-4265-9a1a-a22bb4ad9963",
        "cursor": {
          "ref": "20f070df-973e-47d4-8ef4-93c1b77066c1",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "77f4d0a0-0b7f-41cc-83b0-1e4972231fd8"
        },
        "item": {
          "id": "c8e23e6a-0992-4265-9a1a-a22bb4ad9963",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f9dc7d80-6548-4a29-a907-3aa4a8a6f461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd7442e-2d0e-4f2c-8c78-f16a2fe638dc",
        "cursor": {
          "ref": "ebd50baf-ec58-4036-9549-3e9b98c7b47b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f1856a5e-29a0-4c84-b7eb-e57f1dbdd150"
        },
        "item": {
          "id": "ffd7442e-2d0e-4f2c-8c78-f16a2fe638dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6ce2c370-f2bb-4929-b1d6-2626fddfc066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ed6ffd-7ef5-4ea9-9fb3-5a00b28d2375",
        "cursor": {
          "ref": "312f9f3c-d16d-4034-8e20-e946b8064e85",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3b767c0f-0aed-403d-ac96-2f8333d7004a"
        },
        "item": {
          "id": "d8ed6ffd-7ef5-4ea9-9fb3-5a00b28d2375",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f890866e-d36b-4f29-9788-7ab51246f643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46319d6-10ce-459a-a93b-d7f67149d699",
        "cursor": {
          "ref": "24958cd3-dc18-43ad-ac79-ed3c9b23604d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2d128f0-a7ff-42a3-bfbb-fb563c12f2d6"
        },
        "item": {
          "id": "c46319d6-10ce-459a-a93b-d7f67149d699",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1ed630bf-4093-4178-b743-44b8ced8f619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce57f442-5787-49ea-93ac-719ed494fc33",
        "cursor": {
          "ref": "ee573f65-b32c-4693-ad92-3205ae871009",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "583d63b9-e6a9-4dcd-ac5d-89a2d212a0bf"
        },
        "item": {
          "id": "ce57f442-5787-49ea-93ac-719ed494fc33",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d8a3d823-8762-4eae-b3ac-913c776775b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd44f1b-8ea9-4461-bc7d-cc047376f43a",
        "cursor": {
          "ref": "f18ef6af-30f8-4f5f-af57-bddb2595b590",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "44d45bc5-4b4e-4bae-8d30-964151b84937"
        },
        "item": {
          "id": "fcd44f1b-8ea9-4461-bc7d-cc047376f43a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3564d3be-6b0d-4714-a3cb-a7d5ece93177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167cf329-be74-4443-98ef-3c4cbfa35a06",
        "cursor": {
          "ref": "02abf935-4831-47c5-8dd9-65cf7b91a3a4",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b78eeae6-b7d8-4ff8-9c3b-1531a3ee1d62"
        },
        "item": {
          "id": "167cf329-be74-4443-98ef-3c4cbfa35a06",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6bc3afbc-796d-4a7b-be31-cfa3553e2977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b4c7d8-f468-4f7f-b91e-8c80b2be1d0a",
        "cursor": {
          "ref": "6889eda1-b5d4-431b-95ed-ea2b48075d09",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5f7bd4c0-bcb6-4801-8280-70ad6d32450b"
        },
        "item": {
          "id": "29b4c7d8-f468-4f7f-b91e-8c80b2be1d0a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1e76c319-1642-47e4-8fd8-62587f70d5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cee8402-1948-4b2d-995d-1f7c9edf1cff",
        "cursor": {
          "ref": "b033841b-f3fd-4470-b02b-82ffa7050347",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0b10c1c0-5702-48dc-a8cf-925aac06043c"
        },
        "item": {
          "id": "9cee8402-1948-4b2d-995d-1f7c9edf1cff",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8c3daa6c-abe1-4191-b1f2-473fa2a42c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4809e0a-4b32-4cdd-9a7c-94a793143dfa",
        "cursor": {
          "ref": "53ad434a-c1d8-4423-87ee-0a7bd561490d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "235ec500-240f-49f1-ba8c-95c3e38754c5"
        },
        "item": {
          "id": "e4809e0a-4b32-4cdd-9a7c-94a793143dfa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bba8b101-422b-4135-9fdb-46202d7f59a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227eac66-fab5-488d-9f7e-79c6581d51fa",
        "cursor": {
          "ref": "aa6f1e43-b019-43a5-8dba-1e594322f9c6",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6dc2accf-eba5-4ae4-98cb-928f24f2fc75"
        },
        "item": {
          "id": "227eac66-fab5-488d-9f7e-79c6581d51fa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "736d5c76-54b9-4dec-9529-085d1e039d73",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "19bd7910-dab2-4201-90ce-ce839f1e7160",
        "cursor": {
          "ref": "a00fb676-a74d-4b97-90f3-85b93a4d0944",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68901f41-6cf7-43c0-831e-725b02c11aee"
        },
        "item": {
          "id": "19bd7910-dab2-4201-90ce-ce839f1e7160",
          "name": "credentials_verify"
        },
        "response": {
          "id": "73c63e41-d6b4-47f7-baee-466bb2ea4d08",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9955acc0-1f4a-4a5c-971f-2d148918a8a8",
        "cursor": {
          "ref": "831db0a6-2f9c-47fb-b68d-b69e29ec7166",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "234ba6ea-6e1f-418f-8beb-d2a4680f4e7f"
        },
        "item": {
          "id": "9955acc0-1f4a-4a5c-971f-2d148918a8a8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8cd5a856-7361-426b-92cf-12066bbe94a2",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20cb8bd-265a-4115-810a-93e01133c9f8",
        "cursor": {
          "ref": "ea190489-5f24-4712-86ec-a8d763f6873b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21b9874d-e7d8-4bd5-a0b2-020fc6454b79"
        },
        "item": {
          "id": "c20cb8bd-265a-4115-810a-93e01133c9f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d68a3b6-2cc0-4825-8182-0379ad907aba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20cb8bd-265a-4115-810a-93e01133c9f8",
        "cursor": {
          "ref": "ea190489-5f24-4712-86ec-a8d763f6873b",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21b9874d-e7d8-4bd5-a0b2-020fc6454b79"
        },
        "item": {
          "id": "c20cb8bd-265a-4115-810a-93e01133c9f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6d68a3b6-2cc0-4825-8182-0379ad907aba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380b6b68-e1dc-4640-bf32-b709e32b67fa",
        "cursor": {
          "ref": "796cd689-252e-46cf-91e0-3d2ba901dfd9",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "72e013ec-0d72-44a6-80ba-dcdc243aebf3"
        },
        "item": {
          "id": "380b6b68-e1dc-4640-bf32-b709e32b67fa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3df619b4-7d49-4c4b-9d56-42aad7504af8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531c3b43-a181-44b6-ab30-be06c16fa75c",
        "cursor": {
          "ref": "c68cad40-2c4a-427c-84d1-4c53755e3186",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b5d837d6-bb6a-4d5d-9d39-2abdc727e1d5"
        },
        "item": {
          "id": "531c3b43-a181-44b6-ab30-be06c16fa75c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e9fe0f93-12dd-4f74-98f1-8d04d9355f78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}