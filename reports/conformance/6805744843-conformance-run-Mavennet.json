{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45368fd3-7e63-4a2b-8e37-722c3bd78619",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ca7cae8b-1ed0-46fa-8a11-025da87f6ca0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3d3888d-9c85-4a77-a167-8e56503c4190",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8af6fcc2-ee37-498a-9e36-e4677e17cdce"
                }
              }
            ]
          },
          {
            "id": "f4c5e4a1-f770-4a18-b2f3-31895c595dcc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fca7d42-2973-4531-800f-e64f8095ea18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a3f11462-6cc0-402d-b2f0-472427f92b5d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d41eb576-8f8f-4372-b6a8-8afcdfb20026",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "02adf3c3-3794-4ddf-bfc1-86a37e44382b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a30bc92-754b-4b97-bf77-1a5a8e80106a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43dbc196-c4cd-4c2e-9a2c-1a9130e78f4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "907c79fa-338b-4c3d-91a4-7dfd93163413"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82b27507-c19c-498b-b870-e2446ef2176c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0277313f-3ce2-4605-913d-82fc16a263d0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9b772561-b167-4ba6-9472-8cb1ff096ec1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9cd145eb-4e0a-4dab-9cd2-20c38dbfd91e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a248f7b-96ac-484b-987f-6c577b50cf1f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "aff94dd6-86fd-4f00-aa75-5555a998eba6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f4c9d46-89db-46d9-8a53-781f4d75bb6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1ee6b88-e8ff-4fa5-9382-d2d6fb97f895"
            }
          }
        ]
      },
      {
        "id": "3ec80b99-d176-4236-bf76-805bae027e1b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "feb34f5f-36e3-489a-8bd4-5e629258954b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fdcb2d36-119a-4e94-97d5-d25a24148190",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c6e43066-73f7-40a8-98b6-40190e33a71b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512a55df-2a0a-4e4d-9869-09f6bbebc4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b06e0cbd-cf0f-4edb-aaf9-ca74b7905d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded9a5cb-2e34-412f-8062-9fca758ded19",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c66bc7-106f-4d9d-8b1f-1f0e38e686a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "854ab8ba-f642-41b0-aa9a-93bf1852dedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3091672b-16e1-44e2-9bd3-5e700f90d6bb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207a8601-fa6f-481d-b8be-2f61ee9b5563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39b9f10c-fc29-431b-84da-cbd8a8c3b9d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b591a557-4cd2-4d7e-8ff4-373a878479fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2213d03a-6470-498f-9251-bc1bd9d7ad40",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e550c1e-fb93-40d0-976d-bb7add6f42f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70f75842-a916-4fc9-be05-bc0dcbd5a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd35067-4732-4952-9a1f-3bc77d440552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1150b7-f3fc-43b7-a4e4-9d5de20b7173"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a60e94f-7a1b-4cc3-8b1d-3402b9292325",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc7688d3-b5f6-42b9-a880-5690749335c6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cda7afb6-43ae-487c-bd86-b81121bd768a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0131ec4-fc69-4b17-b790-1642fa79f0f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea0d870f-ab91-458c-91f7-2cd434973eb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7a862f19-e974-4421-82c7-d918e2113cb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21f4fb05-7fc1-4569-8165-eedc42547154",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95b50564-ca9b-471d-940a-4416e73ce97a"
            }
          }
        ]
      },
      {
        "id": "f1837a90-1323-44ac-a923-343b3bd0fd63",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d18fba93-26c6-4c38-b61d-a99ce9b04d9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e716adff-779a-4b39-a552-a6be9e6908ce",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9f811eff-5690-4d9c-be83-6285a3b20de0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d18606d-b9ed-47d4-9815-2586883e56e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b452cc7c-6dd8-4f6d-a25a-4336dab67104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6917eb-b5c5-48f8-abe4-fe9990cc5856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fd5ec08-33b1-4f6e-aae9-94978c15a381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091b8870-3861-4f66-9481-c87974e47d84",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056b16ef-2809-4caa-893f-3e89e544ce93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3e5c2d-233e-43fc-942e-13fa6428ae1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc581291-cefc-4efa-b995-eb5bb38c75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08f25ec6-b035-420a-9da7-ebd55a5ebf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22985565-4614-4714-b3ea-93047d0afabf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85561b8-cf3c-47ca-bb8d-2efb21aa5d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13366629-1e6a-46fd-87e5-e71ad21780d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f3c809-5fd8-45ae-8190-71587ef1f313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a7b3b1d-6221-4d8a-adef-99b07b1cf4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f7ae01-ef68-45e3-8223-358cd424c375",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8b7aef-47d3-4ab3-81be-82e1dbd7805d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a0bab0-329d-4032-b365-2581f0683e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db2b6ab-9149-43fb-aeb9-84354f3dc4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a99ddfb-d5d0-47bf-8254-479911e697cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f97c2d5-be56-4562-9c81-f97a0468d4a3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e41468-9b5f-4157-8cfe-390acdb20752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400de0a4-44be-47a8-9a98-bfe9ef784d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0218eb6b-ffa9-4d85-a4c3-a01afca53d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea1433b5-c45e-43af-aaad-1ed85ace7ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86f027f-5f6a-41a8-9b7f-07383dd00810",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868af31e-112d-48cf-8b82-35421219cbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d067a90-5694-4f63-81fe-1393b63356ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50108692-0866-4532-8a97-595c7b3c1dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b6710ef-bf1c-434d-bc67-ee784cebc0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51296ed-7ce1-47ab-9781-c1ddc47f1cc0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0191294f-f92e-46c1-ab82-1479318e907e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d416db1-229d-46a4-903d-da2816fa57e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e4930f-8df2-4524-900f-5d35802d6a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "121e9e63-2a14-4239-a552-f6c7fdc502cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c738ee9e-50e1-4f50-ae5a-aeb756c2ac3e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4860c9dc-6cb6-4008-b249-7759abdea925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580d17d6-bca8-4279-9b3a-d12359863abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dc09b4-e7c7-40f7-a6ae-0d9191697e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70ad1919-3fcc-426c-b423-6079450f8bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9682ebb-ca17-4917-9d96-8b2935bf27a1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f5645c-e16a-4da1-80ee-33a506438b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63700fec-db48-49c1-802b-5ba93ce0e696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a124bdb0-b544-4041-9a51-1194f4f29e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20cc1653-bdaa-48fd-bf6d-92a812a65f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200482fe-50b5-4b5a-9150-0e25a4d686ea",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ebdae2-b1bc-4b32-bb63-21798e9f585b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4621bd43-6ab9-4a23-8a09-922915530dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154be75c-b14d-4727-a30b-b02ee378735f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a21b6b4-9756-4025-9bfa-8ed60d03b288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbebc747-e8b6-4c7e-9679-61472a8cc9c9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984708ae-a514-42ae-91b7-31240a06a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdce135-20a9-4394-90b9-d3bc9249c98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e4dc20-7fd0-4885-89ca-3a5377a7e834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "feb2744b-f4ca-4a2a-8768-e14f4fbbd722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4845b12d-6275-4e4f-9852-aadbcb90eaaa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262773d0-460a-4843-87a9-a7ec00d16104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8ec730-dd6a-430a-b96f-11a27bfa7c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94323b8d-fce9-45d6-b635-932091934958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "021a8ecf-a5fb-40e3-82af-2d570dcd6a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8913120-136f-4148-91c7-1399932d2582",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b420f6cb-7a0b-4003-bd19-dd87aa851e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6df7621-ba3a-440c-a865-bccab94a532e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04861ec3-a1b9-4364-9074-747625273a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a49efa62-9fed-4365-abf8-df85e7bafece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ff9600-e0e1-48dc-b18b-253b4a324ed2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d8303c-e046-4738-9675-ad2f33a2d23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840c9359-e652-4811-bc9c-97fcddcf3bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472af34e-1dee-4468-9a68-b9040cc15f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3a05b18-c503-4682-888c-65bdf718b311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7c4f27-0a4a-428a-bbd7-ed1cdcb5ab2c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d21b4b-559d-4fbb-b541-7a288b4d5afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f45b9c-40aa-46ba-b3c2-1e948e67123f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb778a0-8060-4786-8d84-969f3a24cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17174d53-7949-4d29-b132-ab6f3cb9f03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa5a04c-b978-4838-b5b1-c975dfa07470",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a729dcc-a73d-48e9-8ff3-0406783848ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc19bced-40a1-4ffd-8c90-eae63b26689f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37a3c73-2f0a-48d8-b7ba-e35554497432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d09a5d4-1418-448d-912d-8308efc69a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fcec3b-30cd-4e9c-85d2-eb2e9954363b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdfb8cb-2e0c-4858-8a14-bb4d3e4bf446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8537bb85-06fe-4048-a83c-fb901bb3c950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e27754-8906-454d-9c6f-10e3636b8f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d81bedd8-a64c-4b77-a876-d260ff30f5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b013dd34-d3bd-4355-9f47-cd52c5b0cb59",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcc5931-3f09-4c99-92d6-6ac86d27e76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4eaeb24-2a3c-4cde-8e92-f15ec2f021d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da48380b-bb80-4095-87f4-38216af21cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c302b6dc-e4fa-40cf-8541-e859907b5782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab185472-5050-415b-8fce-d93c8ba0d7f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2ca7f0-a5b8-4435-927b-8d1229dca1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bacbbac-2c53-42d0-b803-7addb5f8efef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a38ea2b-2d26-44d8-beab-05a09899da56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e357f2c-bc69-4144-90bf-ff3b70d697b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9179ca8d-5496-4ec5-87d6-e30b3f114185",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bce6e4-8136-43c2-a7d7-7db4f0c5bf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f986f4-d911-4d05-9d1a-053b53184c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945333c8-c081-4f8f-a343-6d7c8774d669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9211aa-0e7d-438e-9453-e3d7092d2757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ec41e8-97b2-49b2-aa33-f18236f3c0ef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b0aa5c-ed07-4ef5-94f9-57ca65909338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff4b973-5a06-4b2b-a19f-1ac68cd81c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08fa013-d2cb-4bbe-8215-8318f71aa49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44987bc-379f-4ca2-a231-5f8b2e9612e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc0da8e-e402-4484-a059-e7be8c893315",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc9ec43-7e56-4f2e-9ea0-1394aaf217bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372201f1-57ba-4a3a-8acf-28fbb3e44b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73adeb61-f546-44b7-ac16-2cd50bab87fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a53c6e0-71e5-41ec-b054-36cc35b4a7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b68a60-cb85-4019-9886-42bf901bcbcb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f2b5a1-73bf-40c5-9187-8c18d942af37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63ca668-43a1-4879-b9fc-f7fbfe018b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8918533-3cb9-4c89-b224-aaa52f815a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf11e059-8c92-4681-9dfe-efc1301e1bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329f4a3d-0c12-4a16-a3b9-f54a052a03a8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3537d058-287b-44d0-bd1d-e34cf7c340a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f95103-5ab4-4bf2-b2b1-48f074314e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9704a31-db92-464c-a3e1-7b3acc4e2f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "786ce063-65aa-4100-a763-8584b1fa1d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf76488-5d26-4f36-a12a-ab41915e1726",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7662335b-4aad-4d9f-a863-1ce3101f9446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a9d4bc-8944-47bb-9a81-3f6345b4fad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc400d70-ccd2-4a1c-a7fa-082085340b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b10a066-2ba6-4a25-83af-dbf73d3d86d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be679e4-8a53-4319-9d81-1d6aef19d110",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a333604f-0407-4a52-bf2d-5a0427b60137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d55674-de24-4844-a07b-7a381c4eefdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b3951-35b7-4e98-93be-ddc5957591b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "804cc5f9-e83a-409a-ad90-b706e3952115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd3a2e3-d319-46e9-ba3b-0cd33513cb34",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e7ee42-b5bf-4541-9ea8-4204ca0e7871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70539187-af1a-4375-9753-5b73602b7a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c9ae28-e768-409b-b8d9-1a96e760df79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f41385-ae32-4693-9ad2-5a5775574e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f300c389-f5fc-4670-bfd1-986749607efc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a3f748-19e0-45b6-8a0b-5ab86bbffa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118a4489-c45c-4558-a795-43fe0209044f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde3fe90-1e74-41b0-9de5-15fa46cdd730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b553119-4104-4d2c-ac8f-06073377bf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704a69fd-96e3-42ea-a7bf-d81e858dce09",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db7b434-68c3-4468-b09c-d0c70c249cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2672e437-5b60-4b02-ab9f-bea18b6fa977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3544d095-f642-4a76-8449-3f6c7db99d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36f29df-fd03-438e-bed3-d2a25ed09a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4362e5-275e-4350-bf3c-7415a4011658",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abec011f-4867-490a-a7c5-0d3af4cf492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b782b9-812c-4750-89c4-f9d2d323b25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c07d014-89dd-41a0-98b3-326165c54b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff71ab7e-950b-40e7-afb9-27faf8543237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f109199b-3d05-44ba-a3ee-bfa35f04d729",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe1d22e-908c-4e15-9764-1059930c8725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fe2c01-6280-4691-a80c-e09c5bdc1a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22896b14-2362-464b-b646-dd1c8c6d5a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "30d317f4-eb70-42f9-ae20-8e2df2fbc073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcba909f-a03f-45c6-8135-974a240df879",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc16b8f0-228f-414d-a9e5-e7e0448cc622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc0bae2-1573-46a2-8a95-3708e5ea3a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b6288b-7c6b-49a1-876a-9428ba5c3b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e33019-8a8d-41ac-99fd-66d3b221695b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a5d9c7-65f1-416e-b3a1-da2a24613d88",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6559d8-15a6-4897-abec-de32620e8a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cda3533-5511-4f60-8901-cb92aabfeee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828d4228-9385-4e0d-9702-3c65c44c428b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4d1960-1fe5-4f3f-820f-d1174d223f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc50584-571c-42d2-8556-5d61679e9898",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7859126b-7813-41fb-a46b-eb34e9570226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8652bde1-7d41-4580-885c-f63c0d7297dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a78440-ce8c-40ec-ad84-1fc48e830965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa973af-53cd-4ea1-97f0-8bc9dcdf8e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e734ac2-2cb0-4895-b982-0a58d71f378e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfd198a-e1b8-438a-b28c-881606449098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b1e789-924f-4571-b1e2-b302c21b1323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fa7483-4abb-4dd3-bd91-2f7de5b599cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9f53f113-3e12-4e00-b093-ab1025ec0f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e581a0a0-f336-4e60-8e49-72accddca400",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21251d10-6760-4f67-8f99-6a2deccef93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7573be49-b715-4a7f-be13-9ae123dd8f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1716cd-4c93-4500-b70d-8f012ed0bfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c1988a-9f75-4fae-bb43-7713e9ce071b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a97d3fa-d34e-4d7f-8f03-1c74c5959a5b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2f02e4-80b2-4b24-9504-70b95eb93c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6aada93-846f-48e6-b5c2-d251065edc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8f06aa-0ee2-45ac-a38a-09183e88a292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7672b0f-b342-4ce4-bee9-174bbb606887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019eb387-3fb1-48e7-8983-b968044f3503",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b8afd9-435b-45f3-98d4-519239753a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b02fa6-0c15-4d51-9e45-8c70b4f87369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe55294b-9808-49da-8ff1-7c067abf1eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d918261-b724-4004-a917-5c93813b6905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7336cb-7f45-47ee-8aa9-ada2372ef722",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3986b145-0571-4ef7-b33f-93f7ff41a82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1aebdb-3493-4d1d-8728-39cf7a380d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e858ce6-2971-48ce-86b4-201b3feca0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac70fbfc-1285-4e9c-8530-590981b704d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d751d9e9-035b-4959-8a72-a860b16f9303",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a081254a-7cac-4ddb-bf84-934bea7d7915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872f8cf9-6a61-424e-91b7-66b6c77ced7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac01d44-ff16-4ec9-8bc8-926149b2b360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a6ac79-0aaa-4efc-b912-315f9925af2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0eb8a8b-c43e-4ed3-972e-aac25534fe19",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07034f83-c425-4e23-be5e-6425d9b4b775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897dd76f-169c-435f-b90d-65358c916fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f964590e-f87d-4895-8d87-67536f7d893b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e675da8-8816-406a-8f33-8c646eaa8ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96da8b79-741f-408c-8a64-88cda6881ad5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d80178-c68c-40bc-91b7-a77dbf7fb25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39446fc-91b1-4979-863a-4a724449eb8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cf3d95-0cf1-4a94-bff2-e59517f235c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6b35ac67-3b05-4fa5-9ac9-98b2d0caf9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdf9cc4-4034-4c28-aa1d-6197201082a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25abe7e-c9c7-4248-b407-d275cf39d48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50be6d27-8a3c-4106-8569-8581f6f36353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da42c2a8-e382-4e56-92cb-fd4705002d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "37c9d80e-3030-461d-88c1-37abb857a216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4a1d19-9125-435f-8c68-0ea4ad046c9f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47dceca-3a28-46ca-9088-bec51f2df3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb53f4db-ceaa-4499-a029-599bf3f232f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89360151-f584-4cd7-9e27-70d040676dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "508e0d44-3292-43ad-9fd0-523837de7ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f72f16f-f1d1-440d-b4b8-347cab4f90c4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6313c5c2-c164-4dba-a48e-e4bb80e02d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8f63e7-5c37-41e7-b914-2dbea3452133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697b59da-1a41-4008-aa14-b1bd4c09fc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "777d5e34-b294-4efc-ae33-37ecae7482ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba847916-dcf3-46fe-beee-4bf96b15f565",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8f9873-90db-42c8-9a8d-84fa5926fff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c039dc-7481-4aa4-9b01-f6e8a0854b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eed80f-8e19-40f7-b077-0c17ddf6032d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5841572-53c4-4b47-adaf-96dd95d2709d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf519b7-6acb-4e6b-bf22-532f542d091c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dd61b0-9e8c-4e43-b458-b0b2b3b36902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d439585-95ec-4af9-9c84-53555d54c527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45100e7f-67ed-4ce3-ae25-d7e427677665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90f79fc3-c560-462d-a0fa-8e9ea45fe3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44413971-34c1-4780-94c8-9444727df281",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a49c39-2c5c-4be3-b194-e0806d389014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a222c19-d61a-437e-a458-c48d22fe3864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309be6be-02b2-4084-9b49-0e07c7c45c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc289f4-7c88-4746-88f7-094389ae6dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f53005-ffc7-4fd2-ba2c-63caa6675576",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bc75b1-27d3-4330-b2d0-b6dbcb11ea31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826df8c3-154e-4943-8db1-e0088f52532e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04de4eb3-a2f7-46b8-92e6-7b6a82ce8121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eda11000-7c0e-442a-aad6-a9bab3bde124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe102e3-5ee6-49cf-aaee-26a08282c5a2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20383514-7513-4117-b048-85f7913619db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096ac469-00d6-4d02-8cda-f38d775295f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9f218e-1a50-4ee6-9bf9-b78f35188749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd9049b-5516-4c24-8f75-814a19aced97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2df17d-0c03-4934-8b81-7284951ac4af",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbdec74-0eed-4d9d-abb0-bb6e7d5e4f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2f7659-07b9-4091-ba19-d26ae37fb80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d5e3be-ccdd-4a86-990d-b47069422d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "15de560c-3269-4e1e-b251-242818742172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0704865-d3e3-4eb6-a9e7-69537385dbe9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb73707-a727-4a96-b58a-08874172668e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5728fde5-dab9-4a7b-972b-dcc3ab20a201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7ae207-024a-4bc6-9293-d43bac5ca75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37508da1-7bf2-4a4a-9ace-d8e9340da05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a27754-1a07-4d54-b332-ee657a80e072",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3cfeb2-1b2a-4033-b716-fb2017bdcc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c352ab14-bf11-4bd4-954f-992ee9198a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7e97ce-53cc-45e9-9f6f-23e70d903750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d68b0dae-0ab3-453f-9d85-fab9cf8f3565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da464015-6171-4143-b69f-aaec1e1633ce",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11be7a7-8766-4948-88e3-51e40bfdf400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914c782d-3f01-4636-873c-b0077fd746ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fad6f9-9da6-499c-9c72-3a2902fb5f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a026220-dd20-4e7c-8845-963371019030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f27337-0c2e-42b5-b2fb-a34df5696618",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2d1c2f-0d6f-44d6-94e1-f2b7ac56a41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bb02d4-7f24-4a5c-9c02-fccd75f38119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a0c266-9f0c-4b82-9416-8f7ca761ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbeb8e5-65eb-4e05-9565-853e655bd61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e029ff-99a0-418c-b7f3-af626ddef8f9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12274256-1463-4ab2-a2d3-f7c36492b360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2f78f7-63f3-4d10-aad4-6c03dba8a3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1612b9cd-e3ea-4bd5-ba30-34c942d78690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a82f215d-012b-4586-80a8-3395e55a1a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d30fee-8aac-44bb-a617-18240ed4389e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea14bfd-6ccf-4f41-b3d7-7812185952e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3341c222-ec3f-459f-b009-5231fe2dbcd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aef18f3-3046-48ff-86c7-c533e02e1908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfdc084-cca2-4dad-8534-4f59a676ef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02646dde-615b-4c39-8a8f-9888c81110f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e796967-8f6f-4d53-916b-a62b86f07dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fb1ff9-bbf4-4471-b152-224776c1a8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6103af3d-e72b-4177-a262-a6fe620be4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71569bc0-0b74-44bb-90db-b6236125b4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4357ed6a-1786-436a-8943-362910adb40b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d5c2a0-deee-4284-bd8a-599faca962c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3da1805-4340-4265-ba33-2e426b22e605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468646e-0db2-445a-9e53-b9b4e4257d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2028b52e-6618-4316-9fcc-04e15790fb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebae836-b7cd-4b96-9a68-6f9f85fd5810",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5ceecc-c767-4d48-9f02-a73e306b5314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bd218b-c4d7-4f92-a517-3487677feed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3055859-2955-4b83-9e65-a408f2437f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3818f0-ce1f-4c57-a824-4e17e12c6e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6df1428-bfe7-455a-b09b-6d72c8c28514",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2ebcf7-18f6-4ef9-a9eb-c6b1a83223f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3346d9-beeb-442c-b19f-9c5ff2ac1c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd6b2d2-dc59-42bf-8e9f-a42c9542e5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b533092b-db88-470f-8318-4bfd42e75ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc2e6bf-7b2f-4546-836a-47f2ba1ffb1f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1fec2c-39b1-42d2-9919-01128af65f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f52de1-c34e-4b34-a446-91480d76c721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a412a70-59bb-479f-919b-05510b14f4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff629be-480b-4408-8407-aca8c1f2121c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3891f02-6e7f-44d8-bd02-d90faf9fb7b0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf001386-a19e-4a36-98f9-b821686613e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a50af8-b199-45f9-b835-695cf4e2714b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7153c362-6964-4318-ba34-2a3312347f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "137d2b25-18f4-4624-b435-e9de96da5572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31e32e2-07ec-4e20-9d49-5acc182bd3f9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49651aa2-cd53-4cab-915a-ac14c90a5baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f4b56e-d956-475f-bb7d-fe4e9416c1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb699e91-f944-4f04-a7cc-d8986b9808ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfadaab-8f7c-4f79-aa37-c2aaac1e5beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e288b77-c72f-4420-8a8d-3709f05c58e0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b5e468-fb5b-4af1-ac84-1a0db33bcc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2aa5a52-6c2e-45c1-94b6-c49b1e37660f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2362e7-361a-4227-8d41-2c6db62d2e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea44fa8e-59ae-47d4-884e-3f08f5c3035a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a530c39a-d10d-45a3-aa7d-c6287108466e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4cfd87-ef38-4681-878d-803af11a18bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15acf53-8b10-4e7a-b589-87b198e1db49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f661cc61-8f86-4842-a783-5c7c86aab17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "373f510a-4a87-4d21-b658-9475b554c98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76368bce-4409-412a-9f14-7f57b5526890",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29c8a66-7d5f-4414-82bb-654f03a93b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559f7d80-e855-4b41-bef9-a5373acd5d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74929d5e-c92d-4507-ac00-9073d4ebca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2e9c9b-ea89-4014-86da-dbcce6543b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7618c63-9000-4371-bed2-09704e044689",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b78e64-36a8-4d77-9c97-04c70e33081a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab0479a-7b81-4687-b97f-a0141e397f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4e987d-357e-42a6-a69b-75bc055b4553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bfaa43-7e8c-4f90-a53d-9a5415ec23eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efd57a8-2198-43b3-8766-97c6b5666b34",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b12d8b-0fd7-49fc-96eb-0ed1ee8e7330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404049aa-614b-409f-9cd0-c7d1d022290c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1153d28-81c7-4359-883c-084bc1732144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaef5ea9-7dab-40cc-a212-d467af5a0ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe20c1e-7713-4e92-85e8-2fb408cf3017",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac54c0df-f030-4610-b553-1bf8072f044e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcd35d9-cd0f-4687-8877-eba9e10fb1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ba6733-18db-461a-8ed3-665aa6c2772c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5355a2c2-1aaf-4641-a10d-1d401acf3e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad019a7-bb09-488e-97b3-f33b15cc77e2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5442fc60-ccf8-475c-b464-5e508fd7f39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a496dc-c07e-45aa-a65e-5ce0450c0a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f422a2-1592-43d2-a92f-cee5ae9d0b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90b399a-6305-4f80-a644-326b93e4dae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed704c18-e3e3-441f-8041-77efa63a02f1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a10104-6f39-4af5-a9c8-4eb5ad86a792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c5ede3-b417-4dc0-b9ec-1362af3025db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e26262c-8c9f-4cea-8a24-30187533cf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2e0609-14b8-4c09-bf7b-e05e31f4cc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a1080c-9617-4894-a543-e7c1f9194255",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2482dab1-f34d-4c47-a8ba-ceb253867878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980484f7-1e13-495a-8f5c-35bf97b61f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af751e2-4d0d-40d0-9518-c07a1137e11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "158f8802-9e73-4f69-b637-d87f2bfc273b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ea96e5-cc70-4886-b16e-79168ef37ea3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d319217-7953-42f8-b5d6-b9c5a5d69366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8f236e-098c-48b9-a52b-85cbb781f3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906a265b-fe30-4bb5-bb0d-0d061622beeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eed4b15d-1ec9-4f6d-8657-3b47f6e6ee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b797fc-bb76-4381-ac6e-8101a6763cca",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab817bd-69b6-4779-83b7-1b74abadf294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2688a157-5c80-4db7-8461-3669f87c216d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97e8af6-030f-4336-8cb7-9eb7b670bf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8445579-37fa-4e08-90bc-cd4b8cc9b25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ff9911-30e2-4655-b7fb-88deba81b1c2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c9d9a7-77f2-4e3d-9ca4-5d2e4462e011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7e61d2-000b-4d7c-a8d6-1fb61ceac813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906b6108-c78f-4030-a74d-fdc7c4db7ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc1e350-d4d8-45fb-982a-f629e7bf498f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901548ae-2dc1-44f6-9a99-b114c42563a2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72991287-af6a-4ceb-a3e9-6580c41b1a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dde2c3-3783-4911-af15-0cff64ebc87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c87603-2abb-4c12-a9b0-e74f86d61ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54af8a33-cccb-4c35-994c-da4d9aa4145b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e979be-8dd4-4a55-914e-0b216e1c2bef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db42c103-1604-4d77-bc77-2af4b3269249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931f44b5-ed8e-4366-9733-3142dbdfd502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ad1061-b2c1-4b2c-9f40-80cd52f517fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e365c79-377c-40cb-ae1b-e335af2d8bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326d36c4-abf5-42a5-83f8-399cf7313a7b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6d89ed-68a5-4d1c-a2a2-8682d909e720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72f8836-c52e-4c4e-8a6b-9266395ce7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610527fd-f0c1-4752-bf33-89c419e03e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b218df3-b2b9-49b0-abb0-dc92bcc2885b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c2d5f5-e828-41fd-a792-a3ed6998b109",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7180a52e-6d31-471b-9546-e5bbc8c300e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997eb029-ae94-4106-b6f6-1296b435203c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74706eda-8740-4ab6-88c6-99345bff8e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3602eb7-6258-4e83-bdb1-91ba1696d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bebeecb-329f-4c9a-8195-c0c8f23e752c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979fee77-96e8-4446-bc14-2eca1b2986b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0045daf6-d5b3-4bca-9766-1a52eb438412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05d2d0b-0060-4916-ade0-cf3e698debd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c20032df-fb47-4164-91a8-c9bdec68d044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850a58a1-3ad7-4d18-aba3-897a13c5edec",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24c3cc3-52c6-4f99-a955-f94295c77e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2ba8f5-26a3-4884-9086-9e6627dd0b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c09637f-bd10-4558-a3d0-ccdde282db11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "704c6e42-70f4-4127-b495-29e1f75d6548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d510ea4-f5bf-4ed5-b6d1-4d2275b06a6d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3b24b6-a33d-4d81-b225-c2a936ab2eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bcdd07f-378e-426d-952f-e19914d59447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3177b592-e62e-4960-8355-1862c1e3601e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83b76c30-8e31-4b08-8cd6-c3c776603c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbc286c-493d-4598-a416-d881fd9923fd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d717600b-ab82-4af2-9521-f6f7a6b68c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0693c549-cde7-4345-bcbd-a1a1ab6dcb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d53905-53ed-4bad-a5d7-3b59dac861a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92966b3b-0eae-49ca-9520-40efe1be8b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83487b2-ea2e-46ca-9332-603307932c5a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73995455-54da-47bf-81f3-36bd583c1d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62bd5cbb-e46e-4442-abfb-ffce0c485b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93827988-7aa7-47e1-9775-656e8c4324c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bf34e1-9d52-4990-984b-929a14560e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df39b3d4-9a79-4435-9320-7f280d132df3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995b457a-cc5c-4ed3-ab9b-a967d9a19543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a7148d-9ed6-4ee6-af2e-d4055d8bfcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bd5286-bc0a-4202-b53a-8b22d2762562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c149a15c-3c59-4797-90f4-3f904572e9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c979492b-ac61-442e-b3b3-d57cf6058cba",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d41f5a-4e3e-42ee-8345-7c5155f17bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c717b39-bc63-4a94-acc8-b4e3afbbc949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c0071f-09e8-44cc-af6d-a6af1a076e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8611ca-aed7-48ed-a693-fc2539f617d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7009b0ea-3685-433d-8015-a282e1432735",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e54532-69a5-44ef-8434-72bbc1048d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85593e6e-69b6-4ffa-954c-f733bcb725fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25885aa5-daab-4b9c-9e1d-cf20cdf39c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9f0275-322e-4e8d-a997-d2fbac14f977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de862b99-664f-4be4-b810-acc998f58fc1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cf797c-385b-4cf5-b49d-74b4568411be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20661fe8-49d6-43c1-a03b-bc62f252e6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d2faa5-a943-4c04-87a3-10e464db09f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fef1e75-be49-434c-a8f5-db91e5d199f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d926d497-db49-4437-9f82-b88e82817d12",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624e205c-5af1-45c0-92da-886fd912773d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f49b5e0-8e80-449a-a1db-87b01bacded0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba7b43f-7a25-473a-a8dc-d5d73b985ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf658bf-eba1-4895-8cf8-f788833e8969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03110d17-e385-447f-b938-edb2c404b4a3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b0f7dc-8b81-4b49-9de5-87a021477e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7cbe65a-341a-4646-a72b-b7abe7f39d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fc678a-8f70-45f0-b5ef-626f80348708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5124d16-cd32-47db-ba74-8ef67cfca8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af06c66a-f441-432e-be22-c3ab9a1eed2b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3d8f25-938d-404c-8461-925ce691a518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b6581a51-5c71-474a-82be-bda3bd58d516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506913d4-9a3f-4881-af05-34ce1f37fcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c33cb43-1c69-484f-b80e-0709d7bec9f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d543315-d366-4425-87d7-6a66ff209af0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00f9740a-694a-45ca-802f-7458a56bd461",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2deb06f3-964c-4499-ab31-90964963faa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75a5db89-8d02-4a39-b784-0660882ca173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d324dea9-69fa-4989-bd5f-6a6aa9b07139",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38424e53-c04c-4b54-a994-07d49caecc87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0b2beec-3471-4e04-9dd8-a8a65f3f77a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5bae232-5910-444a-8a1e-2f9d2a3e70da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c17d37c6-7c29-494a-8a31-3ba31c377c4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f15348a8-2528-4a46-8519-1060fd2f499a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13808034-2da4-45b2-9c29-a60f02d01a3c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9140560e-030e-4778-a1d7-e7fe83424649"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f2b6b9d-69f1-4cc4-8caa-2ed3e6490f84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d47727c-c2ed-41ca-acb8-e4f476fa2a19"
                }
              }
            ]
          },
          {
            "id": "44b026ef-4033-460c-b0c9-d7788eab3d5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "acebf416-4f9d-4d3a-a6b1-900882a92af1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "42b7d2ab-64e2-451b-8f73-c380ac5d48aa",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009ae7e0-ee9e-4790-bc6d-06aa8e55f82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f74eda8f-5ac9-4040-8eb9-1d737ffde83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f85a87-393c-47b8-8d5b-8bab44e2398f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bdcc443-9484-4744-b1bd-c0df3bad54d0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77ea728f-38b0-45b8-9adf-4cc0796173e8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33050714-3c43-4b79-9e26-5c73b069a289",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "671e7bd6-6641-450f-ac75-f0f625606725"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faf3d0ad-d3b1-49cb-b541-e5439a31b6be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5dca186-65bc-4e02-9c57-8ff8e295ca27"
                    }
                  }
                ]
              },
              {
                "id": "3bac0d0c-f279-4e1d-996c-dcfbcfa458e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7c87d75-9e1c-40e6-b3cc-301dba36a6b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f807154-37bd-4b57-b0f5-2d6fe8815fc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ef0ec39-7294-4422-8327-5a323de9e1dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c2ce06e-4307-432b-98d1-f8a8fcd73073"
                    }
                  }
                ]
              },
              {
                "id": "961ccc73-14e6-4bc7-a165-f36319b0e8d2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc7ac97f-f5e7-40ec-a791-f7cb2cc2d385",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf819ec9-8635-44c0-92ac-df3365cc3aac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e966bef-d19a-402c-af15-be58aae2c779",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ee6ca4ee-21bd-4674-a029-9a29358ea549"
                    }
                  }
                ]
              },
              {
                "id": "517c950c-e44a-4219-afc4-e5e5bb4e6f62",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e78fc5c6-d78f-4b9e-a695-1cda45659422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b51a9f6e-9dbf-427e-8923-0f7c05133aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21276f4e-3f11-4c56-91cd-480efa63f22c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "397dd3b3-abe2-42e3-8e64-2b95c4558e2d"
                    }
                  }
                ]
              },
              {
                "id": "c7cd8c47-17a9-40c9-8247-76eb7adba400",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04dede4a-f3a5-46ed-8a1e-da903930b2e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee46e84f-3db5-4483-ac67-a6ca345847ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa05ab94-8b27-4148-bed8-5201d4af1838",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0b2dacaa-af67-476d-a9be-6193d3b07dc4"
                    }
                  }
                ]
              },
              {
                "id": "e3a4a18e-98ec-4944-85e0-0626724f2b66",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec50e19f-1fa9-4487-add0-d69fa123765f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5d12a5e-f8ea-49a6-8695-d517f382bde0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f698c71-cdcd-405b-afa3-5cf8711366bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b2daf65-9682-4c68-8717-d3dbb9067a5e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "552d5c98-6741-4427-baba-cf55ac9add6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5be9d598-2013-465f-81cd-5b2fe60b4920"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "434fc712-8aef-48cf-9fb9-343676cdbcaf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48030b9f-8859-41fb-a012-ae69a71496c5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98267743-7340-42bc-a849-86aef949f2fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "20c34fb0-fb99-4a2a-abb3-558acec769a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d756f98-0b25-4a4b-99b9-d70e773ddc4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee7aa72d-3ed9-44d5-9be4-8309973c9b01"
            }
          }
        ]
      },
      {
        "id": "95efa6d3-a55c-426a-8810-f924f4493817",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a4d5612b-dad7-43ed-8b1a-981f27f8f629",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0d451e0-1e4e-4d8c-b5d1-29c85c279d45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44d469ca-eaaf-461a-b52a-2af1b41af680",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8c78b3-1f0f-4333-88ab-cb4adec3b210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce54e0c-2b68-4e52-8088-2c37b48b752c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ae14e5-fdac-4ee2-946d-366161ed6d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b588ff89-2e17-40ee-b80f-c28516a1e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27bdde5-130a-426d-b86f-062fea5d0671",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265f48e1-e85a-4202-bb65-989c0287407a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd47199-6d86-4213-bb96-7bc6f7bd8fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fca8aa4-9aa4-4256-b0b3-fd559b868be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b7ca2d-9f17-4a36-ad62-2e6bf8e83099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0853bb5d-1416-4da4-bd4e-a9ad3ec9cf20",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40088468-ff2c-4ecb-a5fe-32a1457f1d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07edafa2-63f7-402c-9752-773a1bd5787b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc19c93-ddd7-42b7-8580-1c062e85b4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e91909cb-9a14-4446-8d4b-d8230c8a7372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970ff93f-b919-49a8-942d-9fa05f763fcc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3368ec56-3335-4287-85f5-41d590171b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7efc28-b5e3-4f53-a41a-341cdf6dae12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01799e9a-9247-4ab9-bc17-020637ca9212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73219c03-e5be-4889-a78e-830966f4c0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd9dc17-9f7f-4b22-be57-6f7443fb93e0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1555ec49-0602-460f-b220-40b4d04b5d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61657b2d-cc42-42c3-8e08-dfe7dcc89ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b1244b-c0d2-4c55-84f7-47af3dffd1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac89b493-95d7-46f5-b83a-b68de754acf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0db749-d341-457a-8947-e3b3c62e6400",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e7dc7-a959-449d-aa13-06583b8c9f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0237bf98-18e5-43e0-b1c1-3dcb63e56a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5984e29-1943-443e-b682-c63f48c9fbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5315ca-f2f2-492f-ab72-7c823f8fada2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ef3671-0380-41da-84af-cdbe8be40808",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b147b290-f917-4469-beab-a3107f18ffa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4ba23b-dc43-4f9f-ba36-2afae26125b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0166be3e-cd37-4f8b-be09-94b34b0021f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9871cb4-dd23-4b85-8945-76721fadb601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db5f608-490f-4394-856f-2cfbcee3ff83",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1ce93c-f2c2-4367-9b28-205b548d9656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c37786-d718-4093-83aa-d156b349f6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2f7c1f-9846-4bf8-86b3-4336d4ccb977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3565d9fd-71bb-4aee-a3e1-37ec030f974a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43599b81-2e7a-46f1-8c80-7a24e4ec4bc0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79adef4a-3c2b-45f4-9cbd-2cce9f65ed71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be64a2a1-3815-4fbf-941b-43c8ae2eded0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62497c80-7525-4d64-9900-68e61623f70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2396c4-2a53-4f50-8784-5e3723bb5abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a85e471-9253-4d73-ad25-7a9788922a80",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626af4ed-b765-41f6-9575-4059f81ff408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e8238e-b4d6-48b6-9af2-e689fb8e6f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7fb41e-07f2-4951-81c5-14671197f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00ae9274-8459-4738-a2aa-577e01ad1c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d587b146-8262-40bf-a874-2d94949372be",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c7c9e1-19cb-4431-a1db-625d7161a2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cd4e3f-14eb-479f-8736-0878e6790b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa922930-a193-4be4-80d4-9f46764f1ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "41105f4f-744c-4a39-9b31-a5dd7872dac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc09f42-401c-4589-aec2-36d78fbe40b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089e34aa-157d-475f-92f1-cede556c52be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f9b1fd-e20f-477e-b2ca-ce4629a80e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a791ed-0643-4f31-8b60-2db94f768249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6381822-0a4b-443f-9844-1d188cf86bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cc094a-5cb0-47ec-a1fd-302ca2e4c821",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5044dfc5-e8fa-4a50-b818-9c0d684daf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69246ded-ccc1-415a-8854-57e14e15bc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e61040c-f82c-4fa5-8d23-28425ac8b4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a9028c-9fd1-448b-b3e0-bfdc95e321f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28173522-4012-4d8b-b74c-8d66e050c18c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9644a00b-7b67-4912-8f74-e30a71f2333f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c76eac-9af0-4de9-80ce-6fd9991a7f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330b9019-5cc6-4077-9ffd-ef8aadf1ed54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "948ad4de-eb2f-42e7-abfc-9be759e28ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5791597-a59a-4d6c-8cd3-afeb59447a86",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf498d0e-415e-4b6d-8fad-c8151545a123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525ae3fc-920f-40a9-b6d6-34304c5c76b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba88b708-31a8-425f-84c4-0b2d27fdc68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc1a8fc-e0e8-4dde-9a64-96392215b13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9730eb3a-0b38-4e5f-bea5-a9bc901876ca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a1b1fe-64f3-4a11-b851-b4cc02866f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16407bc-0ce7-44cd-86a2-a20f01583d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb6e48b-18b3-4f0f-a613-14a51094dc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9918d163-d052-4e24-a9ac-d53d8bc6318b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2253b4-ecaa-4e79-b2b1-4b7959fd2300",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee6112a-54e9-4520-a256-102d3a140f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d4be68-b90c-4dc8-814c-fa28f449789c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86f7c44-3155-4f54-ac0f-d04a2a900aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "21978484-dc46-4eb3-97d1-b415bce27ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d1cb9f-78fe-45d4-b765-cc9b9a98b500",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a06606d-e833-494f-8ca6-ac2fc28d940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e07a315-06d4-415a-9fd5-9efdf2fc545e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cfce55-9a84-444a-ad4d-5b69c65b90db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa38a860-42ee-4797-917e-7667b7a2e15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134e2417-94d7-4897-9508-75de2e09460a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b9f4c8-2321-44ee-a1b8-1d9913ad7de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a97185-a293-410c-a67c-ea3d5e84e5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250ba031-3ae8-47a4-b271-eb63a3de8260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "838befd6-3df3-4a26-a5e7-454fe0b7ebd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13a6875-8eab-4421-aba4-a65bf60f8093",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779ad4fb-9030-4f7f-bfe1-83e418a3f963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37573a3f-a5c2-4239-a25d-7719bb90a5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acc3162-baa2-43d7-8240-8b1be8ce267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf45001b-f70c-474c-bf36-26b246646409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18aea1c-3292-40f9-849b-3f3d0bda1c07",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefdf1ce-d2cc-4ab6-8312-f5c8a0b2e5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458121cf-0c30-4749-b0c9-906f16f61cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b987b7c-21c9-4b85-abf2-e0107f015c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31213568-18df-46b9-bae1-a3c169663eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b262395-b9e5-403b-b8ed-33cb26f3bdfb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c515d8-de9a-40be-b187-c3cd38115cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1134b5c-c2c9-4247-a8a2-0bf6919adc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5166037b-0622-47d7-bfc5-d8af01910417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d776a8d4-ee80-4c0b-8b53-ca582a0e0e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d4a72d-2adf-4b06-b9eb-5cdaee6d2e39",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9bd2e1-fa84-444e-a6aa-0e71510bae34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8652d44d-8e55-4ed5-bd51-e90844fbb67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031e176e-534b-4292-8d18-8b0ed663d685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f10178-f03e-443a-80bb-91afd28646b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3039eecc-c9fb-4bea-84e7-d2f2e3ca827f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950816ba-fc41-4f69-a52e-4d4f26dcc672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01acafb-19dd-48c9-b2ae-52496b670372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b8a791-76b3-4763-aa66-b56d21604b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b28ea15-36b3-4e13-8d08-43d38dbf28f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759b4391-0380-4bf1-8e11-c5081b15fadc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc159f73-dcb2-4b91-a8b2-9b84f3893672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5acd185-5a5b-422e-b1f4-894823217b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eeb81d-1bbb-470e-924a-7f43887aab64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a02d6ea7-8f6d-407b-a976-aa98cb1bc7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3726c7c-568e-42c6-8fb6-97a517822cd7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6d5e13-f205-450d-80e8-918bf633469b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e1ace0-2099-42e2-9327-f53ff4756a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c0242b-ba56-4155-bd29-5d1ce01eca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e68b15c3-4964-4913-a47f-e9cd2c3032e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3786a5-557d-4565-964a-a4c0b33b4318",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6defdab8-9054-487f-8d46-0b6263f4ad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9329b806-5998-47fb-be49-ba696f4137a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a9a1c5-902d-4717-8093-eb7b549b0483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35b9543-dc51-4e1a-a40b-754c71a11c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d06fac4-b809-49d3-9744-6287b5f0b490",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4ea258-20d7-4354-acbe-9f3e67c300eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204b957a-a169-4500-b95b-471e5445ec9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80637c3f-0d82-472e-bbb4-1ef41e10d3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b02bbbb7-d76e-4e77-887f-e848ee04aad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b4b008-f45d-4df2-b2e4-c203478e5131",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc9b1e4-866b-4531-9a6a-9dbf6c124b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98796cf6-418d-4e1e-a782-f148a9fd0608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3657721f-5b69-4049-8c70-e8f6a0a5651a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef9e7a5-bd05-40ac-a872-2744f87300e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d3bd6d-2221-40b5-92e9-06e2ccc4925f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8b777e-d5d9-49f4-9fb1-670777d3d5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af55791c-4a32-4196-afde-00a145d0c8e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757c4db6-1746-4513-90fd-15cc1c5f0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4398a29-c3cb-4753-b1e9-732dbfb25ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bb1e8a-64f6-4e81-9384-b331968de7c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa8519b-2f9b-494e-8de0-44a43b84b644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b6edf8-0d48-4dc6-bc84-85bf7e1cbfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f9ea2a-c957-4b84-ab2d-c958d52d337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1bde5e-b7d9-4294-a6e3-6c705893a135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6615281-4dbc-4a49-ad95-dc3fb8740834",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9331f8ae-69d0-4a53-9aeb-38ecb6511061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dae7b3e-e5fa-4811-82ea-bf129cacfbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd397357-4034-4b5e-960e-f363926f936e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ba973c-5112-4672-be8f-0f02db364d9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d15be96b-f56a-4f3e-9842-034cf51fa537",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75d9eb0f-a61a-4334-9cc5-d7b5c48ec601",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df8cb66-6dff-41c9-99f4-822e9a10aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "389dc037-1775-4a32-93ca-176f506a7400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d85d7d-1854-4aa4-b455-c05799413521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9eb42d6c-545b-4b98-8006-f30fb427becb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c15fafc-c2da-45a5-9127-5a191ef81216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4904341f-2da6-4e89-8799-beda61b7b46a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb3b75f4-a557-43ca-a377-1513c821e63d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "973f922a-8987-4628-8390-ab5eeb1bd4b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "531c0fbb-15fd-4db4-94fe-34d7f0051838",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "faaed491-d9e4-489b-9228-64a196203014"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "260764ef-d164-4ecb-8a50-481baa06f338",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "436eb0d6-59f4-400c-9430-e5909d12324d"
            }
          }
        ]
      },
      {
        "id": "45684f3e-929e-4100-ab2a-1f07b11ded9a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5ed6f087-0d96-46b7-96fd-31f8235008b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e44f3608-8d62-4689-b3ea-0c09a76f29dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "789b870b-4e08-40dc-9e86-2f1218bf6b53",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014f5fcf-b27b-4c57-a50b-73900b8fc1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bc864d-84b9-4708-9366-fec85c3d195f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15333dd-f4df-4708-9486-63872231c480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "09175121-a8b6-4fa4-b962-f03434bf80a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2005de0d-eae8-4037-9433-9a61df730865",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e826784-c217-4f8c-9a58-1104beaa34c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5b3c53-980f-4c09-9102-55dca174056b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44ce42e-3855-4343-86ee-fdd84eb40388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05576f7-be2b-4fa0-9cc5-5e7ed451ee6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fab06c-88a8-44fe-a0b4-6e3dffa7a114",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef22a760-e1fa-48dd-a6d8-313cc3477621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621f4e2e-d360-4b90-836f-9b114981fc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59fcba2-3509-46be-b5ac-a1fc592a451b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "697dffa4-e216-4c31-97e5-dd0f24a6131a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431459a6-e0f2-4c93-a25b-993842b19c33",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942e225f-1208-45d2-bddc-1ac84ce786e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28af5a2c-94ec-41d0-8ced-e9787d2e54ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e06bddc-a665-4b97-92ee-e1e43356c65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "035ed97e-0ac0-4179-b376-a3148b52845b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb1a5d5-0106-4176-8e93-3921ca44d0be",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c52919-8340-4711-a677-5a44b2f118d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26df700-de6f-4fc0-918b-3e2022a39bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d7d505-c0ff-43ed-a231-9b731bbf1061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e079407-d53a-4d00-9141-27e3bc0b68b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e453ac9-93b2-476f-91b2-e3cd9cda7fde",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912ed119-577a-4b1e-b511-3f4e3a98f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db9ced1-fccf-403b-80fe-9279d6753281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8939b200-5f1f-4590-92f2-9b782ce7ba75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4152aaca-6831-49bb-9584-9e5fe0530b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba38542a-35a6-40d9-b186-9818b346d14d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecd2601-2947-4a61-9a83-3fb84f28ff00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25179eaa-ea15-46e6-a54a-e1c05e49b259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147e034a-e0e7-457b-b9b8-ad1a0ab1e4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f9d30d-93f2-478a-986f-fa6f1b7dc20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cea6ab-bdcb-4403-b0cf-e45514a7cb42",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a576fb2-c8ae-48ea-952e-a469bb35ec62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964810e0-5614-48a4-b69a-ed0b004cc68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65ac03d-723b-4856-8d9d-ed4410f76acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e44d70b-321f-49cd-891b-b164d6c087ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cebb3e-e0d4-465f-bbf0-48c809b274f0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b0a918-4ef6-428d-b8ee-d42656ed78d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97173718-9cb5-42f8-938e-a08bef140275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7ee986-9029-4019-a77a-5af9ada4abca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0afb77-ecb2-401f-88a3-e146fc1afd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342bf609-bb67-44df-83dd-0387f20621f3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8489ee8e-85dc-4102-814c-aa171c39f3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2806b0b-1479-4796-9528-f20163dbb8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa4a19d-75e7-47f4-989e-2d6629b5b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4c66e2-00b9-4dc8-9da1-7ae2e4e23c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078f0f6c-5591-4cca-950f-9c44fd57d305",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e4cfe1-b2d5-40ae-84df-853e692d6403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b663354e-c16b-4b31-9cd2-03b243d13fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd6fe2b-9ef6-4942-93c9-7bf2c8237a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "288283a2-9312-41a7-9415-65fee01f81a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52042fb-7e76-43a8-b1a5-e2a5a4034b09",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3468b670-b827-4b8b-b54f-7b73a8b21815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea84a078-331d-4a67-b3c4-cac10deec6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ad0683-9ede-462d-88b2-6f1aa1ac74c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5cce6df-f48c-4afa-8859-3b2c41974f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ad74d1-ce86-40e1-9fca-e22a54446d2f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea66477-867c-4046-a52b-e4932150afae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe81bc4b-325e-4659-956c-7bceeed2104f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b933622-53f7-4856-b26a-f96296964c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28336c5-b103-4d02-b251-65a60330b34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317cb72-59d2-4645-8636-30b45a994669",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef25a64e-12a5-4d9f-9b03-6915fd6f5ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312ec3e9-d97d-458e-97b0-1240b26325fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a161dd6-6c8f-455b-ae62-b2c60d4d5737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d539455-1ed7-468f-b2f7-523d7aa1ebcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d477724-001f-4282-a256-c5c325f80504",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d9f89b-2b20-48d1-bf7c-275d60b3946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5d2cdc-2d27-4a0a-a468-859617753b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9853b000-1537-44c0-b715-e8f85c83b9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e912fa-c45f-4793-adb5-db3ed9e9f187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c8cc07-fabf-48c5-82f4-b37b89e6c418",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b618ff-d1d1-40aa-9089-3dd34ec879b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ccd740-aae5-4a34-bc21-61875566fc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d46cc0b-246a-44ae-9c02-be3d6636df7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfbd4cb-f2bc-4b76-ad30-a2df40c82fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2345a0d2-7b86-48b8-812d-4298bafbe978",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d252cf-8ea3-4cf5-8301-b8ae7e4c8a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17466033-3646-4d9d-b0d8-68a85181e345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50a2540-e559-40ed-b4a1-37d49dcfd5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f64d1d6-1026-475b-85c6-f3c239d8e3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c3b7cb-c1d7-42b3-850a-f3fcf86d8cbd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ad59a5-a66c-4349-aac1-9c4313c2d590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcd1ed9-0cff-4758-a1be-f7c6c38b0979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b87006c-8396-48a9-bba5-624e599509d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "73990e72-35db-4d8b-a29d-ef322ec80fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001fc908-f1a1-41a8-bf3f-e90dfd401ed0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a307e64-53cc-4dea-86d1-cac40982a6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8f8e8a-fe75-4a47-b840-7866c1b3faf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b794636b-d22b-4902-aa09-d1f506a41436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9399a8b8-2b06-4a6f-8e93-9a38b636ff00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b26b3b-bb35-4c4f-ac7b-694274ae8e96",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92c2833-b734-410f-99bf-fdd55f74f904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f123b1-502a-4360-b89d-8cc8b7e449f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36131309-aa1b-481c-beb3-bc39a23772f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d42b56d0-3a8e-4147-943a-2eadd3fd349a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a7aa47-98b5-4dbd-87b3-b1165207e9d1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01ea085-174c-4110-a566-3e25c93bbd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4feb1dd1-8e1c-4cb6-9b40-2c5cbeccf4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7fa7c1-784a-4558-9250-2d2312f622d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6b9d90-019a-40b6-9f82-f7d25a7e3d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb8334e-3ecc-4263-b23e-e5f0d147d7a2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae46a0e-7e02-494a-b910-225bb4ca410a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c08fa85-ba72-4f94-be16-3207327895e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa57f21a-f101-4214-b24c-84ec92fd97cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9025b8ea-004f-4f0c-afb0-b7b0e4daece8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aac3ed-bc07-4144-b543-960b2fc8ae48",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfebc363-d04c-4ac8-8bcc-cd59ead6f637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908c9430-c744-4bdb-a3c2-db4f1dc1f2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbcbdff-57e9-4811-b482-f4c8f888b884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7fcbde-911a-4814-b59e-e86482731fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eafe399-3b2f-4068-8585-5bbc8e529a33",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f2c9e8-2cbf-4d24-89f8-b9f473d91134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761621f1-6862-4247-8e65-a98f05d6585c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc050c7-bdaa-4af9-99a9-0873f541a3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa17e399-d38b-409f-bfc0-ef2a437c329d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9968f8-0145-495d-bc4a-af0dd5c8ef27",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5a6c29-d06c-439d-8f7f-9a5b04b0eda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ec2a6d-8933-40d5-b228-70b1c62ca926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3495105-52f8-4072-98e9-3cda59f5f413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f824b900-5d2b-4d3f-bbd0-d56df9eb8c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f320cbd-ed26-4b1b-b222-0073452bb5bf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44658f16-cc36-4ce0-99c8-2543879e45e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770c7c2a-9c96-4d10-89aa-f4d447ef7e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb5a86e-16d2-42b1-a837-15f448ddbd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "022b8c6e-f43f-4fa7-a9fe-b61882904157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71a7301-0f72-479b-b476-feaa1962c251",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57e1f07-370b-4255-b212-c4e028be5649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43e473c-0f57-4be5-aeca-86a20c83f77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f02131-a9dc-4ed1-aa96-3ccbe52b9cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6f2b66-047c-4650-9808-5cdb08ae863b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c15606-5358-4878-aed8-88744c2322bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a25981-2ff0-4fff-b0f5-79dc8fa0f481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87533b79-903b-400a-9c08-e734b0fa058a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7bf1ba-ee43-44eb-ae32-b67c2a200901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "813cc4d2-e6ab-44d0-bb62-7334a371d99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc77b050-4652-4661-8b6c-5650bc7da52f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6466485-b3a2-4105-a05f-063ac2cb95e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27af0b55-d458-4a3f-ae57-8e8db84440ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5dac005-7e88-49be-8751-3a9edd77548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8c1849-bcb7-4977-84d9-075f24dd31d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df4996e-c013-475d-aeba-d6a7c2064719",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe767cc-23d5-4ed8-9bab-a3ad8ac5981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8687cb-5956-4130-9aec-6fa7c5819aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a4e130-d97f-4fc7-955f-c41ef6b6e19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94104c10-411b-41a5-9d36-39864a9fc519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3578a56-ea9c-40ad-a904-3e3cc2072b13",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8e34e0-1434-42a0-87b3-d5229f0e99d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b4a4b6-c239-4782-8ee4-991b1247e807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fce0126-0ab0-452b-a224-bed37df51b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "461efcc1-60eb-42d0-9e43-2d6122618c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905ed0a0-b060-48f4-8689-77cdbde8583f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf62f45-b62d-437f-bbc4-5ce622229fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112b78b6-2fae-4292-beed-e9a8a32c19f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5994e2b7-d072-4fe5-8e26-6ea40f671626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "630d161e-5095-447c-ae7c-05d2cd902b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9c2758-d6d7-413b-a6a7-bcc013bfe097",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396da72c-1de3-4275-b7cc-ddd71f510875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e1ffd6-ec84-4283-a3e3-03af1ff230d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912160a4-586f-43c6-b9e7-236ff820b2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df65aee-49bc-4a5b-9011-a30373d0edf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb3022-3e36-4f3e-8188-285808c73dd2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d58dc80-e722-4a29-a749-3d66aedd13f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0788e80-22a2-49fe-bfa2-fcd5ea4db508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e971f7ae-456a-4cf8-9380-79620abb1af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e20e6-e957-4d87-85cb-0308a887ac30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd0ba17-9ac8-4b27-82f3-f9caf00067b9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027935f5-609c-445f-bc78-c36865051fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eed7f32-842a-412d-8593-696982c0ca93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0c82aa-29f3-4cf8-9caf-2d7a905de9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbcbd04-abe0-4824-bd37-d1f72c45cae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919a0741-e57c-49c7-b686-44e9680119c6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa0bd03-6776-4113-acab-baa1e504f0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ed6333-51a2-4f98-b4c6-1670ef781979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a66fba-b732-4399-ad28-21962d55bb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa053395-41ab-4c98-a1a0-15848d34ff33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9703f291-ee00-404b-834e-9a84aad64c25",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37e7378-df30-4bb0-9895-bd796d823168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd0a359-341d-410a-912d-b516ce8d1f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9d3828-ee50-48f8-a68f-639f08ae64c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdf7a22-71e3-4980-874d-ce00e07266bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e8d394ac-6e19-49d4-ba50-2a21ad907d5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24d8390a-1814-437d-aa67-ba28c2186856",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7e6096-d7f3-43a7-9c3e-1c851ff97d3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5206b5-ced1-40f0-8a3e-6c369594f380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a6a3be-11ea-43bb-a16f-e86dbc7deb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72a110c8-715c-4e52-b092-7b8b9d29c2b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "685678c9-5bed-4e7a-9c81-15dea86348bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0d3e5b2-b44e-4709-894b-c4d80357e19b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f133da59-2bbd-4ac8-9b57-0bb9f19eb470",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b4bdd2-6f97-4bc7-926b-d4678f70e332"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb42cf83-3b22-46f0-9c5d-6f068653b9f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "40d33d48-ff7c-44b3-8e07-7c43744a6196"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c0ad0a9-62c5-4388-99f5-8a5033b54b7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca73e410-e936-4495-b292-ee9d17e7e0b5"
            }
          }
        ]
      },
      {
        "id": "9653a3c4-1053-4503-b683-022d45c979e7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ca428ac9-8752-4303-9993-3261b5cbe331",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fcbb310-68a7-4869-a0f0-3b06d68161d9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f0850ae7-c6c3-4b4e-9cab-289a8fe5d9c1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597d6d15-6440-4333-8deb-29405b815587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631b7277-65af-4bb7-9ca2-8067667338aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660fcbd5-09d9-46b3-afb1-623c5a88f0ed",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ace8c0-aaa6-49f0-bab0-d117b883c49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cf5769-98c3-4dd0-ac6a-ef4606d347c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617068f3-3202-434b-983a-7d2a7196d00f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff8c68b-038f-427f-b4bd-2518d948b54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e0acbe-7c64-43c4-9504-5d86cde6f334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fa29dd-d9ec-4cfa-a04d-74cc06751bbe",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64c597d-7d92-445a-9ddd-b25a7a7070be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854d21f8-2d40-492e-aa3f-0926f79e1d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53376907-e8b6-4fbf-b568-d1a2162e3b66",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dc266a-4d1f-461b-8ace-b440172dd001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d680ae-cca8-44e6-bca4-5f02f65b5b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70eff1c-f38a-40cd-ac97-b6104e483d20",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79aaf20-493d-46f0-80a9-e7563ac7ea96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813adb15-7f5c-49cb-a676-ca55cadb6330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dea067-d9ea-44b0-95f9-de72397c0e8f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ed44bb-6410-4c63-be0b-aa1e18c2cb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf121c98-adaa-42aa-817b-74ae53c0bda0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1423d967-5833-4ebc-b555-844c46e6285f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c248d4dc-51ac-4a40-9e15-262e081b61f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e898cc-7f20-4a0a-af37-c46cf6c7ad43",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37da3935-fd9f-455d-811b-87f44ecac735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccdf36d6-1245-4e5a-9215-b7cbd370a515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0d9e23-8142-4ecc-9fbd-aee989a1a93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732dcfb8-00fc-4842-aea0-c161d8de1456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae86cbd-63fa-47ac-8b52-6c1aae99e754",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97d937b-d9ac-466a-b8b4-4a0ba31fbfc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08997c5d-d137-4835-a98b-952ac3f749d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12ba1fc-2450-4a1e-a19b-c335baa4ed33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26da2ba9-e0c0-4529-a110-d489e9819b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd58e70-8a69-42a5-89dd-1b5375d724de",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322a91d-5523-4519-a219-c3dfefe08c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4ed192-c3d5-4dcc-bd01-c8bf490145ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa320be5-6606-4337-87fd-4633a4da7543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a84004f-9ecd-4e59-ba4d-d41831a85629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5ca639-9c04-4fad-9fd2-4a415c9827b2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee9a831-6ddc-437a-9729-ba7f5a9254ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba20552-9206-45b8-b8e5-494eca7a55da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "febb10ed-e089-4844-8da7-32fd54dd5a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d523a8ce-d5f2-495f-9677-663fe5016cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed5df80-1883-4146-a242-4ca4f99a7b3d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b006b4cf-3f16-4f8c-a204-66c3fe5f3de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fd77fe-6ff6-466f-86c4-25317de23257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f1d090-ce9b-466e-b805-44b6bbd5f515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db13690a-8af9-4710-b6a6-69042aa4b6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afedeb0-ba27-4a94-9e50-94a44558e299",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f31a561-c66a-4af7-ae52-fa00b7e2f399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b157e858-e49a-427e-9911-6a789220700c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0700b686-c26d-469e-be0a-afdafb46e569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fef6c0-9bf3-4b88-a74d-6f8d099da6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b0ff39-dc09-433a-b2be-c0674b3dad20",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed876bc8-0d11-4302-ab17-7ee78f108ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0189d821-75e7-4efc-a88c-b774692556d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ac804b-6241-4bfd-9f7e-c5ab483781c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0514550-768a-45de-a009-9221b4bcdc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e406e99-33ef-4e32-aa30-9d0c283a7931",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89ac510-85a6-4526-a803-247d2405d265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a7cdf0-17e6-455b-8ff5-4825877dbd7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f90f8a0-92be-4c3e-b0d5-8346bac018a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5601b3-13bd-443d-a355-2ab8354325d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ccb552-f86a-4771-95eb-879910b3de8a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804826a6-add7-4f6f-8e7c-b152a357dc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df9ec05-eab6-4d75-83ad-5dc732c6e0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e3e94e-f728-4535-9c75-e12a6a5ef3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cb6b2e-3be5-4455-84fc-487a14284831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fc69c8-f649-464f-8e8d-634d655bd038",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09261580-e02f-4228-866d-cc6899404932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53261565-8629-4299-a580-fe049c21624b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12c2444-44a0-4164-b31e-d9936bdb8437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66d8314-ed8b-4355-8322-6424572b0d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588f399a-d5c4-4944-b312-eaa0bcf7aacb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc7c292-df8a-47a5-bacc-f7c3de745a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9b90b4-e282-4107-b253-7c18bb2a4662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fb162e-3875-4c77-8935-0c668c03a640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd08c75-634a-4523-bd4d-03093a35948e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763f50b8-81bb-4598-87f2-fe2f450e93c6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae4b870-54c6-41d6-9c85-1156d4a51886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24a9fe6-3ee0-4449-9b5c-68005ba1b58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061142b8-50c6-4c26-b754-b7f38a6affe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3e12bd-1a76-4076-96f1-a8fca5c59bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff14cd3-2a70-4abd-9db0-16f13e98dec3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85a8ade-d8ab-4e25-b184-05594ef68d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f419b08c-4815-4772-a49b-71e16dd10d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8783a2-3fc6-425c-90c5-bc8e03d746d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d5f3cc-cd89-48d2-a33d-1b7a4ee29681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5400261a-231d-46f6-b2e3-520f8e588e9e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970bb490-124b-45ae-bf1f-de9a938b01ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdc4a63-7222-49aa-bf20-b39ac61541dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d27858f-fb6a-44b0-afdf-9bbb868cdaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23ef680-b67c-4e1e-9e56-1609d7f5b8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2a69c6-f209-41ab-8327-943b0bdcd2a1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fb9ad9-cbcc-4d76-9681-f54e65342205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf450b1f-d6b0-48d1-9faa-0b02c797c31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3196defa-09d1-4cd2-80f4-b63bf602c172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e78a8aa-2330-40b9-ad67-e4c8ed166c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff430a44-2aca-4c4b-a54c-a9a4fe9a1506",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b0fc32-7c98-4086-9d8c-2fea14642ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb361a9-b188-4d06-b9e9-192d96c71e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816267b5-86cf-4913-9fc4-fd43cb0e26fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1d015c-937b-469c-b3a9-f49a6e6977e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7023237-c86a-42a5-9d74-319dc75a30d3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2157bcb-db26-4d08-b3c0-79750cf4a147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08242612-4d21-465a-b24e-b2d638aaf0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43de83b-f0db-4a1c-9bec-205df9e7e28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2ba9d9-995a-4b0f-b4b6-54dd36f8b4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634e51f8-2057-43b9-80b6-2c9235dde9d6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a83798a-e0ed-49e1-a9dd-aa763cd5a5d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3e30ae-84a5-45eb-8a5b-e9e895c1773d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2513d65-abe6-40ea-b8e0-39e2f10accb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869dcfac-1d91-4031-a262-4e95b7b79663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe5aaa6-791e-48f8-a4b9-19482c98c438",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba4f62a-5b80-4965-ad20-169ff4044ed1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90563cc9-e6b3-4f7c-ac1f-df5a30c81707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ea933-09ee-4c20-8713-57672e22024a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57d0e12-1904-4bb0-b9e5-57752e79f50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83138af3-4824-4e38-beff-ed90daee5dfa",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cda0555-def3-4aa0-9a6e-bc95adac49fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a8e630-8b31-497a-8e01-6df4b264348c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0acedf-bac4-492e-80c2-151dd308acde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53aeef1a-e58d-4da1-ad2f-aa4b1117da94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30656685-f1f2-4289-b1b9-ce35fff8f6f6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80467ac-dd54-44a6-a252-7227415211bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9b2641-3e38-437a-8afb-33ba3a771b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfcc44a-12fb-4526-bd67-017ba3878162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0667886f-811d-4c77-9d6b-e2bf56c86e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00a04bc-c4f3-485e-8c6c-ba5ec980bdfe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7583a95f-f81f-472e-a43e-515d2adddcbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06dc5bd-1748-495f-8edd-13ec6c33f5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383bfe6d-9e73-43d1-882f-5b9b1c9bc11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb7ca3f-9fe8-4a6c-a1c6-c24b87ec81e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335de467-95a4-4c96-a4f0-1266cd25490a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7bdcca-4f21-497a-b60b-c16441f65e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878cf1c8-4495-4884-9929-e3f46354d284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653c7902-2394-4bed-a309-67afea8522bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4056e2a3-d2f8-4852-8e79-8f81cc197d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de90fefa-5d34-4ea7-a82d-e7a1f14fb627",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7028a869-2e12-4721-afc0-493737d1e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd4d13ad-8b28-491b-a414-db7abdfd33b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41dc229e-bade-40cd-a698-5b832302c779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e240b8f6-e513-4bb9-8215-2d4f2c45b9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da03caba-fede-40dd-8843-2ea08fc0f62b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55228525-cd91-4b74-8d04-7dc8182e8cdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6dae5ea-78e8-4204-aece-f92005d40697"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3c59ea-1553-48b4-ba34-d66879a8fdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a888c1c-d5ce-4ac4-bcb7-6362dba70ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f18ccf-91a5-4558-b27d-b12237400e92",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24e7b42-0082-4899-82b8-837c10dfc46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e342fc76-9db1-47fd-bcf8-210267972180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9edad49-ad1f-4a3c-a3dc-3d56ef9cd4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355625e0-0297-47aa-b813-545309a6fbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6b1874-5474-4921-bc43-2b34414ba508",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff9246d-954a-47dd-9ab8-527936c4eda7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d04aff-87cd-4a11-b1e2-e5c71ad06d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccd932a-59b5-4b9e-8a46-c7dfe2e7faa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d7d61b-57d4-4780-b278-44276dcaa371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e3b145-3eda-47ba-8bf4-e734ab04f4ec",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76290478-f6e8-4254-a13f-04d6b17905ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eed736e-d1f4-468f-9769-351333fd7634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d051c9-7e2b-4d35-b45b-8e3be73de3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc94bb46-bdc7-4629-ae4d-14c634d42a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cd216d-c128-441c-98e0-c69d8922fe0a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1394a20-b031-40a5-9fe6-5a35bb0803fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb1a6e3-20d4-409d-a131-f8d0fec7b225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056d65af-bbfc-4363-babd-c38e5d575fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d944fc8-f5a6-4ec8-9d79-b65f7277be44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7388efb-9d38-475f-aa93-8bcc27cb248f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50242d27-fbee-43f7-a87d-1eeb9f807b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08aefec-4f97-4ca4-a03d-49d248b171d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9374c2d-6e27-423b-8458-a85e97c9fddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4632c77c-44b6-4885-81ea-4766b10bdc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1032b30b-4eef-40d9-933f-6cdb5540d36a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a697a09f-e7be-4d38-8957-c67963599c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9497bd-8700-41f4-8c36-c716092b5235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8945842f-bf07-48b8-874a-32eadadf196f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068bec32-25df-484a-a37d-4ef7231d40c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4122e17-31ef-4b0d-8eff-0411a69cfc8c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb9ebd3-b976-448b-951d-ada9af7ce567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522e2411-25b5-4a1f-af9d-1b740424433a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297d5d5d-5766-4232-9cde-485f6a7d051a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5150c849-5bab-4594-b253-c74d2fa1eb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ba4179-2fea-43d1-809c-29969251fe36",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e88891-71d8-4a58-bb51-af7f8c48bff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1006a1-4c0c-47ac-8870-9898678f3808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb5356d-67c5-4349-8477-3e1b78f6cf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fff91b3-bd6a-4d51-9d2f-500c9794d50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e727b91e-5cb2-417b-9745-5d5216910e2a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4785b2d-465c-4f7e-b460-a9e971480ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e2d6fd-dc0a-449c-8ec4-776356b08a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1434d90-46f3-4bde-bd79-626872e69b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef820c2-d233-4067-876d-ccafc6a480c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b4b601-b7f1-4b94-baa3-849837da84f9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8cda6e-d3d5-4658-b69d-6ef30172deaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106031b5-fe7e-4c48-aaa9-c27efb0132b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0b186a-ddf7-406a-82b7-9e7ca1cdc47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c602b21a-da82-459d-a4d7-a61f73bcfdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1574bf-6776-451f-b263-67694ecb9554",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daef82da-de8e-4741-bdd7-f2858e56f514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73547086-4542-4f89-b962-0a2b14dcbe1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a58c0b1-c687-4888-b4b5-d8051592bc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3967c2b5-74eb-45ad-b9b7-cb25601a3920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d870f559-2736-48ae-9b21-ba35b2cc393c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8b4b21-c55c-44cd-8a03-dbb176a64163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0580b2-6166-4e45-b7b1-547b895de64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f5995a-4b44-4961-be04-dcb1171fb4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3146bc32-5271-4ebb-bb28-1b670ceb6d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86869824-1854-4a83-acde-5e359c6aef7a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d65e3e-4bf7-427f-8ba6-3bb8e98ebd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d700a453-7cf0-407f-bcea-555ddaf4e422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abd7f64-b70c-48f6-b29a-f13f2c100951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f261576-9fb7-4091-8aef-4c8b7b74f210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7226e209-0626-488e-b3f7-93bd1e88c01c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec991390-ab94-4298-b53b-cb74bd686015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2af8e12-5647-428c-a96a-8cba71081700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd248ac2-987e-4cd7-ad2d-18f63963eefc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f8245e-744a-4005-aa4a-ad0c4827f0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06fe477-ca37-4e75-a8be-1780c93ece06",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef5dd5a-0801-4c59-875b-589c9c5572f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02294766-bbc1-41e5-befa-7838dab5a5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d02345a-f38a-4b71-8fb0-0773097675e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86751ccd-5d8d-4494-bb2b-6b05e910f0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01796a8b-1973-499a-9afa-e6c55e655037",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908e2ecd-198a-4da3-a137-83c57a47e24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9f4477-0780-4e03-bb5a-167212281e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76def75f-00bf-424d-802c-cb05fecb36ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705b591c-12f9-46e8-b86c-39cc6cfa2108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d5ae24-00a6-471f-ac22-583b73497052",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b87360-d66f-4a49-b922-ab5436640757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6001939a-7c1b-4b4e-a334-6578922f426b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8e161c-7ee8-46ae-8ae1-ae9d077c48b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b598a7d-870c-4e71-8aee-b7acf54c9761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcec2fd-a9e2-42ce-8ed2-839e8c953b0e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0baf85ae-c2a3-44ef-a670-17d77d36c6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f99f58-5f74-400f-ad7c-0d4147ca6569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87862e6f-8361-4108-83bf-b6ef32f6c7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8e7d49-3bc2-4cbb-a186-36b18a1928b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a55bf2-db96-48e5-a192-aaeb58dc50b4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20535776-fc08-4495-9462-d5a430ae3369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04db7d9-da0c-43ad-a978-a9409e67f2ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6592b9a0-c386-4436-aa88-e8862f682de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e4f932-0af9-4de3-910c-c05e27f97e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d34f76d-b6cb-4301-930f-09a14795d3b6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f1d60f-a549-4177-bb8f-8f340b56a446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ea4073-21df-4503-9df5-b1ae2b027b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0734f79c-ab26-4f9d-84b2-68e661fcec92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3db8eb-1ee5-4724-9841-e8c8ed5e33e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7922cc5d-8ca4-4be7-94db-227bf6762cd7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cac8cf-6786-4597-94ee-b4a99c5b6d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755cc366-08a3-4b74-beb4-859037ce9a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289c1c91-1d4c-46e3-8075-59dbf180d467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e228dbb4-f4f3-4089-8665-31557d62da79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db474347-e101-4102-8028-dbd90b9d4283",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7849756e-6665-465d-be7b-76083264711a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b05e9bc-37bb-4528-9f74-fa3d2e3b6ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba44a68-a31c-48f1-9449-9c2d3cf86115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a802437f-7a1b-4de6-9c51-04d97244a4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b362725-a501-4f92-9a4e-dc8521cb9b45",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0787cf18-4dbf-4fa8-8747-f8c210a16457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1604b5ca-a4f1-4674-afb8-11ac80e2677f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9557cca5-b98f-4cb3-b5b4-4443a9c90372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba20aa9-1319-4272-ac1d-3060d6f0d025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff28ee4-9b5e-47f3-8cef-db01b0549872",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3327106-272b-4258-aa0f-24d77c719d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9a71e9-7f3d-4278-8296-80984070c4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bfafe7-fdc3-4040-a95f-713a84d74537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66eff858-b753-4681-9dce-3fb8866e6068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5916e91b-3fdf-4f42-ae05-49a84fce773d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04c4d26-cc56-4dde-954f-b45840ed9117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7a9724-d93f-4808-8de2-8d75e0d3f803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54ce30b-ce20-475e-b8c3-26130fdaf789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b936d0-c77b-4226-a834-b0c4c3087934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe070e1b-c398-4ec3-88c7-0bb0c08e5c40",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394b204c-6183-4f77-a088-b8f9cee938b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd3e5ea-6e4f-4ebf-8db8-6b54875213c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b9d59d-a452-4c28-bdcd-e9f2a171e243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2aed98-18b2-4db9-896e-a361f6c5f3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6324e1a-5b7a-4f47-93eb-43b83f117382",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3961aaf4-c5be-4e80-bfb5-e240d4076b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8df3f80-773e-414e-8a4e-6804578f7588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104dbc77-5a5d-418b-9353-e0b88b54dd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34627849-bce0-4c0a-a8d4-67519660eed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6e703b-88d2-46fe-bf72-50b08275b6f9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fb88eb-42ce-4677-8a54-63039c4d15a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438db6fd-f484-42a5-b9d2-82988cc81f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879bad9a-f4a3-4048-b75a-33b99e12377b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982e30c6-65ff-4584-8e13-efcf44cc5405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec60973-9879-40bd-881d-3042f41dcd75",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3b9671-90e6-4536-bf71-c5749f04c937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a518d5-f199-4a94-890e-b2c3717301a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a3854e-07de-49cb-9ed6-49ffc17b1a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a13c145-b537-45a8-a9ce-bec5f9e5669d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122af0f9-0741-4fad-b580-88b1c4082814",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142bc623-1b53-4351-a6af-8eb62494f964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8814242-143d-4a34-984e-a961abdfb5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c487756-7657-4321-85c8-1898cb81941a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20a41ed-19b1-48a6-8d8d-b832d67eb48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a38306-b8f9-4bb2-bc34-c91cc9d88a3a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1adf12-f5e3-4962-8399-d26be73a517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290a6af8-55ff-409c-8eb7-2cc2f762a70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f29b4fe-17ce-4d5f-afed-8d5e35b8d1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6e377e-363f-4917-8cd0-f0531868e680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb84a8c-0041-4198-9305-25c910f4e038",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1310962c-ef13-472a-90f5-e7379d8ca3b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e497985-424a-4bc9-a8e3-49efc479306a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cbf125-6b0a-42a4-88bc-79bd8b72e4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384fa034-91dd-46d0-b569-69c0daf2ee35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f51cd17-63ae-478d-920a-8a7864efd463",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929fb9a8-9548-4c01-a1d7-eab57378350d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8247598-752a-4f45-b319-f94d7dba3db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b8383a-854e-4e5f-bf33-fcb49aa4b453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babcb7ef-2cb6-4fd8-9abb-83094d1cf538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee924db-b92d-4ab9-8ad7-803cdf14f9a5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf245a4-e7de-4fe9-8e57-23ffaacb9f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4965719b-6a42-479b-bcdb-478cbc46877e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e427fdf-a234-4108-bdad-15add96f2325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aead3ba5-f904-4c20-81fe-8c75d6280055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f953a799-f962-48ec-a270-ec0dfdbd8795",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f22e605-7f32-46f3-ad08-3f83c5d91ba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56fd0581-4b61-4a32-ab8b-90fb06a00258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba05e069-6cb5-45a0-9756-89a23b4cc540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0a25f8-0cdd-4409-8797-912f207a8dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba7aab1-407b-498f-8dad-a6d5bdb14c65",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39f3456-7874-49b4-9e6e-abb6c3f7ccdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518da515-ce7a-49a1-aceb-932958d06f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4d109c-ebf5-4c7d-88c6-d516e52ba0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07f39fd-2314-45a7-a16a-244d47368c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41467be-ac3e-461a-a692-ac6f3c34e98f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187c3ee5-9d5d-466d-bf8d-2b0514d18863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "399ff171-ab52-48b5-ab49-223ca2bdbda0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6130b423-a750-48db-a436-f7fe75cede25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78250b8a-2842-4fc0-b7bc-9c3ea547549f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7c9c68-6945-4e59-b648-2bd88d2b8e17",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e456853-4d25-411a-a410-b041ea99b01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97089dcf-3701-4015-98ef-da68c6296e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f7ada0-5753-442e-9a35-7d92f3a203b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bd34a7-c40d-414c-9ba3-e5c6ebbe1827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215882c2-6534-4e2c-98e4-a085137b0c8b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1939ca5-463c-405c-aae5-821cbb2b8d18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a67e3114-2fbd-4b87-9394-fcf426806f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42770da0-1bc5-4008-968e-cc58e438040b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90582fef-0965-40bd-9ce0-11e1202d7763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d88e38-d686-4bd3-8d37-743fc787752e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a386bb-4360-4a84-913e-2550131f11fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ed867d-4c7f-4763-b913-cb7144f227ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891e50bf-4d7c-40c9-8984-3f5476723d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73124d65-43d7-43ad-8116-68a76bd2f18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2b47d8-b06f-45e9-b937-0dc3cbe23d2e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1f0f83-5b39-4438-b71e-973a93b4b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804999e9-d7a9-4fe7-9b62-d04e6008726c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da97e8a-c3d1-4ddb-b4ec-08e38d0abe8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b9b747-c996-4dd6-ab9a-ff37755727f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e3768e-06d6-442b-a7d6-cad4e1c9bca0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a76991-72de-4fed-a29b-2c5111d0695f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436e277e-65d5-4ab3-8740-0cbc67b09f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bcb04b-9d5d-496d-bd15-8a95dc9e95d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f03ce2-da73-4e9b-9d2a-10805c6a9e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cedcf32-4e7d-4ad3-a41b-3e9b4e2a0404",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ff9d5e-5bfd-48a2-8a59-aec27fced47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44450de5-da32-4ace-8f41-74995277c936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6b52aa-0220-4800-a207-9f89590d17e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d75bc24-8c76-4ddf-9867-d220f3da0aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a667946-6c68-4bfc-9f1c-dd7d3dacfe14",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88dfd90-e882-4261-86a6-6977cfae378b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4fbdb8-0eac-4336-874e-d50612f03807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07bb8e9-a09c-4dae-a813-8576e874287a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0a3de9-0768-49f6-b39d-608646d557df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1725f5ab-6c7c-4346-8372-27e46b71bdb2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b6e0e6-9ff6-428b-930f-7bb33d5cf71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039de37e-92e8-4bd2-a780-dc29eabe2921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d793fde6-5b96-4ad5-b4c7-88b24a02ca26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01642cf2-65e1-43d0-aa77-d95728db03a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fee5ed-6014-4ed9-a459-92d46a7c576d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1875cbce-e036-49e3-92d4-dc2a73ed9f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3368ec8-43cc-461c-94f1-bcc3418fdd4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1698da9f-5e93-4004-ab06-0531b9d6f6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ee2491-9fcb-4879-8624-8911cc635492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b97231-f82b-46d5-80e2-90c9922cf4fc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ed2db6-1bb4-4fac-9dca-9b4c9a8d8185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec4896a-d6ed-4e18-b234-524983cdd002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b392495-9b2f-477f-bc38-20f99ebad30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8990e2b-6be1-4f42-b9bf-11f3be1686d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1156650-12a3-4fe3-9ffb-9a1eabd29e86",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec35502-76bb-47fb-8ea4-3452df4bdc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74df6072-a00e-4275-8e1f-25796355467c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013d1b54-645e-40d3-984e-f95ac255ab67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98aa66de-8a25-47ac-b46e-f8126e1aa291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583f690d-29c5-49de-bf8b-c266fccdbe33",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49153e82-aad2-4ee5-8ef5-767e2c2fcf75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0b6586-dee0-47d4-98f3-a4f604685e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9ef7c8-a232-4948-82e3-85fde313a337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15808a2-9cce-4f05-9b16-1257b47399e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0cee44-d7c5-4600-886c-c58f81c472a2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3c2f62-825d-44e5-8043-a4cbf3557f7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8ac8ed-bd2b-45c9-bfe4-c3e657e6a920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ebac3a-7c6c-4172-b3ac-dab08f044bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca4f263-b04c-4be9-a38f-37d31ec7d0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b3040-a49a-4932-90c6-c6d823411b4a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df9ff73-a9cd-476f-a46b-9a756292e472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1baa29-0053-4384-8e2c-0379776d031f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eedf8c8-7a36-4a9f-917f-6d9001b49441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d01b247-21b3-4980-b938-521291b158b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95ea2a9-95c2-46be-914a-6dbdc1bb4b64",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04209e8-6e86-45d4-8a1b-530d56eda7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd579db-8c09-4c9c-92c7-2bd0b6fc6925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ce450e-0956-4550-be27-30ab593d04e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef03e753-287c-41b0-bec3-0a3b1a19cf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5230ef00-9c93-4bc5-acef-456db6ca437c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b774778-0bd1-4718-be31-37e077a8a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def903db-09d1-42a1-8647-228936bc2e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b070eb06-f153-4055-a1ae-743c33ac8d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65551fc4-a6c0-470a-bec8-031b1fc9e8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6e8b7c-8f79-45c1-8a79-ffd739ee7207",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73be8bbb-98e2-4e1a-a625-2339d59e3d6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c464d17f-49fc-4437-8a15-55aa770d0669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ffcc44-75c1-4e5f-9459-1b9e247a0433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084a9ae3-1d04-41a2-acea-08127afdef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688aa7d6-c2e7-4b77-8507-fad73c58414a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63650c0a-69b3-4452-a247-917a7d386ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f32920c5-0361-4c31-9e2c-5979593448ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb85cc5-6c25-4aea-a825-ecbdd02a4a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082dd14b-c8f9-40d5-b59b-c982b040ff9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10efc68a-fdbe-40db-b195-45e9b8724aae",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab862751-d02d-4fe1-95ec-3e640d8c80ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7e9c8b-a22c-472d-b935-0bab56daf5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f53e3f-dbb5-4d53-93f3-106935b17956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c461045c-b094-40ad-99ea-988c63a3b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96248093-efbe-4bfe-9071-6e2c7f5d3519",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556733fa-a591-47e6-83c7-b573437dbb0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0243a0b3-48d1-4a9c-b45e-d6aaff5bd2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bd01f9-1570-4e31-a2b8-89b23797eb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b30cef-10a1-477c-87a0-67b2db3e3386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32a6f82-2780-41db-8cb2-96614ce79c61",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93813a7b-c8ea-456c-8e5a-fe1f3a5010c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05ca7350-04fd-4545-a953-70f5ae359be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf11031b-21e5-4e34-8185-22a59987f847",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb79e1d-3f36-459d-852d-1a040551d1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a1582d-f5b0-45b3-b34b-1466cc5bee24",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec557f7-23bf-4789-a193-39b795625bd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4e9740-438c-43ca-95dc-ab435de92c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6886ab3-0dfa-494b-9904-20c5aef1971d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb71500-be90-44e4-bdb1-608c5f8be447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1e6fe3-9d90-44e8-976c-d8fa75d9c86b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394c3023-c254-4577-8465-f7d0c1728dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5cf6a1-7263-4ffc-a3f9-119d735e5cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50d1926-68fb-4a23-8059-a468da8815a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb1f6f1-374b-4c27-90d0-30731b15547a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc85c67-69af-485d-8c92-b9bad44bbbae",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e512a452-7028-4452-8caa-3ec4548f678e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb437757-a658-46b3-acf3-cd5a36ea029a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095ae1df-4426-47ea-b942-c5198699f73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905e58f2-02b5-4eef-b061-52fe49615ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d1e611-52d8-4386-af32-7e30955427dd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17372ffe-4476-405a-bbd1-c4ca9ef924c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f53b7c1-3209-4dd2-86f2-58c506650ed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb228423-a5c5-43f9-8c0e-d79845f8c974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0388f0f-8a84-4bb0-bbd8-a7acef661e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4abfc05-0815-4613-b5bd-e19af4d2598e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adb08c7-7206-4934-8fbe-1c5d27801c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf5ed97-8aaa-4ecb-b23a-dfd82fed6174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c386199a-d02f-4f52-bd3b-96a2076cade3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b9a24b-1ab4-4120-8d2c-43fc24063505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b74413-61e1-4a74-b855-0869ee265b45",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b31cab-c858-4894-a986-680f4f47deb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f67c69-d3a3-4a32-af0e-fb7bfe8a59d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "923b6f6b-6d80-40f9-8776-9538207e3140",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a8a822-cec4-439b-bff4-a41f4ba11c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5121a4c-5ed5-41f4-b5fe-a3e4711628b6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467587c6-91a7-4a2e-8a18-6d57bbc735dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a1eadd-686d-4c6f-92ae-7a3e5d431752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24376570-86be-4541-a584-6ea8151b830c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404b8318-ff7d-4ef6-bf8f-5b6e9ec1b1fb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8545abb-bb47-43a5-a438-08c7d85cb64e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "335e5705-e30b-4f3a-a017-4ad3b5bc18e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69dbceef-3322-4c41-b89a-26fa83b250c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c74a0ba2-7343-4f57-8c8e-6efe93b10551"
                    }
                  }
                ]
              },
              {
                "id": "ad8ae728-dae9-4ab9-b07e-05f02169a19c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d26a5ea4-0756-4e39-b2eb-a765fea79e42",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467beae0-da27-4a31-864a-6cda714e7bc9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f8f969e6-565d-450c-a610-f422370d219d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620f8280-1621-4d50-b8e8-8b19486a98da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c090da5-a3f7-4bf6-81fa-8229ba40fb32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d91f5e26-9c97-4d1a-96e8-a624e7923d98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1576a65-a1f3-4f1f-8aa8-03fa5f979d9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "520c9c95-157c-41fd-a03b-903cb366e391",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15aece9c-3890-4fff-b40b-f283687e96a8"
                    }
                  }
                ]
              },
              {
                "id": "1241ff94-43d3-4ce4-b3f1-10ede3dc3d07",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "de8656aa-411d-42d2-8c2c-1a2abf8c77cd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ed93de-1678-43b8-8c69-3b796bc6de2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a2dc3503-52f9-4db1-bd5a-967a2fc4c75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81ebfba-f77e-4888-83c0-5f466624b148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2bd58e-3372-4435-a299-131dc8fcc2c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "42852aaf-71ec-4556-9104-2807854105dc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e96cbff1-1996-44cb-9c37-feb85d5519f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94c89c26-a5af-4de4-a5bc-45e2e82d70fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4d3e3595-4066-47cb-92a7-b14b1692b386"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5645ba3c-89de-43bd-a119-b05ce8f61016",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d86bf9c-9939-4071-a38d-d261c86a8e94"
                    }
                  }
                ]
              },
              {
                "id": "cf17b4c9-fef9-41d6-9f68-cd18f7deaaae",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07d5f371-2cd1-468c-9cc1-e23b7f62f8e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bf9beaf5-3583-4bee-bc5c-5a48d748a394"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "880f3e7f-fbe5-4529-afc1-7519bc54193d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30e75b20-4157-4456-90eb-3fab3ca22b3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db26377b-52f4-4552-88a8-13e9b8f9b46f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9a975135-3a5b-47a9-ab54-7d06045ff3cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdd43cb4-14ff-4471-a4c3-4696369d078e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0468b0b-8c8e-4428-a59e-67d2cdba0daa"
            }
          }
        ]
      },
      {
        "id": "08912566-ba4e-427c-9573-4cabac03ad2f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "181ebe9b-0207-4c13-8c59-5a06544c075c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2f2ac92-a519-4ed4-adf3-4465e83d0ac9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36a5a3e7-6926-43be-8bf5-6116c08cc6ab",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7896f5fc-c82c-4cf3-813e-67330909929a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b81116a-f16a-4692-92a2-9feb8b30a9d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ff80f5-f743-4a40-9788-a0226145533a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53d2f785-6e8b-49cb-a821-8e219578298f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ed1701e-c1de-41c3-989f-0c0b2bf914f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe5bf56a-4f6e-4c75-be01-e8a48ceb5769"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9b62590-58cf-4182-b220-616fb391d804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66794e78-f610-4b75-be7a-61265f11d29a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abd3ee87-251d-4b1f-9e28-ef10dc397257",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ad0aaef7-8230-4316-a7a9-47da4c26f232"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea1dd6e4-a688-4722-8509-df4f26ee8973",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b642ddc2-4376-4758-a7a5-6f7a65dddc77"
            }
          }
        ]
      },
      {
        "id": "3dbb7c58-4ff8-4b38-bd36-d8841ad08468",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ca3e57bc-92e5-4b7a-92fc-5491efdc9c90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49074e1e-5274-4674-927a-5392983aa5d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f277ad62-e3d0-44ad-9f17-a4e588e27403",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bddec68-be3a-446a-93c2-0e7b6cfe489d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3be41ae0-01f6-4bdf-85f8-23efd3082a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7b8899-b1d8-4454-8d95-27b0d122a5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a617736-ed40-47ab-a9f8-1f4f3b30f686"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b401741-a465-4fc2-a45c-baefd29d24e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e142235a-13e4-4c46-adf1-ad540f0a79a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f77408d6-23d6-4cb2-aa41-dacd9a28e678",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79daf236-b6ab-4fbe-a62f-129067e4496a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54a9f732-b054-4a97-b09f-df706cf23ca9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a286a16-0d02-4b52-bc44-cfa4b0a9d49d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "daec0c63-73b2-4216-97ed-8ddec14d50c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c17fccf-6feb-4733-a754-a290c1ed98f7"
            }
          }
        ]
      },
      {
        "id": "d16bcfa5-b5d5-4b6a-b719-85936ff39019",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9d395d50-ecdd-4efb-8d24-2b273968ca89",
            "name": "Negative Testing",
            "item": [
              {
                "id": "377a6041-a196-438c-97ac-3f62f44d2511",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5a0f9ec-c442-4971-b599-8d0e393e9d6e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e779491-549f-4456-aa1f-24a3ac0d7da9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "169fb86a-809d-4cd5-a522-92d0c690d74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aa2c91-83d2-46c0-941d-60ab9cab5a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14de4bf6-2845-4913-b014-269f24aab3c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8add18e6-ffc1-4df6-b76e-77209e7a53c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f70c98e2-41d8-4e14-8d53-9cd0899db3e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6924fb02-df50-41b0-9df4-ba6dca4e9c37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a5614c5-f7a8-44c6-92ec-92f00f8258fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e102e836-d91b-42e6-8a67-002768ddf74e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5071b59e-ddce-4084-9e97-a3b3c0db7b77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc7f8045-348b-4028-9d25-22a0ce6f1d1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfb1ea3a-ac80-4865-af84-f9ce717ec0d5"
            }
          }
        ]
      },
      {
        "id": "81f97b4a-8446-4e79-a570-264b54b99a44",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f395581-7c49-4c02-b161-634eef029fdc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51e829b4-963e-4ed0-a342-6d91d44d074a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bcb100bd-c566-4e87-a609-8e5c9dd99f9e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6c7b7d1-4dfd-4be9-8b8e-5dd33693b9ce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d19a22c5-7460-44a2-a904-9dae5bb12b98",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.67368421052636,
      "responseMin": 22,
      "responseMax": 947,
      "responseSd": 81.26397645256326,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699490062897,
      "completed": 1699490107725
    },
    "executions": [
      {
        "id": "ca7cae8b-1ed0-46fa-8a11-025da87f6ca0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7b0f9bd4-7004-4186-85e1-0972be96f47a",
          "httpRequestId": "8effd49b-0aa6-4626-a3ba-258fc0814722"
        },
        "item": {
          "id": "ca7cae8b-1ed0-46fa-8a11-025da87f6ca0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "adbda89e-9ad4-4517-b046-1a604ca9d810",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 0
        }
      },
      {
        "id": "f4c5e4a1-f770-4a18-b2f3-31895c595dcc",
        "cursor": {
          "ref": "dc36f623-f9e9-49d3-a429-455706c3c201",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5f214cee-d756-420b-8b6a-0f1f19c52c6e"
        },
        "item": {
          "id": "f4c5e4a1-f770-4a18-b2f3-31895c595dcc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "24d5e36a-b6a7-472a-8f2c-28a73fba368c",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "2a30bc92-754b-4b97-bf77-1a5a8e80106a",
        "cursor": {
          "ref": "fdef8f59-a0a4-479d-bf5b-db404b1b9e97",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6154f857-97d2-42c7-bd9b-e420134c7438"
        },
        "item": {
          "id": "2a30bc92-754b-4b97-bf77-1a5a8e80106a",
          "name": "did_json"
        },
        "response": {
          "id": "de918ecd-4fc1-432d-ab4c-ea39ffbb01c1",
          "status": "OK",
          "code": 200,
          "responseTime": 429,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e43066-73f7-40a8-98b6-40190e33a71b",
        "cursor": {
          "ref": "c16229e2-4046-42fe-8adf-0848f6c0a71b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa598884-8abf-41f6-b50c-8fd93c9c982f"
        },
        "item": {
          "id": "c6e43066-73f7-40a8-98b6-40190e33a71b",
          "name": "did:invalid"
        },
        "response": {
          "id": "97956501-93d3-4bd7-818d-3e0fef61bb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e43066-73f7-40a8-98b6-40190e33a71b",
        "cursor": {
          "ref": "c16229e2-4046-42fe-8adf-0848f6c0a71b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa598884-8abf-41f6-b50c-8fd93c9c982f"
        },
        "item": {
          "id": "c6e43066-73f7-40a8-98b6-40190e33a71b",
          "name": "did:invalid"
        },
        "response": {
          "id": "97956501-93d3-4bd7-818d-3e0fef61bb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded9a5cb-2e34-412f-8062-9fca758ded19",
        "cursor": {
          "ref": "6b4d1de0-d960-469f-8ac6-83fe3851af25",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "65ae163a-a6a8-47e1-93aa-07c6148d23c2"
        },
        "item": {
          "id": "ded9a5cb-2e34-412f-8062-9fca758ded19",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9ae06e94-66da-4bed-996e-4c9c2d0e6327",
          "status": "Not Found",
          "code": 404,
          "responseTime": 127,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3091672b-16e1-44e2-9bd3-5e700f90d6bb",
        "cursor": {
          "ref": "a196d2d9-b892-48eb-83d2-fa1d262fdba9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c3d2620b-c92a-4a13-91c1-6780acc57901"
        },
        "item": {
          "id": "3091672b-16e1-44e2-9bd3-5e700f90d6bb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d7a99774-3695-47c0-a4e2-2e58e7811188",
          "status": "Not Found",
          "code": 404,
          "responseTime": 81,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2213d03a-6470-498f-9251-bc1bd9d7ad40",
        "cursor": {
          "ref": "9255bd3c-f10a-4285-96f1-04f207cb5124",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0efce533-48a8-4f93-9708-487db42f0e5a"
        },
        "item": {
          "id": "2213d03a-6470-498f-9251-bc1bd9d7ad40",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dff5473f-aebf-4492-89cc-6df70db5a650",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7688d3-b5f6-42b9-a880-5690749335c6",
        "cursor": {
          "ref": "b42af484-19ca-4150-b609-0e17393cc629",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "820ae7e3-3b75-4f5c-94f5-10f84d5e42f0"
        },
        "item": {
          "id": "fc7688d3-b5f6-42b9-a880-5690749335c6",
          "name": "identifiers"
        },
        "response": {
          "id": "e5577633-962f-424b-8810-b74efdb4fb6d",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f811eff-5690-4d9c-be83-6285a3b20de0",
        "cursor": {
          "ref": "8989c5df-db2f-404f-b235-294c35b6833f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7717aa23-aced-49b5-849f-0384ecaf622d"
        },
        "item": {
          "id": "9f811eff-5690-4d9c-be83-6285a3b20de0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "82c1f35d-fdd2-4f29-baa6-5f8352d1d02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091b8870-3861-4f66-9481-c87974e47d84",
        "cursor": {
          "ref": "83d024de-309f-4c88-9b77-4b3bdf46a711",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a052063d-c60e-4ead-a2ee-5b9780105147"
        },
        "item": {
          "id": "091b8870-3861-4f66-9481-c87974e47d84",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "27795949-90e2-4c57-858d-5e36949f628d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22985565-4614-4714-b3ea-93047d0afabf",
        "cursor": {
          "ref": "ae944fe3-cf96-4817-8221-22aab7d65f6a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "000c6aa0-5e5d-4754-b5ff-0eeacd4c49c3"
        },
        "item": {
          "id": "22985565-4614-4714-b3ea-93047d0afabf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2cfa3575-faf7-4d2a-a3b1-932b78d11753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f7ae01-ef68-45e3-8223-358cd424c375",
        "cursor": {
          "ref": "52a72561-007e-457f-96bd-1825c6f4f6c0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e4b6d964-6489-452d-a567-d8467056aaab"
        },
        "item": {
          "id": "81f7ae01-ef68-45e3-8223-358cd424c375",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "520264ea-5a90-42b4-aea8-c47f00a02c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f97c2d5-be56-4562-9c81-f97a0468d4a3",
        "cursor": {
          "ref": "09f238a0-8e9e-4187-ab7e-675ad7e841ab",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "90fed801-31de-4a52-95f5-bbfc7b923e6d"
        },
        "item": {
          "id": "9f97c2d5-be56-4562-9c81-f97a0468d4a3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a0baf43e-9987-4330-8784-c4241261672c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86f027f-5f6a-41a8-9b7f-07383dd00810",
        "cursor": {
          "ref": "36196da3-2570-4b34-b9e6-d5cd3e90ef38",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "42c2ac68-ec64-4abb-98c5-2eac8cf35e69"
        },
        "item": {
          "id": "c86f027f-5f6a-41a8-9b7f-07383dd00810",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "aed72a7b-fa85-4354-83fd-2095d9707339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51296ed-7ce1-47ab-9781-c1ddc47f1cc0",
        "cursor": {
          "ref": "106c42ad-db72-470e-b991-0393a77e2feb",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9bb1d471-db33-4372-a367-2d5a52d4871d"
        },
        "item": {
          "id": "d51296ed-7ce1-47ab-9781-c1ddc47f1cc0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "96aa4cd3-b9f7-477a-870e-cbc11a0649e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c738ee9e-50e1-4f50-ae5a-aeb756c2ac3e",
        "cursor": {
          "ref": "c825d9ca-eb82-4796-9ca7-6e4042be7ddc",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "df2a2ec3-36eb-4d38-8276-2e32e11becb0"
        },
        "item": {
          "id": "c738ee9e-50e1-4f50-ae5a-aeb756c2ac3e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9ff730a4-83bc-4249-85c6-7eae54f8a486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9682ebb-ca17-4917-9d96-8b2935bf27a1",
        "cursor": {
          "ref": "29d8b10e-6789-4972-a131-ac57e480f848",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "90f65ea4-ddef-45b4-b496-53fc0885e2ea"
        },
        "item": {
          "id": "c9682ebb-ca17-4917-9d96-8b2935bf27a1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6e02b150-b820-4965-b409-10ff4aee4747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200482fe-50b5-4b5a-9150-0e25a4d686ea",
        "cursor": {
          "ref": "9612a7d8-6607-4d8d-bbda-d3679db04dc7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9fe225d7-e92d-4d9c-8009-43a91d384525"
        },
        "item": {
          "id": "200482fe-50b5-4b5a-9150-0e25a4d686ea",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9856b32b-e98a-4b07-b6a4-c15c1befc4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbebc747-e8b6-4c7e-9679-61472a8cc9c9",
        "cursor": {
          "ref": "87877c1d-c0a5-4e42-bfa5-1f2b6fcd9590",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "538bf99c-4fd4-48bc-8336-24f3ae6351de"
        },
        "item": {
          "id": "dbebc747-e8b6-4c7e-9679-61472a8cc9c9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0d6ebed2-13f1-44a5-8162-56730fa24f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4845b12d-6275-4e4f-9852-aadbcb90eaaa",
        "cursor": {
          "ref": "c97411cd-9869-454b-8202-32d70ea4579d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2bf0b8ea-5f10-4c69-9e88-257937ffd5f9"
        },
        "item": {
          "id": "4845b12d-6275-4e4f-9852-aadbcb90eaaa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d46b0d40-a486-4a9a-b740-d58e2fdf2f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8913120-136f-4148-91c7-1399932d2582",
        "cursor": {
          "ref": "b93c85e0-683d-4c81-8ebc-b43dbe5e8ea0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "98bb12ca-1f6b-47b1-8c8f-ac3db49cf3f1"
        },
        "item": {
          "id": "c8913120-136f-4148-91c7-1399932d2582",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bc2a1b66-36a8-4ba0-a470-89b11720b44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ff9600-e0e1-48dc-b18b-253b4a324ed2",
        "cursor": {
          "ref": "c76e4176-2a14-46c8-b3f9-91a8115c9aaf",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c8f68718-be9e-45eb-aa81-8c5402feecad"
        },
        "item": {
          "id": "07ff9600-e0e1-48dc-b18b-253b4a324ed2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "93eb702c-ef47-4835-b8b6-b8239ec9898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7c4f27-0a4a-428a-bbd7-ed1cdcb5ab2c",
        "cursor": {
          "ref": "f533789c-5299-47d9-b362-d9813f8811b2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "088fd5ae-a509-4e77-b62f-e21fbed038a7"
        },
        "item": {
          "id": "df7c4f27-0a4a-428a-bbd7-ed1cdcb5ab2c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "991d3b35-7fdf-48c6-aeee-0ea41643681d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa5a04c-b978-4838-b5b1-c975dfa07470",
        "cursor": {
          "ref": "efb05eba-57ca-4cea-97f1-4eafaabb5891",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "24172e43-dfaf-430d-9ae0-b4c55725f656"
        },
        "item": {
          "id": "afa5a04c-b978-4838-b5b1-c975dfa07470",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2c519d7a-ac36-4835-af45-82c5c4221262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fcec3b-30cd-4e9c-85d2-eb2e9954363b",
        "cursor": {
          "ref": "38c33cd3-7c25-4dc1-bc7d-6aa2be700948",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "140c7b08-f647-423c-a827-60f8ec246129"
        },
        "item": {
          "id": "78fcec3b-30cd-4e9c-85d2-eb2e9954363b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d86c02f2-f226-49e9-b997-1e3965fae4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b013dd34-d3bd-4355-9f47-cd52c5b0cb59",
        "cursor": {
          "ref": "69d97017-6cac-4e7c-9312-290736ca6ea4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bf51f95a-8c75-4c91-a643-22a7dda35ec4"
        },
        "item": {
          "id": "b013dd34-d3bd-4355-9f47-cd52c5b0cb59",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "00fc75d7-0b8a-43be-9cfb-2349a7530056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab185472-5050-415b-8fce-d93c8ba0d7f2",
        "cursor": {
          "ref": "e34ec0f9-168c-4fe4-9b19-3a9799729cfd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4698abc4-3bbc-4987-9b53-2440fbeb8f78"
        },
        "item": {
          "id": "ab185472-5050-415b-8fce-d93c8ba0d7f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2fad554c-9f25-416a-a2cd-6252635e02e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9179ca8d-5496-4ec5-87d6-e30b3f114185",
        "cursor": {
          "ref": "2bd537fb-6fd1-4ef3-bb82-6d27a8de2464",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "46f26c5b-7cf5-4260-a0c5-b60b37954653"
        },
        "item": {
          "id": "9179ca8d-5496-4ec5-87d6-e30b3f114185",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "eb2436bf-9f6e-4514-850d-d0b3a74527e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ec41e8-97b2-49b2-aa33-f18236f3c0ef",
        "cursor": {
          "ref": "8e612479-1bab-4795-9b81-2ed9a0401b2b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "730693aa-4baf-4a09-8b2b-afdef2571801"
        },
        "item": {
          "id": "b6ec41e8-97b2-49b2-aa33-f18236f3c0ef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5fb4da3c-edf1-4340-8c49-fc917bc17937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc0da8e-e402-4484-a059-e7be8c893315",
        "cursor": {
          "ref": "7d06fd2c-82c4-4d44-bec8-de5c26e66523",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "587e22bc-03aa-4fa8-a103-4927c7bd5202"
        },
        "item": {
          "id": "4fc0da8e-e402-4484-a059-e7be8c893315",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d18cec54-b846-4a6b-acda-a1850cd6760a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b68a60-cb85-4019-9886-42bf901bcbcb",
        "cursor": {
          "ref": "6279a22d-7a1f-4f63-b036-e27bf4abc73a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "99590299-823c-4244-ae09-2f24fdb080cc"
        },
        "item": {
          "id": "a0b68a60-cb85-4019-9886-42bf901bcbcb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7349d916-8f18-4fd4-a4dc-f19d427b234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329f4a3d-0c12-4a16-a3b9-f54a052a03a8",
        "cursor": {
          "ref": "37334688-124b-4dee-a992-e80476ae94b5",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "44f4b73c-0059-45d9-b648-24e75a7b0770"
        },
        "item": {
          "id": "329f4a3d-0c12-4a16-a3b9-f54a052a03a8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e4760ac3-b0d3-4ad3-adf3-57b7c316a794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf76488-5d26-4f36-a12a-ab41915e1726",
        "cursor": {
          "ref": "67230885-0c98-4afc-824d-d5d31644102b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c29cb9fd-6194-4415-b4a5-f4e9d0abbd13"
        },
        "item": {
          "id": "bbf76488-5d26-4f36-a12a-ab41915e1726",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c981c037-a502-4283-a919-ec8ea1321ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be679e4-8a53-4319-9d81-1d6aef19d110",
        "cursor": {
          "ref": "2331c082-1ab9-4709-bba8-0d602bfada6e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8476f5f3-8160-400b-8b27-6eb15986d50e"
        },
        "item": {
          "id": "8be679e4-8a53-4319-9d81-1d6aef19d110",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ade11842-6357-47d9-9eb4-6edd9530ea6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd3a2e3-d319-46e9-ba3b-0cd33513cb34",
        "cursor": {
          "ref": "f102e091-500e-412c-b64c-f523d47e0a94",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c34eb229-2467-48fb-ab1d-e085060403fa"
        },
        "item": {
          "id": "fcd3a2e3-d319-46e9-ba3b-0cd33513cb34",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "58f75e5c-b2d2-4775-9254-c5538be92c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f300c389-f5fc-4670-bfd1-986749607efc",
        "cursor": {
          "ref": "964d9932-dada-462d-8c34-e54ebacc56aa",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fd5e5bbe-4987-4dbb-9cc3-4155215afc8f"
        },
        "item": {
          "id": "f300c389-f5fc-4670-bfd1-986749607efc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "552b1527-ae36-42d1-a986-f5d8e72d4d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704a69fd-96e3-42ea-a7bf-d81e858dce09",
        "cursor": {
          "ref": "613b5357-8deb-45b9-b757-0f2a3a4a84e5",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9755667-5375-4a2d-a79d-5b6fe48a6d6b"
        },
        "item": {
          "id": "704a69fd-96e3-42ea-a7bf-d81e858dce09",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "20d4f8f4-6e5e-4880-82b0-e672a6a83769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4362e5-275e-4350-bf3c-7415a4011658",
        "cursor": {
          "ref": "3f67ac12-a9ab-423d-b517-5cbbb28e9b06",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3b592c55-e8cf-47e1-afcc-b35222709d39"
        },
        "item": {
          "id": "2e4362e5-275e-4350-bf3c-7415a4011658",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b28bb969-a7a7-4da0-93d5-9dfde279b9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f109199b-3d05-44ba-a3ee-bfa35f04d729",
        "cursor": {
          "ref": "be9d5565-8d34-402e-b0d7-69694ca38392",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "520aacca-91f3-4eb6-8dd7-87f42ea7fc11"
        },
        "item": {
          "id": "f109199b-3d05-44ba-a3ee-bfa35f04d729",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28ad3318-aae5-4a9d-95d8-8a22f5e20c74",
          "status": "Created",
          "code": 201,
          "responseTime": 947,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fcba909f-a03f-45c6-8135-974a240df879",
        "cursor": {
          "ref": "6222e270-4768-4c95-a243-94750ddaa0ee",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7fb47e09-9c1f-4e83-8dbf-a9f9af6f0761"
        },
        "item": {
          "id": "fcba909f-a03f-45c6-8135-974a240df879",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1eec292e-5a18-40a8-8de1-32540e64f462",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "83a5d9c7-65f1-416e-b3a1-da2a24613d88",
        "cursor": {
          "ref": "409e1e24-41a7-4c60-8aec-8fef6fb18215",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0a6e5ab8-a71b-4c9a-be12-1b151b2cc879"
        },
        "item": {
          "id": "83a5d9c7-65f1-416e-b3a1-da2a24613d88",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0ddb7270-0910-413a-bd91-18d8e42452c4",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0bc50584-571c-42d2-8556-5d61679e9898",
        "cursor": {
          "ref": "a7e3b6b5-794f-45f2-9bcc-7cf54bf14acb",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f158ed2b-65ac-4d2c-a7eb-6a6b0073edc9"
        },
        "item": {
          "id": "0bc50584-571c-42d2-8556-5d61679e9898",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0cf29427-675e-4b8a-8f96-4714c7eec970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e734ac2-2cb0-4895-b982-0a58d71f378e",
        "cursor": {
          "ref": "82de2bc0-e0e8-480c-a0e7-81eae93fb1e6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "768dadd1-1e93-4a24-801b-4504d82c141e"
        },
        "item": {
          "id": "3e734ac2-2cb0-4895-b982-0a58d71f378e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "36374744-ca4d-4803-b162-8e10ed22ed57",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e581a0a0-f336-4e60-8e49-72accddca400",
        "cursor": {
          "ref": "bdf3f8f4-9fbe-486e-aa82-781f342dba80",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "03ed36e3-bc71-42c9-9560-85e2a3ad05f2"
        },
        "item": {
          "id": "e581a0a0-f336-4e60-8e49-72accddca400",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "721cdf60-f116-4033-bc42-b5b30d11fc74",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2a97d3fa-d34e-4d7f-8f03-1c74c5959a5b",
        "cursor": {
          "ref": "7451ec61-e325-491e-bd92-4f64bc2bf863",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "23a91915-7395-464a-90ee-3355c9e66cf6"
        },
        "item": {
          "id": "2a97d3fa-d34e-4d7f-8f03-1c74c5959a5b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3ddc2940-f851-4a68-869c-1a72f0fa3540",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "019eb387-3fb1-48e7-8983-b968044f3503",
        "cursor": {
          "ref": "ad2db583-3206-4ef6-af42-23aa136521e2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "da45e8bc-a7fc-4a2f-81de-2d6cd7a01546"
        },
        "item": {
          "id": "019eb387-3fb1-48e7-8983-b968044f3503",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f5951ef-b6eb-487a-8191-8fa362a934e5",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4c7336cb-7f45-47ee-8aa9-ada2372ef722",
        "cursor": {
          "ref": "e81548c8-e19a-4933-9ee6-12020739404a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5b91d69f-1fe9-4c2f-b9e2-392c51ec4db7"
        },
        "item": {
          "id": "4c7336cb-7f45-47ee-8aa9-ada2372ef722",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9689a13e-d10c-4b74-9398-f3e91e032337",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d751d9e9-035b-4959-8a72-a860b16f9303",
        "cursor": {
          "ref": "c96477ca-a4be-4818-8b09-1863e573258c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ac69eaa4-613f-4088-93cc-538e87e1b1d2"
        },
        "item": {
          "id": "d751d9e9-035b-4959-8a72-a860b16f9303",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "08d25140-0597-4e86-bec4-280131307884",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a0eb8a8b-c43e-4ed3-972e-aac25534fe19",
        "cursor": {
          "ref": "729e35e4-e9e9-44c8-ae00-32f52aab92d9",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "35728fa4-2619-4164-8b10-5fa9e19f1f55"
        },
        "item": {
          "id": "a0eb8a8b-c43e-4ed3-972e-aac25534fe19",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7e0f9564-8a19-423a-8df2-5c24fbccab65",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "96da8b79-741f-408c-8a64-88cda6881ad5",
        "cursor": {
          "ref": "b91a1c53-3e84-4933-8a13-d090a61eb10b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fc09d271-e446-4125-86fc-40656b1ef9ad"
        },
        "item": {
          "id": "96da8b79-741f-408c-8a64-88cda6881ad5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bf62d21c-6e93-4176-b4b4-66114e168d7a",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2fdf9cc4-4034-4c28-aa1d-6197201082a6",
        "cursor": {
          "ref": "3b7a25a3-921e-4307-8199-ed42f3a9e062",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c6541f50-5ee8-4481-bb22-66e9d9e9f9ea"
        },
        "item": {
          "id": "2fdf9cc4-4034-4c28-aa1d-6197201082a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fac858e8-b585-4273-bdc1-0a49512f21ac",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dd4a1d19-9125-435f-8c68-0ea4ad046c9f",
        "cursor": {
          "ref": "38fbbcb2-3b60-4b25-9db4-dfc2ab2d4aca",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cdd84ad0-9fff-4d00-a54f-2887730b73e0"
        },
        "item": {
          "id": "dd4a1d19-9125-435f-8c68-0ea4ad046c9f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8b56bb5e-0e0b-4415-9f7e-90a1ad3b6976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f72f16f-f1d1-440d-b4b8-347cab4f90c4",
        "cursor": {
          "ref": "0603e2aa-fa54-4152-a10c-134774ab978c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "30f55306-a539-4872-a172-3bd095bd03e1"
        },
        "item": {
          "id": "4f72f16f-f1d1-440d-b4b8-347cab4f90c4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f03f1d9d-3e0d-44e6-96ec-60d39fd4d1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba847916-dcf3-46fe-beee-4bf96b15f565",
        "cursor": {
          "ref": "a67a77b1-7cd2-46d7-9c17-f1ea5a256493",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9efc6d39-164e-435f-b69a-d28c4d5bbfd5"
        },
        "item": {
          "id": "ba847916-dcf3-46fe-beee-4bf96b15f565",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "52d6a7cb-52c4-4516-bd93-22c8b1dcf4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf519b7-6acb-4e6b-bf22-532f542d091c",
        "cursor": {
          "ref": "35203ad1-6c7f-4fdf-9eeb-6da0acdcd436",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "116df6d3-f987-4dac-a686-02e181c2ea55"
        },
        "item": {
          "id": "3bf519b7-6acb-4e6b-bf22-532f542d091c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "97913cf1-4246-4810-9b68-558762e2e8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44413971-34c1-4780-94c8-9444727df281",
        "cursor": {
          "ref": "3a6871ce-7871-48b3-a85a-efe3856ac3da",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f9e7caf4-4e28-4530-8474-ddc849971916"
        },
        "item": {
          "id": "44413971-34c1-4780-94c8-9444727df281",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cb060a8a-376f-4a9c-9239-32bf82abf50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f53005-ffc7-4fd2-ba2c-63caa6675576",
        "cursor": {
          "ref": "b6c16128-488b-481e-ad9e-f99718ae3dbd",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "028a0fee-e2fa-4a4c-b5c1-b9abbf58f1c7"
        },
        "item": {
          "id": "93f53005-ffc7-4fd2-ba2c-63caa6675576",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "56ce6c29-5792-49ca-887c-82964efc76d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe102e3-5ee6-49cf-aaee-26a08282c5a2",
        "cursor": {
          "ref": "99839a2e-62c1-4b6d-8cc1-51ca809e5a51",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b8d1a0e7-7217-4241-9c29-a395a87d703d"
        },
        "item": {
          "id": "1fe102e3-5ee6-49cf-aaee-26a08282c5a2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cc1ca3c0-e9a1-4fc0-85bd-299730804aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2df17d-0c03-4934-8b81-7284951ac4af",
        "cursor": {
          "ref": "41c80caf-39ea-4fe5-857a-db2afb815190",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d5fdf136-c1d8-4f1a-81be-50a72414495e"
        },
        "item": {
          "id": "1b2df17d-0c03-4934-8b81-7284951ac4af",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5d2b38aa-3b72-412a-b0fd-866b93ff1334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0704865-d3e3-4eb6-a9e7-69537385dbe9",
        "cursor": {
          "ref": "22beb3b4-2055-4023-a1e3-5ca1bc485c85",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3389308-a872-4e85-89f0-09084503e9d2"
        },
        "item": {
          "id": "b0704865-d3e3-4eb6-a9e7-69537385dbe9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "348b647e-ccb7-4574-971a-8e750c235044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a27754-1a07-4d54-b332-ee657a80e072",
        "cursor": {
          "ref": "537cb5fa-5dce-450c-a28d-007d9abc1e55",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b872e954-e73a-4172-8138-d86645496610"
        },
        "item": {
          "id": "12a27754-1a07-4d54-b332-ee657a80e072",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "75c4c356-1d72-461a-8536-7087a907148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da464015-6171-4143-b69f-aaec1e1633ce",
        "cursor": {
          "ref": "39c1796d-f7c0-4cd5-ae4a-64fd20035a8c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "216fd2e1-8f9d-4d70-8504-e6361ee83782"
        },
        "item": {
          "id": "da464015-6171-4143-b69f-aaec1e1633ce",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "205970fc-25e2-4ad3-9ffd-75ea5b50930f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f27337-0c2e-42b5-b2fb-a34df5696618",
        "cursor": {
          "ref": "de13ec92-8588-4f18-8913-e71834317803",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ae6c4036-d5ab-4b8b-9b28-80b8252ef67e"
        },
        "item": {
          "id": "d0f27337-0c2e-42b5-b2fb-a34df5696618",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2c539f60-f4f5-44c4-bc31-3b5eaced9e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e029ff-99a0-418c-b7f3-af626ddef8f9",
        "cursor": {
          "ref": "644515a0-ae80-4ace-8a81-86541b52ee4d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3dc18566-2413-437a-a975-d54706b1e295"
        },
        "item": {
          "id": "b1e029ff-99a0-418c-b7f3-af626ddef8f9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4780250e-c820-49b4-ab47-398ed9b5cb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d30fee-8aac-44bb-a617-18240ed4389e",
        "cursor": {
          "ref": "c45a69db-cda5-4557-a44e-6c4513929d09",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8ca875c6-d2e8-4250-9979-356be853c62b"
        },
        "item": {
          "id": "45d30fee-8aac-44bb-a617-18240ed4389e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "45ccfb19-c16b-4259-9eb6-3e7b7c71eb2c",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "02646dde-615b-4c39-8a8f-9888c81110f0",
        "cursor": {
          "ref": "0c3a9020-6c95-4056-bff9-d5eff414de75",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ffe70dbf-9adb-47b8-97ad-551cf7fb6e7c"
        },
        "item": {
          "id": "02646dde-615b-4c39-8a8f-9888c81110f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ea599d60-30ee-4895-9bd9-0d8dd914e7fb",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "4357ed6a-1786-436a-8943-362910adb40b",
        "cursor": {
          "ref": "de1e3bab-3075-487b-8103-1083c42b94e0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "036e04a8-3e86-4824-93d0-b148ad20dcca"
        },
        "item": {
          "id": "4357ed6a-1786-436a-8943-362910adb40b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2dcb888c-618d-47ca-ade9-f4f50e2fefd2",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7ebae836-b7cd-4b96-9a68-6f9f85fd5810",
        "cursor": {
          "ref": "bc72713b-8a7f-40f6-9971-a2c9d6daaf83",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "79d11133-dfcb-4086-855b-e0aa4b0749da"
        },
        "item": {
          "id": "7ebae836-b7cd-4b96-9a68-6f9f85fd5810",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ae68a0e-87b3-4773-9516-0496dee1304a",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a6df1428-bfe7-455a-b09b-6d72c8c28514",
        "cursor": {
          "ref": "5073873b-a71d-48f4-87a9-2fcce0aad7bd",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "62edec2a-1ad6-4d24-8f73-0490f8a49975"
        },
        "item": {
          "id": "a6df1428-bfe7-455a-b09b-6d72c8c28514",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "461b4a0d-1f7e-4d0b-9be4-04300aaea2ea",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4bc2e6bf-7b2f-4546-836a-47f2ba1ffb1f",
        "cursor": {
          "ref": "bde80bb0-9811-4aaa-bfb3-8ef8959e4e26",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cf822d7b-b8ca-4522-9cb0-d4c90b7549d3"
        },
        "item": {
          "id": "4bc2e6bf-7b2f-4546-836a-47f2ba1ffb1f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d65c8c15-d0ab-4e44-9ef7-132537b95d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3891f02-6e7f-44d8-bd02-d90faf9fb7b0",
        "cursor": {
          "ref": "d8023532-2aa1-4aaf-944e-d4ad68375050",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "21552aea-20ef-4875-8790-d153e4d29f60"
        },
        "item": {
          "id": "c3891f02-6e7f-44d8-bd02-d90faf9fb7b0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "76453756-2fc9-42d7-867c-f3112a331e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31e32e2-07ec-4e20-9d49-5acc182bd3f9",
        "cursor": {
          "ref": "ee7c3e99-cb27-40fa-811f-441ea3eaa98d",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4bf21f51-adf8-4b70-abec-056e2612c3b9"
        },
        "item": {
          "id": "f31e32e2-07ec-4e20-9d49-5acc182bd3f9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bd2af162-9701-4a6c-b1bb-3fcf6a94a211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e288b77-c72f-4420-8a8d-3709f05c58e0",
        "cursor": {
          "ref": "d93c7495-70d9-4cea-b20a-0d4b6ac5c125",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "538486d4-7fb3-44b7-a864-8766e74b9168"
        },
        "item": {
          "id": "5e288b77-c72f-4420-8a8d-3709f05c58e0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "edc85786-aa02-4a3b-9d79-470bd796f336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a530c39a-d10d-45a3-aa7d-c6287108466e",
        "cursor": {
          "ref": "7cb9e690-41b1-42b9-9c9c-206af6da87c7",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "293e2788-a327-4377-8709-bbf55d6c8def"
        },
        "item": {
          "id": "a530c39a-d10d-45a3-aa7d-c6287108466e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "426ef7e6-9c4b-4c45-a724-e5fd4f22ceba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76368bce-4409-412a-9f14-7f57b5526890",
        "cursor": {
          "ref": "d8c50138-8e97-4b2d-bd7e-fc59da62aacb",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "999ac1ec-bd18-4fb5-b61e-9f201478f37f"
        },
        "item": {
          "id": "76368bce-4409-412a-9f14-7f57b5526890",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "30cd88d6-5a11-4529-b9bf-49291c34684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7618c63-9000-4371-bed2-09704e044689",
        "cursor": {
          "ref": "4f1fe7f7-746f-415a-bd4a-14394f01834e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "72a636d5-843f-4ee8-a539-4da5b0ef7938"
        },
        "item": {
          "id": "d7618c63-9000-4371-bed2-09704e044689",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c288858-ffc9-4b6e-bdb5-3cd742151ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efd57a8-2198-43b3-8766-97c6b5666b34",
        "cursor": {
          "ref": "44ee2f62-46ba-451e-bf06-fc8c7c5a47c1",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ed858827-e265-470f-bad9-16ea4225432c"
        },
        "item": {
          "id": "1efd57a8-2198-43b3-8766-97c6b5666b34",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9b148664-9a0a-4a37-956a-b5e034a45fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe20c1e-7713-4e92-85e8-2fb408cf3017",
        "cursor": {
          "ref": "0d45faf9-9c58-4963-ac85-8a3c1d032ff5",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e2c0007d-f532-4bc2-9caf-a265e7d96f6b"
        },
        "item": {
          "id": "8fe20c1e-7713-4e92-85e8-2fb408cf3017",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ee024016-541d-46d5-9c2f-3c8c52439de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad019a7-bb09-488e-97b3-f33b15cc77e2",
        "cursor": {
          "ref": "7e7c452e-a3e3-49c3-a27c-8ee8d742a515",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6dae10d8-d8d7-49f1-8fd6-db2e56e2b1b1"
        },
        "item": {
          "id": "7ad019a7-bb09-488e-97b3-f33b15cc77e2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bd17cfcf-80d1-4022-bc61-7bda2a1c0282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed704c18-e3e3-441f-8041-77efa63a02f1",
        "cursor": {
          "ref": "26e163db-ed01-40c6-8097-c3af9cfc65a2",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b2c1438c-f85c-470a-872d-013a7a22e018"
        },
        "item": {
          "id": "ed704c18-e3e3-441f-8041-77efa63a02f1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "77983ec3-ccf0-47d2-927e-a8e24508af48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a1080c-9617-4894-a543-e7c1f9194255",
        "cursor": {
          "ref": "f838dccb-2cbf-47dd-bbfb-5ce12293c87e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1152e41e-a91f-41b4-aeb9-88daf137ab70"
        },
        "item": {
          "id": "b8a1080c-9617-4894-a543-e7c1f9194255",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "29ec3832-4d32-460b-bf0e-b5eb635fde38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ea96e5-cc70-4886-b16e-79168ef37ea3",
        "cursor": {
          "ref": "3daa0c82-bd46-41fe-9372-99cc7de66ca1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dbe00389-0331-442d-bec0-ed1e9c0a86f9"
        },
        "item": {
          "id": "00ea96e5-cc70-4886-b16e-79168ef37ea3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "62b02049-3b74-4ec9-8c7e-242fa613e2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b797fc-bb76-4381-ac6e-8101a6763cca",
        "cursor": {
          "ref": "216bbf5c-4cf9-4ab1-9dd4-c0cdf549c326",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0055acaa-870d-489c-b20e-721697f6bb0c"
        },
        "item": {
          "id": "a6b797fc-bb76-4381-ac6e-8101a6763cca",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "daea3a5c-b111-4053-a561-f6e9ec3c4674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ff9911-30e2-4655-b7fb-88deba81b1c2",
        "cursor": {
          "ref": "f59e8fe8-5606-4e06-b82b-ad0c10acd898",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0750c7b-f417-4705-a77b-e39e330a326b"
        },
        "item": {
          "id": "f4ff9911-30e2-4655-b7fb-88deba81b1c2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "88e81575-3568-48c6-a94c-97894ffd32f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901548ae-2dc1-44f6-9a99-b114c42563a2",
        "cursor": {
          "ref": "0e08f2d6-a944-4a27-9368-8daf1aa39270",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bc183835-93fe-4f73-be3a-720b3d18e6f7"
        },
        "item": {
          "id": "901548ae-2dc1-44f6-9a99-b114c42563a2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dc03e78f-2b61-4fa8-aa26-6a2ffa5a8af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e979be-8dd4-4a55-914e-0b216e1c2bef",
        "cursor": {
          "ref": "6e6d3d99-c36c-4c1d-a9f2-b3ce8d8be607",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3aa0d012-c375-4fb2-9e46-af08d37fd41f"
        },
        "item": {
          "id": "b2e979be-8dd4-4a55-914e-0b216e1c2bef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "22f315f1-190e-4261-a740-9d1e589eafac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326d36c4-abf5-42a5-83f8-399cf7313a7b",
        "cursor": {
          "ref": "f9a046db-a374-4016-b3a2-6938516dc6cc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7ea7e2a3-d9bf-4039-8ac0-72d05711788d"
        },
        "item": {
          "id": "326d36c4-abf5-42a5-83f8-399cf7313a7b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "706401b5-8dc4-4e44-aca7-80399adf555b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c2d5f5-e828-41fd-a792-a3ed6998b109",
        "cursor": {
          "ref": "72965534-90f7-4e4e-96a0-e1623364e41d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "be3e9dde-0f19-4e15-9cc5-fd36c53e2097"
        },
        "item": {
          "id": "62c2d5f5-e828-41fd-a792-a3ed6998b109",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "348304c9-10fa-4467-bbc1-d9c772721817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bebeecb-329f-4c9a-8195-c0c8f23e752c",
        "cursor": {
          "ref": "8d871953-73d9-46e8-97f7-acc375879d52",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "93f7a555-cf5f-47fb-a358-d6720e31bbf1"
        },
        "item": {
          "id": "1bebeecb-329f-4c9a-8195-c0c8f23e752c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f8ff239a-e839-494b-956a-0b3a201179b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850a58a1-3ad7-4d18-aba3-897a13c5edec",
        "cursor": {
          "ref": "85182880-d432-4b1c-ba60-c15ed4d05c65",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "27b3deb8-1f57-4808-af22-6b59144b0cbe"
        },
        "item": {
          "id": "850a58a1-3ad7-4d18-aba3-897a13c5edec",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9daad4c6-c08b-4465-8c94-df78ca3f1d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d510ea4-f5bf-4ed5-b6d1-4d2275b06a6d",
        "cursor": {
          "ref": "48dca251-6903-4ebf-8ab2-e39443f3a721",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fe65c268-e393-4f16-b25e-65db6eebd6c9"
        },
        "item": {
          "id": "8d510ea4-f5bf-4ed5-b6d1-4d2275b06a6d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e0cd0a1d-fb1f-4355-950c-ee1e393c99e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbc286c-493d-4598-a416-d881fd9923fd",
        "cursor": {
          "ref": "072eb859-0793-489a-9179-b9c0d6f6368a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3f41a0d7-832b-4377-8b13-28b3f7b5c010"
        },
        "item": {
          "id": "4dbc286c-493d-4598-a416-d881fd9923fd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "32450eff-ebb8-4b1b-b9de-a8706886bd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83487b2-ea2e-46ca-9332-603307932c5a",
        "cursor": {
          "ref": "515c81a2-4e1c-4c95-bd8f-9da262e1a083",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f504dc34-1e7e-45c5-bf99-b9d105224232"
        },
        "item": {
          "id": "a83487b2-ea2e-46ca-9332-603307932c5a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4b0c2839-6747-4214-8bf0-722074f40616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df39b3d4-9a79-4435-9320-7f280d132df3",
        "cursor": {
          "ref": "60a39b93-3da2-46b1-83e4-1bcd627d9216",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "34d7a874-27cd-402d-afd7-b6af03c0983d"
        },
        "item": {
          "id": "df39b3d4-9a79-4435-9320-7f280d132df3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "eb38b1ba-fb99-434a-97b0-e33681516463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c979492b-ac61-442e-b3b3-d57cf6058cba",
        "cursor": {
          "ref": "eca6a746-a1d3-4b87-a8da-340b87189b50",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "84c3f88a-bbb7-4dbf-90cb-d8816c5528e8"
        },
        "item": {
          "id": "c979492b-ac61-442e-b3b3-d57cf6058cba",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3f012b7b-0aaf-4d09-9a92-cee9d4308e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7009b0ea-3685-433d-8015-a282e1432735",
        "cursor": {
          "ref": "b6e96a5c-0bc9-4cdb-a9c1-7d85877d4a7f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4e181018-5655-41e5-a8e4-feb3d0a1c570"
        },
        "item": {
          "id": "7009b0ea-3685-433d-8015-a282e1432735",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "42f69b90-ec95-4143-ba45-81f4856609fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de862b99-664f-4be4-b810-acc998f58fc1",
        "cursor": {
          "ref": "9acb9f19-d5d4-495f-a197-5bde19a5d315",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "82ffd1bd-93ce-4a7c-8d30-c5dec95686a0"
        },
        "item": {
          "id": "de862b99-664f-4be4-b810-acc998f58fc1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fe4d54c0-e784-448b-b033-ad8f7a12dcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d926d497-db49-4437-9f82-b88e82817d12",
        "cursor": {
          "ref": "902250bb-c4c0-44a5-81be-5a16749ae247",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2cec6975-edc4-4962-9dab-fca5f4768f12"
        },
        "item": {
          "id": "d926d497-db49-4437-9f82-b88e82817d12",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d6f7f3e5-398e-420b-977b-dfb650ed6fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03110d17-e385-447f-b938-edb2c404b4a3",
        "cursor": {
          "ref": "e8e4654c-9a34-4448-ad81-e4270ba92aba",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "119ed0ff-c955-469a-a4d2-54bb305f2d29"
        },
        "item": {
          "id": "03110d17-e385-447f-b938-edb2c404b4a3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a3cd49d0-110d-4fe4-b9d7-2584d172c7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af06c66a-f441-432e-be22-c3ab9a1eed2b",
        "cursor": {
          "ref": "703e8b01-8a91-4fde-bcc9-4f5875342d10",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "988e2fcf-1a68-4c2a-a851-d08bd6ea59f3"
        },
        "item": {
          "id": "af06c66a-f441-432e-be22-c3ab9a1eed2b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c28a0a76-41ad-4c12-b8e0-9b37b4f7fb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f9740a-694a-45ca-802f-7458a56bd461",
        "cursor": {
          "ref": "bdc59315-e26e-4bab-a6ac-caa39a00ab8b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7b45e320-c047-4773-b0ee-690741dfd2f7"
        },
        "item": {
          "id": "00f9740a-694a-45ca-802f-7458a56bd461",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "844a47b5-2b4b-4de2-aa10-33b819451f93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b7d2ab-64e2-451b-8f73-c380ac5d48aa",
        "cursor": {
          "ref": "3788fa35-a735-4b29-8260-236cc92a9310",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "490cdc24-7dd0-43a1-aa22-c89d5f7a9aa3"
        },
        "item": {
          "id": "42b7d2ab-64e2-451b-8f73-c380ac5d48aa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6f46f0a9-1217-414a-9f4e-a54afbcedcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "77ea728f-38b0-45b8-9adf-4cc0796173e8",
        "cursor": {
          "ref": "0369f8b1-4094-4188-beb3-186a84c5e115",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c73da7d0-399e-44d8-b4ab-fe7307204ca9"
        },
        "item": {
          "id": "77ea728f-38b0-45b8-9adf-4cc0796173e8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "62cd408f-6376-4f21-bca7-3f6861c1990f",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bac0d0c-f279-4e1d-996c-dcfbcfa458e9",
        "cursor": {
          "ref": "2bebcc29-b45f-4aef-b56c-f3eef32bcedf",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "254d008a-ad23-4430-a228-509beed17cc8"
        },
        "item": {
          "id": "3bac0d0c-f279-4e1d-996c-dcfbcfa458e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e9d20825-b95b-475f-9da1-2fe7f416dec2",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "961ccc73-14e6-4bc7-a165-f36319b0e8d2",
        "cursor": {
          "ref": "e6e04f88-7d68-431b-aa0b-4b3825cd92c2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "45f499d4-74b3-4222-8df3-988d4506f70f"
        },
        "item": {
          "id": "961ccc73-14e6-4bc7-a165-f36319b0e8d2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c6cbd9c3-9dee-406d-a644-6c3af90bca90",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "517c950c-e44a-4219-afc4-e5e5bb4e6f62",
        "cursor": {
          "ref": "2bf14f29-8260-4de3-acb3-f02cc51bc0a8",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b7751f38-e81d-49a6-bcf9-50b7a229896b"
        },
        "item": {
          "id": "517c950c-e44a-4219-afc4-e5e5bb4e6f62",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cefcee40-a1c0-4c9b-9b03-4ea153fd899f",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cd8c47-17a9-40c9-8247-76eb7adba400",
        "cursor": {
          "ref": "ffc5ea00-233f-4059-9759-844d317c577e",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "da9f4506-1176-4a77-943a-338a42cb58b4"
        },
        "item": {
          "id": "c7cd8c47-17a9-40c9-8247-76eb7adba400",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "627be174-8ead-4407-968f-e0409f3c7f64",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-09T00:34:43.573Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-09T00:34:43.573Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e3a4a18e-98ec-4944-85e0-0626724f2b66",
        "cursor": {
          "ref": "76a0e5b0-8161-41d8-8146-c365a2a48a57",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fd6d2bb6-6181-4866-91d8-24352e25bb24"
        },
        "item": {
          "id": "e3a4a18e-98ec-4944-85e0-0626724f2b66",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d8f036a5-66c1-4137-b593-a3023316b332",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d469ca-eaaf-461a-b52a-2af1b41af680",
        "cursor": {
          "ref": "d8fee071-8068-4f9f-bebf-6eb5fd319c36",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d08bca66-62d0-4bf1-9b40-730157e0951a"
        },
        "item": {
          "id": "44d469ca-eaaf-461a-b52a-2af1b41af680",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c7a32077-2715-43d6-ae1f-804c76b860c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27bdde5-130a-426d-b86f-062fea5d0671",
        "cursor": {
          "ref": "55686abe-3451-4630-bf0d-a1eedcd99812",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "32682517-96cd-4634-b485-5511eae8c881"
        },
        "item": {
          "id": "a27bdde5-130a-426d-b86f-062fea5d0671",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf808683-87c2-4013-b26b-395e25eebf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0853bb5d-1416-4da4-bd4e-a9ad3ec9cf20",
        "cursor": {
          "ref": "f7e9d187-a086-4452-9170-bfcd31a77d56",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d09aacc4-b4a1-451f-875b-2b2591b5ab24"
        },
        "item": {
          "id": "0853bb5d-1416-4da4-bd4e-a9ad3ec9cf20",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85c298af-e726-4b61-ac70-7e5e67b6ad39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970ff93f-b919-49a8-942d-9fa05f763fcc",
        "cursor": {
          "ref": "a140cba1-27c4-4a91-9186-6d83e40d6ae1",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d6d4e5b9-5de0-49dd-a652-033f60407a69"
        },
        "item": {
          "id": "970ff93f-b919-49a8-942d-9fa05f763fcc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8ea7775d-a54c-4b40-80e8-0a6f93c6ec9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd9dc17-9f7f-4b22-be57-6f7443fb93e0",
        "cursor": {
          "ref": "546c9ebf-f32a-40c6-a4f1-fd7ffc12194f",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e86c6593-0bd5-43c3-b21f-171b7c4b6ea2"
        },
        "item": {
          "id": "3bd9dc17-9f7f-4b22-be57-6f7443fb93e0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "42a9893a-d36c-4f09-a127-9a56b664b3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0db749-d341-457a-8947-e3b3c62e6400",
        "cursor": {
          "ref": "d7c70b71-dc0b-47be-8afa-21fe56937c83",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "62058189-054c-4926-8c3e-f0e8239732bd"
        },
        "item": {
          "id": "da0db749-d341-457a-8947-e3b3c62e6400",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c7cef184-3c2c-4cbe-af42-859994afc348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ef3671-0380-41da-84af-cdbe8be40808",
        "cursor": {
          "ref": "4b7074ec-317e-412b-9797-ec9b5d042b26",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "54c89937-b15a-446d-9058-5bf170242659"
        },
        "item": {
          "id": "01ef3671-0380-41da-84af-cdbe8be40808",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c41881a0-d4bd-4837-a732-c24b10c23703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db5f608-490f-4394-856f-2cfbcee3ff83",
        "cursor": {
          "ref": "b243099a-030c-4981-8660-f150ea0475df",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7354f132-93df-49cf-af18-2b3ad655443a"
        },
        "item": {
          "id": "0db5f608-490f-4394-856f-2cfbcee3ff83",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9a789bc5-7534-4a15-af68-848642b92f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43599b81-2e7a-46f1-8c80-7a24e4ec4bc0",
        "cursor": {
          "ref": "c602fc3a-c4fc-4e82-8744-766cb0b2c5f6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f97fe5ac-4f5f-4b46-8093-92cc6c9cb225"
        },
        "item": {
          "id": "43599b81-2e7a-46f1-8c80-7a24e4ec4bc0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ecde0e0f-8251-4863-8fc6-3ca7d0ccd742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a85e471-9253-4d73-ad25-7a9788922a80",
        "cursor": {
          "ref": "8f082bab-495e-43c9-bf12-fcfbe763e0dd",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bb8d3428-998b-4948-9e89-0ece51cb2038"
        },
        "item": {
          "id": "6a85e471-9253-4d73-ad25-7a9788922a80",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4fabb032-21d3-4095-98a9-385f578ffabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d587b146-8262-40bf-a874-2d94949372be",
        "cursor": {
          "ref": "f48f83bf-693c-4288-af9c-14d1139c327b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0f402136-1b42-479d-a0f9-624de010b0e2"
        },
        "item": {
          "id": "d587b146-8262-40bf-a874-2d94949372be",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8d3f03c6-491a-41e5-997a-1d022cb94956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc09f42-401c-4589-aec2-36d78fbe40b9",
        "cursor": {
          "ref": "6dbe0ae5-4131-4577-b0c2-8694895fc71b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d773ed79-3d1b-437e-aa08-86cca820022f"
        },
        "item": {
          "id": "3bc09f42-401c-4589-aec2-36d78fbe40b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a5ac0dfe-d679-4579-91bb-401940bcf2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cc094a-5cb0-47ec-a1fd-302ca2e4c821",
        "cursor": {
          "ref": "973c1be9-d5b2-469f-84ec-f165961a94d9",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "59785c69-1280-4a64-9650-daf2699de6bd"
        },
        "item": {
          "id": "19cc094a-5cb0-47ec-a1fd-302ca2e4c821",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a2298bb-a79e-4a4c-8bfb-ac9385eb1783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28173522-4012-4d8b-b74c-8d66e050c18c",
        "cursor": {
          "ref": "5bb1aee8-7129-488e-9714-51acb6b1c076",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ff98bbf9-a81e-4a31-b314-37384756e598"
        },
        "item": {
          "id": "28173522-4012-4d8b-b74c-8d66e050c18c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "58e14aae-9fa7-4dcb-943c-07397f7242dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5791597-a59a-4d6c-8cd3-afeb59447a86",
        "cursor": {
          "ref": "238f49a4-6e90-4420-ac09-31323cdc58e2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5c527e26-b8c1-4fe9-ad0a-e25662089d38"
        },
        "item": {
          "id": "c5791597-a59a-4d6c-8cd3-afeb59447a86",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ccf9b47b-bb18-443c-8872-eabf9ee848a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9730eb3a-0b38-4e5f-bea5-a9bc901876ca",
        "cursor": {
          "ref": "22706783-555f-4f1b-a944-f3ea7896f4cd",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8c454d48-a244-4a40-a78a-b4706e0b3345"
        },
        "item": {
          "id": "9730eb3a-0b38-4e5f-bea5-a9bc901876ca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "45914dd5-e9c9-4290-9b24-58f545a9b20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2253b4-ecaa-4e79-b2b1-4b7959fd2300",
        "cursor": {
          "ref": "21825590-a1dc-4c85-b8e6-02c4fc08942c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5628a98d-c71a-4b09-b0b8-2a33a4ce2c19"
        },
        "item": {
          "id": "8b2253b4-ecaa-4e79-b2b1-4b7959fd2300",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ce20c585-2b46-42aa-a8ac-dd2bd2bd490d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d1cb9f-78fe-45d4-b765-cc9b9a98b500",
        "cursor": {
          "ref": "b2883c9a-dc54-46c0-8bd4-cf3893ad57d0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "335046ef-df22-44fb-a15a-93664ce3cf1b"
        },
        "item": {
          "id": "b4d1cb9f-78fe-45d4-b765-cc9b9a98b500",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "339293fe-eb91-47da-bc34-a1237a2543e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134e2417-94d7-4897-9508-75de2e09460a",
        "cursor": {
          "ref": "e285b2f7-105d-4fb8-b7c2-d2b4a58c995f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d6ed4cc6-ecec-4b65-9335-65da95aa09e9"
        },
        "item": {
          "id": "134e2417-94d7-4897-9508-75de2e09460a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "043dfd86-1662-471f-aa2d-e72530acb897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13a6875-8eab-4421-aba4-a65bf60f8093",
        "cursor": {
          "ref": "aea8bf67-815e-44a7-a3bb-96a239aaa470",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6be532ba-d955-40a0-8bc9-c75f7967bed5"
        },
        "item": {
          "id": "e13a6875-8eab-4421-aba4-a65bf60f8093",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "91ebd7af-2593-4e5c-af8d-0f1299dbd87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18aea1c-3292-40f9-849b-3f3d0bda1c07",
        "cursor": {
          "ref": "2bca51ce-3bf0-420f-9080-4004b06070df",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a09a5896-0ff9-487d-89f1-4b3db97545be"
        },
        "item": {
          "id": "d18aea1c-3292-40f9-849b-3f3d0bda1c07",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8be58f45-1219-4b36-9777-04a97768ccb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b262395-b9e5-403b-b8ed-33cb26f3bdfb",
        "cursor": {
          "ref": "40feea63-a6e5-4da5-a431-7aa623ee7978",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4f61e9a9-a192-4f3b-90ee-cea7f041dcda"
        },
        "item": {
          "id": "2b262395-b9e5-403b-b8ed-33cb26f3bdfb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fc04ea89-1620-4e59-9686-8b467747de5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d4a72d-2adf-4b06-b9eb-5cdaee6d2e39",
        "cursor": {
          "ref": "17f5e39e-1d3e-4ca3-b5fb-7844f67ca56e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e9aa3867-f146-43ca-99a3-f23f4906d96c"
        },
        "item": {
          "id": "29d4a72d-2adf-4b06-b9eb-5cdaee6d2e39",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "584544f5-6fb1-4a23-bae6-c20041946b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3039eecc-c9fb-4bea-84e7-d2f2e3ca827f",
        "cursor": {
          "ref": "c1fd0e43-734a-4e20-a80b-92e895b2f6a9",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "71113c05-a3ed-46a1-b837-b8eb90f3e418"
        },
        "item": {
          "id": "3039eecc-c9fb-4bea-84e7-d2f2e3ca827f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "60b949bd-9d33-4f20-9fce-e3d529eb2594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759b4391-0380-4bf1-8e11-c5081b15fadc",
        "cursor": {
          "ref": "8f2e46d1-cb6f-45bf-9f42-2ab317467f00",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "92f9f8ba-3cff-4974-ae1a-baad01a29d60"
        },
        "item": {
          "id": "759b4391-0380-4bf1-8e11-c5081b15fadc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c066ffc8-871b-4e71-a89e-9103dbe1eb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3726c7c-568e-42c6-8fb6-97a517822cd7",
        "cursor": {
          "ref": "fbe651b4-1ca7-410b-9cf6-7ee5345e8c2e",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cbfe87ce-af1b-469c-a203-0a7743e5ebf7"
        },
        "item": {
          "id": "b3726c7c-568e-42c6-8fb6-97a517822cd7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6b5924e7-92ca-42e3-a02c-a719259f3863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3786a5-557d-4565-964a-a4c0b33b4318",
        "cursor": {
          "ref": "7183a27d-df22-4ecd-a080-2ace1f0c7375",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "efb385b1-55bf-44f0-8d04-a9a7f880bb19"
        },
        "item": {
          "id": "8e3786a5-557d-4565-964a-a4c0b33b4318",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2ddce03e-1397-4a90-8386-30b90ebdcd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d06fac4-b809-49d3-9744-6287b5f0b490",
        "cursor": {
          "ref": "2196e211-1cc3-4a9e-9207-81c83a019238",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f98cf927-df71-412e-acd0-420d7b198b91"
        },
        "item": {
          "id": "7d06fac4-b809-49d3-9744-6287b5f0b490",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "354a4596-ef78-4fce-8fc2-724dac0d832c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b4b008-f45d-4df2-b2e4-c203478e5131",
        "cursor": {
          "ref": "6c1476cc-c0ff-4ce2-a5e0-32440e12a71e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "90e8d0b3-bb7f-4705-bfb9-99b2740fd6a6"
        },
        "item": {
          "id": "39b4b008-f45d-4df2-b2e4-c203478e5131",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c3ca3bd1-7352-4ce2-aae1-9064b99d7b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3bd6d-2221-40b5-92e9-06e2ccc4925f",
        "cursor": {
          "ref": "cf91512b-0778-46c5-8c8e-4deb546e1753",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5d550127-ca5c-44f2-aee7-54a8d8f44374"
        },
        "item": {
          "id": "d4d3bd6d-2221-40b5-92e9-06e2ccc4925f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7be18d5f-a6fe-425c-84cc-0ae41acacbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bb1e8a-64f6-4e81-9384-b331968de7c3",
        "cursor": {
          "ref": "7646dc6d-131c-4907-8358-b693a908384a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0cefae49-1bc5-45fa-8f1a-eb7313df8d8d"
        },
        "item": {
          "id": "b7bb1e8a-64f6-4e81-9384-b331968de7c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8fb05268-c616-4572-85ec-93ba8492dd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6615281-4dbc-4a49-ad95-dc3fb8740834",
        "cursor": {
          "ref": "39b075e0-f0d4-4a4d-a0ec-757844194dc3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6460838d-f750-4f8a-a621-0adcaec8fd6a"
        },
        "item": {
          "id": "a6615281-4dbc-4a49-ad95-dc3fb8740834",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ca591acb-469c-4ef2-8741-d5a43051664b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d9eb0f-a61a-4334-9cc5-d7b5c48ec601",
        "cursor": {
          "ref": "2888ca58-f700-4953-9de6-42b5353e69ae",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "545bb8e2-2575-491d-833d-b5c3f6cfc59a"
        },
        "item": {
          "id": "75d9eb0f-a61a-4334-9cc5-d7b5c48ec601",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bb018d12-56a8-49b4-a78b-2a2c7ac972d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789b870b-4e08-40dc-9e86-2f1218bf6b53",
        "cursor": {
          "ref": "585bc2c1-528b-4c81-a07b-44b416c26914",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1e15b05e-600b-4346-8877-84c77ac9c7b5"
        },
        "item": {
          "id": "789b870b-4e08-40dc-9e86-2f1218bf6b53",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2813343b-0b20-4651-a9ae-b2183ceb2d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2005de0d-eae8-4037-9433-9a61df730865",
        "cursor": {
          "ref": "39a5b07f-b32f-477b-8668-3f9a2ff164be",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2fe747eb-3475-4720-971e-2b140457fa8e"
        },
        "item": {
          "id": "2005de0d-eae8-4037-9433-9a61df730865",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2ab3c6ba-c6f3-4aed-9b2e-38d3db1b815f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fab06c-88a8-44fe-a0b4-6e3dffa7a114",
        "cursor": {
          "ref": "c9dc08fb-8a40-43a3-903f-c8cfed7b62bb",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "68f598c9-f0b4-4579-b1b7-b7d8064ba161"
        },
        "item": {
          "id": "c5fab06c-88a8-44fe-a0b4-6e3dffa7a114",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4e4d272a-d043-47bc-9fd8-ada264dd1efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431459a6-e0f2-4c93-a25b-993842b19c33",
        "cursor": {
          "ref": "8b5150c6-ba6c-4dc1-ba34-5208d8d8e854",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8af9378a-5741-4170-9578-356fe51526f4"
        },
        "item": {
          "id": "431459a6-e0f2-4c93-a25b-993842b19c33",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b8a43e93-42e6-4211-b015-4300b6162658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb1a5d5-0106-4176-8e93-3921ca44d0be",
        "cursor": {
          "ref": "e97ffa93-21b3-4242-96c4-7cb9ff323afb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "925d2062-fe92-449b-9777-6671cc7f06e3"
        },
        "item": {
          "id": "7fb1a5d5-0106-4176-8e93-3921ca44d0be",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7ed57360-3992-4ebc-abe2-403470b86a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e453ac9-93b2-476f-91b2-e3cd9cda7fde",
        "cursor": {
          "ref": "388d4223-cb29-4912-bc5d-1418e4da5b1f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3d00aea5-df79-45bc-9f03-2c176c59b523"
        },
        "item": {
          "id": "9e453ac9-93b2-476f-91b2-e3cd9cda7fde",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7e3af982-8ab5-4eba-930b-c292601467a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba38542a-35a6-40d9-b186-9818b346d14d",
        "cursor": {
          "ref": "efb84b73-1b98-4a7e-9e05-3b677dc6f295",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5d67a1bc-2006-4d19-8d1d-0fe06b672e22"
        },
        "item": {
          "id": "ba38542a-35a6-40d9-b186-9818b346d14d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "bd3ee845-8e0d-45bd-85d5-a531ed3a667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cea6ab-bdcb-4403-b0cf-e45514a7cb42",
        "cursor": {
          "ref": "34479b80-c484-4cad-9ab8-d98a3a8ee98b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "943a4c3a-4458-4a8f-bb62-beac29105108"
        },
        "item": {
          "id": "f5cea6ab-bdcb-4403-b0cf-e45514a7cb42",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e08b93e5-f249-443e-aa44-e6857d63bc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08cebb3e-e0d4-465f-bbf0-48c809b274f0",
        "cursor": {
          "ref": "a81360b8-c3bf-49b6-bc35-7183d9450304",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6635ce43-e89a-4630-aa40-99feb616c2ac"
        },
        "item": {
          "id": "08cebb3e-e0d4-465f-bbf0-48c809b274f0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a59561c7-db4e-49dc-bc97-4ffb783618d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342bf609-bb67-44df-83dd-0387f20621f3",
        "cursor": {
          "ref": "36a7172d-2b91-4d69-b529-734f26f8e0c3",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dfd5fbb4-e317-4950-be19-032cd21de748"
        },
        "item": {
          "id": "342bf609-bb67-44df-83dd-0387f20621f3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f0fd44de-3031-4673-92e9-9adc0a4d5a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078f0f6c-5591-4cca-950f-9c44fd57d305",
        "cursor": {
          "ref": "3acc5a6f-443d-421e-94cf-ed54a551b84d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "42c8974e-4cb1-4342-af8f-4638eb60fdec"
        },
        "item": {
          "id": "078f0f6c-5591-4cca-950f-9c44fd57d305",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fc9ebb6-1f0b-4230-a8c6-9548cbce97ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52042fb-7e76-43a8-b1a5-e2a5a4034b09",
        "cursor": {
          "ref": "22aca138-719a-4c8e-b952-02ea7b7c1cee",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dd762e67-8f46-461c-8adf-d2d9e1c6c223"
        },
        "item": {
          "id": "d52042fb-7e76-43a8-b1a5-e2a5a4034b09",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3ab8da0b-f51d-4291-80be-7f4f8d9d07e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ad74d1-ce86-40e1-9fca-e22a54446d2f",
        "cursor": {
          "ref": "fadf4190-44e0-4ce8-99a0-36a56bf8ed2d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7d697558-dadc-4bcc-bf68-a1a84210d130"
        },
        "item": {
          "id": "97ad74d1-ce86-40e1-9fca-e22a54446d2f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "47bbb8f5-41ff-44b6-a4ff-3f5a6be8d921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5317cb72-59d2-4645-8636-30b45a994669",
        "cursor": {
          "ref": "a18aa802-eb18-4e67-ad69-b3e1a4551b98",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ee0feee3-aaed-440c-84f8-3aa6b5ea650e"
        },
        "item": {
          "id": "5317cb72-59d2-4645-8636-30b45a994669",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8fed8cea-a5bc-43e1-877a-e8ff50ba7021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d477724-001f-4282-a256-c5c325f80504",
        "cursor": {
          "ref": "459ec84e-e0fc-490b-b89b-3f5228783353",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3eb14a9b-f4ff-4a71-b16e-bafcbeda2447"
        },
        "item": {
          "id": "6d477724-001f-4282-a256-c5c325f80504",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "50e3e199-7843-4d11-addd-927046c0a7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c8cc07-fabf-48c5-82f4-b37b89e6c418",
        "cursor": {
          "ref": "6725f67f-a787-44a9-854d-f310cb61e106",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "23e7298a-6723-4902-8e46-b497a440ee01"
        },
        "item": {
          "id": "26c8cc07-fabf-48c5-82f4-b37b89e6c418",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "91e31def-b5b8-4735-b879-291590432054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2345a0d2-7b86-48b8-812d-4298bafbe978",
        "cursor": {
          "ref": "1bb7cd7e-bd55-4ba5-b204-aed623e8d2fa",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ed18d202-342d-41a0-be6b-a3e8bde5c747"
        },
        "item": {
          "id": "2345a0d2-7b86-48b8-812d-4298bafbe978",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ede6b6da-3b00-469c-a6e5-0499bd72c05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c3b7cb-c1d7-42b3-850a-f3fcf86d8cbd",
        "cursor": {
          "ref": "9ff72a21-22c9-4a14-b459-3b0df35d0864",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b74fbc9c-9b39-4efb-a059-943edaa22084"
        },
        "item": {
          "id": "99c3b7cb-c1d7-42b3-850a-f3fcf86d8cbd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f97099da-ff0f-4cf8-9d48-7de1b4fdef0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001fc908-f1a1-41a8-bf3f-e90dfd401ed0",
        "cursor": {
          "ref": "b62ff370-f3e2-46c5-a7ce-0f7c5ca2b606",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "13557435-8cbd-446d-ac3f-6775f7c07f03"
        },
        "item": {
          "id": "001fc908-f1a1-41a8-bf3f-e90dfd401ed0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9d511e63-2987-4d4e-a0c7-ba39504d8360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b26b3b-bb35-4c4f-ac7b-694274ae8e96",
        "cursor": {
          "ref": "dc18a88e-2a89-489e-997f-e8e53d52c357",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f4320a13-69df-4a5d-9fde-d455bd2c7493"
        },
        "item": {
          "id": "d9b26b3b-bb35-4c4f-ac7b-694274ae8e96",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8e3e5556-1a10-4484-82e2-516cae68bfca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a7aa47-98b5-4dbd-87b3-b1165207e9d1",
        "cursor": {
          "ref": "36d5c47b-c2f9-4aee-a0e5-338b5f04ee68",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8ac7e835-c5cc-49db-9655-120cc671a77e"
        },
        "item": {
          "id": "a8a7aa47-98b5-4dbd-87b3-b1165207e9d1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d7931db4-8009-46d6-837d-d6ba10867218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb8334e-3ecc-4263-b23e-e5f0d147d7a2",
        "cursor": {
          "ref": "e1d5023f-e390-40fe-b782-d7bcd758b58a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9bb0719c-5e8c-4ce4-9ab2-6ccc309bbfd0"
        },
        "item": {
          "id": "ddb8334e-3ecc-4263-b23e-e5f0d147d7a2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a17e7725-c26c-4453-b61e-f4d056fa12a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21aac3ed-bc07-4144-b543-960b2fc8ae48",
        "cursor": {
          "ref": "5543b647-cbb8-45c0-9a8b-512693aafb93",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0bcc8c9d-096e-44ba-a28f-09de1856b8f1"
        },
        "item": {
          "id": "21aac3ed-bc07-4144-b543-960b2fc8ae48",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "245820a4-0467-4fc9-b100-8e1356299dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eafe399-3b2f-4068-8585-5bbc8e529a33",
        "cursor": {
          "ref": "d7ec4e21-de0b-443d-a02a-c42a9642ab2a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a1504f03-1940-42c5-9de9-e5b6e9b596d6"
        },
        "item": {
          "id": "8eafe399-3b2f-4068-8585-5bbc8e529a33",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b5d15f66-b084-47c4-8b53-08c27a73bed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9968f8-0145-495d-bc4a-af0dd5c8ef27",
        "cursor": {
          "ref": "aa7062b8-dcc9-409d-93d9-c43a112c1fa9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a9bd4af7-2c8f-4d34-b9c7-7fed0ad31da9"
        },
        "item": {
          "id": "3b9968f8-0145-495d-bc4a-af0dd5c8ef27",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "733fe042-80c1-49fe-af3b-1c58f9f976e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f320cbd-ed26-4b1b-b222-0073452bb5bf",
        "cursor": {
          "ref": "17f0fa07-67b8-4a4f-aede-4633bd6cfc37",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5e5e4b8e-129d-48b0-a162-a744fe039b82"
        },
        "item": {
          "id": "0f320cbd-ed26-4b1b-b222-0073452bb5bf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "000516f7-7bbd-479f-af0e-248fab75370a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71a7301-0f72-479b-b476-feaa1962c251",
        "cursor": {
          "ref": "be35bf53-e5b7-40c3-9340-4acd5fc56c56",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2a3f8489-fece-4c2b-82e7-9687903ee9f8"
        },
        "item": {
          "id": "d71a7301-0f72-479b-b476-feaa1962c251",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a54ed75-88ca-448c-ab49-ac87989bf750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c15606-5358-4878-aed8-88744c2322bb",
        "cursor": {
          "ref": "c61e1c15-f8e8-4244-a43b-3b37dc208b79",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ad9c997b-9879-4562-918a-7f482c479ba2"
        },
        "item": {
          "id": "46c15606-5358-4878-aed8-88744c2322bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5075a32c-101c-437d-bd81-0fa613f01ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc77b050-4652-4661-8b6c-5650bc7da52f",
        "cursor": {
          "ref": "825d1cad-b0b6-4c1e-a106-bfd7486d81be",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "517fd1ac-732b-4ba9-98fd-25e7ea258ef6"
        },
        "item": {
          "id": "fc77b050-4652-4661-8b6c-5650bc7da52f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "03c6ede7-08b9-44aa-a90c-ab6754fdb83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df4996e-c013-475d-aeba-d6a7c2064719",
        "cursor": {
          "ref": "3150c620-fb9e-42b0-ac2a-821b92497ce7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5bc011e1-529a-4744-80c6-3a9bdfc3aa29"
        },
        "item": {
          "id": "4df4996e-c013-475d-aeba-d6a7c2064719",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b93adc9d-0df4-4092-a897-697162b53ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3578a56-ea9c-40ad-a904-3e3cc2072b13",
        "cursor": {
          "ref": "60916167-7559-4cdc-8c4d-9d557fdd7a42",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "141c6f86-e6b0-4c69-aaef-f31074bd9653"
        },
        "item": {
          "id": "e3578a56-ea9c-40ad-a904-3e3cc2072b13",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "18477451-69ba-4412-a4d0-4acf827a3395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905ed0a0-b060-48f4-8689-77cdbde8583f",
        "cursor": {
          "ref": "c03ccb6a-380b-4898-8170-e33c6cf1d86d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "246e8c4d-f768-4b05-8504-d3be9a2711aa"
        },
        "item": {
          "id": "905ed0a0-b060-48f4-8689-77cdbde8583f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f4adca77-134e-4792-9684-1e09e7841a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9c2758-d6d7-413b-a6a7-bcc013bfe097",
        "cursor": {
          "ref": "b764c55e-8a26-4034-8714-f4c8734412dc",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "032956bc-99d4-4f2e-afa6-ab23df8ec491"
        },
        "item": {
          "id": "cf9c2758-d6d7-413b-a6a7-bcc013bfe097",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "57c2d8c2-d32b-4d14-b036-41c86490b468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb3022-3e36-4f3e-8188-285808c73dd2",
        "cursor": {
          "ref": "a4db0368-5dff-47ea-83b5-f9cb9477fda5",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d4e2d520-16df-4f37-9bf7-907292921d86"
        },
        "item": {
          "id": "aeeb3022-3e36-4f3e-8188-285808c73dd2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ac1646bc-a940-4141-9b0e-1435941e06cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd0ba17-9ac8-4b27-82f3-f9caf00067b9",
        "cursor": {
          "ref": "184def45-c130-4c8f-84d1-ae9b494ecd18",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e429f684-6a45-43b4-b7ab-0e614558f8bb"
        },
        "item": {
          "id": "cdd0ba17-9ac8-4b27-82f3-f9caf00067b9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f72ca293-f705-4789-bbee-2c1ae87f1cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919a0741-e57c-49c7-b686-44e9680119c6",
        "cursor": {
          "ref": "a037e0d2-ab8c-4fc7-92b2-5b875dfaec2f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7c3d1357-466e-4875-a7f5-2c5d4b9b7f3a"
        },
        "item": {
          "id": "919a0741-e57c-49c7-b686-44e9680119c6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "93074eac-94db-4826-afac-4b86ba9b23b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9703f291-ee00-404b-834e-9a84aad64c25",
        "cursor": {
          "ref": "78266349-116a-405c-9b2f-26b7f95ec343",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "97a11f2e-be5a-4abd-ab7b-5bf14f3c34e0"
        },
        "item": {
          "id": "9703f291-ee00-404b-834e-9a84aad64c25",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e23cd23f-bd4d-4a6e-a8e6-28a979fdba23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d8390a-1814-437d-aa67-ba28c2186856",
        "cursor": {
          "ref": "43d9c331-1e54-40c2-895c-439ff14d0372",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4c18d2b8-9f0a-43f5-ac4a-cb6537b03f3d"
        },
        "item": {
          "id": "24d8390a-1814-437d-aa67-ba28c2186856",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1161108b-36e0-4f47-990b-66361a8d9fd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0850ae7-c6c3-4b4e-9cab-289a8fe5d9c1",
        "cursor": {
          "ref": "8b0fc455-2736-457f-824c-e08aff2d16a9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff085536-1ecc-45ab-ae04-e17ed9accc0b"
        },
        "item": {
          "id": "f0850ae7-c6c3-4b4e-9cab-289a8fe5d9c1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4fa90327-14f1-4d57-8ac1-ddb3a824a7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660fcbd5-09d9-46b3-afb1-623c5a88f0ed",
        "cursor": {
          "ref": "e97422ef-f296-40f5-a50c-15eb42b33fe6",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6f6426ca-d9d0-4bed-a3df-55e42e05ec7e"
        },
        "item": {
          "id": "660fcbd5-09d9-46b3-afb1-623c5a88f0ed",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4e9e3cfc-c1ab-4241-9c1f-a0a86deee50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617068f3-3202-434b-983a-7d2a7196d00f",
        "cursor": {
          "ref": "68a0347e-4445-4c3d-8091-35602eafa54e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a991aef-ed25-43a0-b8b8-09d571ffc860"
        },
        "item": {
          "id": "617068f3-3202-434b-983a-7d2a7196d00f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3f4cc50a-49c7-49c3-8160-0ae0cb8bd201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fa29dd-d9ec-4cfa-a04d-74cc06751bbe",
        "cursor": {
          "ref": "e2f87b11-8e12-426e-a49b-182f66117726",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "363089c2-4ff4-4c4f-a732-084f180d8ef9"
        },
        "item": {
          "id": "79fa29dd-d9ec-4cfa-a04d-74cc06751bbe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7cb9b6e4-a8ea-4846-9d7e-1ad3dca44c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53376907-e8b6-4fbf-b568-d1a2162e3b66",
        "cursor": {
          "ref": "eb863c45-148a-4c37-bbfe-2591442a2c71",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "87ad4728-11d2-48bf-aa58-a36167319dac"
        },
        "item": {
          "id": "53376907-e8b6-4fbf-b568-d1a2162e3b66",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "00759b3e-0e6c-403d-ba11-e13d3233a2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70eff1c-f38a-40cd-ac97-b6104e483d20",
        "cursor": {
          "ref": "ca812aa8-54ff-477b-a1fd-dc2a0971ba89",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "74457ff0-3b7d-4659-8820-4874aa31ca74"
        },
        "item": {
          "id": "a70eff1c-f38a-40cd-ac97-b6104e483d20",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9c31b6ed-3ca5-4277-b429-e7782baede35",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b4dea067-d9ea-44b0-95f9-de72397c0e8f",
        "cursor": {
          "ref": "c992e175-0637-47c1-adf6-e16479e1c505",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ba5e72e3-c9d8-4ce3-ae29-45b41fd6abb9"
        },
        "item": {
          "id": "b4dea067-d9ea-44b0-95f9-de72397c0e8f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ed76acee-344f-40a0-819e-ffda13dfdbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e898cc-7f20-4a0a-af37-c46cf6c7ad43",
        "cursor": {
          "ref": "4c752abe-afe1-47c6-a58e-a087f251c5da",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f0a4bb00-f8cf-4ed3-a34f-4f7035971f59"
        },
        "item": {
          "id": "80e898cc-7f20-4a0a-af37-c46cf6c7ad43",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "28669e03-979e-47b1-8c57-ad0ac1abe50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae86cbd-63fa-47ac-8b52-6c1aae99e754",
        "cursor": {
          "ref": "a1f24795-1c86-4ffe-975d-799446f508a8",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cfd1ef7f-1061-4185-b220-87dcd9efd614"
        },
        "item": {
          "id": "dae86cbd-63fa-47ac-8b52-6c1aae99e754",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f8aaccab-aa42-4c62-8eb0-669ce7621d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd58e70-8a69-42a5-89dd-1b5375d724de",
        "cursor": {
          "ref": "9be01394-861f-4ad5-bcc5-72a93cb97d78",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1df57e5e-4de4-4ccc-8eaa-fd0cdcd214cd"
        },
        "item": {
          "id": "ecd58e70-8a69-42a5-89dd-1b5375d724de",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5340283f-f5f5-4a59-a30f-4e39a1f1f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5ca639-9c04-4fad-9fd2-4a415c9827b2",
        "cursor": {
          "ref": "b8e4b0ce-5c73-4b46-bcb8-020060bc1ef8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "24e23546-746b-4518-8ba7-6028f07b203f"
        },
        "item": {
          "id": "6b5ca639-9c04-4fad-9fd2-4a415c9827b2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "738573ec-04c6-4667-bd4e-e141ac27a8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed5df80-1883-4146-a242-4ca4f99a7b3d",
        "cursor": {
          "ref": "ad3eef38-ed84-4b72-9619-86050b009774",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5a3081db-021b-40a8-a8ba-80e9d7c571e4"
        },
        "item": {
          "id": "bed5df80-1883-4146-a242-4ca4f99a7b3d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "30e33abb-d4ba-4670-9dd9-73a57dba2d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afedeb0-ba27-4a94-9e50-94a44558e299",
        "cursor": {
          "ref": "f2575d43-14f9-447a-991b-9e097a66b46d",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "452c1c54-36e6-4206-a35d-258dc70105ab"
        },
        "item": {
          "id": "6afedeb0-ba27-4a94-9e50-94a44558e299",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "03e19425-d13c-4d3f-a0b9-1d9738d96bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b0ff39-dc09-433a-b2be-c0674b3dad20",
        "cursor": {
          "ref": "f323b68c-bc3a-48e8-9d26-c8ab1fb2bb88",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9d6b627a-340b-4068-a848-94303621f2f9"
        },
        "item": {
          "id": "c4b0ff39-dc09-433a-b2be-c0674b3dad20",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c7b5a9d2-3f12-4a9a-b4e0-0272640b57ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e406e99-33ef-4e32-aa30-9d0c283a7931",
        "cursor": {
          "ref": "f00a99ef-c78f-45a3-8d5d-d2b1c87515e5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9e034f10-c5ca-4cd4-8897-4263d03e6b46"
        },
        "item": {
          "id": "1e406e99-33ef-4e32-aa30-9d0c283a7931",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "518d62b9-bcce-4a97-b06e-22d75af88d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ccb552-f86a-4771-95eb-879910b3de8a",
        "cursor": {
          "ref": "6856e1c8-2edd-4c43-b94e-75478995aa74",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c5f229cb-6feb-4711-9227-28c6ec0e41e2"
        },
        "item": {
          "id": "e0ccb552-f86a-4771-95eb-879910b3de8a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3b1650c6-024e-4ef7-9262-c2ab9170cbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fc69c8-f649-464f-8e8d-634d655bd038",
        "cursor": {
          "ref": "3b835fe2-9a94-4f4e-b642-a374d98274ee",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "698fc721-032b-4f41-a6bc-abb6e6b57276"
        },
        "item": {
          "id": "d1fc69c8-f649-464f-8e8d-634d655bd038",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7f65f59f-77f1-4c8e-b335-61a692ae1f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588f399a-d5c4-4944-b312-eaa0bcf7aacb",
        "cursor": {
          "ref": "697ce95e-d34f-47b3-a4e1-13b505279c99",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "53bbd208-17bf-4bc9-a4a3-3d2a10925c1d"
        },
        "item": {
          "id": "588f399a-d5c4-4944-b312-eaa0bcf7aacb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b7e820b2-5624-44fd-b79f-152200a52bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763f50b8-81bb-4598-87f2-fe2f450e93c6",
        "cursor": {
          "ref": "f2f874be-f5c4-4f49-9485-2d9ff1eacb32",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "450bb565-d739-4f64-82af-7981a97f4d10"
        },
        "item": {
          "id": "763f50b8-81bb-4598-87f2-fe2f450e93c6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a2257a04-797c-4c1f-8943-1878f19173fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff14cd3-2a70-4abd-9db0-16f13e98dec3",
        "cursor": {
          "ref": "3b3e0e37-2fc2-49bb-baab-98f5cbb1e859",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1869f121-e529-4104-abdb-53310a5b96d8"
        },
        "item": {
          "id": "cff14cd3-2a70-4abd-9db0-16f13e98dec3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e2ac4da7-d2f4-4c80-acfe-e473487daf7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5400261a-231d-46f6-b2e3-520f8e588e9e",
        "cursor": {
          "ref": "96c6919a-894c-4e1c-8cd3-49403c11271e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1d69b976-cbb5-4ab0-b7e0-7aa30a0960bc"
        },
        "item": {
          "id": "5400261a-231d-46f6-b2e3-520f8e588e9e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "25d1f125-8159-4ea7-912e-e832eb4c13c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2a69c6-f209-41ab-8327-943b0bdcd2a1",
        "cursor": {
          "ref": "2207be74-4f26-4568-8051-11fd9ad94a19",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2b3d0bcc-ff61-4ba8-974f-10bd1ca30a5b"
        },
        "item": {
          "id": "8f2a69c6-f209-41ab-8327-943b0bdcd2a1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "01bbd837-7055-4b10-8ee2-e9bbea361da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff430a44-2aca-4c4b-a54c-a9a4fe9a1506",
        "cursor": {
          "ref": "7a57a747-8d96-4f62-9db7-7447ded1d27c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1fb283c6-9fe6-4732-81eb-d68d5ec2c6f3"
        },
        "item": {
          "id": "ff430a44-2aca-4c4b-a54c-a9a4fe9a1506",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1ec5704f-b7e8-4a63-ad32-87563b7d188a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7023237-c86a-42a5-9d74-319dc75a30d3",
        "cursor": {
          "ref": "c349fd88-a610-4ed1-bbec-3816bad63ebf",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "785eebc8-dbe9-4c7e-91af-89859b1564d7"
        },
        "item": {
          "id": "e7023237-c86a-42a5-9d74-319dc75a30d3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "983625a7-cb6c-4498-92b3-4b64af7567e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634e51f8-2057-43b9-80b6-2c9235dde9d6",
        "cursor": {
          "ref": "af901c2f-b7fb-4a14-9d3d-3ca73b440557",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5d8da0d5-b7d0-454a-b103-2a631f226d8a"
        },
        "item": {
          "id": "634e51f8-2057-43b9-80b6-2c9235dde9d6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4a383bc3-532a-40b2-b80c-fadd2a02a084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe5aaa6-791e-48f8-a4b9-19482c98c438",
        "cursor": {
          "ref": "b4e14ade-50fc-45cd-a65b-71ef2ab83ced",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "642cb4bb-bf69-4d54-942f-a420c1778e97"
        },
        "item": {
          "id": "0fe5aaa6-791e-48f8-a4b9-19482c98c438",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "60ae6235-f261-4d68-9bff-ea21001963ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83138af3-4824-4e38-beff-ed90daee5dfa",
        "cursor": {
          "ref": "710c83a6-2f4f-4f8a-909a-15e6e5761eed",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2b24273d-456d-4c71-9d9b-2697cdd8d26b"
        },
        "item": {
          "id": "83138af3-4824-4e38-beff-ed90daee5dfa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "84892fef-4731-43a6-85f0-288069972ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30656685-f1f2-4289-b1b9-ce35fff8f6f6",
        "cursor": {
          "ref": "b8e5d3b2-aa25-4cb8-a53b-31cf45494f97",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8b25006e-4d10-4e9e-bc7e-89230b83c2a6"
        },
        "item": {
          "id": "30656685-f1f2-4289-b1b9-ce35fff8f6f6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "187275fa-9458-4d15-bf60-75a0c3e446ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00a04bc-c4f3-485e-8c6c-ba5ec980bdfe",
        "cursor": {
          "ref": "918d07bf-bd37-47b2-9c05-fe9fb1dce08f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4f784efa-3410-433b-92e7-7113628260bc"
        },
        "item": {
          "id": "e00a04bc-c4f3-485e-8c6c-ba5ec980bdfe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "524198f3-b746-433d-b625-875f5e946600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335de467-95a4-4c96-a4f0-1266cd25490a",
        "cursor": {
          "ref": "fd333b1b-e01b-47c0-9a66-e685500fc96d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9668bca5-55ab-4c8a-ba2e-60333e4537d0"
        },
        "item": {
          "id": "335de467-95a4-4c96-a4f0-1266cd25490a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c59670f6-36b2-40c1-a438-c03481fc446d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de90fefa-5d34-4ea7-a82d-e7a1f14fb627",
        "cursor": {
          "ref": "a5602138-89bd-4b94-ac79-06229d7ec7ca",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "302e8343-3f81-4cb1-a7ed-5d6081437a56"
        },
        "item": {
          "id": "de90fefa-5d34-4ea7-a82d-e7a1f14fb627",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "dfb579b4-bb86-454d-b5af-08a9aa0770a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da03caba-fede-40dd-8843-2ea08fc0f62b",
        "cursor": {
          "ref": "adad0d7c-057b-4159-a131-ca8100c433b3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c77ed8a2-0ae0-4890-93c2-e3fba20dabcf"
        },
        "item": {
          "id": "da03caba-fede-40dd-8843-2ea08fc0f62b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d97e8f66-b91c-4353-95d1-759500e549de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f18ccf-91a5-4558-b27d-b12237400e92",
        "cursor": {
          "ref": "72c208f6-fde0-4111-88cf-82829ef29c5a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b378dd58-f5a9-4cb2-bc23-c5b9b4b2b7e0"
        },
        "item": {
          "id": "77f18ccf-91a5-4558-b27d-b12237400e92",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "73bc292e-d9ad-48b4-80ee-76f03a8acb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6b1874-5474-4921-bc43-2b34414ba508",
        "cursor": {
          "ref": "5a6ff8de-73cd-450a-851f-dd4d279bc0b7",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0901b888-6f03-4671-a041-8aa9d738363f"
        },
        "item": {
          "id": "2c6b1874-5474-4921-bc43-2b34414ba508",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aa8034dc-908e-4317-8e79-55b78155fddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e3b145-3eda-47ba-8bf4-e734ab04f4ec",
        "cursor": {
          "ref": "8577c295-eb27-4dc0-b180-a45b15bde0bf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ba6cff36-891f-4bf1-a520-4eb0fc115fc1"
        },
        "item": {
          "id": "c6e3b145-3eda-47ba-8bf4-e734ab04f4ec",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "05b0a193-6145-47f8-9469-f740941d411d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cd216d-c128-441c-98e0-c69d8922fe0a",
        "cursor": {
          "ref": "2a5af9e4-23bc-4600-86d5-e3f4b58a5028",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e3dc9c78-f549-4b7a-87d6-e3bb0aa73c78"
        },
        "item": {
          "id": "69cd216d-c128-441c-98e0-c69d8922fe0a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f92964a8-3a94-433a-b4ca-40e5cee54d42",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d7388efb-9d38-475f-aa93-8bcc27cb248f",
        "cursor": {
          "ref": "b0df6f2e-63f6-4d15-8d89-577e93f418c7",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e44da5f8-12d5-42bb-bb38-ed222d9c113c"
        },
        "item": {
          "id": "d7388efb-9d38-475f-aa93-8bcc27cb248f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e189e3e3-5528-414d-aed3-50d6bb280446",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1032b30b-4eef-40d9-933f-6cdb5540d36a",
        "cursor": {
          "ref": "18e5bc16-d9d6-42b0-8852-c7e316494e0a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "82d6d084-cde1-4ebb-bcfd-989e44efeba7"
        },
        "item": {
          "id": "1032b30b-4eef-40d9-933f-6cdb5540d36a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "73f999b5-9c0e-4a0d-a904-c5fe47758e23",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c4122e17-31ef-4b0d-8eff-0411a69cfc8c",
        "cursor": {
          "ref": "3a30ef1e-bd89-4c79-b6c5-0ad0676a5ec6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4b123267-0be3-4a7c-9e97-56c2fad5bf1c"
        },
        "item": {
          "id": "c4122e17-31ef-4b0d-8eff-0411a69cfc8c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "54609109-b944-4848-b01f-ac182312f1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ba4179-2fea-43d1-809c-29969251fe36",
        "cursor": {
          "ref": "8b01f843-6d1c-498d-86e0-9af877c390af",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00d8fac9-38af-4da6-994b-6aea6c305a7c"
        },
        "item": {
          "id": "c1ba4179-2fea-43d1-809c-29969251fe36",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "feba62e0-f538-4f5b-98ef-1c563275e20e",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e727b91e-5cb2-417b-9745-5d5216910e2a",
        "cursor": {
          "ref": "da969468-d337-46ce-9843-ed3fe1be9338",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9ba82796-97e0-401d-b3d3-8f92205984be"
        },
        "item": {
          "id": "e727b91e-5cb2-417b-9745-5d5216910e2a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "481e1bd0-3386-48eb-aebf-c8e33ef82198",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f7b4b601-b7f1-4b94-baa3-849837da84f9",
        "cursor": {
          "ref": "b397345b-e0a9-4442-bf01-edf5a6c78bd6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d311be03-e874-4fb2-b0c1-237b90c0d236"
        },
        "item": {
          "id": "f7b4b601-b7f1-4b94-baa3-849837da84f9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4608328d-2702-414b-8166-c6d54b62ea1a",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4a1574bf-6776-451f-b263-67694ecb9554",
        "cursor": {
          "ref": "39f6fd8b-a751-49e8-bd1d-9c9e6b8e303f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fc570133-9c24-4dae-943e-f9d7cc1f75f6"
        },
        "item": {
          "id": "4a1574bf-6776-451f-b263-67694ecb9554",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "79d1b170-a056-4382-aafc-bb880820ac7c",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d870f559-2736-48ae-9b21-ba35b2cc393c",
        "cursor": {
          "ref": "4f943fe2-26c0-4c74-b7ac-37d6be61412b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8f0bfb64-aaf4-4fe5-9e44-daa526e39d6c"
        },
        "item": {
          "id": "d870f559-2736-48ae-9b21-ba35b2cc393c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "18af7bfc-c484-43bf-ab78-29ba16a2985c",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "86869824-1854-4a83-acde-5e359c6aef7a",
        "cursor": {
          "ref": "5260a13a-0daa-45c6-8fd1-81eca8ed1d95",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ab8669f2-bf89-4f35-a7e5-fc26e361fdda"
        },
        "item": {
          "id": "86869824-1854-4a83-acde-5e359c6aef7a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fd5439bd-dfb2-437c-af30-aa5c9b09a867",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7226e209-0626-488e-b3f7-93bd1e88c01c",
        "cursor": {
          "ref": "d00247e8-2379-4b18-a7a7-3b10e8e5c65a",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "153200d6-37cc-4d70-aba4-1f1b9e5bbe7b"
        },
        "item": {
          "id": "7226e209-0626-488e-b3f7-93bd1e88c01c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d4290978-b60a-4cff-9673-b795cbe3c701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06fe477-ca37-4e75-a8be-1780c93ece06",
        "cursor": {
          "ref": "775dfd63-1db9-49bf-bb9e-7ba0794e8b75",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e92a7eb3-378f-4d9d-b124-07c330428a3a"
        },
        "item": {
          "id": "f06fe477-ca37-4e75-a8be-1780c93ece06",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "48738831-b70f-49cb-8779-751e0e0fdab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01796a8b-1973-499a-9afa-e6c55e655037",
        "cursor": {
          "ref": "da1b0f13-bc15-4335-8cc8-b0fa142ebac5",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "091d7c7c-9d1c-4b35-a227-aaae270d521e"
        },
        "item": {
          "id": "01796a8b-1973-499a-9afa-e6c55e655037",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "87a06e94-ae93-408f-89bc-eca85c6199ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d5ae24-00a6-471f-ac22-583b73497052",
        "cursor": {
          "ref": "0ed269a9-fb27-4d11-9577-2c6037a3fe5f",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "067b59dd-19df-4b1b-8482-08605b1b066f"
        },
        "item": {
          "id": "e5d5ae24-00a6-471f-ac22-583b73497052",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "91de208f-fa61-486c-a21c-92fc256db1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcec2fd-a9e2-42ce-8ed2-839e8c953b0e",
        "cursor": {
          "ref": "b076663e-1603-4c65-b400-513b04a48e86",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "01876781-ef40-418b-9006-66cbc6f0fa7e"
        },
        "item": {
          "id": "adcec2fd-a9e2-42ce-8ed2-839e8c953b0e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "76cca0b5-68a4-4bdf-a80b-c9818ce324c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a55bf2-db96-48e5-a192-aaeb58dc50b4",
        "cursor": {
          "ref": "e82fd28d-5d76-4cd5-b623-18d3ce108ba0",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "21de01cb-bfe5-4f79-ac7e-b670ae11edfb"
        },
        "item": {
          "id": "11a55bf2-db96-48e5-a192-aaeb58dc50b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "33eff37e-7df2-4b52-a3c9-8d1ad8537612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d34f76d-b6cb-4301-930f-09a14795d3b6",
        "cursor": {
          "ref": "c6298722-72c6-4458-99c3-019e875afdd5",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6ebeaefc-d87b-485d-87ab-616ddfa759df"
        },
        "item": {
          "id": "9d34f76d-b6cb-4301-930f-09a14795d3b6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c922b4f4-4f15-420d-a61e-56f642ee37cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7922cc5d-8ca4-4be7-94db-227bf6762cd7",
        "cursor": {
          "ref": "0ad07bed-e7d8-4998-9f8b-32b7f0b63b82",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d75f2686-1e73-4e00-89e6-98edfe238fd1"
        },
        "item": {
          "id": "7922cc5d-8ca4-4be7-94db-227bf6762cd7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4b06ddff-e11b-4408-b2a2-590790588c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db474347-e101-4102-8028-dbd90b9d4283",
        "cursor": {
          "ref": "b7b9ade6-8bab-4e09-bb3c-1edf06779e41",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d86a8b20-3762-4920-b6c5-60fdf9aa881b"
        },
        "item": {
          "id": "db474347-e101-4102-8028-dbd90b9d4283",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ce411a63-2fa9-41dc-a177-e104c22d6ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b362725-a501-4f92-9a4e-dc8521cb9b45",
        "cursor": {
          "ref": "5f6c6789-d237-4081-a1cd-da32ca9542fa",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "896e8f0c-5616-490d-a76f-cd37fa1b9e6d"
        },
        "item": {
          "id": "4b362725-a501-4f92-9a4e-dc8521cb9b45",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c127c499-5bb8-4299-840a-3c5e36378030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff28ee4-9b5e-47f3-8cef-db01b0549872",
        "cursor": {
          "ref": "f51710f8-2823-45f4-80a6-5fdf7a89bfaf",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ce8c89b8-a371-4089-997a-d25c16c159e2"
        },
        "item": {
          "id": "5ff28ee4-9b5e-47f3-8cef-db01b0549872",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6b51e40d-ffbf-4721-9e61-b1beea2b2590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5916e91b-3fdf-4f42-ae05-49a84fce773d",
        "cursor": {
          "ref": "0209ac44-3fbe-4025-9eda-88bb9736b1c0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a5e1c4d2-48df-461e-8585-4a8b6c881a52"
        },
        "item": {
          "id": "5916e91b-3fdf-4f42-ae05-49a84fce773d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "750885ef-db6e-4bce-9c62-3f0de2b35c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe070e1b-c398-4ec3-88c7-0bb0c08e5c40",
        "cursor": {
          "ref": "474d8de7-2d7b-4bab-86ae-e2ec512edf82",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bf6c3bd7-3a6c-4d84-b2c8-1f057a867512"
        },
        "item": {
          "id": "fe070e1b-c398-4ec3-88c7-0bb0c08e5c40",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5b3dc691-43d1-441f-864b-323bada17171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6324e1a-5b7a-4f47-93eb-43b83f117382",
        "cursor": {
          "ref": "8767bd41-0dca-4005-bc9d-d1c199ed71a9",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7d8f786a-2614-4a02-aa0f-1784ac9a792b"
        },
        "item": {
          "id": "b6324e1a-5b7a-4f47-93eb-43b83f117382",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dade2eb9-fc51-4ffc-af3b-b12d5cdb7ef7",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8e6e703b-88d2-46fe-bf72-50b08275b6f9",
        "cursor": {
          "ref": "24c55176-16ae-489a-89ff-cc732e5354f4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "81461a3c-a94d-433a-a21e-000bdb7692ce"
        },
        "item": {
          "id": "8e6e703b-88d2-46fe-bf72-50b08275b6f9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "edd486fd-72e1-4fc0-ade9-15e622855b63",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "7ec60973-9879-40bd-881d-3042f41dcd75",
        "cursor": {
          "ref": "3771fbed-b53c-4e78-91ea-1c83e08071e8",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "34abe494-fec4-4439-8ddd-8aa8ad66c348"
        },
        "item": {
          "id": "7ec60973-9879-40bd-881d-3042f41dcd75",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f8d35855-ec82-4559-b6e4-03b5544ac82c",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "122af0f9-0741-4fad-b580-88b1c4082814",
        "cursor": {
          "ref": "61c0d60c-6256-4510-9213-7e01e4c8e5ee",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c8f1fba6-7935-4203-8484-0056b6d469fa"
        },
        "item": {
          "id": "122af0f9-0741-4fad-b580-88b1c4082814",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a61004e2-6195-4516-b1d5-3c6c30f3bf16",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f9a38306-b8f9-4bb2-bc34-c91cc9d88a3a",
        "cursor": {
          "ref": "727df898-bf60-4531-a99b-cafabf549ffa",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "32c3152e-1fdf-47fa-8610-d0183909973a"
        },
        "item": {
          "id": "f9a38306-b8f9-4bb2-bc34-c91cc9d88a3a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ab008510-7f6c-47fe-9b37-45ce135eb934",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dbb84a8c-0041-4198-9305-25c910f4e038",
        "cursor": {
          "ref": "9a7f6f27-5e22-4106-911a-5216a7478501",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bfc92fc7-e10f-498f-8c79-07bb335cd79a"
        },
        "item": {
          "id": "dbb84a8c-0041-4198-9305-25c910f4e038",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "add88566-ea61-4ea3-bfa3-e289aea63295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f51cd17-63ae-478d-920a-8a7864efd463",
        "cursor": {
          "ref": "13f808ad-50bc-4f13-aeb8-271bafdfe0ca",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "662c8f04-f53f-47c6-a271-94f7834f999e"
        },
        "item": {
          "id": "8f51cd17-63ae-478d-920a-8a7864efd463",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "481dbb91-6944-4455-bde1-73ecb38f13f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee924db-b92d-4ab9-8ad7-803cdf14f9a5",
        "cursor": {
          "ref": "8c523c24-1d85-4658-ae81-0b48077c1052",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d9d4690-deca-49a3-920e-2d54782fea95"
        },
        "item": {
          "id": "3ee924db-b92d-4ab9-8ad7-803cdf14f9a5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "38f30c9c-7ae6-4599-852e-57dcb19ac361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f953a799-f962-48ec-a270-ec0dfdbd8795",
        "cursor": {
          "ref": "deb4aa39-7614-466e-afc4-ccd40a689f16",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4137f1b1-0b9c-4485-8488-f7620d850062"
        },
        "item": {
          "id": "f953a799-f962-48ec-a270-ec0dfdbd8795",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3e29db85-c9f9-4aed-8e6a-1c3d2ee465b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba7aab1-407b-498f-8dad-a6d5bdb14c65",
        "cursor": {
          "ref": "77e3e507-6075-4437-9975-9136b6de539e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "69614fe7-d689-42e7-8767-505fedf48af8"
        },
        "item": {
          "id": "4ba7aab1-407b-498f-8dad-a6d5bdb14c65",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b89ab81d-2d37-4d40-a530-d73be1a0f1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41467be-ac3e-461a-a692-ac6f3c34e98f",
        "cursor": {
          "ref": "adf641cd-2ee9-4f0a-832f-557a3f46780a",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "15b84887-7ca4-403d-a817-3574d63d1279"
        },
        "item": {
          "id": "a41467be-ac3e-461a-a692-ac6f3c34e98f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cd165fbf-c2c2-46f3-9fb5-48fffbebcd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7c9c68-6945-4e59-b648-2bd88d2b8e17",
        "cursor": {
          "ref": "38fbd4f9-6744-4663-8aed-b800487158d6",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5e29a897-8493-4ed8-a347-bdecae3fdf24"
        },
        "item": {
          "id": "6e7c9c68-6945-4e59-b648-2bd88d2b8e17",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "78917a9f-f3d4-4bc1-95d9-f49a9c28f6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215882c2-6534-4e2c-98e4-a085137b0c8b",
        "cursor": {
          "ref": "8745b3f7-6945-476e-b29e-1679e7e02932",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8bfcf0d3-97ee-447e-b2e6-bfe5820af9ad"
        },
        "item": {
          "id": "215882c2-6534-4e2c-98e4-a085137b0c8b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5f43e91e-358c-4fe4-9035-46287a66b832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d88e38-d686-4bd3-8d37-743fc787752e",
        "cursor": {
          "ref": "451d8875-8e7f-4bda-a200-16bea19c7a62",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7f019fbf-49d9-45b8-80c9-1d3bd01afca2"
        },
        "item": {
          "id": "c3d88e38-d686-4bd3-8d37-743fc787752e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "66b905e0-834e-4c8f-a268-4615bd4b97fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2b47d8-b06f-45e9-b937-0dc3cbe23d2e",
        "cursor": {
          "ref": "f1235cab-6061-4a1a-92f7-eab1c9b3c0b4",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9990b22b-010a-4c66-9c3b-51434084af12"
        },
        "item": {
          "id": "dd2b47d8-b06f-45e9-b937-0dc3cbe23d2e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "563a6528-157b-4846-b2cd-9b3f7164e965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e3768e-06d6-442b-a7d6-cad4e1c9bca0",
        "cursor": {
          "ref": "764b8f3f-3b71-42e0-bf83-d67f136ce82c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fbec9ab9-ce3c-4738-aa52-815d07583044"
        },
        "item": {
          "id": "d6e3768e-06d6-442b-a7d6-cad4e1c9bca0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7cd849c8-f180-4de1-b2b6-376ba1aca609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cedcf32-4e7d-4ad3-a41b-3e9b4e2a0404",
        "cursor": {
          "ref": "1975f206-141d-4c93-9105-eae489dbddeb",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "001618df-63d9-4295-a008-6fb85452eacd"
        },
        "item": {
          "id": "1cedcf32-4e7d-4ad3-a41b-3e9b4e2a0404",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0d650c85-ed4f-4c16-bd78-1b072c243e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a667946-6c68-4bfc-9f1c-dd7d3dacfe14",
        "cursor": {
          "ref": "7a866510-5446-4596-bf40-97b81a42a421",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a4afea02-d67d-4f9c-85f3-3daacadc8c21"
        },
        "item": {
          "id": "5a667946-6c68-4bfc-9f1c-dd7d3dacfe14",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ec13814f-f03f-48dc-9279-137c878ead7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1725f5ab-6c7c-4346-8372-27e46b71bdb2",
        "cursor": {
          "ref": "dd6d4351-6ab7-4565-844c-cc9a4ccd8000",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5fad9e3a-c0bd-4cd5-b03e-0d4cacd369b7"
        },
        "item": {
          "id": "1725f5ab-6c7c-4346-8372-27e46b71bdb2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fb9fe12c-4ad9-4ff7-865c-7fec5ebd9e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fee5ed-6014-4ed9-a459-92d46a7c576d",
        "cursor": {
          "ref": "a05eca9b-807b-437c-a859-8a17249cf16c",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ce0ba6b8-f251-4ff2-a295-64d57ffacc0c"
        },
        "item": {
          "id": "81fee5ed-6014-4ed9-a459-92d46a7c576d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e6a8b41e-faf6-4ab4-b120-dda0e72af6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b97231-f82b-46d5-80e2-90c9922cf4fc",
        "cursor": {
          "ref": "39a13c24-e435-42cd-95d6-d8a54f7e9401",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7d5b1703-1238-4585-bd14-4afbedca16d8"
        },
        "item": {
          "id": "88b97231-f82b-46d5-80e2-90c9922cf4fc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ad1792e8-0d37-45e9-a777-34f6f317fdc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1156650-12a3-4fe3-9ffb-9a1eabd29e86",
        "cursor": {
          "ref": "4a801966-2372-4520-bd77-a11b05af9737",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0d524649-5d58-4daa-bc57-560b4529a386"
        },
        "item": {
          "id": "b1156650-12a3-4fe3-9ffb-9a1eabd29e86",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6b121057-3ab2-4f30-ab85-dd0466da829a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583f690d-29c5-49de-bf8b-c266fccdbe33",
        "cursor": {
          "ref": "f24ae78e-f6ac-47ce-b18e-01b90f927f65",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "35a06c05-69f2-49ac-8d60-68222a01e1b8"
        },
        "item": {
          "id": "583f690d-29c5-49de-bf8b-c266fccdbe33",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0da1683b-ca07-467f-bb8b-f97bf5a3c09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0cee44-d7c5-4600-886c-c58f81c472a2",
        "cursor": {
          "ref": "2d172853-1061-4377-bf7c-423d78475d74",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "524c79e5-3a8f-45cc-9b53-a05f11186ac9"
        },
        "item": {
          "id": "5b0cee44-d7c5-4600-886c-c58f81c472a2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a96da727-2d74-467f-956d-4ec7c9f30f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3b3040-a49a-4932-90c6-c6d823411b4a",
        "cursor": {
          "ref": "fe2f8f13-4a0b-4a37-bca7-f4b8b79e5354",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6cc25fa0-7e81-445f-bc2a-2c257994c029"
        },
        "item": {
          "id": "6d3b3040-a49a-4932-90c6-c6d823411b4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "11e7c6ae-9f48-446e-8dff-ee54a3208d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95ea2a9-95c2-46be-914a-6dbdc1bb4b64",
        "cursor": {
          "ref": "3a3bc293-4002-434f-a8c1-ade3a05ff955",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ce9e845d-2226-46cb-b72d-be993663767c"
        },
        "item": {
          "id": "b95ea2a9-95c2-46be-914a-6dbdc1bb4b64",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "136e0502-1936-4aa1-aa8d-dd8253f1c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5230ef00-9c93-4bc5-acef-456db6ca437c",
        "cursor": {
          "ref": "6aa3e8d7-46ae-4531-9a60-a800deb26887",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "dd507512-0004-4004-a2bc-426fceec50cf"
        },
        "item": {
          "id": "5230ef00-9c93-4bc5-acef-456db6ca437c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "63dafe5e-c373-4401-8c0b-657d7e4a7763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6e8b7c-8f79-45c1-8a79-ffd739ee7207",
        "cursor": {
          "ref": "8efb5443-b1cf-4c7d-bd0c-a4c57b89294b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "486f3eb3-1e6e-4c3f-a2a7-42b932ecbacc"
        },
        "item": {
          "id": "ee6e8b7c-8f79-45c1-8a79-ffd739ee7207",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9c95cb9d-7e96-49fd-89fa-c688e4bf2ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688aa7d6-c2e7-4b77-8507-fad73c58414a",
        "cursor": {
          "ref": "71f0286f-ac3c-49c7-af0f-05d0061717ce",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "339c39d3-2500-4d27-91e2-855d4eefc545"
        },
        "item": {
          "id": "688aa7d6-c2e7-4b77-8507-fad73c58414a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cb3df22c-d2ff-48c7-85da-45e3e3db6c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10efc68a-fdbe-40db-b195-45e9b8724aae",
        "cursor": {
          "ref": "79181023-573d-41f3-a49f-166a2a977b36",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "656273d9-e6c7-4093-b96a-15231ffda686"
        },
        "item": {
          "id": "10efc68a-fdbe-40db-b195-45e9b8724aae",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b4468f15-1320-4167-af25-b569a3e9d8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96248093-efbe-4bfe-9071-6e2c7f5d3519",
        "cursor": {
          "ref": "6a6c3c59-9ec2-4c33-ba86-b968ccaa8e6f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a6e7a738-648f-416a-afeb-46701f487696"
        },
        "item": {
          "id": "96248093-efbe-4bfe-9071-6e2c7f5d3519",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9b292090-1a96-4cbc-978a-38f4e3b10a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32a6f82-2780-41db-8cb2-96614ce79c61",
        "cursor": {
          "ref": "279eaf7f-3685-4d86-bdb7-0af80b7bba50",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0dfa8533-baa1-4bc7-ac05-fcb639db43f3"
        },
        "item": {
          "id": "f32a6f82-2780-41db-8cb2-96614ce79c61",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f0773146-173e-426c-935a-9119d320f94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a1582d-f5b0-45b3-b34b-1466cc5bee24",
        "cursor": {
          "ref": "9b89f8e8-2f9d-4ed2-b5f8-c76ecb1dbbf9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bc5b47e0-110c-439e-841e-09eed267ed67"
        },
        "item": {
          "id": "d6a1582d-f5b0-45b3-b34b-1466cc5bee24",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e815462f-22b7-4edb-b4b0-4955c542cca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1e6fe3-9d90-44e8-976c-d8fa75d9c86b",
        "cursor": {
          "ref": "f2723684-56fe-4488-9d76-815e1026f445",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f2207696-9958-444b-a99d-1f33e97935fb"
        },
        "item": {
          "id": "be1e6fe3-9d90-44e8-976c-d8fa75d9c86b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7e21a77b-9269-4bf3-b20b-cd838f23508a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc85c67-69af-485d-8c92-b9bad44bbbae",
        "cursor": {
          "ref": "669b9e76-421e-40ea-9705-111947b6aa3a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5380d6af-211a-4a30-8aed-064d21d7e404"
        },
        "item": {
          "id": "cbc85c67-69af-485d-8c92-b9bad44bbbae",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ab4dce23-6406-4643-94f9-ad07bbc5dde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d1e611-52d8-4386-af32-7e30955427dd",
        "cursor": {
          "ref": "e4a479f4-e4bc-448f-b6a1-aad31c4eae2d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "21df1295-9d4f-4543-a16f-d5dda9e3f971"
        },
        "item": {
          "id": "a9d1e611-52d8-4386-af32-7e30955427dd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7e8d3763-f1b1-4b6f-a7de-33baa41d63f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4abfc05-0815-4613-b5bd-e19af4d2598e",
        "cursor": {
          "ref": "e40e8f36-148d-4193-81da-87d631dd3536",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bacac327-9ebc-46eb-9478-f6f126e4a908"
        },
        "item": {
          "id": "b4abfc05-0815-4613-b5bd-e19af4d2598e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "77591acc-9b5a-440e-a877-6a326b00b0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b74413-61e1-4a74-b855-0869ee265b45",
        "cursor": {
          "ref": "6a2f62d0-fcf3-4f21-b7dc-881010329a35",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fdcec1e4-1cf3-4f94-8f96-4f7360df8378"
        },
        "item": {
          "id": "67b74413-61e1-4a74-b855-0869ee265b45",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8a9abb41-20e7-414e-a2a3-ad6b1a3388d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5121a4c-5ed5-41f4-b5fe-a3e4711628b6",
        "cursor": {
          "ref": "5b40ac49-8cab-482b-a76e-159547531d6c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b6080493-bbfc-454c-8b0c-3e18c5b6814a"
        },
        "item": {
          "id": "f5121a4c-5ed5-41f4-b5fe-a3e4711628b6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9df6bcad-3898-4bf4-b709-b929d62a6e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26a5ea4-0756-4e39-b2eb-a765fea79e42",
        "cursor": {
          "ref": "6f260d83-e124-4e99-9f81-eb5ff549a1d7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "896dd4ed-3825-4062-bb94-73ae232eb679"
        },
        "item": {
          "id": "d26a5ea4-0756-4e39-b2eb-a765fea79e42",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "89043688-70eb-4bbd-ae47-585a7dccd4df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8656aa-411d-42d2-8c2c-1a2abf8c77cd",
        "cursor": {
          "ref": "980e45d0-69b1-4b3b-85af-6144d89ed1e6",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2efc847c-78a2-45e3-aad6-e10bfa7cb351"
        },
        "item": {
          "id": "de8656aa-411d-42d2-8c2c-1a2abf8c77cd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ed34cdc5-90f0-4b20-8657-83f9b519322d",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e96cbff1-1996-44cb-9c37-feb85d5519f2",
        "cursor": {
          "ref": "4f8aeddc-6e8a-4a7f-8a9a-57bebab409c7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ea1f4dd7-d4cd-45d4-a73c-79e574f1288a"
        },
        "item": {
          "id": "e96cbff1-1996-44cb-9c37-feb85d5519f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1409e867-9973-44bd-a3e7-eb360270de73",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf17b4c9-fef9-41d6-9f68-cd18f7deaaae",
        "cursor": {
          "ref": "feb902ad-8c0c-45f0-9c77-7a92e1863511",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f22a24c6-16ec-4543-a371-d6c6ec6bfd69"
        },
        "item": {
          "id": "cf17b4c9-fef9-41d6-9f68-cd18f7deaaae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6f086bd8-7e9c-4182-a800-5464c42891e5",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a5a3e7-6926-43be-8bf5-6116c08cc6ab",
        "cursor": {
          "ref": "574838ab-b877-43ce-912b-fb06dadefe58",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a812ca03-9427-4acd-b9e6-84afbe54ce91"
        },
        "item": {
          "id": "36a5a3e7-6926-43be-8bf5-6116c08cc6ab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fbbd1de6-2a30-4dc0-b3c3-5cbbb076d6f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a5a3e7-6926-43be-8bf5-6116c08cc6ab",
        "cursor": {
          "ref": "574838ab-b877-43ce-912b-fb06dadefe58",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a812ca03-9427-4acd-b9e6-84afbe54ce91"
        },
        "item": {
          "id": "36a5a3e7-6926-43be-8bf5-6116c08cc6ab",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fbbd1de6-2a30-4dc0-b3c3-5cbbb076d6f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f277ad62-e3d0-44ad-9f17-a4e588e27403",
        "cursor": {
          "ref": "46fc5b65-ea90-4ba4-b1c9-b381bbccfd43",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "bfa5afcf-f9c5-434a-80a6-5b367d0363b1"
        },
        "item": {
          "id": "f277ad62-e3d0-44ad-9f17-a4e588e27403",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "576586ea-44df-4043-9825-ada6a35ef5e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a0f9ec-c442-4971-b599-8d0e393e9d6e",
        "cursor": {
          "ref": "b8ed9a3a-fc61-48ea-80a3-d46a70457410",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "663db224-1a41-457f-a02c-fea1835bdbd1"
        },
        "item": {
          "id": "f5a0f9ec-c442-4971-b599-8d0e393e9d6e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9d646cb1-f71c-4c69-bbfb-702c7c81893e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}