{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "362d415c-33a4-47b8-b032-6d6a742cb187",
        "name": "Clear Cache",
        "item": [
          {
            "id": "58b0c5fd-3da5-4af6-a6fa-510c0dead4a3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a10f532-0ae5-4e2c-a4a2-df2a5b98ce5c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7cd77324-f620-44a2-b1a5-ef0be4a0dd3d"
                }
              }
            ]
          },
          {
            "id": "80cb04ed-6019-4aca-8791-8510c5ee07bf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d06ba9b0-97c6-46ee-9a7b-8078ddf081df",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a9b7a97b-855e-4d69-8ba3-e1c29fc9ebbc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "59f2bd7c-a50c-4cb7-8ff2-8789b9b88540",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9ab77012-1393-4702-bfd2-2f5b0723a3bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6277a26f-661d-41ee-afc1-e4c60852d520",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ed7b5f6-4f49-448b-9dae-63c66255f3b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfc4b035-078e-46c0-9435-2f5857c0ce3e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a266bb18-c98f-4e83-a4c9-3bb2f6c62ba9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0bb746d6-2982-42f3-8260-5f5760d57ad3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2977fa79-a8b4-4568-8d67-49fe232c75fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54f8a85e-398c-428c-be46-61a106cb4863"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eceaf206-e17e-4755-90ed-b5473e9bf563",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "14824994-ded7-4dc6-b309-7ba37559ec5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b46cc15-d98c-4ac4-9fe5-94c816e5c6f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08526e66-e6b7-42aa-9eca-869449d298af"
            }
          }
        ]
      },
      {
        "id": "aeede729-1beb-4bb9-8a4e-69aeb75c7fa7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1e477637-f994-411b-823a-aef2f31e2ea9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50acaed9-9f12-4200-9190-0b519e0d69a0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4df080f0-3e4a-4f9d-a61a-74c7780231e1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25257f5d-618e-4d0a-82d5-944b1a314923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46a477d9-b160-4462-a7bd-1d82a8212209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c163c72d-1db0-48c6-8b16-6942ded76aaa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1e87c7-c39b-4182-9073-ba58ee3a3956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ffb07f8-995a-47f1-a5e4-bab8b51219c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da320d05-b684-4d31-ba1c-970e5dd686d6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87633836-f8f2-4ff4-b6a4-7edb1a4327cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e41822e-a8d3-4725-bfdf-ae10bbb419bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed1e0bc4-b9c8-4999-b296-7886187646c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "867b6630-6771-4b20-981c-9d9e6e42a4b4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5238a2-1230-4348-92d9-42eb1bf5b556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39507291-c9cf-4c11-b336-67ddd3eb73d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4976e07-aadf-4ffc-9189-901a7628febc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7066b5c-308b-47ae-8239-d693b8e437a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d61f157c-b5ed-4f0b-996b-9cc01f8a894f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "76d67ed1-13f1-4afa-b0f3-9f0cded4d000",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc107c1b-9e1e-4f64-9dc4-2e14c1860705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c4ff000c-85df-4971-bfdd-eb8e96e9ba6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb7bbe3b-7450-467a-a6e1-2333b1f07ccb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6286e3ec-c51e-4103-8a32-b0d398e46ead"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ff1ece0-765a-4bd2-a873-5dda91f96fd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27615e69-6944-47b1-bdd6-3955d2f5169d"
            }
          }
        ]
      },
      {
        "id": "50ea8d9b-0aff-419f-b97f-8d8697714a9e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c15e1c98-b6c9-405b-8c4f-42d1984bcd16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fcd2875-7cf7-43c4-a53f-32cce3e3c427",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "405274bc-9551-4fcd-9e44-a5669889a1da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fa18f1-3d92-4ea0-a749-0d58fd0fb6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442b1e75-fc25-4e73-a88f-d719e3b737ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2260816-8eec-4e1c-8c81-096e5beda872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "660ba2bd-6a30-40a0-86d3-60293bd4c501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f80bb4f-5daf-44f9-9e93-33ea635bc1a7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21831303-6dc0-40ab-917f-42886c1ba25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f274aa-0c45-4155-90ef-c19907db7ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80984a6b-ffcf-4bcc-aee2-233e69c19179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06b6d2b6-1c57-4d78-b29a-b7f71ed5bbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6af117-ac5a-4daf-ae7e-161367079e2e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc4b2b0-5ca6-42f2-bd20-c7b871be4bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a89b4e-2acb-4d41-9043-da1984f4a416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c03cef4-2949-4f42-8ab3-7e23cb2fc298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2d0dd85-0578-4b0e-ad67-fc4795e0115b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e7be63-7c6d-4168-b290-c6e054163206",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94648eb-d503-4260-a810-d3c8b824d16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0e7cc50-e0ea-4001-a937-b809f610f6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02176e9-2e0a-4744-99b6-ecc680f03658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e97ee21d-89c9-4cc5-88c7-1c8c3f777e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43bb6c4d-d935-4e3d-b29b-da0f1279aa3d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2392373a-bd77-4cb1-89e0-37d6dfecb70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3925eb8-77a0-4096-b378-3e7cebe37665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ab6def-31c3-4c8d-abe9-236be4410b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d2499cf-4549-45ce-84f1-028e7e4cd93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6552c8ef-50dd-4e14-b7c0-200eafca016f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09145acc-7965-424e-bbf0-4e8b036797f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b40a23-7347-494d-b78c-b70a99ad6e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137ef63b-3a23-4dd3-a667-e8180b824490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d97473e7-8052-4e16-95ff-fe8b7e5ff623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b781309-cfea-497b-b5dc-fda4a5082285",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a8a5c0-1775-40e7-97c7-3907005ba4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d3d76a-48a1-4077-8a5b-8abeaf6f562e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e39d2ee-3720-4d04-94c0-8b06299f24b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d399c08-6605-4eaf-8f8e-1994630dc568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca72da7a-f705-4730-bdf0-624bd2e3affa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66188e52-9a06-4f04-ab8b-176ad4dc2311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e23dc6-4be5-4338-a0fe-bac0d03523ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847dec0b-e091-4ca5-9da9-50f52c820a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cccb49a-cef9-4a36-a00b-74179ddf5782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df022f0d-ede4-4e7c-8385-ee3e415e36da",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21059a33-91bc-447a-8432-e2d828d8e97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3ba4ec-612f-4191-b846-c98c31d089b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b83ebe-845a-4b70-abf4-b17fbed4c76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cc60f43-d763-4801-ae24-b2c46147ebe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa41f286-4a21-483e-8f07-9b5f6310c0db",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42436a83-8a90-456b-8045-fea0cddc4cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4388e990-4bf3-480a-a098-4aec9a83d986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd8a33f-6d70-46f9-b485-3203d372fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cda1a4c-a85c-48c5-831b-982970a104a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfc8118-9bea-4bd3-af13-f7fb398dd3aa",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea4e1cc-ce1d-4455-a353-e938e9cfa8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36995cd-f6a7-4e60-a6e6-8699916135f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74385ee-df7d-4138-ada6-792c83942a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14048112-48a2-4e98-8fcc-33a0f732bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ce3b3b-90ad-42fc-a686-dad6b4a79ed4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da69046f-9452-46cc-b850-6f6b8fc1af93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f7f700-d00c-4435-a8fb-5a62000048bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1897191-50ce-4185-be78-e045cded6877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5148fc68-05b4-44dc-971f-0c35843256b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c38453f-8320-40e5-9db9-6e8863d609d3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2046d7-9a5b-4a39-aedb-e8438a28734b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd190c8-ca56-4e73-8ae2-b45f037e8e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3032b224-026a-4634-a8b3-4503522e6a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5573d247-386e-4510-9abc-9e8ec1a19509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155e5a4f-7c78-49da-806b-c8ce1a4d7491",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b33e81-387d-42d6-8aed-148b6fe92a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfded09-5a5b-485d-aeff-2e70802d7fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b8db26-43b6-440f-97b0-c524c04e5d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e20847ce-5da0-4841-8c7b-81f677e5317e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d313a26-5407-4c1b-863b-3ea239553286",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c728f106-26f9-438a-a102-edca8fe280e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11adb0ed-8a63-4a4b-bf98-3f20c29d2cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ca755d-f48d-4385-b88f-c02743ccef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f9f1476-958f-4683-a25b-2e6c1fca5b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b736553-1e67-4a54-bad5-9976dc3cd1b4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d331e163-1ca7-4747-93f6-e69b5ff5046e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10bdc2a-dc6a-4678-8ac7-4bbcb185a6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455a288b-f5e9-42b6-973f-d9584be0bb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77e3f221-9a28-4577-b274-b84e47c0e955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf1e69d-abce-4050-8957-dec38daa2c0a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df37544c-26ca-417a-8961-f70b485f7538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393c7598-d077-4264-91ee-f7ca2f86ab01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fc1d5f-ddb2-4af4-aceb-e53e650ccd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7bcaf78-1e1a-4428-9d44-00a466ee08a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb1cdf3-8a89-454d-ba03-0da107654218",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dffaf87-d45e-406a-8c6e-ac5c3914156c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98506542-ba92-4d86-9baf-dd64ef9433bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4063930b-51ea-43d8-81d2-bf91622db5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1da2491-2bc7-418a-abea-07e67d98c4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dddd9d6-7bba-4b3d-a77d-90c51f9391c2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbb01f1-bd8b-4dd1-a53b-34afb2b564ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d43f5cc-262a-4456-8d6d-e1c3fb8eac4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8816fcaa-b9ac-497d-80e4-bc2f228e7a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9beba0-75a6-48ee-9174-f1425956250f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd9bcba-239b-4a73-aefb-493a2e4eb9b2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80084064-f7d6-4d6c-a761-100eb8c3a104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3fad3d-82cc-4286-b292-d8c42e8ab2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d9dbd7-5662-4199-bf63-ff9409933295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9025308a-c4aa-4f23-8d60-6a075cdb9441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36afd5c-7e37-4dd3-b9c8-9a88d8d08fec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49330e4-3149-42ae-b4f8-c27d86e1b4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672f643e-84b4-4478-9155-974bcc6c8e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5c1039-bea9-4018-b469-e2de12b6aa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1c055a-e94b-442b-8c37-4233735440ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4953f621-d1a5-4d24-a0dd-4b5a3da3b43a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4929c6-8a29-4037-82a7-3e2bb662c4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f17b99f-8173-4c14-81f5-cb459a489ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e03dbd-3be6-403b-8657-083eb8031a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efac5e60-57ed-4000-bfc7-60e89c3b815b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf2d8b-b032-456c-b9cf-117055e06123",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222277df-4daf-4b62-8cda-aa3b8801ee17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9b5264-64dd-4196-b1ca-e43df22e0cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0381a01d-a6d8-4b9a-8e64-034cd67320cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "164ac29c-17a5-405a-9eac-cc9c0e7c5b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718a557e-5435-477a-9496-5f3672e95717",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a486180a-c222-4166-aa4f-89ca79d3bfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c56172-d23d-4b58-8cba-db748c6202a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f47f2b-15d8-4219-84bb-1e562507d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a7e2f4-1689-4a4e-ab50-4fe5058904f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bd9090-d28b-413b-97aa-fe483647a63a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddc97b1-2470-45de-b181-185b8282acf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560cb328-51df-445d-b06d-c5e77b86b8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9794529-5e99-4296-b15d-37e14595578c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3518e27b-0574-4b76-8d2c-75fd376c1917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b094ce5-5d95-4212-91c0-6fe880fc56f2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a02ec46-1100-4ca2-b36b-d69d216cdb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbfa1eb-e65c-4217-bebf-cf192e243ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bf2a30-6120-468c-aa66-852592363803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3362eb0d-9a9a-48ae-9063-94db706b8665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896555b8-ec70-4626-b72e-f060c951a88b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c03f97-3df9-4bda-8ccc-e0ab4d3942f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf8971e-2e39-4e16-9cef-cc95128a1b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474adbdd-5656-4c75-9e83-3e16bb658c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df91bb2-b164-42bd-8fe1-a72112d0fa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fcf13c-7722-47ad-902f-cd5c597c0640",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7291b574-bf6d-4809-9dcf-d7a7cf643694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c14d7d1-4c22-4cdd-99b4-829e8d3a4ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31504175-1b40-4139-8f6f-546029e26369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0055350-8bc5-48bc-9f1e-5c53ec9d02b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9948ffd2-c07a-4220-bcbd-6d258cb0dd28",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abc185a-c5de-47a4-a3b7-e26312258832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e8c351-6f72-4381-8f32-94c1a1b17382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304a9a4b-33d6-476a-a5ad-c26042c88030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0e177d-4171-40d2-9b43-2c33e7100011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d82aadd-ac7b-4d0d-b532-62ad7763ee8a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11de877-4899-41b6-9a5b-e505dad98605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9709dab4-1174-4ef0-90f5-1fdb77b48ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24b001a-c921-463a-bbf6-50593e7a6ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "47f7e3ae-e96e-42a2-839d-dc499d2fd59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f626c9-af40-4bde-b42d-d301bf71a24d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6bef6b-c6fb-43ff-b6da-e212952d8c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62502ce3-58f6-4c7d-92aa-3ce03f74e7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f53864e-8c9d-4ab9-9907-a2d57bf1bb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13b69346-91d7-439b-aa87-292be15d2447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6259a185-a8a7-4a9b-a619-69a99be2a626",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6020a712-9741-4f52-bc5e-9316af178930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e9ec88-719d-4a82-985d-d456917ab7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46980ed1-e165-48a0-9f90-2738ec8fd4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81002483-be39-4958-b772-2f178425e09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1218db6-d9d5-4866-a1bc-798ce65a3c91",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68d903d-38d1-4002-a7f9-9c4ff893a57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3375802b-bd39-46bd-97fd-fb5522d0dccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd122c24-707f-436a-b572-44aaa87b6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34fe4b51-d99c-4763-bc0c-82c3d3c92b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc715078-cc91-44c0-b428-13d9db170e4c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b9e288-c878-4f04-817a-973c6d29ce46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2dd056d-5b5d-41f1-96cb-8e63a280163e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960eaebb-9b04-4389-8d7f-4e0f37e6fe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfb17e6-7d21-4fdd-8c06-7abef3182777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92005398-6760-49a1-b05f-677fa032a221",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadf0d8c-92ef-4a1f-b72a-cad6cdce06e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bd069c-e0ff-4b9d-a019-7bc1475aa130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb452539-b6f6-4b95-a9a3-111064a83e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8583c5-0fdc-4c9b-b12a-ade4fedd0dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8863656f-1447-47ce-982d-a18804d8d010",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41e175e-cb2c-463f-9cd3-7ba874554100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5eb95c3-327b-478f-9cbf-b124760ff4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff7bf6c-7644-4566-a3ce-b80a138a688c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89dedc61-267c-455d-9c2a-d8a563900098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc6d442-b7dc-4753-9908-1d46c9856767",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e1e111-455a-43eb-baa6-716c85089a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e5628c-8993-48f1-926d-7b37c817417a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58569e3-9c3d-41a6-b615-c9c86998cbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0847ec99-1894-42ac-b392-44f9862ade91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976eb969-cc68-4891-84a1-892027139d55",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8c6634-947c-4027-9e66-bd7630c0abb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4152bc6b-a850-4060-bb49-0444369b9169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4214ab2-dbf0-4d99-b4b8-85cd7f877dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7b7e80-84c3-48bb-a17f-0d047cc83dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d5ad0d-2194-4f0d-82a3-f0e2ac05b51f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5405b9b-833e-4f1c-8ac2-34796e36f199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ab3b26-058c-47f5-973d-94fbceaff9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f45b88-0dec-4c94-8a42-36b4f31736d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1da1dd-a40a-40f7-835b-752ad5641d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b83f2f2-8670-42ab-980e-9c28dc745407",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bd69c8-8444-4ece-8116-c5ef47c39a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4836e77b-9cde-487d-a1f8-be9a5b79002c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b655887e-6a89-47df-a2bc-e2d7f5bfe292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7761792e-b690-4c8b-adad-e2c6ef87e280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f58ade-f451-4fe5-8ae4-5131533c6599",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c0fafe-a263-4d4d-838a-fe106d152fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f076ba1d-bd8a-4a8a-9afa-2bd6da3af604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92b0f05-2c65-44c9-9054-25c6d7ea8caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a699c539-caa6-46cc-aba9-4cbb206c7d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1c50cb-338a-4265-9023-91765af23b54",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e34114-c5de-46c4-8ec6-ecc7b8f83b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95161bb9-4fae-4957-b5cc-cc4342f5ba20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15332f01-1305-40c2-85a9-0e897dd8b20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3415b8dd-d2d4-486e-b523-d3e10862f95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104a8ab8-55ac-46d0-9ab2-2af6d2ddaaa4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2da6d2d-a585-40fc-a9f9-6ba73b8ca334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e414f4e2-0833-4961-9877-4dedce097293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c047414e-adf3-413e-98be-3ba99b583b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3a0e8f-3363-4f11-bf06-033958988479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb00b1c8-31d9-413b-b85b-3990e6527d5f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365d11a3-96fe-42ef-9105-9171289dbab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f48ed8-4af6-4045-8dcd-cf2b849b17ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b264e288-0bd6-47c7-9758-a9e507450b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d78d527-08b7-4cf7-aa0d-8ccbb1e2ba9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78590a2f-a2bd-4c3f-bf71-ca1d146f3a76",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bee0ebe-cf6e-493c-a99e-6fa8a9313483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5620e6-c4a8-48b4-aa62-16f0fefaa199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22935f59-0136-4008-b393-987b2110a4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b663bc6-f786-45f4-8ebc-f4b17acd6719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53825cbd-8988-43d2-97f5-0720c5c79c45",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6bef8b-b452-4a59-95ae-08a8fa3703ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28345b61-05cf-42bc-a822-0e3844b4576d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d482622-a142-4319-adea-08b6224c7023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9056785d-e673-4182-8867-e60fa4a0ceec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e526b5-b528-43b3-81a9-38558405ed1f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3f7ace-1d1d-4dbc-b2c4-88a55ebaa7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2799049-c89e-446c-be9b-130def8c4ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79077319-ae9d-4bc3-9856-6e74efce3037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ebc4f9-0512-4d8e-9ef7-72d01ba9a34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c655bc5a-7d4d-4bce-953c-5439fa37018c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9de00a-3836-49c8-9c1b-4b0c3efe644a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a8e4f3-3cc5-45de-8bf6-169f81c570aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f8d2a-96a8-452f-b4c6-a440c206f645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c3f1da-bb53-4139-8362-27c00671866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cdba0d-275d-4d42-b959-02aec0b79019",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed81758-811f-47d7-a3c6-b08fe73019ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af438c8-1351-497e-b83c-fc1bd2ed26bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c587caa-2c20-47b5-82f1-a9e79748ac29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11363cc8-638d-4b3e-97be-5db3399dc805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de27e4a-dc6d-4be0-94f4-d333ff6adb01",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab3ff8c-1b71-435a-ac0e-7967ec75e332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a14145-aec1-46ce-8dce-88615dc4c75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efc7992-a889-4863-9a03-1d4831c73b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d10c34b4-5b76-44dc-909d-0b8166bbc9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f40962b-dd5c-414f-944d-2c961cf9701d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faae4ae3-2aa7-4415-8920-9487e6a5dc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f1173a-cd4c-4927-bc16-8a1663e0b6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe6029f-b5a0-4c66-849a-5b6fe49333cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "de65e9fb-22f9-4e9f-bccc-fe897a00ee27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978ca4db-2002-4a9c-a54b-b02fbfc79736",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf17e84-beca-459e-a85f-5a4d29feec46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7784b25-7bd6-47b1-9cda-7d047ca2dc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fc94cc-6aff-48c7-b28b-db4b489ad62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "265467ae-62c7-4741-9195-3dd95bdf30a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f2fd1e-dca8-47fd-8f4b-a4981718d0d0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60df183c-7880-48e2-84ed-bae0a158a3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e0436a-0bcd-44fd-8faf-05effedeb96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bc03ef-99d2-4a05-86f3-61a4c1b04512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b1af69-1804-44d5-8e39-8a558d2530dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8816bf7b-c016-482b-9dc8-e0a462d1bd9f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c654c2d-26f1-4a66-97f3-103db1dcc73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b320d7-df6c-45f6-94da-a7c1545e8dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da642b8b-3725-453a-b145-f5b5d44b099b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15ec2332-430f-4a04-943f-07524ab7da6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390f1478-7a1d-4320-9f46-b041933dc7b7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1101d98-c628-47f3-9439-1865bcc60b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7f5cd2-b54c-4f12-a177-d64e80c43872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0e6274-6b34-417a-b291-9f22049acecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9a652b-c3b8-4dbb-b7f3-c31de98a1f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee7871f-21ed-4428-8bcc-805e86d4e5ab",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4787c6-6808-43a3-827d-10f6c9826e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0712fd9d-74a2-49c8-8edc-09b9f79def7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef7c8fc-0254-494e-8f96-0c533f794ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "266ee824-b573-49cb-84af-3b5bea81bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834ef6e4-f511-4334-9a95-4122d05700eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddf9657-1679-428c-b32f-d96e4a9fc483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a487ec-2ed4-49fc-b0ef-00a0878eeebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd92135b-0747-4a4b-88bd-3cd488f0545f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9325cc7-b567-4d57-b8b8-a70c91a7e400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12d31a7-572d-48ce-a83b-a26b3b895a32",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a13b24-c873-48be-aeb9-338cd8e42495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcc3d40-4bf0-4a4a-8b74-e00b42a84dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6891c96f-df24-421f-a124-d42f9b71bf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8422d5ad-ee53-4502-a0a9-413c368e1f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360e95a7-39ee-4f37-a682-6488fedf7097",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f593cacb-ec5f-4d4f-968b-deec1855595e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1edee41-9b99-4d38-90ca-58ab0a491953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db0b21c-166b-4a00-835c-be32814c5a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "989e2503-dbbb-48cc-8cfa-d701dc0f598b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b58019-50f9-4fde-b61a-23c99680cc0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ead3e88-1fd5-4f60-98c4-cbf0169122c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62517062-47e0-434d-b761-8de99e5171e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab35e7b3-0d4c-4e1a-9c44-177fa9473934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e4a290-c263-4b50-b58c-a70dfc3cb120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936ffbaf-d4ab-48c5-be72-10e35d8f3f71",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8205858b-3dfc-460f-9eca-a0dca09eaad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13896da7-bdbc-4a54-bf3a-987f6b8cdd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8429e4-bfcf-4305-9b6b-2dec23057fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e13e03ee-bd18-4e53-a21c-841933231fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8826596a-2e87-40f0-b738-e17fd9e56047",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b375f82-1d60-4574-a75f-3ac4230488a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4e681a-7a74-4edf-b7b6-f215c3adb45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220d3fc7-01f5-4fd7-a1f3-6233346a92d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e63ce71-7b8d-492b-afdb-88d46eed1131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00f686b-4597-4a0b-a1ed-9da30adf113a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7313294a-bbc9-430d-bd38-b9c5bc73e55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5a833f-1b55-4cad-a831-7149db0e21e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231361da-047a-42d1-ab95-1939d2456b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c762ba5a-a285-4dfc-85f7-dc77992ab2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9714bd02-eef9-4452-b986-d5f7874656e9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49252c42-8a83-416b-92c8-e5798e94c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2041d0b8-29f0-474a-85ed-90ef12ec505a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f47ab4-fce7-4cd1-8a44-783a3bc1089b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eecd7fc0-95bc-4ab2-a7ac-89b7c0be7f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e912f8-8808-4300-bb9b-f38207b2ea8f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f4b699-534f-4d7f-b9ad-c47111222baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92588f27-da65-43f8-9498-9d0aea10fb3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8be2cb-5da4-4c2e-9ab6-df54af1c8504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14c8225e-cb11-4005-b0dd-1163b94856ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612543c4-b3d9-4e93-8413-2ad057b42d6e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7cca21-17c4-4cf7-b649-ac9c504dcb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e18365-164c-44d5-b619-ff9807d3a020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bfdc99-92e3-4966-b940-6659fe1a45b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d1b4d0-1f04-4e7f-81b9-2f65de03ec1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea4e38c-f8e1-4711-ae96-e27aa7d59448",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0403c669-21d3-400c-962c-208ae9b8c0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313063e8-0ac3-43df-9217-be493bf665c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c241f1eb-2fc6-4f0c-905a-bb78b8374bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc681e5f-2a3e-4d96-bfdc-3775d333d635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a07468-80cd-42e8-8ec3-978268c73d71",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6976ae2a-493e-4d0f-88ac-b1a6e70ba65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b43717-94dd-489f-ab35-e61e762397da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f881006-ac9e-4f0f-9643-5b49ddb1539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "be539e1a-fa03-4e3b-b675-89d91890fd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ea5994-fbd4-4a48-bad4-8e00ac88f125",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c92e52-75b4-43bc-b0ca-e7ae6c4d5227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6966b03-44ed-42b5-900d-76d570ae2032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d26c82-d817-4898-8cde-493ed723fdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35de3a5c-48aa-4efd-8a4e-ea2f0a43ee0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0541f8ab-53cb-43f7-831e-d32afaba6700",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc2c144-bbea-416f-9d1b-ee60859f3242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0523ac7c-fe3a-4b28-8358-afdaf5b1513c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f58de6-6d39-4da9-a66e-04d6cec4cb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9107d75-aef6-4a2d-9290-9216419a1a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c56609-1814-43bf-97d1-4eb6f7469323",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aa0132-63eb-446c-bd19-aacdccf1e8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b988a820-0582-45d2-af9a-9e1e0998fce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76ff9df-089a-434b-aad9-a5b9921e9531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc988d05-bdae-4349-833b-9805071a2ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3879fb-57cf-467f-b1a3-5b8a6b4a213c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd78aba-79fd-470e-8432-a3e1cd409e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a7bd9a-4516-4969-8357-e90ad5a51002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075b98e5-ace1-4ec2-83f5-1e73bd30a1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcc411b-594d-4711-88f1-4800f82791a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beebd5b3-1503-47ad-a86c-e4abc450d1f4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17c0b07-8b7b-4ca7-9a88-a4af70055e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d94c805-330d-43f6-a231-9267daf97680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38fac62-ec39-4f7e-94a8-e40afd2908fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a22452-3c5d-4563-a36d-2e8da1be72aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55e8019-f9f5-46df-a832-fd182f672bdc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6514d993-58c2-45d8-a750-f66d022d7afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f26cc8-f14e-4765-aaf8-201e306c3cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3841f560-54ab-4aee-acce-a0b9fa3105ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff9517d-16d2-4935-a06b-3491ce694377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098084a3-4fb4-4ad6-8274-cb13626b0eb1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36e43b5-1580-4231-b2d3-be6a2192fb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c72733d-25e3-4439-a96c-51a96363f112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b7bb6b-97da-4d7b-8485-1f24947eed18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f611e66-3e14-4daa-8993-1e92fbffbdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead6e047-6e1c-4d1c-acb2-043b3a7dc20f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256ae72a-1957-4c42-862c-ee967d90f99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33589834-a48c-40c8-a4ed-36fc4e0b7780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea841fe8-afc5-48e3-a4da-e2f8329252fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "971c77f0-446f-4ab7-b398-ed46f7758f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fcc738-2793-4a25-9540-ebe859c1edaf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4289c92-7048-42e8-900f-51ea4acaba07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f98fe-96cf-4923-be71-3b97aea09f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4c89e7-2089-4b93-b3b9-85406d0bc1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e29b5c-1d83-4644-bee8-71222a1129da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb9a02c-487b-4a6c-a469-c77415cf7dc1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b47a9e5-1803-4773-8b51-c929f19c1467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd78b0f6-589c-4268-ac82-0dace886a5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e66394-3d91-4701-9e73-8d922f6d44a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14afa05e-a894-43f3-be68-24f62301d2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5634d10c-2056-431f-825c-ea53260c2d8f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b19a70f-a795-4597-836b-b25f41850e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0773a493-c1d9-45dd-96bd-3eece0ad2f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6022200a-edfe-4d7e-9c2b-2269e3321b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e19bd1c-0f04-4a66-a642-fa25b399bfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a17603-26e0-4e72-844b-459fab54cfa2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0672e8a-75a9-40f5-8195-4d1ef0f14822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a7f332-e129-40cf-8bf7-c50daddda39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc69f01-813c-4716-a488-ce21564e2fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c03a6e-c8b1-446e-9f57-d08a4331ac8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8909fa7-6971-4aea-a8d1-031fb49f3991",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3fa877-f7fe-44c0-a160-d31a52c41534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04099c96-542e-49af-8e24-7b8ddf73af01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9f307e-9c2d-446b-bb15-f833d3735af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da3207e-2409-46e1-bf49-5297b681fcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df00d90-d7d3-4003-957c-0928321f3a16",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0086990c-53e5-42c6-b7e3-1d2bc5ce43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb84589-cd31-401a-9644-12d56835135a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b8e7f9-d637-4124-8df1-f6164478055d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef190cd7-0d30-48ef-bd5f-8ce44a0dfb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8058ede-825f-471c-b9de-43d590149037",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebeb652-e037-4c3e-a8ce-c1e1570e475d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0968b7-d0e5-4f6f-8377-a7bd00a53339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af88d2f-4bbc-4506-ac38-53ca289bf8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eacc05-3739-4b79-9a80-5840fbd2db4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7743ad4-d1eb-4718-bb76-dc977e871237",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f89a113-c07f-4cbb-9c05-42b1a1fd156f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e7f131-780f-4f93-9a11-1d2999e7d43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a69669c-fd36-4e17-a89d-cd6f2f2ffbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e91917-8c01-4a3e-a9a3-0a225796bc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af23db30-8f96-49f2-96c7-c4798ea9252e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c675ae-1d14-4717-8007-12d0e0824a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d7352b-fb76-4e96-bec2-70a1be2fc96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8819fc22-9898-4586-a6ad-a41849f9eb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9db1fa-c83e-4b52-9af5-54735b0d5305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d9a6ee-8397-4047-9325-690a368cf6ac",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac6baf3-00ba-4954-99e7-d5670f85720a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7979036b-d748-427a-9b64-49b7151f3492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d690cac5-3718-4196-924c-54595de66f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9be1961-5a25-4af6-af79-78b5d80e2469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e5bb84-5271-49e8-aa93-91e4b7fb40e7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f2b92f-eedb-4ed7-b9d7-8beb43947b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c78eb3-fe65-4009-8d7e-af4c0b1e9af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4337a29a-536f-414d-b674-b8ed3f7d60c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8d2436-1d3a-4b92-86c5-7d4047f116a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6dda76-e373-40fc-be42-7e771dea3d43",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfef7b22-e792-4c2c-bd1d-11400108db23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db11c182-6415-473e-b064-6accf2ea61c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a632d11-f62b-44a0-812a-55f4a350951a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "021fb30f-aef9-464c-b121-74edb7769c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a702f4-98a3-4c5c-941b-81f590e2d806",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdafa5a-4c0e-4442-8707-9f22e1a1e23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab3cfbd-2188-410d-b928-1b03bdb0bd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e581dc-ddb1-4caf-bdec-48c9845ac987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbda864-25a3-42bb-8c0b-7ddcd4d9496c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfbc8b9-9b52-49cd-bb3f-af17a32cb658",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb228af6-636c-4f1a-a85e-2e6d614460b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52a07bf-d9c9-489d-8b78-f61b7f6d7fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7ce7fc-046e-4a30-804c-318ae04aacdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa7731b-e86e-479b-b286-ae03147f5a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e789e323-c34b-4a54-a5bd-0a5026d460d7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b748c7b6-31ca-4d9e-a227-678639808ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f82c31d-1066-4006-ba01-f5cb7dd7f138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b98867c-c16a-4e89-a1d0-0f156ff342e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b92deb3-341d-410f-89bc-f7c6b4ff7220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93833669-4e42-49b6-a3f7-0aa9468d48b9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2581af95-d21b-4170-8451-f62b47f7fd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c9aa3cfa-2231-4f6c-a6e5-18d82f21b6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7ba878-91c5-4367-9242-2d4ab3c0e1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f81bd2e-1ae6-4d7b-a987-ea53a80c1b62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dcfe1c09-6822-4bac-a040-f46a1f1db30d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b040658-33d2-4b67-aebd-e0bcc9c4e285",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15cdce-904d-4117-83b1-1bdd568e45bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1873d4ea-0ee4-405d-a7a9-c8762b6e49e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cafa20-6a22-4625-b0b1-71aeea367790",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bc88bd5-59f1-4a92-97f6-8befa7c0ca2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "644ef861-c43b-4782-9c46-a5d740fdcd5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3156e1b-8ae4-462f-8ea5-42749f71b9d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d317263-7021-411d-8009-00d9a265c517",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d72cb9d-d087-497e-b475-237f3e2a64be"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbccc847-025b-4fe8-b914-1cf921f5f0bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09d70911-f249-4ec6-9111-9ff083d136aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba1e6b2e-f915-47f4-b302-1d8ecb842854",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a97a46b5-604c-4b17-a504-29a0f3e05402"
                }
              }
            ]
          },
          {
            "id": "72047b36-c0cc-4ee5-a099-5c03c72da3c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7da950be-f373-4779-b55e-bf80cef6752d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dff3810-cd39-4ad7-817c-dd82c79ece98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51a3dcb9-3b9d-496d-8597-1d117737b7a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d887512-e19d-4fbf-aceb-b81e34c9fa01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0591f80a-5b54-4523-8269-4ebf5bb8c077"
                    }
                  }
                ]
              },
              {
                "id": "bf2989b4-ba7b-4cf3-bc84-a99739eb22db",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc49a11b-2cbc-47ea-b4c8-71c57741265a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a5f78c3-82c1-4fbf-bf89-9cdf9dbf260e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "050643f5-4e07-49e3-ac82-90271aeddd4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e4855d7-071a-41d4-8b0f-c9297df25aac"
                    }
                  }
                ]
              },
              {
                "id": "99bf9cc4-83a9-493d-b19f-cd409afccd83",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "432405fd-5e75-443a-9490-dca780b7e579",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66b027db-50cc-45b6-b404-7494dc91e86b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edd39552-d6ad-492c-b212-cbd0aa7fe54b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f79d8578-ac45-40d2-9206-092fb491c6d0"
                    }
                  }
                ]
              },
              {
                "id": "e85a6b05-f26c-4d5c-8709-303327bb1694",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b21cd132-7e2b-4ce4-88e2-933f69d83449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a11fd56-a8a2-4962-bbe7-ce3b1c9d16aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "416f9f85-60fc-477c-ac11-2ddaee8e4fe7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "160573b5-cd83-45f0-8036-8d6e6462060f"
                    }
                  }
                ]
              },
              {
                "id": "98e4ec5b-50b7-4779-9e84-ba5223ef1108",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6a7e731-2738-4f8f-8ae0-0c5215c925fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "969ce2d9-62a4-4846-b387-6ebeaffdc924"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c823835e-0e74-4189-a0b0-19864d0e7127",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ac661ae5-776d-46dc-bdec-a6f1439bf3e0"
                    }
                  }
                ]
              },
              {
                "id": "972eab52-dac7-40e8-8f0c-98b46caac928",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e524a1-cf0e-4ec0-b23a-be3a12d2362c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bec1f2b1-a94a-4b9d-b451-37980c553d2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88116dad-471b-410a-9ba4-dcd30c9ba941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0989e43-0696-4f77-a5ea-2e8217bb2d4e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b3c2c1d-2f80-4bea-951c-aa51a3d43722",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fbcadf1-c8aa-4ba9-92fd-10ecb9f6ad40"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4de61d5a-cb61-4c5b-94a5-2188a880bfff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "424446dc-5ef8-46e9-a36a-352f9c860068"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84334b67-b296-45ac-b029-6382be62e2c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d5ce19eb-e093-43c4-9f64-864af84427b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c15d4e9-09a7-4870-ba3d-27e6b5e79be0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95d8d85a-94b5-4b45-bff4-07af781e50d6"
            }
          }
        ]
      },
      {
        "id": "e04dc6b4-5526-4b39-b2ad-aae5dfcb9f09",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aea242a5-b121-48da-908e-0387d80f91b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4359b46-9086-46b7-91e1-e1d8b75d1d77",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5656209-6451-44f4-ab8c-56ccc2fdb5f0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e650068b-9279-48b2-b30b-16ca88c7f4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e68ea77-acb5-4f61-b10d-e2f1675ad704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55c19a4-291f-475d-a7c4-758c24e75efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a530b808-fbef-4b02-a0f9-b986abb3c66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b737ea75-fcc6-4811-b14a-17cf6f1ffada",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799050e5-5260-411a-9817-36a687ae382d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635a89a0-d207-49e0-b37c-39ea0c271ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a289770b-4529-46d7-be34-dc627315289b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78bac58-de34-4c0c-a052-627653f201e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5817167b-713a-45cf-8b1f-e56aff102ddb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e9a63b-6466-4a79-ae10-d3a72fe726c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed134cd-8d35-4de9-9652-65e71866008f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7abccb-d3bf-4dd0-83a1-f3fee7a3b7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be474568-c33e-4f5c-b976-57236e14c82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbaf86a-3fa9-47ec-b812-4e0d9a02ca3b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf53828-e4be-4f29-b822-96e8b7fc3512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1cd197-d448-432e-a2a9-ced66619b0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6edf4f4-6908-4f59-8f13-6c93d9e2c12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbadb9d-2bcc-4ac2-8319-02e92489833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6db6d00-85ea-421a-b9e8-b52b31b1fe37",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec95fb5f-08c2-41ec-9ebe-207f895aaa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981939e2-7cbd-4b83-b158-21ea9ba751da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e278664d-8a06-43b5-893e-782806aeb29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbba9805-d0e9-4e6b-9fb2-02746f52237a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a12045-594b-4f91-9301-301850430e20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4affdf71-bf0d-49b9-8fa5-69ad6ef551fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887c23e9-ce40-4ac5-a204-5250401ba2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94730b9-c61d-4bb1-9c34-a865c801f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3683d7-5c61-4383-be8d-3bb8dbfc3496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38f85c2-e008-49aa-8027-bfd930b9e8ea",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1205500f-e020-468a-b1d8-34fe87623cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b520d2a8-3b5f-40e1-88c0-2227a569cbfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75378230-8ad8-4515-be03-11c986eaf834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9658d2-1a3f-4c8b-b289-79628bf36b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e79d640-eb0b-46d1-a462-15ef6832ed50",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f1517-b389-46b5-9b64-5645fb900d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241f6fda-8fef-4b57-b57a-f40c3b819688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a85f49b-8aee-4667-a886-5bd635247f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a55bf61a-0ea6-4614-8adf-cf0d64696150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364aa2c2-0318-4560-a315-5fb7c88f14a6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f465785-97bf-4b66-9d39-4acc8ebd8357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329891ee-48e3-42b0-9890-56aa15bf3007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e43f4d9-a5c4-4e25-86f2-6c341053ab18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2510c860-4f97-4076-b286-0fa81ddf1cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95abda7-bbe0-4e1e-814c-31bde7f3462a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cca1ca-b34b-49d0-99d0-7509dc83859a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f978b89c-6bfb-4fb7-9422-05bc2f144fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e3580b-12cd-4f26-ad5d-ad0f87c196a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a434146-0ca5-4faa-8945-955f62e68efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a5f821-13f5-4822-95e0-d0544db04aea",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374153f4-a21c-40c0-8acc-11b01c94a49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32edb810-59fc-48ea-907b-34f8da3af2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbea48e-1ff5-42e8-8ea8-c883e8c7c418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bd6ef9-de4b-4aa5-9961-bace4f9326f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd6fd0f-6901-4495-917a-c783a5771d4e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ca9b5-fb46-4526-b8b1-52c2ca6fb1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e944844-08cc-46d2-8d0a-ec0ac80617be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3a14af-00a1-46ca-a6fd-f4012cdcb73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09743b64-0dc2-4901-9b57-2aa21795b2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1b40a0-0b43-4300-8355-594021f8356e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e2a483-63c5-4088-9e2d-a69699b0ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eec03ed-d1d2-436d-b7a2-5047f088cfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1826cfac-cc9c-46f2-b980-1e6f6594ae8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c853c293-bf05-4061-8209-ea3dbd196cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ad7b87-b62c-4d99-9693-be843e78b031",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b5b594-6f4b-45dd-a6f1-1619fd8e66cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289b686d-ab2e-4971-8a7f-9a7e3a0cb5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d510aa-6dac-4770-ae7e-369616309f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f7d698-e786-4430-a498-c113659e4938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1814ca0a-adb5-46a9-af36-f4deaa3f8108",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e569e4-8175-454e-a9c0-7f9c72feb425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c112ee1a-47b4-4748-bce6-a8e69feff4e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80aa9655-d486-4526-a633-c701dce9c070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4de988ea-0ee8-49d3-b430-66cb37ed4334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7273b689-1557-4801-a0eb-8616fdbe7fda",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38b2789-35c2-462d-b0e4-69607d533af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6499b3-c3ef-461f-8562-ba32d1eb802a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e427b2-4efe-4e17-be14-139cc3574f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "44b4027c-e08b-453d-a56d-7ff16f4c2147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285820b8-0d46-4d64-9995-fa52a3060349",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ed7ac8-816a-426c-8a50-e02a3cbbc294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e84974-ec50-47cc-80ce-ca918ff77af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a3a08e-d62f-4097-b549-e623ce83adbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ff5604-c88b-4b17-87c1-c46df178fcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e014009-af7d-4815-8d29-8bef2ef55243",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0219a5bb-25a2-4174-a158-337399f6417d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04af4fd1-7226-45bf-8158-712ae4fe7d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7affad73-5264-4d9b-8511-f9b1d10d4241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3bd87a-0540-4ff0-ae54-6283a76dbccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c817ef-5bfd-4a23-aa40-76a7355b3fae",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916733e0-f6a7-49ba-9674-bba1e6ba3e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8d258f-581e-4ca8-b635-b5c7a9515277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd06151b-4314-4513-a6aa-c728a767ebdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7726ade-c03d-41c2-a5a0-6be478119e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d408334-ff6a-4277-80da-ad86f77fd931",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2e1dfb-9484-4ed0-b6f5-570978a381db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cec715-41fc-47b2-b9c0-c7ecfd9bb90b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c528721a-5531-4253-afb6-1a298acd7990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da599f46-396c-4c70-bc0c-670e9c5b4f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af35fe-14ed-4f04-ab49-97a689b4eb78",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea357ed9-fc08-4681-8105-b0c757db3f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f59eea8-be56-4b11-b650-09edc4bec60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88338db-4890-449e-967f-9560f9a0f36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "467a6ab9-677a-4290-be79-4f157bd64b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abba1f00-c64c-4a6b-b511-f10a313e17f1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706adf4a-bb4d-420d-a7b3-85fe6fcba3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f76a096-74e0-46c0-a890-0403b317cbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f998fb-f238-434b-b165-5554748763dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "456843f0-bcd0-4309-be0e-c313e46b3287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28790449-d32d-498c-90e7-bf6c2719a650",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b2b31-2ba7-4a6f-bf03-3266f8b7173c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76d48c4-1128-4692-bca2-9e732845510c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab6c261-411a-45e9-925d-94195bd52d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c7ddd1-4f12-4cf6-b861-ddb187399855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9673ebde-c081-4311-8a05-2eee608f883a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2a648a-f86b-4c76-9dca-677b6d2aaaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e28605-533d-493b-984e-21bee2519ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a415ffc-8486-4046-b2b2-cfbf165232d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6237ff-2a6a-40a2-af18-8d0727846209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe7ba18-ad5c-41e4-9cc1-c85d426cb1e8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366230e6-6e81-4c2c-8409-3abde5dffcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d572b497-8f94-4a34-8eee-2ad74dded4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e8461e-8098-40d1-b461-e437c7d61965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a84dba5-40dd-456f-89da-e8c02cd02fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d5f30e-e8ba-47ea-8fdb-f9034cdd7a2c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079e7df7-31dd-473c-b514-97d780689d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea54abf-dd63-43aa-8c70-07e03dd636de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c37e8f6-8918-40b9-a91f-bb854333b3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeeb98b6-8ad5-48fa-95d2-94d47872a77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b535c8f-1ba0-425d-9143-669de507b54e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b6f260-ab2d-4a63-809b-1ca07a50a7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa13cd2b-256b-4573-bc81-1ff96d852d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b3e886-a08b-4e67-97ad-1a5dbea9571b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab21a7e-7903-4e87-9a1c-4fdd8d402dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379e6d7e-92ff-4ac3-bd68-714d3361806a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f01f24-2d23-4702-89c9-1dce30f12580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583989f7-4edf-480d-ab32-13a7f303f062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5539e0e-74c8-46c6-9cd5-d4757e1db3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d72d190-54f4-4e53-ad89-664df6ce771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376a21e6-34d6-4dd3-b655-818d3db2733e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75124092-efe3-42d7-8615-2f0886c46763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a922920e-2624-4867-b76d-96dce352f6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8cbea9-d20e-4e89-add9-98eff1910a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fafb307d-af7e-4035-846b-aa889d2f7059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4b31e1-f2d0-4322-8265-1058a8ba0156",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e22dc75-fd5b-4342-ba29-b4085d957e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bc59fd-e350-423b-8863-3bd514258193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dddff5-71ec-4c11-a52c-20296a060769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea4659c-d0cd-425a-8cbd-1d657ac10df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fba233-cade-45ff-a327-0467cedc2c15",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82665f2f-ae1c-4b16-b14d-b7464c2def0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8dab7f7-0a07-49d4-9467-afcaa29e6d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947c47aa-3b32-4e18-8d45-57ac271d03f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca89d628-d4ff-42ca-87c3-9447ffa1afc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b27fd5-0f1d-477d-a607-224a987859f1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c71d64c-a75a-4a55-8aa3-32c20f8350df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd38e7b7-ccac-46d9-b012-3f3415e55a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008800b2-ff35-40dd-bbbe-b1a35f5291b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18eeb356-d105-45bd-8710-7fd3002b45ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5cc21029-e1ce-4263-b8e5-b8fc8ae1e18e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc784ed5-d3ce-41b9-af0e-50f00e23010f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fc200c-2e16-4ae6-bc41-543e1a09f21f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "48fc42b1-961c-435b-b251-47731912dc27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8523eb-86e5-4cf7-9afb-f2a1c99bc82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f40cd53-ecbb-4f50-b6b5-aee2ed5517f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1509759-be22-4196-817e-43fc8535e231",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad17d31b-888f-419a-8655-e1d729fb10d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eb243f8-a6d0-4a61-97a1-ed55e8ab6e14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0188cfb2-eaeb-4fd4-8847-be57f0c3e178"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a07225ff-5e89-4da0-b67c-fbb5c8726f53",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f331737-2155-44f5-a13e-5679edcc86c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "747414a0-ee13-4b06-86cd-6ef3ef58eac3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0c329d5-e78f-4612-acba-e98e55c58b52"
            }
          }
        ]
      },
      {
        "id": "4edddeb4-3861-42f4-8c03-64e23531d276",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "54be08b9-23a2-4093-80e7-0661921c70e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd030cdd-6dc4-45fa-a237-e8782b129b38",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a291f9b0-dfa4-4989-b806-76aed71cd9e4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "597e4f9a-5536-4fa5-a930-9f21f08ab1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c1105f-62b5-4ef1-829d-c869f8d00b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af49b6a6-066a-4a02-8e34-782fbe85a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b4b772-3d90-4f7c-ae39-26943954b3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfadffd-c0de-4b1b-80a2-74ad69078dbd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130541f3-4e64-4b6d-ab25-055fe17401d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb24a1a-6207-4897-8ee8-6cefb9b97bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285df38d-595d-4c82-9ba4-4247bbe93025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75195421-b4ec-4825-8e8c-c55575840deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d40c19b-710b-4c3f-b91d-96bdb8c085db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f2aeb7-c70a-41d9-b8a7-5837903b4fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2f0f07-42e9-413e-9ca0-b94aafdb9987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb6081b-c8f7-4d85-b873-057c2645387b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "426ab214-42ac-4900-b0d9-3f5d6cd30696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b317751-fb93-47b0-af1c-bbafbb22ebef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6411c01-6b0f-48dc-852a-8870a8733538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e490cf-f4d2-4a2a-8713-6855a030b857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad03875-5972-4027-8adf-86709b91f779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08891c4d-eee3-4a1e-83a4-d33b7bd15bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef32e9b-5073-41c1-b9a9-7b59bf10f66e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1971473f-7832-469a-9874-0b7fe8e66b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0b1c93-a46a-4ad5-b901-b3f62572dcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6fe3e1-6008-459d-9073-12140709b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad12aa23-a811-4adf-8183-193274464383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7f5d37-b968-4e68-8525-406197216813",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d174135-7a48-40ac-87d0-8f6c0d05cb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633423cc-54a4-4a43-af05-0028c01f06a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd9ef1f-50d0-4e06-9811-ed051db43278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14ff3646-8b0c-4e26-a86a-0ea4b1baa93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d10a0a-2ec2-4b01-a228-8c28e4d8177c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eb7c96-6484-4cea-ac4e-72b05cd008d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61dce97-48ee-49f5-ba44-d2dc765c3b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65e1d61-51de-42a5-a1e0-b5345b9ce92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03d29f71-ebb8-4d5f-9dd1-fe09af33fb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9772d5ae-c659-4549-9f35-0b5e6562fd2d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9012849c-e7ae-413b-944f-4d3a721b1c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8738832c-bba7-4300-9c75-16555b003ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480db24e-8cba-4db0-9fe7-bbba8cc1c73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dda10cc8-5d09-4579-a047-a078f134b08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562e7839-08b0-4e0a-abdd-3d1d84bad08b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "419ee74a-fe9e-4d5e-9c7d-40362e98fea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6b1423-d34d-4e02-a314-01dbf47f4599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c788948-08e2-4d84-9fd4-cac481966e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e280a4-0a58-422c-92ea-05427baa4e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975628c5-fa39-444e-a34a-c862278e5a7e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059846c8-f8d3-4d34-98d2-82fe756b5edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab35f94-7a35-4934-a486-3e6ff79e7a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645c1ee3-c7be-4894-adf9-0c75fb757fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de20793e-cf9a-474b-ba4f-8a6bf20b22f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77ee591-7f27-4111-8e08-6aa00840bf8a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b571f05-685b-4a5e-ab56-e9af28ead3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6faa5390-e8ae-4203-a290-58aeb20abfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed62a80-a839-4d51-ba16-6d67fc7e56e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c730546c-f7bd-4ef8-b9de-e0e78f853505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c02a187-2c40-482f-a7e7-26fe3f4e7c48",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bc1c15-c350-4f7a-95fe-58724ffa668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20928ec-2c7f-4c34-b601-9336900cc96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef982fcf-5f66-48b5-af24-96e25418205c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad95d465-21c4-4c45-abcc-965334e7f561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27598c4c-ae07-4dea-b945-ee9f49db8d89",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a395a7-ecba-4cc7-9258-97e5f101c3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e754c98-1667-46e4-a7bd-12d8567ee5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e47ac5-edc8-4c94-b604-0678d3943b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59bf9912-7256-4ae7-906b-34a524731891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1376ed-32e4-4975-b63c-4366a36755fa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58c2b4b-817e-4d80-953d-21147289208c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f2412f-f437-4317-9923-f78d3730c96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebbc7a5-be4b-41a1-92a0-d0b811dde8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb2344a-a2c4-46c9-89c6-485597967969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0cabeb-51bf-4c37-a762-1e3994895e0e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b3b731-63a0-489a-b824-6e557a0cc7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd886c6-6c93-47b9-9191-555a97f818b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4eb10a-9e7c-47e8-84c1-7331560d8211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "030e0f61-8bb9-4d88-a8b8-72d5039390ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d75bc1-2370-4cda-b1cf-77efcd2e6574",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e11340-c01c-4993-beae-99ce8b648e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab99c20-be66-4e60-ba4a-03fb9b3ffe47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9082a0-2cec-4a98-aebc-4b8bb39db8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "05655cb6-8771-4c06-b5ee-03ca1200bdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4798f581-c9da-4553-abf6-ae8c58c70510",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a6b830-6f84-49e7-a3ce-c396fa597516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a10c40-f900-48d6-88f0-4c81fb9fb9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6db97c-0d5a-4e38-9bfe-dd5a6103caa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a26f4d0-7eb3-42ae-9e28-4531d4018998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fa49f2-a920-4e13-a32a-d451f1e3a8cc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f39e46-4e12-44c5-934f-bbcae20e7125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc2395e-ac4c-4b66-801c-8e59cf8713fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6454bf0f-151a-4523-b861-e5bc18187362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a03b9f7b-83bc-4916-8a91-0d87eba83a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf3fc7d-975d-413f-a4a3-ab7591a17ac2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f178027e-6ef2-4d4d-8bab-81c9bc04194b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72bfdd2-3b8d-463a-8304-ab66a96ce51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eab8bf-6b04-4044-9ec2-fc8b66924280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b221876-4e63-4ae5-b3d5-240105e62577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26197e09-0a41-43e2-b2d1-24c0abe4f1f1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732f6386-4b47-4479-a950-7088e801ce25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762ee07a-9462-421f-ad7b-53baa83d98bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750e8132-8676-43e7-99d6-cf2daf497e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55557214-0588-4aca-8c98-c515e7b683e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75641470-a3a6-4fb4-b4de-5777abb9a70e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d56738-f436-41bf-b912-7696c19e5684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92940f4-db33-4979-8ff8-2328b0523848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d24d79-6d41-41a1-bb19-4ccd244e3610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "697a7092-eb3e-4128-bc57-31153623769b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35bfd27-dff0-40d0-a940-4d2dc94ba004",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf57b4cf-0199-47eb-bd41-598837fbfa72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca851f41-9583-4bce-aaf6-2806b77c1702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa466cf-243d-4803-a4a8-a77f7247c339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6234ae0-4d99-453f-887f-934c5058e356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56573f3-54b9-4870-abe7-2b15f5ff9be2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bf4468-8f52-435c-865a-67afcb073e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e673762c-567b-4916-a47d-802dca6ad74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0084b8e0-2224-4380-b8e1-203b7c884a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21c75bb-c201-47e6-bfe9-b1acf2d26386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4defec-6c38-459d-a593-2f0d3e4327c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bb6d22-4723-4f15-9529-d282f9f2dcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a47cbd-821b-4d2b-94e9-37d486aab31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098a0f89-6b5c-449d-978f-91e243abd807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68be3fa3-8263-4661-a1d8-43b51ed7b6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a60e975-ea35-4190-9468-5bfa19c9cf0f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9bdea2-5a93-4e32-b1f9-ce2b4293de38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6f5e1b-7658-4db2-aa5e-e0a52aa3616b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6967fa2-6c44-4865-9950-f418123c2ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9029d20a-5ee9-4632-afc8-1525b3946ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783a9f19-c21b-4e79-ab42-978b90e9cfd1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d490a24-2326-450e-8796-e70c1613d8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4dc8840-68fe-4f89-a2a2-d7238859b11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52021ced-a003-47be-9c1e-b109d4cc0d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "556875dd-0542-4d46-a0ef-6dbbb27bf3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c56391-9aaa-4301-89e2-b601e7ded2e6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34438ab-a958-49c6-8d59-eeb96d115728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b8301d-4dc1-4abf-aa01-2dfa69bf58a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509fefd5-99e3-4f13-84fd-f0fbe80756f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7121a6e3-7263-4605-8566-dff23c32911a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a28034c-c1a3-4eae-adcc-a600aa471bed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9cc255-0dab-4d60-90f3-8f3b6ee209a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd2f79e-1505-4519-b161-ef22e7c6e2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ae5021-9d45-4c6e-a2e8-dd9ef5f489e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc75285-bbac-4f59-8402-0478626c2411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a6517a-0a3f-454b-b282-11cce1b3eaca",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1466436-56f6-4b59-a072-5342ba5c0550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48778d76-47ec-4e29-8060-30ef624f032f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab52c66-221e-4d1b-ae31-1bbee0c3e419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1b4094-af75-420a-8979-e048e9df54ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4498908-cdcf-4788-af3b-bf0d326839be",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5483424-8a4a-4799-b157-29490641a209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cdbafe7-f231-42d9-bf77-87553cc4c14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0474ed-4ca5-4be4-876e-68b585752384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e2376b-7880-4d94-aa0e-9eaca59c8430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b6afdc-9ba3-42e8-8609-b1c0a42c5a89",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd84d2-a371-4d85-b43e-0262ef2f7e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ea1d7f-1b67-4fae-a8b4-8a393460713f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3f96bc-8fcc-47f6-bf65-04248f7d51b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db812d0e-3f1f-4d74-9208-28cc4f1c5be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7982a59-be3d-47f5-aed3-56c08a1ab985",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce133d1-6159-4472-9b5a-f62f93f099f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b41bfb5-d136-4b9f-a5f3-b4c3cb5522a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2781c-21f9-40a6-bfac-d0a57e69940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13685e3f-5ac7-4e6d-b98e-22bf8bf04221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a5c6cc-5fbf-4fa6-8781-336da49f2633",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af0197f-149f-4368-bc90-bd8692dc9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc457e82-e540-436e-b325-c212ee2eee72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7191e94d-a609-41b1-a218-c91a02b04fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "544cc786-400f-43f9-a729-06f707c42b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da79575-e369-42cc-b789-e5f2c0f25acd",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bef49c-0949-49e3-a0dd-730f789288a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098586fe-d200-412e-b89c-037ad9b02fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fd9b68-8c29-48e6-ae7f-4944eb7cb41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d05e1a-3bae-40ab-a179-8ee93e92c452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e03a105-00b6-4727-a572-7375db1f1f6a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f5f62b-1bcf-4114-adb4-ed2d7dd5e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b637f05-20d8-4cd0-baa7-769614a0555c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecb892c-e9aa-43e0-b006-140ce56f4ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb9beb8-45a2-4ec6-9bb6-5361d40a2322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23125c5c-4155-42ca-aaea-dcc80e0e9d07",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ec17fa-4e41-4c24-b088-9841c1fef0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb532ebf-e7ce-4fb8-b32a-f148dfd002ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fc499e-0d88-45ab-a246-ad0aa1b2b993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a39f661-a9d3-4861-8475-c5257ca962bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd52aa3-4bc6-42bc-9cf5-f24f9a11d4fb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0aaf48-368d-48a6-888a-18702a98ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571766e8-d0e7-4f21-ab26-27994de44e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef4c83c-95c1-4ab3-bdef-f6fbe23e4246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a44ea90-a4cf-4ab7-b1aa-fa6e92783684"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3231a16-ddac-4303-b585-484ee9ae2512",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44016dbf-63d3-46f6-b47a-a3ed6e447198",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131f5224-951e-44d8-bcc7-e0b15afc6e41",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "69da6465-c96b-491f-95d1-62f22e0c975a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deb789a-1668-43bc-bff6-bf9fa84e35d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6b90ec9-b6fc-44ec-b20c-1fc6892de7cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "948bda04-b396-4bc7-8920-d89dceabd3c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b1f92d0-d5f6-4e9b-ab67-558cc42c6cd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d0cbec9-a448-47a5-843a-04e6e0e5ba0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc8943dc-6843-45f0-b9e0-cc2a4f63846a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9aab741a-c197-465a-850f-809ab53a6b66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7888c87b-fceb-452b-940b-8f8ab2cbba8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2568dbf3-1f66-4b69-9b5b-ff2771b964b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60ba897a-c57a-432d-b819-13a88d5459ce"
            }
          }
        ]
      },
      {
        "id": "fc7e5e99-00e2-4080-b423-61d65c8e2c90",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "28d47536-9153-45f5-9940-c016b2cc4511",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5f4f0fe-b14c-44e1-804a-99d053aeed4b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9cb95387-8dd9-437f-9260-4fb41209409c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75080c5f-58e1-4393-957d-97097b40173c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f532285e-46b6-4418-b4c2-8f995090ac6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b8105a-84d8-4cfe-a611-ec1fcec7e2c3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26641905-f001-416f-bdc5-cf493b0b7fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52facc20-6eba-4bf9-8e68-bd856f09d1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a058cea-b13e-408a-9200-9d4b9a8b0f69",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36681ce9-afd7-434f-beae-a1abd5631bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a158acf-085d-4f3f-ad1d-f9ddef6161a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53bcf22-5230-4af9-a9c5-943f747d4600",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48674afb-c158-41d1-abf8-db4867c12fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764592ae-f4ae-47ff-9188-4b5553cb8a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed4b1b6-d6ea-4f66-801c-3033e28c966f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8672cd4d-c40e-489e-bc33-0eaf79e3ecdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923b5f50-e239-4806-9d71-d4c4010d876e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e6232f-0d58-47f2-a320-3ac422dd16f4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74db88a-40e8-4486-ae08-522d353a3092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e927a18e-eb30-49fb-bbf6-4f425e865de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a691a5b8-ec2a-4535-a87a-37660adbb10b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2670622f-de32-474f-a8e7-739b6e9bf301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a54aae-059c-47e0-aada-5543e4ece6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f705161f-b71a-4030-8fd7-7bad0658243a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa62df8a-aa56-4470-b58c-aba44582a8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c31c452-bda6-415d-82f3-ba4db79a9bdf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93cc7ac-b72d-4f9c-ba68-d9cfe5ac7598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2948db4a-8748-4165-a5a4-9c9f754821d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c86dad-500e-423f-a321-1942a12c8cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30e6aa0-efaa-4e4b-aaf5-aba176085f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1dbee5-4229-45d1-ae47-4589638e05fd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0ccecf-d94e-4603-9872-77c2d78ca14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd6bd457-b898-4b05-af65-a67a714abc8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1c2416-3c60-4822-91d8-50b120da1baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a3e533-ce66-47f6-8958-902416803940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a45b020-b418-43ef-8576-3f311587085b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e082f1-9b47-4244-bd20-77d8cf64ba03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55db6ca2-ee55-40ad-8e60-c262e829411d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363d2268-cd77-46f4-ba6f-8ef9910aca7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e17af1b-e817-4ad4-aa2f-bb79cc66ffcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f376ec-abb4-44b1-a305-17303787345f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a0667a-4040-4029-8a45-11dfc7578b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11731304-73a7-4191-82c8-cee87388f77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "decf0d6d-ea8f-48a6-ad6e-3a656f443803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dd44bd-8c9a-4785-b1cd-740ebec87142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6c612f-d74a-408f-93ba-2b31b594c0c6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a144a8-86c4-4a14-8008-9c593a338ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9789fb0-2138-4565-ba22-0f9ad952049f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e852e34f-ab71-4f2f-b9ee-7cb9b0d4812a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a76924a-8fd5-40be-9860-47f4bba105d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dde212-11b9-45b2-82aa-c02069eb9ad9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92148c30-0c2c-4232-887f-b0ab8ed2d84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3b205d-999f-4cb5-9811-d4372353d559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02bb34a-fd50-471c-9e9c-b9797a177a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e521f499-9c21-4d9d-94e5-1eae32933a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc8003e-46d6-47e2-ba3d-1214f016d8e2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45915f41-7e6f-4815-9366-5c09e246a84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7016120-8736-4d6d-bc6f-cf14f949b7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d0fa18-ba78-458b-beb8-92b158816ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6293856-17a2-4223-96ce-98e815838eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae45ebb-cc05-45b3-8be6-e5edb550ddf6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78014f87-a5df-4d2e-8c4a-d9ab28cbbd6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89b3a58f-2c85-49e2-9d2e-d6183895562f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08714d0c-4e9f-420c-bfde-1c57b3da55aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fb9ae6-6f4b-4925-aa3c-c36264db7489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7048d00-8089-42ff-96df-8a4ebcf4ca1d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34577b63-b9c8-4cae-9492-2ed49dcca7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "235b27dc-fe18-4559-9b94-969fd2301c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363cba16-bd1b-49bb-9193-66e2eb97494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273f3c83-c95a-4ef7-9ee0-df34a5eea1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726c5a2b-7a9c-4b1b-b68f-d7808b865e95",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67133efe-a780-499c-b959-58f009f110c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c058d65f-d86e-476d-b52d-f010746c298d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114ecdab-aee6-447d-945b-84bdc57012f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ba4bdd-d75c-44d1-9f8e-0aef6963b59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46c3505-0e78-41ae-b62e-a8200fe85cd2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009e517e-1dfc-486f-bb41-ad3430b82870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5574b8c0-7307-410c-806b-3eb096b8b500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fe0007-2292-487b-a916-a26a12a365c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76320039-d9f2-492a-87d9-a659c54342f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c4a05e-b2d7-4798-a84b-2a7b1a83d021",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f9e346-8d1c-459b-aa99-16db5d44e9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a71b61-8c3b-4304-b9b2-06cee72a3ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85789e28-6c9c-4215-b9a8-f78672e877ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ba4e8d-1b45-45d2-a6da-101cac9875e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7669055-6cf7-4659-b7c1-00020c9af69f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5016fe59-8d12-4fe3-ada4-84e2711e7c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd98f29f-e0e2-4c7b-b593-cf990a7ba2d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa8301f-5e53-434a-96a4-41a919283062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332bf27f-4e1d-4858-915a-ef03a59c520d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebaf104-4e40-410b-a63d-69e61c1f904b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7a6ed0-db33-46a0-aa53-7fc5173e882b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8003fdaa-3d80-44ed-8e69-02a995ad38b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16862d50-99de-4291-84b2-5317bc187936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d480f643-1964-47cc-b8fa-ad8746b71a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2fb07a-aae6-4d2b-9b59-5d60acb65506",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8127ca18-26c9-49fe-b71a-fbb6ceed90ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a6abd0-bc38-451e-9018-eac4799257b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ad8f50-4516-4817-809b-c83270601d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb12025-06d0-409c-a3d8-6898089943c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3565e72-cd05-4521-afab-054af16924a0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a9833a-d7d8-44f4-b287-1436d2530ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f9d1b5-d9d1-4545-b946-e5d8df4b38cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069ba066-8ec8-489a-adce-01d1877c8ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862038a0-0dea-4fa8-9459-017effad8a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a2bb3d-a5cb-4fce-a5db-01c6e261bd08",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfe8529-fc0e-437b-b83d-0c47bd3c07dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c08919f-2d56-4cf0-bcd8-cfed3b75144e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91c181c-263d-4bef-8d64-4616dabd7a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1003c2e-afd9-481f-9ef3-f04fe412f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78b90e6-6642-4d73-97b1-5fddc8e25c1d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9593b663-f90e-4497-b4fd-792bb0b126d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1a88d0-87de-4d18-a920-67ac1e6d7e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd5448a-c280-466d-b41e-40a267e266f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88663826-c681-4398-8c9a-578a5053cb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b978aefa-574d-4f80-8a6e-4568adc40103",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b1022b-c7cb-4671-bfad-faf31adabc35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f997178-1b41-4ece-9cb8-b54fe320cbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02470c27-4bf1-46a5-998a-7c47a0c63b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892fa282-6c1c-4fbf-b76a-8964901ba688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8625fe81-93ed-4be1-b776-9b18bc70a904",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7001dc5c-5c32-4526-af95-30283636c12c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb723246-8afb-4665-af33-1713ccd97fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526336c9-ef00-4a34-a5ef-17dceaea9522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94117424-8215-4592-9e4d-e7e4a99e3114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b3497a-7add-4109-aa01-c36b4cf3595f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75040312-1004-4e04-b521-3cb9e2b90005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553282b9-d875-423d-aae3-f7a60f6cdb3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17f516b-a00c-4cbe-ac63-1e57831897c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b034b68-d86b-4d68-ac0c-482b2b6054ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d7bd23-c5c3-42e7-a134-4c5a3f4d35e6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1b793c-aaf5-4333-b7b5-3eec598ae137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e34017-b7d6-4695-80c9-fcf010138deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e067bcc1-5622-4527-b205-42cf7fa949f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d154c782-0506-408c-9777-f16ac6a55198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa841937-22f1-4573-af69-56c330770e29",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ca3719-e2dc-463c-bb86-5c237e7cb10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e8db743-dea4-4983-9d91-a25538a8f7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3f5043-0d8d-479b-b8c4-dcb4a9b4d6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c461a5ce-152e-4dcb-9415-b80673a2e8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef5c5fd-a4cb-4ef2-ae33-e7c7d636efbf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a40b3e-d3b4-44c3-a445-c42f3be42d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96bc92b8-bfb5-449e-ab91-1b32c2a5d741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d421bf0-c03b-45e5-b4a2-f68428d3b618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0964a5a-060e-4c11-bbb0-305a7052327a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607e0470-6067-48f3-9d5f-af2baa8e05b0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dccc21b-a607-4a8e-9ca1-a2e7ad89d925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "550f7370-d8ac-45cd-b13b-1e718e94bd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad54afaa-c55a-40f4-bf55-2fd3cbbaf408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fce71bc-aaf7-4396-a89d-887e95485868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecd431c-2dfc-402e-9bb4-016089a5f521",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d994d65-7b89-465b-8263-46e71b9c54e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1d031f-6a72-4aee-bf99-fe54d43804f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984c39f7-2e3e-4d83-8678-2ffdc2bc0afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f94aa85-8f29-48b4-a361-0416367e7f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278aa09d-6a4b-416f-9f74-0ba373d16518",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a49fe2-de0c-431b-a4f4-a6e853a8e3ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9defd555-79f8-40df-8ca3-2620ebb6b40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39bf3ca-c677-46a1-8b3e-1bd3eb1c6a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136187b1-be16-4988-ac80-5af5218501a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f7244b-040d-46ca-ba0e-de3cd0a7f02f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617a2e6f-f8f9-4cf7-834c-25fb070f70f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5866c159-a0b9-46a4-932e-cb0393a637f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc185ffe-b1a1-46ef-a45e-e8ea7ba3010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159a287b-b2c9-4dae-9b97-e73f454877af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05544d18-97ce-43ad-87f0-71210b248b55",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0942165-24e0-4429-af99-b5743312450c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939b471c-cfd8-4059-aba0-0bc2815db583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a229f9e-2027-4f4b-85cd-7429bdae7554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7ada059-b79d-42c7-a844-1bf8e27b1656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e66468a-2135-4361-9876-e2d24d997d7d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f657441e-9dfc-4a3d-a31e-7ffc26342e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cb7fcd-2e91-49b4-9563-308179206729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10612fba-4d7d-44a7-b309-6e7f8b5e4a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e3ff39-5a9c-4090-bba1-bd3f7ad70aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0abc76-699d-4a37-8fb8-a764d464f403",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d965bde-b475-4ca1-9fb4-e2b22139ae1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6158f7c5-f1b9-4561-b8c6-73a1780b9215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03227dac-51d4-436e-bab1-7d1dcbd9b850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c53484f-755f-4a02-948c-4464806813a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecda05ef-4dfb-4b59-be63-33be18d5e5e6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f91f5c-5574-4dd9-af2a-b31def0be69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e941d71d-577d-4b0c-bb65-94b04a0b641d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53df538-e5ab-4925-b9f8-1b657362a91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a211245-aa31-4f7a-a3af-00f8a67c3dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f922a1-7798-4ea5-b57d-e158e11197e8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e27f50-f1e5-4526-8fd8-1898cd030a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61c514d-5e75-404e-b65f-d066aed9b0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecebbb0-5d84-41a8-bcf6-22e384be9f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79ef082-c427-4330-9fcf-6f5572a47b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61a8e8e-6e2d-4e2e-acb2-fc2913213f71",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d5ee8a-5ef5-4fff-8574-43a732d1a35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9259e796-615a-46be-bf8c-2239c0ffec79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19f889e-10b0-4746-ba76-30170125eebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519bd5a6-485f-4721-b019-0902ec116877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e8a611-aba1-45b2-89b2-4fdb99bba622",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dd9484-d620-4f04-9477-75a03688fb82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419e3c60-3e3f-448b-baaa-6f4063d5998b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afa6627-99fd-4eb2-ad0d-2283f4a7319d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedc8bc0-c6ba-4381-a70c-fae20e043cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80978490-ba90-4756-b59d-72ed3634bb15",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cd0a92-4413-4f90-ad41-2b7ac0727821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca462082-f06c-4a45-8be2-ec944e1d1990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc332760-9fb6-455a-b20e-445064fd1eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d158a17-984d-40d3-b94c-af57c36ed48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d0f51d-7a83-4b6d-b524-5726621c6654",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5c2e1c-6ab5-4ff0-8cb3-600fdb0ef7ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e235d2-87ed-456f-aadf-5575429e9402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2438f010-d4f3-4e6a-ad00-e9417a037688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47b16fd-dd6e-4fc2-ae8a-69720cf71207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dff58c-a928-4c4b-99f0-2bb2dad080a0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2770c5-7c8f-4d06-8c76-8c1aaca4a7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9212ee2-a9d1-46b2-a087-887cba149a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b378107-b248-4c4e-bb64-e3f107484ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9189c53-6bb8-46a8-9f43-bdd2f262455a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada2729c-b359-4a16-891d-43514797b678",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73d345-7adb-4eda-a425-e7385170541a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc881546-f438-4659-9d58-e51bd0799d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefc5d5f-9d89-4bcc-b35f-9d40a7c212fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95aca62-5606-46d3-8c40-afb1a06bfc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e8ac82-d21b-4432-ad68-085b590fe648",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89e7c41-fdf9-4f3c-8e48-9e8a10238a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237dce8b-5819-4cc7-94e1-5a574d33ae63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177309ba-d102-42d2-9704-00ca20d5d601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ab9081-b51f-4c18-a99d-55bdcb9db5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f45824d-ad2d-438c-9f24-986d5d2200bf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6af7290-a3b3-416c-b5fa-966292d7eb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45f3681-ea73-42fc-b927-277b4fc82fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee71c680-f627-488c-9fc4-164d01bca8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1b2c33-6e8b-4cd6-89a0-10589c4df1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b24b8a3-4291-4c02-b16f-7f09613ca77f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc4219c-4350-456f-a21a-717d59f064aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d0bd4a-f51e-48a7-b233-3caf105c8034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624100e9-ea59-4ee7-940c-2362e7a352e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8d3c29-f664-4616-9c7f-b24bc749d09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1418ca-ddef-43fc-b423-00ec70144891",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b90ed6-318a-4597-bc13-6f85dcd29887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac7b5d5-9d9a-4b4b-a701-903d0017a556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd6c54e-6b03-4f12-936c-4d2e11fb6ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32ef479-0e78-46a9-859f-1195d5d124d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e3bd96-4b8b-4e67-9f79-17cf4f771c09",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb4ac74-f1ce-4b30-a0f1-ecbfc1c2d9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce59d884-de2b-4580-94c7-4dd7c0756c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d7a181-8beb-4d1d-b407-cea8d776b140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd200cc-054e-4082-bd51-935ca19be76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566a4e6b-73f8-4bae-9ec0-507d8487a3ac",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b94fed-6360-4902-aa10-c92155ef6212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1d6c31-df77-4083-9508-7d585bfcf284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981296ae-5017-4c5b-b4c8-6806989f1ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1129a912-4b36-4376-9bbe-a26ddb598075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905431ad-923b-4414-8bf0-39238cfcb403",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cbd31a-09a6-48cb-a011-f58d2b14f692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5863ac9-61e9-413a-9841-9df32b24906c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01514dea-6d94-4585-99e3-3425a746cb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e66094-b213-4384-9fe5-6d07d5aae5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cce4a8-d5af-493b-b923-547f7dd30a7b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec86cb9-2753-4cc6-ba1d-f0aaea7a9e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9267dfd-91a4-4a36-b5aa-826902b3f4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8783ec1-804a-4195-ac4f-ad5e88566b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bef548-3e3a-4a4d-bb05-d0471d3bd023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88590b9c-721f-418d-b37a-f8eaaf854539",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa0a3f8-b8eb-4ba2-9c43-16697a154dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2b6409-8c0f-4b6d-af35-bf58c985ad6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425e64d5-4e0b-4194-a3b4-68a9b5bac19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9351cbea-9a3e-4d47-be5f-32fc4d547f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760b911f-9799-46e4-855b-1488d08f5f1f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ce04db-af00-449a-9df2-114be9ca0131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1849a7-0d48-400b-b1e9-a8638496be72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319187dd-b632-479b-939c-a42dd5caa14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f89252-095d-488e-aff6-f7df91d05168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ec008f-6136-4a61-904d-6ec781ac64bd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e231c8-55cc-41e5-9898-053f548d1f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fe56a5-5b80-42b7-9bfc-1cae36ab475e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0ab175-017e-47ee-a7cd-ae49d3925b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f52d9f5-48e0-4e72-ad79-5968c3264a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb38a9e-2a89-43c8-ba81-40f9681dfdcd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c0599-f39e-4a4e-9833-3fc33acdf441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5808a76-193b-4e75-8186-45fc411035cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8441cf8-a453-48a6-96e7-9336712a8af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a501943c-98d9-4cb8-82ff-12700490bc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1769f75a-80ba-40a7-a81d-c75722ba32fb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cec482-2b36-48ed-8f09-05e17a708eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3c4b49-a8e4-4ffb-b4e5-e814692d7b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5567cc-c161-44c3-a083-1adf6510650c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dab368f-c4ff-4973-8638-8f5dcc1ea1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332df347-aac0-4d80-af5b-007d57837da8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66146a6-6489-4783-bbe8-35f916780158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b573c9e9-0ce8-4ace-9002-5e780d8ee64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be9e25-0005-4a4d-b9fc-77fc5e7eda14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a2f41f-b0ce-451f-aa2b-a48c5c9976d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e79a170-8bc8-4972-bdfc-af3cd277bdd0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703d9ebe-a4c6-4fd6-8818-785086dfc1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01476b1-f94a-422e-aa89-ecbb70f27c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f272e421-a99b-4316-8968-6c874be75ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fedf5a-2fea-4c90-af0a-ae8a898eb6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7f883f-a14a-49cd-b4ad-ae9ba024e3d8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a44915-0798-4af5-946d-2dea5f0666d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339792a4-f850-4ecf-8169-9867dbd4d88c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701c411b-4f02-429f-a370-586c4c5bd91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265562d8-bceb-4d86-99ea-829a824fddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0ddb3d-9380-4f71-aebd-a9213f578ac2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103692a7-fb15-4f1d-8636-38b0ccebcf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbeeadaa-f618-4a4b-9a9b-c09318fe9b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461e5b53-040b-45d1-a95b-6a281aadd9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7781a263-6d2a-49da-b836-1e089857aa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b28c32e-65dd-467a-a040-c6533d7b6d10",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af89035b-745f-41d2-aa28-9da7b122030a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf40f29-f28d-4a1b-9a63-c7c29fe483af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0bf497-a628-4a45-9f07-b5de5372080c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1896f62-4ca9-46b4-80af-6963767bdab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085565ea-51ed-4214-abcb-0f2efcfcd322",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578444e5-fed7-4117-b012-c92c2851c2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f6210e1-5d6e-4146-bbbf-d2101ddae426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b679b5de-aff5-4478-ad3d-d8b6bce1fcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19606ed-a7dc-4dbc-a383-676a8819ed32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7959f2-c502-415c-b61f-1f5232001574",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2450f91-3157-4f50-9a92-36b6a8119bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4724914-1b6b-4143-9c63-29915fa28df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaa9322-62ac-4657-b1b7-3c6a13ca7d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584d7c7d-eb6f-49b1-a5e7-85e80af35b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e663e9-18b5-485e-a781-408293b02bef",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ca59fa-9d86-4158-9dc5-8fc76a2702e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83da29f9-1147-4178-b848-6bbb5e787ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d43d439-d4dd-40bc-89cd-58bb17f40aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ba7533-392b-4714-837b-bf80c3ff2234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf1cce5-024b-4c4c-8b85-28cd08e8a1d7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c0253d-7101-4730-86eb-95f25c99c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b33a87a-1df2-46e9-b036-dabb5da3ae1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae286711-ce29-4aa9-9b31-9a53aaf8f9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee38c93a-c69f-4253-b8b9-3eb5665c6403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692600d0-6a81-4531-807f-43edb62f3e79",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed0026e-fee5-4fb5-bf55-a04ffeeafce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed2515a-9188-4702-ae05-0c387569b3e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a44d255-a9e5-4cbe-a2cf-2f61362e2407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25589b86-c0b0-47d6-b564-092559bce476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378f74c0-4cca-4786-b49a-d921e444a80b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f76973b-a821-4ef9-a70d-5851423b0059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6621a2a4-1400-40bb-a9b4-1746b17f2440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b340617a-53b0-4282-b02f-cfde8ea77b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54d47b0-a738-4851-bcae-42fa269aee0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179bc100-4d49-4aac-ad45-207bd1d151ee",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1556cc-d518-4135-9b79-2174df911b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc40f93c-ddea-4c6a-87ae-cf80016ae2b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a3c667-5207-4cdd-9dbe-3e26144e908d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f559be-7d18-4cc8-9d48-bdcc6bc4cf07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa737283-7fdc-4e2f-adda-a289633cce8c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78e7814-3be0-4981-bf11-1d903e9b7524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ce1b6e-97e8-4ade-8f1b-394e47c5474f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583c2253-4697-4c2a-85f3-a7ad35ba107f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c77fd32-1438-4408-9d58-a84e70e7663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49723800-b3dd-4159-b46f-9ca5d896c929",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccea4494-2ff7-467b-ae03-61a0fbc4a167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3def32d1-ff77-4709-8079-89e4d3565ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe9aa47-e05f-4876-b3fa-fd653fbc9e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a54180-5989-437b-a1eb-6d24409fdaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420099d1-e15e-4290-bbde-41cdf7a4370b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f018896-206d-4ec6-86e2-67aa6eb9b332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b79ee59-7d90-478b-a75d-b56e58f34a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ba6804-ffb7-4b7a-9b94-3202ec33fbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ea3e88-a7dc-4596-8965-94046079cbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cde003-6042-437f-a670-f48b0c3fc689",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e76d80-da8a-4ece-aa97-50ef6cda3895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62c704bf-b79b-4f16-9cf3-2e59a65c5320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab86046b-09b2-4d7b-ad7a-9aa4aff5bdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5651cb8-332f-4d7c-b8be-f8b880a01b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20a8b26-f976-4658-8a96-881eebdf0e0f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d3ac22-9573-40eb-852e-186a0de662b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8fb2c9-6f16-47b7-ac49-aa33e5ae32f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06ded11-8d5e-4f9d-9082-547d2943aea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1b368d-1671-404e-b1d5-0c206adcc4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230805ca-653e-460f-b6f2-61ffac72fa1c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf0de6f-21e2-45f4-aec8-1e092e0e7410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43ad951-7a8b-4456-9829-e491c733598e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421d6fd8-db91-4e7d-91ef-a569a1f357e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cdd389-3db2-42a8-a823-1f783505bba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e73a17a-4de5-4006-b6a8-8d0a841881f1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e6f177-3ff3-4b6b-b98a-ea27aa2dc156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bec38ab-67eb-49af-a319-5353b9bc916d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1469fb07-d3e0-4e01-8fdc-ee805605b539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88c3070-6c8a-41f6-88c4-e9cce16af5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691db909-9433-4aaf-a3b7-fad3f858670a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69decac7-2fdc-4a49-8213-fe7a21d857cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1866ae-fded-4f59-831e-37ce1659c1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c110dba-de11-4a23-a7be-8cfba26f0545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68abace4-7cc2-47a9-a833-acdb4f23fac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b575763a-976a-4f8a-a4e3-e7578707d638",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19173083-ad1b-4f52-a975-49113b3636fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65860f49-afd7-48ed-baac-d404ebcf375b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfcc705-4f0e-4738-bd39-165bc0f9e867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bdf0d5-fc62-4d7a-94ee-9e874fe02dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052f6200-b2c4-48a6-9d30-12c509089e5a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3276a80e-e960-4628-8949-52da1889471a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c32edab-701d-4b08-8e13-13744f275adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f533d-28db-4042-9503-5471f16f6d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767b5331-1ccf-42c9-b9d8-001ba4aebc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c34210c-b681-472b-b6c4-83ccad82ed0a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951272f8-bd04-43b9-b289-89fb7aa73836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c042e35-fc68-44c6-854e-5b251535de4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963fe515-af75-40a3-b731-9a460d8a27e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c32983-d72e-4410-94fe-f25d5a7c7a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600d8972-1886-48c2-b2c6-7abf8b13b848",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9126ba7-f51e-48a8-9402-b4f45d1f304e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0544b08-19a7-49c9-b5a9-15943f91d5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9e955f-0433-4ec7-bd97-509e513a8e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70436c2-1a94-4262-a59f-5d7fb1b5b1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf948fc-c919-4409-9734-c4d1d199e1f3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b585909e-2b5a-4b4e-a780-4678cd36b402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743b89f6-0054-48fa-add3-baa651d21532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4232ee-ff80-4d5d-9f80-6210f6274b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845b017b-5c4c-4227-8e8a-9cd2b31a6337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dec5029-9d22-448d-a488-ffd8dcd72164",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e8b62b-5e12-4f1e-a4bb-9e7590332650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c8843f9-2d5d-485f-9d0d-4aa651e09e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735f2a10-7669-4f1f-b2bd-72d8f750b60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f479ab-cdce-42f1-9360-1990f35791e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0d3136-2830-4697-a144-84b47442053b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3707b99f-1627-4702-a75e-39120ad7b189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be880fea-1514-4e94-809e-1429b2710e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21572606-e5c9-4a8d-8764-ebba1f200ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325a04f1-9665-435a-9864-abbd72562cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184080d3-9d48-4dc9-a8b4-bcaac28664b9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0f6ee9-3c7a-49ab-8270-d181c86474fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d947b92-c90b-48a4-b4e3-30d780c1d58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a542fa7b-3fdf-41ee-8ed5-fb14770c87c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9582cd4a-63fb-4480-a536-7e45c812de95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ed619d-c073-4b7f-a197-664b25720f80",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a98943-bb29-4405-a7e8-23a0aa41c3ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff59a959-3a55-4ab9-891c-656b741b6b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677b5957-0d56-4e4c-ba1b-1578ba55ca87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af096480-251c-4684-90ff-6e3a4b2cd899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fb6723-ba5c-4ba1-8019-450ecae3bbd2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1b3d5e-a0f4-4497-8824-c8f488f81661",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2271ebc-07fb-406f-acaa-0aa187dc204a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ab1055-e600-41cf-adfa-34714b29ddbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6680ae9-20ce-462c-8685-b48d9c107308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5b57ce-4311-4082-abef-3ce13bbe0b38",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622468a0-b6e9-4963-8d1b-e46a4ae982a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d382b5a-0ab2-4a37-9b3e-5ff0f4ccaddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7849b392-2967-4c43-84e2-2ea3235a150e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1c9a0f-ed9c-4fca-910a-7e04756cbea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f528fd0-59b9-43c6-a140-4203b30ec878",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063dde0d-95ce-4791-89fa-aa558fb64b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c964d9f3-5089-4a8f-9640-7d018b0fe447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb7e317-e9b3-4b1a-82c5-3847dbaeedca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3765258-f327-45df-b54a-881834007884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd5be0e-d4e8-46d6-84be-bad336acb0bb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37debbcf-bd2d-43ac-bd94-cb0570452e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ffc77f-6981-4412-ba3e-5110d8dde39c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc2d782-a795-4a82-8bbd-b65daaed5663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9acfd9-8cf2-48a5-b409-984ace5999cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c613c6e2-ba80-4148-99c9-e307feb2065d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7110ea03-5efd-4497-ae79-44e13b74dfb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dd50b4f-e071-4775-8375-a74a8db475ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b48e562-6d97-4def-a2fc-560df9feeff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e7b334-294f-4dc0-96c4-f1d3557b3498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bd20e6-284f-48b2-a275-0eaed7b90a2f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc19723-e31f-473e-9b46-287b5a85af99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3afc89-9cc0-431f-bfd4-89eff05c5dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b64f2c-eaca-44ba-937b-f899f1251798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1400d1-6a68-4bb1-890b-916f17d8e941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f48c9a-2d27-44de-98b9-fca57822ddcd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd16f57-56ba-4aa9-b3ba-cb3ed196ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f36ad126-9160-4267-bc01-0ae94c66f040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e023464a-f4ab-4434-9068-f216bfbbcb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e733bb4a-fc0b-4e79-9eb8-82c7f39d3d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16bde08-24a3-4928-83b2-e2e74fb8952e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e1d9ca-acfd-42dc-9326-b16bf065805d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d48f3d-71b8-48ed-a5c2-a9859817f235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f3c943-777e-41d2-a595-e87d852b968e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3638b1e6-bf9d-4e5a-86a1-a8f6974a4106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8210b29e-63e6-43ef-b22a-d5e7adb48975",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1427322-55f9-4290-9682-5152eee0f3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c401955a-53ba-4ad3-a36f-d8360aba45d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3042f5-cb10-4bf1-9319-999a01c2e5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f2f157-e2fb-4e8d-9627-1fe7f1e667c7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893786a1-3a04-46d7-8c62-b67b7d290bdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cfbbcd8-58d2-4b84-a509-895817e600c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84995608-b1be-4122-b3b9-061d6e80081a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5cbfd9c-4d9e-4f1d-ba02-e04bf26c84f9"
                    }
                  }
                ]
              },
              {
                "id": "2193b805-2264-4dbd-94ae-1c3ec04ff043",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "526b1fad-0d4f-4aa3-8f40-bc7fd2f577a1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb0eedf-3a56-41aa-bde0-ab85f0ee9a0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "815406c5-9b64-486c-9359-fc22f5f1923d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f6b8b7-8c3a-4015-a6a5-e234fca795e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be27aa04-4f54-4b81-adc7-649cc2df12ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71bb9a10-759a-4bf8-8c1d-24c130e2d4d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "955af105-d95a-43db-9c54-70ecdbfe0b1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87f60641-bf1d-477d-ad38-ab2141c87ec7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d374dc46-a561-4120-bb4e-bbea0a001038"
                    }
                  }
                ]
              },
              {
                "id": "3ca75eea-43da-4ca2-9131-661fc34e11a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "278f0294-9a3f-4b31-bce5-a53c3601a2c7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b0f24c-2f09-48c7-9bee-844d41be4cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3c233f89-29e5-4b38-80ba-bdaaccac47af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e369b54-d4d3-414f-9204-d39f30b48479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f22426-63ca-4fb3-bf21-e455446ab8ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f792db1a-41d9-4ff5-b19c-540fbc867a96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f314727-c983-40d5-9c56-d732eee76aba",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a6597ae-79b0-47cb-a6b2-aca8d6c8ae96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1ed3452d-8c51-4a7a-bc81-d1b71e7d36f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d76257cd-0623-4b53-a9e7-6bd2fb6dee0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d10eeb7-8014-4ead-a259-4bd45606c4c0"
                    }
                  }
                ]
              },
              {
                "id": "47e888c1-d7c0-475c-ae3b-6e026d52b905",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c6b6e4d-0255-4ad5-a2cc-8cbe18c2f3e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "473be5ce-1c0f-486a-ad3d-f8f91a9a1a90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bc0c705-7e1b-4895-a992-170aa8d74165",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fcd5bd3-aabc-4bb0-9d90-8c0d5e07737d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c99f7d51-de1f-433c-a263-e4080f85eade",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "905901e1-a4f5-4c40-ac17-ebf5773a87e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79d2358f-dcda-4270-97be-5d320c0b803d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6671efe5-3ea4-4366-afb6-9668e3247990"
            }
          }
        ]
      },
      {
        "id": "cce373d1-2a16-4c94-8ffa-01e55ff5c89a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e470db18-e848-4b57-8b3f-57ce7f0cf88b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "876ed74f-7ca1-4f77-be8c-96b173dd4cde",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5a4919c-5203-4ab7-87f3-ddef59404d68",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e259e3-acbe-4ff5-ab76-4fb26cce1a19",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3581b436-fdcd-42b5-b308-3fd45a282191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ef198-8dde-4219-9562-50727ccdbc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02c66b94-1416-48be-a08f-aded2f26f00f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "383ac822-7c74-4e75-97c7-647a91d79a40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42c12788-be1a-4e3c-a3f9-8d1e23c09237"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85e2324b-771f-4018-ada1-3d7c62350aaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5576b40-0f8a-4bbf-963d-9d3c139b8e0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9dd555b-53cb-4f31-81c8-4d8e70667725",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "12211ca5-6364-4cfe-8220-ff5140609b53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fb86e3f-82d5-444f-a531-6e6ff1f7576a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "897ea158-22da-407c-bc8a-39ef2a15976a"
            }
          }
        ]
      },
      {
        "id": "b09b313f-91ee-4b25-b9b3-a25ee35b4d24",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "807e073d-d063-4c7f-92da-1e0e60433741",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b2ad7cf-70fc-41e8-b318-1bfa1cdb1dae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28a7fa2e-e984-4f44-9e53-ac7bccea9f19",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b03333-d835-448c-83a6-8ab11336b891",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "056ab3d3-9474-4c35-8923-4d2cb89e047c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57facd5a-1635-47b3-a5df-6aff6fd0a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90d22dcf-feee-4532-afbb-c72de662f906"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dedfa737-a413-48ef-ac9d-935a47a12b95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c91f083-ae24-4122-861c-a023cf7664eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae21ad81-eb29-442d-b969-b09a27b15836",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10f5e50e-d954-4799-a4d7-2cb484721474"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9beda116-008c-4840-abdc-6de8e362911a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c36b235b-3fcf-4582-9fa7-f0ad148dc2fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63f462e6-9836-4f49-9ed6-db37884504fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcd3ab81-cc6a-4ad0-abac-8b769d4d98ef"
            }
          }
        ]
      },
      {
        "id": "79156282-aebc-43c7-a2cd-6d8518473303",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "456c3149-0400-4459-b5af-2e57ba562a84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acfb95ba-def8-4577-8774-eb87c2fa6015",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fd219cd-53de-43e8-865a-7b92523db3b1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa22bb2-0a6e-40f2-870b-279a58d16d53",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8775bd60-d992-4e04-bf9c-94abd44da11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b828b53-f7f4-4292-aeaa-42cb97e254b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd8c104a-df34-494e-92b0-322c6130859e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a74c3f7-779d-443d-ac07-5fe6b373a6c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4eeac768-b892-4f07-83d1-d6075bfe1796"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58a8d5b7-bad3-4341-91cb-9474b85c0224",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3af698c6-0dec-4093-a96c-8fa5f486a257"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4adcb10-1cfd-4afc-a079-7b762bf280d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7972265a-0fd4-4b55-a09a-315c163aec7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2ee6fdc-311f-463b-ba47-e4aa22cde6f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "440f8e06-8155-4ab2-8c88-14c85758b85d"
            }
          }
        ]
      },
      {
        "id": "921660ac-4c94-407b-b2b7-bf6063fe3046",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85484547-a08f-4e6f-bbc2-2118e91a65cf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d7dd631-2a64-4d99-8cb2-bc91ae4ff292",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6604adfd-eab1-4012-b7dd-20923cbca24c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03efee28-5c86-454e-bc14-2abacfa7b046",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24308af6-3196-4a4c-af14-1664810dd337",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 59.754448398576535,
      "responseMin": 10,
      "responseMax": 1288,
      "responseSd": 140.50949559406249,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696552411424,
      "completed": 1696552440517
    },
    "executions": [
      {
        "id": "58b0c5fd-3da5-4af6-a6fa-510c0dead4a3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "22dc5e4d-4347-4a67-a8ad-48ec6ce5cfb8",
          "httpRequestId": "5b16bf43-9e95-4cd4-b20f-e3a98dc5de64"
        },
        "item": {
          "id": "58b0c5fd-3da5-4af6-a6fa-510c0dead4a3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9e2f2a26-2f9d-463a-b6e6-d6d0b69f996f",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "80cb04ed-6019-4aca-8791-8510c5ee07bf",
        "cursor": {
          "ref": "eff026cd-b89b-4df7-ac32-0f3213514903",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fea07401-14fc-4632-8e15-b51789315c9e"
        },
        "item": {
          "id": "80cb04ed-6019-4aca-8791-8510c5ee07bf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f1f8ec9c-33c5-4510-8c71-5f2c6e84746c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "6277a26f-661d-41ee-afc1-e4c60852d520",
        "cursor": {
          "ref": "7ec91cc8-40fc-4cb6-ac2d-479f23bf34cd",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e5c85d82-0c7a-4b4e-9385-4a29dba94b15"
        },
        "item": {
          "id": "6277a26f-661d-41ee-afc1-e4c60852d520",
          "name": "did_json"
        },
        "response": {
          "id": "9f9efa8b-d0f2-4a60-b45b-2e2ecf89aa39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 372,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df080f0-3e4a-4f9d-a61a-74c7780231e1",
        "cursor": {
          "ref": "d4a3139c-0027-49c7-822a-75a91505fff5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b2305c3-aeb1-4bdb-9b49-680e9254dd25"
        },
        "item": {
          "id": "4df080f0-3e4a-4f9d-a61a-74c7780231e1",
          "name": "did:invalid"
        },
        "response": {
          "id": "bb9ae17a-c682-4576-b0de-5b70a9ae8c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df080f0-3e4a-4f9d-a61a-74c7780231e1",
        "cursor": {
          "ref": "d4a3139c-0027-49c7-822a-75a91505fff5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b2305c3-aeb1-4bdb-9b49-680e9254dd25"
        },
        "item": {
          "id": "4df080f0-3e4a-4f9d-a61a-74c7780231e1",
          "name": "did:invalid"
        },
        "response": {
          "id": "bb9ae17a-c682-4576-b0de-5b70a9ae8c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c163c72d-1db0-48c6-8b16-6942ded76aaa",
        "cursor": {
          "ref": "974126bc-4e42-4040-9476-ce742be90fde",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fbe3ffa3-ab92-4e46-bf79-6aeef7d11376"
        },
        "item": {
          "id": "c163c72d-1db0-48c6-8b16-6942ded76aaa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e34bfe16-0917-4091-b443-f5ac512ecb22",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da320d05-b684-4d31-ba1c-970e5dd686d6",
        "cursor": {
          "ref": "307e3ecd-92d1-4c94-b692-0771d9777957",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "48f88f64-eafc-4dde-896c-4a13e2cf60c6"
        },
        "item": {
          "id": "da320d05-b684-4d31-ba1c-970e5dd686d6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4d0f0641-5319-4248-bb65-acae80137290",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867b6630-6771-4b20-981c-9d9e6e42a4b4",
        "cursor": {
          "ref": "acf4098a-4488-4a0f-8ab0-0c8224194f18",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c8c54119-6dd5-4f1d-9fc8-62f4bdd41ebf"
        },
        "item": {
          "id": "867b6630-6771-4b20-981c-9d9e6e42a4b4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a6dda2a3-4817-4f4e-9ab4-535d877dd286",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d67ed1-13f1-4afa-b0f3-9f0cded4d000",
        "cursor": {
          "ref": "8a841f44-8c04-4bf9-84a6-deccfd0e9da4",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64bbc743-7669-469f-a4de-3a1f891cb8a4"
        },
        "item": {
          "id": "76d67ed1-13f1-4afa-b0f3-9f0cded4d000",
          "name": "identifiers"
        },
        "response": {
          "id": "06b41852-7f3f-4809-99e0-6b0aee9bdbdb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "405274bc-9551-4fcd-9e44-a5669889a1da",
        "cursor": {
          "ref": "34a0cf95-3fde-4e41-a772-051e7174bd08",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0561e671-8234-4414-9e4c-c39574cf993f"
        },
        "item": {
          "id": "405274bc-9551-4fcd-9e44-a5669889a1da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b2d69cdc-23c6-492f-be65-4fb110790795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f80bb4f-5daf-44f9-9e93-33ea635bc1a7",
        "cursor": {
          "ref": "ddb1b62e-5141-4d01-8388-7482f42d9b56",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "52b2b8ee-89d7-45ef-bd27-85709d9ddd9d"
        },
        "item": {
          "id": "4f80bb4f-5daf-44f9-9e93-33ea635bc1a7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bcbf465e-9976-47b9-a4c6-15dca1def48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6af117-ac5a-4daf-ae7e-161367079e2e",
        "cursor": {
          "ref": "db11e82a-8168-434e-b74f-4ac9505aeb6f",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "de37c9f1-6075-40ed-90c9-11e19b954f6b"
        },
        "item": {
          "id": "1b6af117-ac5a-4daf-ae7e-161367079e2e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "751ea755-ae72-40f8-9bed-abad8a8c6efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e7be63-7c6d-4168-b290-c6e054163206",
        "cursor": {
          "ref": "bfaad626-4ebb-4963-9bf1-39000d7a6813",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dd286efa-0010-4e1d-b771-4ca01bc7c14a"
        },
        "item": {
          "id": "b3e7be63-7c6d-4168-b290-c6e054163206",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "db6e4c2a-b74d-4b8e-bda2-6369a2e00f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43bb6c4d-d935-4e3d-b29b-da0f1279aa3d",
        "cursor": {
          "ref": "1af092f6-4dfe-4cb2-8de2-72641e0496bb",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "642b1401-1a22-415f-b98f-c9eabd1f6289"
        },
        "item": {
          "id": "43bb6c4d-d935-4e3d-b29b-da0f1279aa3d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1ca5367d-4cd5-4e8d-b8d1-a67f529bbbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6552c8ef-50dd-4e14-b7c0-200eafca016f",
        "cursor": {
          "ref": "1d15f6c9-13d4-4928-9eae-4b5a9a087666",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3ae79dd7-3703-4fcc-97db-febd1e118b1d"
        },
        "item": {
          "id": "6552c8ef-50dd-4e14-b7c0-200eafca016f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a33bd22f-7374-42db-a164-8b42bed86caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b781309-cfea-497b-b5dc-fda4a5082285",
        "cursor": {
          "ref": "5d49a75a-0064-4acd-a280-2a6aa38ab0e2",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6e6ce9a0-c74f-443d-b0f1-3011930d9120"
        },
        "item": {
          "id": "6b781309-cfea-497b-b5dc-fda4a5082285",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2377c470-0b81-4fce-9003-d9df73c573ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca72da7a-f705-4730-bdf0-624bd2e3affa",
        "cursor": {
          "ref": "0f65acee-7bf2-4bc7-9cb1-242fe61223aa",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0746369a-8ac1-4826-9080-0ed4d28e00c1"
        },
        "item": {
          "id": "ca72da7a-f705-4730-bdf0-624bd2e3affa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d003dfca-4bc5-4cfa-b226-6c1e403a8aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df022f0d-ede4-4e7c-8385-ee3e415e36da",
        "cursor": {
          "ref": "b107fd03-a631-4ee9-95a3-1f1c7dc9035c",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "774e7fb1-7533-485d-8a43-08b81db7a0b1"
        },
        "item": {
          "id": "df022f0d-ede4-4e7c-8385-ee3e415e36da",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2afefc1b-8e7f-47f0-8362-9d48271bed02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa41f286-4a21-483e-8f07-9b5f6310c0db",
        "cursor": {
          "ref": "3d1e7d11-4062-44a7-9ec3-77c1aa71767f",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a951827f-1d0b-48be-94d1-21c27c448021"
        },
        "item": {
          "id": "fa41f286-4a21-483e-8f07-9b5f6310c0db",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "51e01f1b-f659-4b48-b325-0c4ecf81791b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfc8118-9bea-4bd3-af13-f7fb398dd3aa",
        "cursor": {
          "ref": "59ca44f4-301a-4eea-b28b-103c053c5996",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d081ab5c-44e5-4b02-bd82-07546e995969"
        },
        "item": {
          "id": "1bfc8118-9bea-4bd3-af13-f7fb398dd3aa",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "273bce0b-bd99-45eb-9188-511d4a5ce2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ce3b3b-90ad-42fc-a686-dad6b4a79ed4",
        "cursor": {
          "ref": "53020456-582d-4926-bb00-6a74ca9c685f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "322b3e5e-c1f5-4560-88c7-6287fc484e23"
        },
        "item": {
          "id": "22ce3b3b-90ad-42fc-a686-dad6b4a79ed4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "93d444da-3e9f-448e-82d2-722a87918e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c38453f-8320-40e5-9db9-6e8863d609d3",
        "cursor": {
          "ref": "17549737-cff8-4a34-8fae-ad903873d7f0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "891a2a29-982b-480c-a84a-0164e77fab95"
        },
        "item": {
          "id": "7c38453f-8320-40e5-9db9-6e8863d609d3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "73a5c6e7-5fc2-4718-a82b-2f7b9a816061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155e5a4f-7c78-49da-806b-c8ce1a4d7491",
        "cursor": {
          "ref": "4730e501-6766-42dc-9e3c-7a20910a02fd",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e6691683-ccc2-402b-8a53-c02b27bbe943"
        },
        "item": {
          "id": "155e5a4f-7c78-49da-806b-c8ce1a4d7491",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cdee4617-1b33-4b65-ac73-7135166910cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d313a26-5407-4c1b-863b-3ea239553286",
        "cursor": {
          "ref": "ffd9a3a0-d221-48cf-926f-4a7cd176d148",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5080dddb-3203-4dab-8445-db3f34c716b5"
        },
        "item": {
          "id": "7d313a26-5407-4c1b-863b-3ea239553286",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fba50b6b-2bec-45ff-84a5-16f394ce9001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b736553-1e67-4a54-bad5-9976dc3cd1b4",
        "cursor": {
          "ref": "510ba666-af0b-472c-96f2-430511e213e3",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "83b3b907-26f1-4996-90d9-33d9e9fa9ad4"
        },
        "item": {
          "id": "0b736553-1e67-4a54-bad5-9976dc3cd1b4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f7af9a4c-58af-4a5f-bb99-fcfcaf562850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf1e69d-abce-4050-8957-dec38daa2c0a",
        "cursor": {
          "ref": "ec62e72d-3d74-4ce5-8f10-7b2dd8301991",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d43e1fa6-2f54-49b4-8ea0-e08a1b65ed9f"
        },
        "item": {
          "id": "aaf1e69d-abce-4050-8957-dec38daa2c0a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c90b8f83-b543-431a-ad01-021bd7cb7f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb1cdf3-8a89-454d-ba03-0da107654218",
        "cursor": {
          "ref": "f651ffbf-0a85-450f-b9cd-5159cc807a0d",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0eed928b-70b6-42d4-ab88-b88e41baa8aa"
        },
        "item": {
          "id": "5fb1cdf3-8a89-454d-ba03-0da107654218",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8d891581-4d1c-4972-b6fb-68c24d2171b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dddd9d6-7bba-4b3d-a77d-90c51f9391c2",
        "cursor": {
          "ref": "ab240fc7-a944-4a00-99cd-be7530d2968f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e895337b-cc81-4376-91fe-c294b694bd4b"
        },
        "item": {
          "id": "2dddd9d6-7bba-4b3d-a77d-90c51f9391c2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "79eca208-b939-4ce9-a5eb-d11d43e2ce37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd9bcba-239b-4a73-aefb-493a2e4eb9b2",
        "cursor": {
          "ref": "8217b297-17ad-44c6-8b9d-71934592a291",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e3acac17-104b-4e66-8143-69c2c839b33e"
        },
        "item": {
          "id": "4fd9bcba-239b-4a73-aefb-493a2e4eb9b2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "65b3bece-431a-48d9-838d-5ff9aee95ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36afd5c-7e37-4dd3-b9c8-9a88d8d08fec",
        "cursor": {
          "ref": "91c1714e-fbd3-4384-a6a0-97c1cf5de43a",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "784c2e1e-2d58-4a29-b32b-cda3fff2809a"
        },
        "item": {
          "id": "a36afd5c-7e37-4dd3-b9c8-9a88d8d08fec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c7e7691d-8b3c-44f7-b008-7d0063b6d782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4953f621-d1a5-4d24-a0dd-4b5a3da3b43a",
        "cursor": {
          "ref": "2abe1f6f-8946-4a41-86d4-65d7fae2a35f",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "daeeb19b-1af7-4480-8ef8-874dbb7063eb"
        },
        "item": {
          "id": "4953f621-d1a5-4d24-a0dd-4b5a3da3b43a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "35c77c1c-d88f-4f49-a794-f7cd2139712b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bf2d8b-b032-456c-b9cf-117055e06123",
        "cursor": {
          "ref": "588056de-ebd4-40f1-b1d6-df8d25b19de9",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6986092-f95e-418a-ac28-fcc9f279fec6"
        },
        "item": {
          "id": "b3bf2d8b-b032-456c-b9cf-117055e06123",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "299ffe26-81b2-400a-978c-9cf857602fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718a557e-5435-477a-9496-5f3672e95717",
        "cursor": {
          "ref": "6098e241-467c-4ce0-8adb-370ba55a18a3",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "757049c0-0ca6-4d6d-99c6-1a81379e38ed"
        },
        "item": {
          "id": "718a557e-5435-477a-9496-5f3672e95717",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "656d3cf9-c978-4342-85e6-6fa294d82a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bd9090-d28b-413b-97aa-fe483647a63a",
        "cursor": {
          "ref": "a96a6615-5a05-4135-8d6b-23ffe13b48b4",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1cec92bd-e132-47ed-9dd3-52b44f508dcb"
        },
        "item": {
          "id": "e7bd9090-d28b-413b-97aa-fe483647a63a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5986c32e-49a3-4f37-9361-49e8367d96c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b094ce5-5d95-4212-91c0-6fe880fc56f2",
        "cursor": {
          "ref": "d38a0057-6b80-4c5e-8c0e-3e011ece09c2",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5461c5c2-70e2-44d5-90f4-b31fb1953805"
        },
        "item": {
          "id": "8b094ce5-5d95-4212-91c0-6fe880fc56f2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "78e1833f-75c8-4263-b4bb-dd7435444427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896555b8-ec70-4626-b72e-f060c951a88b",
        "cursor": {
          "ref": "9ab79128-3b2a-47a0-b4c4-27890ad6cf7c",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b3198c1d-f7ae-4680-98a1-2891ebd940b2"
        },
        "item": {
          "id": "896555b8-ec70-4626-b72e-f060c951a88b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cf78caf2-da49-4a24-874b-54292c27bd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fcf13c-7722-47ad-902f-cd5c597c0640",
        "cursor": {
          "ref": "babcb1f2-736b-4de0-9679-762852da6eb9",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "93f0da07-9917-44c9-b315-4f3cb33cbbe1"
        },
        "item": {
          "id": "12fcf13c-7722-47ad-902f-cd5c597c0640",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0762a6e3-0df5-49c0-94cb-473ff29a9077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9948ffd2-c07a-4220-bcbd-6d258cb0dd28",
        "cursor": {
          "ref": "d9c5a04d-f256-457c-a3c2-ba6de700d8d1",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "857ef2f5-66fa-452a-9106-f89a5042767a"
        },
        "item": {
          "id": "9948ffd2-c07a-4220-bcbd-6d258cb0dd28",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ffe2d6c6-41bf-468e-8f97-6018eb4658a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d82aadd-ac7b-4d0d-b532-62ad7763ee8a",
        "cursor": {
          "ref": "f6645a44-96ca-46f6-ba7b-5a6f3c47e4d6",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "318cb706-38b8-4284-93bc-951dd3510524"
        },
        "item": {
          "id": "8d82aadd-ac7b-4d0d-b532-62ad7763ee8a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b4214b76-e3d2-43d3-9f7b-ce9efbb8810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f626c9-af40-4bde-b42d-d301bf71a24d",
        "cursor": {
          "ref": "e0f4d47a-1471-44f6-9910-d47b03a332de",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bc81a8f6-699b-4589-b7cc-2e91f98761bd"
        },
        "item": {
          "id": "88f626c9-af40-4bde-b42d-d301bf71a24d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "92d945f4-9e40-42d6-ac83-c2e8e64a3b70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6259a185-a8a7-4a9b-a619-69a99be2a626",
        "cursor": {
          "ref": "bad0c1c7-9905-46df-a2dc-c1a59d50283b",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dab361a6-8098-4df3-9da7-63ab4e02c939"
        },
        "item": {
          "id": "6259a185-a8a7-4a9b-a619-69a99be2a626",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fe295f8f-d54b-4589-9a20-956788841c6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c1218db6-d9d5-4866-a1bc-798ce65a3c91",
        "cursor": {
          "ref": "b7ba268e-648e-4ab5-bff6-5929797efed2",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d4e8aff5-ff23-499b-a3f9-dd97ae13d6a0"
        },
        "item": {
          "id": "c1218db6-d9d5-4866-a1bc-798ce65a3c91",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "47880d77-1915-4f4c-83b5-6bbea12da9ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bc715078-cc91-44c0-b428-13d9db170e4c",
        "cursor": {
          "ref": "821ecf8f-3e44-412e-a94b-053a0267de07",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "55410d4e-8ac8-429e-a24e-11b33ac94706"
        },
        "item": {
          "id": "bc715078-cc91-44c0-b428-13d9db170e4c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c03cc49a-d0ac-4b7e-a3e5-73110da822f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92005398-6760-49a1-b05f-677fa032a221",
        "cursor": {
          "ref": "e2547f8c-6438-4905-8a91-3eed1a3879bf",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "232ae8f2-d3f9-469b-b501-8f97e04205f7"
        },
        "item": {
          "id": "92005398-6760-49a1-b05f-677fa032a221",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3efb8013-7314-45d2-b3dd-602e32330719",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8863656f-1447-47ce-982d-a18804d8d010",
        "cursor": {
          "ref": "33d8c274-9760-4a92-bbdc-3bcd0a46a119",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9fbccda4-77ae-4a58-b38b-ef39425c95ba"
        },
        "item": {
          "id": "8863656f-1447-47ce-982d-a18804d8d010",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4804857d-db96-4939-a2a9-5b27264af546",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9cc6d442-b7dc-4753-9908-1d46c9856767",
        "cursor": {
          "ref": "cebca7c8-49e0-43cc-a714-ce65aed46f58",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7ae4ead5-78d7-4439-8432-2b30e90e0595"
        },
        "item": {
          "id": "9cc6d442-b7dc-4753-9908-1d46c9856767",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f65974a8-190f-4b2a-852f-71dbbac2ed34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "976eb969-cc68-4891-84a1-892027139d55",
        "cursor": {
          "ref": "2967867a-ddd4-499b-b496-ce0aa102faf4",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "866f0534-3df1-4a16-a34c-0420d43db701"
        },
        "item": {
          "id": "976eb969-cc68-4891-84a1-892027139d55",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0ab312a3-ed04-4800-9854-b7ca00b07181",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "13d5ad0d-2194-4f0d-82a3-f0e2ac05b51f",
        "cursor": {
          "ref": "385e4010-d940-46c8-ae4d-49f50196ad2b",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f18a223-76c0-47f4-8d4a-e803789268fb"
        },
        "item": {
          "id": "13d5ad0d-2194-4f0d-82a3-f0e2ac05b51f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "652ea7c4-546d-4b8f-8308-26cbbe812fe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2b83f2f2-8670-42ab-980e-9c28dc745407",
        "cursor": {
          "ref": "26f56816-983c-461f-91d7-10b3b1c217be",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "89f3ca22-ac3e-40e7-a642-a2d3d3885f01"
        },
        "item": {
          "id": "2b83f2f2-8670-42ab-980e-9c28dc745407",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b2f60f9e-7264-430e-93a8-e0b45df6fd3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "68f58ade-f451-4fe5-8ae4-5131533c6599",
        "cursor": {
          "ref": "ac578c03-0b20-4e8e-a12f-47626913a58d",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a749bed1-2fe1-4d14-8ae8-ca23dc67b2ee"
        },
        "item": {
          "id": "68f58ade-f451-4fe5-8ae4-5131533c6599",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "40a0fd43-3e92-4934-8027-6c7c9f24d5ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4a1c50cb-338a-4265-9023-91765af23b54",
        "cursor": {
          "ref": "66de1fce-e574-4f90-ae91-8e654b350187",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c10f6ebb-d6a7-465b-bbdb-e6815b30bdd3"
        },
        "item": {
          "id": "4a1c50cb-338a-4265-9023-91765af23b54",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3f3515c-b493-48ff-8f95-b76154d3e9b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "104a8ab8-55ac-46d0-9ab2-2af6d2ddaaa4",
        "cursor": {
          "ref": "8c5c1cae-b2d0-40d8-ab93-f09360449a42",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "88899dab-d4d7-4bcb-aca1-3ccc229765fa"
        },
        "item": {
          "id": "104a8ab8-55ac-46d0-9ab2-2af6d2ddaaa4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "462d1cd4-ff6e-4c6d-b6b5-9c57746ec4a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bb00b1c8-31d9-413b-b85b-3990e6527d5f",
        "cursor": {
          "ref": "b65ed490-6abb-4141-942f-10a2acdeeccb",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95657f85-5b93-4725-a21b-1f2e18f7dcbf"
        },
        "item": {
          "id": "bb00b1c8-31d9-413b-b85b-3990e6527d5f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "daba8580-af67-4d49-ad48-e489a245fbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78590a2f-a2bd-4c3f-bf71-ca1d146f3a76",
        "cursor": {
          "ref": "c902438c-2f18-402d-85ea-2e834bb74240",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dece7dcb-df79-497f-ae3f-2bde9e80f88e"
        },
        "item": {
          "id": "78590a2f-a2bd-4c3f-bf71-ca1d146f3a76",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c3a7c08a-b90c-4dcb-a4ce-febdcf5a41a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53825cbd-8988-43d2-97f5-0720c5c79c45",
        "cursor": {
          "ref": "ca2c1a51-943d-416b-a60a-f5312fab6944",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5edcbd7e-bce4-455f-9f12-7f682cf5cdb7"
        },
        "item": {
          "id": "53825cbd-8988-43d2-97f5-0720c5c79c45",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0137ba33-a229-4d4c-881a-68e311c26498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e526b5-b528-43b3-81a9-38558405ed1f",
        "cursor": {
          "ref": "589bbe88-eb94-44e6-acfc-869c2cd820c2",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7465ece1-a950-4dd5-8ff3-e7ccb8096e53"
        },
        "item": {
          "id": "34e526b5-b528-43b3-81a9-38558405ed1f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6ae01806-93c4-4b80-9f9a-6e214c0e781a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c655bc5a-7d4d-4bce-953c-5439fa37018c",
        "cursor": {
          "ref": "237d7763-0563-4519-a238-bfb66e0c1350",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "119d9ce8-0e4a-457a-b9d5-d5da5bb9ac7d"
        },
        "item": {
          "id": "c655bc5a-7d4d-4bce-953c-5439fa37018c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7fd712cc-8028-40f2-a37e-34f30d0aba30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cdba0d-275d-4d42-b959-02aec0b79019",
        "cursor": {
          "ref": "9926cc5b-1dfc-4a9a-a24d-de224d7fab8a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "919eb997-fe41-4847-af5a-6c489fca0b1c"
        },
        "item": {
          "id": "e8cdba0d-275d-4d42-b959-02aec0b79019",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "215a5f6f-9c01-42ba-bad0-5c35437c8e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de27e4a-dc6d-4be0-94f4-d333ff6adb01",
        "cursor": {
          "ref": "a2f9a787-9865-49ea-931e-d56b984d2962",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2cac82a2-92ce-4ca7-a9bc-3eb6034f4461"
        },
        "item": {
          "id": "0de27e4a-dc6d-4be0-94f4-d333ff6adb01",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "321cced7-35fd-443b-a830-13f1a4297b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f40962b-dd5c-414f-944d-2c961cf9701d",
        "cursor": {
          "ref": "6379e150-7cf7-422b-b437-642efff6231e",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "01e6879f-dea6-4df7-94cc-ddc60e730e2c"
        },
        "item": {
          "id": "1f40962b-dd5c-414f-944d-2c961cf9701d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4bcafe47-638a-424d-929a-c0c680e565f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978ca4db-2002-4a9c-a54b-b02fbfc79736",
        "cursor": {
          "ref": "6a6ebfe3-a261-4973-b2cc-c68975b0c2f9",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ac03b041-dc0b-47fd-bb11-ef2948f1105a"
        },
        "item": {
          "id": "978ca4db-2002-4a9c-a54b-b02fbfc79736",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b984d76b-426d-4a3a-b21d-ba6fa566cf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f2fd1e-dca8-47fd-8f4b-a4981718d0d0",
        "cursor": {
          "ref": "335c13fb-dba8-4d2e-b5ec-7caddbc7e7c0",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e45b4712-d7f7-43eb-a9ea-7adffbd8ad49"
        },
        "item": {
          "id": "35f2fd1e-dca8-47fd-8f4b-a4981718d0d0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2918e4b-188c-4866-8c5d-7516ac3fecc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8816bf7b-c016-482b-9dc8-e0a462d1bd9f",
        "cursor": {
          "ref": "12cc9f1a-5399-4bc5-a396-8887f961b0b4",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "98698381-c3e0-465a-bb56-27cf95cf791e"
        },
        "item": {
          "id": "8816bf7b-c016-482b-9dc8-e0a462d1bd9f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a11d0520-1a7b-41c3-903d-0026e6f4da23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390f1478-7a1d-4320-9f46-b041933dc7b7",
        "cursor": {
          "ref": "808e5b09-14c6-42bf-b1cc-7e0d1b841f92",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2ecc43dd-79cd-406f-b586-b43d4dc1be08"
        },
        "item": {
          "id": "390f1478-7a1d-4320-9f46-b041933dc7b7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b50aae2c-acc7-4c10-b103-ccccc79c9830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee7871f-21ed-4428-8bcc-805e86d4e5ab",
        "cursor": {
          "ref": "75f0b7f0-eec0-458a-8549-74c61799dc95",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a99f9d02-240d-4307-ab51-1d5465229452"
        },
        "item": {
          "id": "bee7871f-21ed-4428-8bcc-805e86d4e5ab",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a2375429-b2f9-448d-813b-a48134a54867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834ef6e4-f511-4334-9a95-4122d05700eb",
        "cursor": {
          "ref": "72f9534e-7418-478e-b2f1-789d22a9ab9c",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "37cda37b-87ca-4553-82b3-fa7f1bde2d03"
        },
        "item": {
          "id": "834ef6e4-f511-4334-9a95-4122d05700eb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fd22af1d-64c0-4208-9608-ddb1e08e2f28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c12d31a7-572d-48ce-a83b-a26b3b895a32",
        "cursor": {
          "ref": "041f870d-4050-442f-90d8-f66803342961",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d997938c-dba9-4ddb-add9-a32122b1d7a4"
        },
        "item": {
          "id": "c12d31a7-572d-48ce-a83b-a26b3b895a32",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "68898970-d9fa-4128-99f0-7eea03f9785a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "360e95a7-39ee-4f37-a682-6488fedf7097",
        "cursor": {
          "ref": "a982fe9a-19a3-4de1-84e1-c3a3d2654cb7",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7eb94512-7877-4c7f-847f-f030c688866f"
        },
        "item": {
          "id": "360e95a7-39ee-4f37-a682-6488fedf7097",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "792903e4-dcaa-4ace-8b77-b2948e4024fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f1b58019-50f9-4fde-b61a-23c99680cc0c",
        "cursor": {
          "ref": "f6c9ec0b-e5ad-44c1-a4e4-b2f29ff8ccd8",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73e7479c-4afc-4542-9735-31c4e25acaf4"
        },
        "item": {
          "id": "f1b58019-50f9-4fde-b61a-23c99680cc0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e9640422-108b-4985-8be1-3f29f3631abb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "936ffbaf-d4ab-48c5-be72-10e35d8f3f71",
        "cursor": {
          "ref": "23072c7a-69c6-4b0b-8fc4-80db084bf409",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b3f53101-087b-4428-b878-e33265ad8012"
        },
        "item": {
          "id": "936ffbaf-d4ab-48c5-be72-10e35d8f3f71",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "153c02d2-a7db-42f6-b1a2-f2164134f4db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8826596a-2e87-40f0-b738-e17fd9e56047",
        "cursor": {
          "ref": "b63cd986-8d36-4dda-b30e-bb5aad7cb0fc",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4d893bda-9467-4eb1-8f25-5b7f65cb5967"
        },
        "item": {
          "id": "8826596a-2e87-40f0-b738-e17fd9e56047",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e897b6f6-682c-44ff-89c2-e4ecc1ee9140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00f686b-4597-4a0b-a1ed-9da30adf113a",
        "cursor": {
          "ref": "c0e1d5dd-9576-4f01-991d-59e0e7a34b79",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "455d29bd-54ee-4db2-810e-81d353c2ffa7"
        },
        "item": {
          "id": "d00f686b-4597-4a0b-a1ed-9da30adf113a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "11bdb95f-7ae8-4f35-85f3-6c4e5b4075dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9714bd02-eef9-4452-b986-d5f7874656e9",
        "cursor": {
          "ref": "07885b76-4a86-4cf2-9515-4ae90bf02b7e",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f84f37e5-8d08-4f5d-a469-e6bede8111cd"
        },
        "item": {
          "id": "9714bd02-eef9-4452-b986-d5f7874656e9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "364fd1f7-1bb8-4064-889d-7a4b36316e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e912f8-8808-4300-bb9b-f38207b2ea8f",
        "cursor": {
          "ref": "b730d01a-e0fc-48b6-a2ce-7b3baba39741",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fe4b1329-bcd6-4d03-9a6c-f03f7ebb5c88"
        },
        "item": {
          "id": "08e912f8-8808-4300-bb9b-f38207b2ea8f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9bb59658-3216-4be3-a57c-3bcd21a9e43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612543c4-b3d9-4e93-8413-2ad057b42d6e",
        "cursor": {
          "ref": "006f9e29-8e2a-4972-8145-3612dd0a2c1d",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7d2f2466-15b9-4056-9fd9-b8bab7972b27"
        },
        "item": {
          "id": "612543c4-b3d9-4e93-8413-2ad057b42d6e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e008b8f9-a14f-4d09-bf79-00ff5e5215c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea4e38c-f8e1-4711-ae96-e27aa7d59448",
        "cursor": {
          "ref": "fc8692f7-7943-4a73-bc61-a13fea5ccc37",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9e1b9d08-a363-4663-883a-a8fb3ba44a1b"
        },
        "item": {
          "id": "2ea4e38c-f8e1-4711-ae96-e27aa7d59448",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "72de5348-8121-4659-b109-153c1dfb51c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a07468-80cd-42e8-8ec3-978268c73d71",
        "cursor": {
          "ref": "c65d4786-d87a-4edf-a562-cb961dba5fc0",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "700eb64e-2643-444f-ac81-b44667156fce"
        },
        "item": {
          "id": "06a07468-80cd-42e8-8ec3-978268c73d71",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0145804a-8211-4e30-ba33-f78656e075b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ea5994-fbd4-4a48-bad4-8e00ac88f125",
        "cursor": {
          "ref": "db187872-fd64-48d2-bf30-ca1320e95aa9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "745f6f3f-84b9-4937-ab44-811bab640f02"
        },
        "item": {
          "id": "f7ea5994-fbd4-4a48-bad4-8e00ac88f125",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8aaf1a33-faae-41cc-b323-4e5aa3dfc33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0541f8ab-53cb-43f7-831e-d32afaba6700",
        "cursor": {
          "ref": "b1837744-ce0f-4615-9068-c442c0867588",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c86b4f0f-301d-460b-a03e-0fa789d27d69"
        },
        "item": {
          "id": "0541f8ab-53cb-43f7-831e-d32afaba6700",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ab4727e1-2148-4d62-89ca-c108abeb0b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c56609-1814-43bf-97d1-4eb6f7469323",
        "cursor": {
          "ref": "f14452a7-b44d-4f22-8698-bfa6c4145487",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "327b0b06-409d-4517-972a-3f682b0e9468"
        },
        "item": {
          "id": "c6c56609-1814-43bf-97d1-4eb6f7469323",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "670a88dc-67cf-4b77-bb82-d4feaba72cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3879fb-57cf-467f-b1a3-5b8a6b4a213c",
        "cursor": {
          "ref": "18eac8f0-a691-4ba8-8d4a-5ddbdf00c3e3",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75def673-610c-47df-a30d-2f73a3bcb0b6"
        },
        "item": {
          "id": "7e3879fb-57cf-467f-b1a3-5b8a6b4a213c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "11792946-4e6c-436a-ac14-ec55b1a5a32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beebd5b3-1503-47ad-a86c-e4abc450d1f4",
        "cursor": {
          "ref": "363de85d-0e26-4917-9532-63f4fa5fd07b",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0ab53b2c-1bd2-4908-8920-b7a2755e822a"
        },
        "item": {
          "id": "beebd5b3-1503-47ad-a86c-e4abc450d1f4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "37bae750-3218-43ba-bf7d-f8b00f4ccede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55e8019-f9f5-46df-a832-fd182f672bdc",
        "cursor": {
          "ref": "38764c5e-78a9-4278-91b7-45a265b818e7",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cd478677-c1ee-46b6-a927-27d66e9a4b1e"
        },
        "item": {
          "id": "e55e8019-f9f5-46df-a832-fd182f672bdc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4ba48372-34cc-4117-9b39-7168460790f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098084a3-4fb4-4ad6-8274-cb13626b0eb1",
        "cursor": {
          "ref": "50a40309-5eaa-48c5-bfb2-954578f3c690",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "11534b21-47fb-4f72-a7a9-9485eaacdffd"
        },
        "item": {
          "id": "098084a3-4fb4-4ad6-8274-cb13626b0eb1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b9e89546-e8cc-4c80-80bf-6d0f25332d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead6e047-6e1c-4d1c-acb2-043b3a7dc20f",
        "cursor": {
          "ref": "7dc957c5-f2af-4fde-97d0-eefcaf793f62",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0fec1d12-4df4-4a0a-81c8-8b543a67ab90"
        },
        "item": {
          "id": "ead6e047-6e1c-4d1c-acb2-043b3a7dc20f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c57b4dfb-3c9e-4031-a770-ae6e919a2303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fcc738-2793-4a25-9540-ebe859c1edaf",
        "cursor": {
          "ref": "7a7831b6-2cdd-4a8f-a766-9cc033e91bff",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8f5428d2-d15e-447c-bc65-4bcb42d422e0"
        },
        "item": {
          "id": "f0fcc738-2793-4a25-9540-ebe859c1edaf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3096fe07-8195-476a-a398-ca26a3d412ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb9a02c-487b-4a6c-a469-c77415cf7dc1",
        "cursor": {
          "ref": "8e047993-9321-4326-93c8-0eb7fb019eac",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b69c8a75-bde6-4490-81ce-c74ae05ecd87"
        },
        "item": {
          "id": "fbb9a02c-487b-4a6c-a469-c77415cf7dc1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2353be92-7f37-4106-b332-178d337fe19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5634d10c-2056-431f-825c-ea53260c2d8f",
        "cursor": {
          "ref": "9930e733-63ce-43de-9a79-d314e8e93e03",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a8022307-43e9-49af-82a6-cfe6351275ae"
        },
        "item": {
          "id": "5634d10c-2056-431f-825c-ea53260c2d8f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e7b26993-abdf-4e9e-b2f3-e6bc901d20c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a17603-26e0-4e72-844b-459fab54cfa2",
        "cursor": {
          "ref": "e0d3316a-f48b-4c96-beff-bdca295f0109",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2f39c90f-855d-484f-a20d-976dd059f0d0"
        },
        "item": {
          "id": "d0a17603-26e0-4e72-844b-459fab54cfa2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b4cc9958-b96f-4ccb-befa-17cb36097b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8909fa7-6971-4aea-a8d1-031fb49f3991",
        "cursor": {
          "ref": "6cb0901b-f59e-4b45-a74c-34996af73459",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "27d5079c-44d2-4878-bb90-2e11dd93f144"
        },
        "item": {
          "id": "d8909fa7-6971-4aea-a8d1-031fb49f3991",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d1b55a50-fdcb-4954-ad26-147c4655e045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df00d90-d7d3-4003-957c-0928321f3a16",
        "cursor": {
          "ref": "5482cfee-48a6-4d83-b812-dfc0e10389ad",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b67ee782-c6ff-4aa0-9e4e-7ce5df81c39e"
        },
        "item": {
          "id": "8df00d90-d7d3-4003-957c-0928321f3a16",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e07a2e3b-6854-427e-a792-4f8830735683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8058ede-825f-471c-b9de-43d590149037",
        "cursor": {
          "ref": "224175b8-4083-486f-b1a6-c77b0295848f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "172a85ca-c12c-44fd-8384-93662266e4bb"
        },
        "item": {
          "id": "f8058ede-825f-471c-b9de-43d590149037",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "24fc8234-2763-434b-af67-b827419e6807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7743ad4-d1eb-4718-bb76-dc977e871237",
        "cursor": {
          "ref": "793d846b-df93-4a09-b2b1-c10f6d238d7e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "db934ff6-c7bb-4a5c-be9c-a158e8825d78"
        },
        "item": {
          "id": "f7743ad4-d1eb-4718-bb76-dc977e871237",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c7eb9a49-e625-4f03-8e92-096c42065691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af23db30-8f96-49f2-96c7-c4798ea9252e",
        "cursor": {
          "ref": "5dccb963-a84f-4a35-bc93-2824a1ae1ee3",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dfe94f8b-d062-4e6d-88ca-50ae94d68eba"
        },
        "item": {
          "id": "af23db30-8f96-49f2-96c7-c4798ea9252e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b1fe78b0-36c2-4643-8e46-d1c69493a47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d9a6ee-8397-4047-9325-690a368cf6ac",
        "cursor": {
          "ref": "710ec6d1-5a10-449c-837a-071d2ffb1bbb",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e572e367-a00e-4726-8ac8-a7100d0162da"
        },
        "item": {
          "id": "74d9a6ee-8397-4047-9325-690a368cf6ac",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d4f41dc9-1da6-4390-9f41-faa8463b28b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e5bb84-5271-49e8-aa93-91e4b7fb40e7",
        "cursor": {
          "ref": "a0d7c9a4-b23d-464d-b50e-8f545cb39248",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a7ed7ac6-5c32-4f48-8494-d238d2307ee8"
        },
        "item": {
          "id": "f2e5bb84-5271-49e8-aa93-91e4b7fb40e7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f2f88b85-0c26-4a44-a861-e4ba4b4ff06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6dda76-e373-40fc-be42-7e771dea3d43",
        "cursor": {
          "ref": "08445075-d915-4a86-9a83-d49b3a2ba6ae",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ee28c38a-79cf-4f07-8bb3-f0afc8e03472"
        },
        "item": {
          "id": "ed6dda76-e373-40fc-be42-7e771dea3d43",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f9df6f9a-69cd-4de1-9040-700ca18f5431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a702f4-98a3-4c5c-941b-81f590e2d806",
        "cursor": {
          "ref": "01e4eea0-9fa4-4e52-bb34-33796f086d27",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9b3a91c9-7bed-4dc9-99ad-838d5c4d63c2"
        },
        "item": {
          "id": "d3a702f4-98a3-4c5c-941b-81f590e2d806",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ebcac6f3-db9d-4a26-8b07-c2f2108e3880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfbc8b9-9b52-49cd-bb3f-af17a32cb658",
        "cursor": {
          "ref": "efcdadf1-44bb-49e9-875b-1ac44981fb02",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6375c00d-1d62-410b-ab48-cd8378eb6071"
        },
        "item": {
          "id": "7bfbc8b9-9b52-49cd-bb3f-af17a32cb658",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e3beaa76-4db0-4c39-a622-60165ef0d4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e789e323-c34b-4a54-a5bd-0a5026d460d7",
        "cursor": {
          "ref": "58eb3a0d-204c-4118-a39d-91c86c1438ae",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "21e76116-4b62-4d09-b72c-25a0f1e0d598"
        },
        "item": {
          "id": "e789e323-c34b-4a54-a5bd-0a5026d460d7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bb109276-dc46-4789-8f0d-958eb7965cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93833669-4e42-49b6-a3f7-0aa9468d48b9",
        "cursor": {
          "ref": "efb8aa90-17af-48b7-85d9-acc020d9ff46",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b8ccd690-24bb-4bff-9b5d-2d453cb3525d"
        },
        "item": {
          "id": "93833669-4e42-49b6-a3f7-0aa9468d48b9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3fb287f3-4612-41b3-a542-485ebaff7dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b040658-33d2-4b67-aebd-e0bcc9c4e285",
        "cursor": {
          "ref": "f93bb3a2-1a80-4700-8b2a-5263cb0016ca",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77a813a0-7a27-4933-baf6-2d73af56c77e"
        },
        "item": {
          "id": "6b040658-33d2-4b67-aebd-e0bcc9c4e285",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a64d3b67-4fc9-41a7-96db-761b066e3d44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da950be-f373-4779-b55e-bf80cef6752d",
        "cursor": {
          "ref": "2e34ea25-2caa-4874-aa41-b9c4e2a3217d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7f14d27c-3a68-4bde-969f-d56827336e81"
        },
        "item": {
          "id": "7da950be-f373-4779-b55e-bf80cef6752d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "96d65068-e2b5-4d92-81a9-91a71bffec3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "bf2989b4-ba7b-4cf3-bc84-a99739eb22db",
        "cursor": {
          "ref": "09b818b0-376d-4eeb-b66f-dde550ac6e28",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a4d2e58f-2bcf-486a-ae91-867e37d69f66"
        },
        "item": {
          "id": "bf2989b4-ba7b-4cf3-bc84-a99739eb22db",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bf5a9ec7-f5aa-4b63-99c6-4f8c57d60b1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "99bf9cc4-83a9-493d-b19f-cd409afccd83",
        "cursor": {
          "ref": "7baa97d1-98c3-4a87-a2c8-973f5884f20d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "50a240b8-cb6b-4414-836a-ecd61fbcd8b7"
        },
        "item": {
          "id": "99bf9cc4-83a9-493d-b19f-cd409afccd83",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0655a87-1d26-4fbf-a465-1908740b635d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e85a6b05-f26c-4d5c-8709-303327bb1694",
        "cursor": {
          "ref": "bca7f9f5-fe41-4932-b995-66fa380e4ba1",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ca032a34-6279-4300-81c4-ca373ebbaad2"
        },
        "item": {
          "id": "e85a6b05-f26c-4d5c-8709-303327bb1694",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "44862d9a-a569-4d7f-b270-a73b52d86053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "98e4ec5b-50b7-4779-9e84-ba5223ef1108",
        "cursor": {
          "ref": "0bc6f4d0-a236-4a54-8e45-e534df5c17fd",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ea38e018-055c-4d39-990d-2247cd89d62d"
        },
        "item": {
          "id": "98e4ec5b-50b7-4779-9e84-ba5223ef1108",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "86472134-4cc9-4fee-b8fd-8f830d60be3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "972eab52-dac7-40e8-8f0c-98b46caac928",
        "cursor": {
          "ref": "f30c26a6-0398-4de0-981f-d588ecd762fd",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1f1f1134-adad-47b9-b740-75f4a3f21ad4"
        },
        "item": {
          "id": "972eab52-dac7-40e8-8f0c-98b46caac928",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e7c24ef9-2990-4c58-8b74-32b14a3e4a40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "b5656209-6451-44f4-ab8c-56ccc2fdb5f0",
        "cursor": {
          "ref": "65002bfd-cc80-4ab6-a2f1-c7294d65ab9b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e7d65ec5-aad3-485c-8fff-146de5c7fa9f"
        },
        "item": {
          "id": "b5656209-6451-44f4-ab8c-56ccc2fdb5f0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1487f992-8f14-4e3e-9f08-3ff961c4d779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b737ea75-fcc6-4811-b14a-17cf6f1ffada",
        "cursor": {
          "ref": "91fb19e5-5fc2-4e9a-9fac-ae0d10e0a126",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4c803e21-53bf-4a0e-8bb0-fc886d0cf4fb"
        },
        "item": {
          "id": "b737ea75-fcc6-4811-b14a-17cf6f1ffada",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d36e9d60-3804-4ffd-9fd9-97fdb186c144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5817167b-713a-45cf-8b1f-e56aff102ddb",
        "cursor": {
          "ref": "fa4d21c0-c3ab-467a-a429-d5e11d017ea0",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8b65d5a5-7a57-439d-8cc9-ab8840dfe450"
        },
        "item": {
          "id": "5817167b-713a-45cf-8b1f-e56aff102ddb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d685e34e-ab60-457e-8461-98bdb05c5027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbaf86a-3fa9-47ec-b812-4e0d9a02ca3b",
        "cursor": {
          "ref": "b8d934db-f91b-4d66-b6d1-172e26a11889",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "62f072f9-5a5b-4330-844b-e4efddc21787"
        },
        "item": {
          "id": "2bbaf86a-3fa9-47ec-b812-4e0d9a02ca3b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "34957341-696d-4d11-af85-a958b5e5f86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6db6d00-85ea-421a-b9e8-b52b31b1fe37",
        "cursor": {
          "ref": "501f7242-ca21-4aa8-9e12-49ea8bbc13d9",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cb90e518-f31c-4d5e-92b0-b788c173c182"
        },
        "item": {
          "id": "b6db6d00-85ea-421a-b9e8-b52b31b1fe37",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c019c5f6-9849-4bd8-b387-c1e794eefd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a12045-594b-4f91-9301-301850430e20",
        "cursor": {
          "ref": "46b2e9ec-1a0e-42c9-a0db-58ea4e82df3f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c3f64f37-1038-4094-94e8-0bbc46654e47"
        },
        "item": {
          "id": "f7a12045-594b-4f91-9301-301850430e20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "aaab5ab1-c0e0-4291-9890-56910e85e57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38f85c2-e008-49aa-8027-bfd930b9e8ea",
        "cursor": {
          "ref": "b14b9333-1b40-462c-b8d2-e19e0dece3fc",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d55833bf-2094-480b-ac53-52e77d65fd5c"
        },
        "item": {
          "id": "f38f85c2-e008-49aa-8027-bfd930b9e8ea",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4589db55-bcfa-4235-bc07-33dc64f6232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e79d640-eb0b-46d1-a462-15ef6832ed50",
        "cursor": {
          "ref": "404c1d9d-dcff-4cc2-8cb1-e2ce6de27ffc",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "232d6513-8805-439d-8190-0b17bd6b0e0f"
        },
        "item": {
          "id": "3e79d640-eb0b-46d1-a462-15ef6832ed50",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "19a54347-d85b-4932-ae0a-6899f8771417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364aa2c2-0318-4560-a315-5fb7c88f14a6",
        "cursor": {
          "ref": "efb09a3b-3ec9-4cf2-acc5-f01ea2369a02",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5aad29c5-4df2-46e6-a9ae-335eab99228e"
        },
        "item": {
          "id": "364aa2c2-0318-4560-a315-5fb7c88f14a6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6bdce579-23d1-432c-96a8-639776b41db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95abda7-bbe0-4e1e-814c-31bde7f3462a",
        "cursor": {
          "ref": "515af53a-1095-49c9-8c33-270a55e199a3",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9a8abf8a-8569-499f-b967-3770144d07dc"
        },
        "item": {
          "id": "b95abda7-bbe0-4e1e-814c-31bde7f3462a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c0507e3f-102c-44cc-9741-cb64d6228089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a5f821-13f5-4822-95e0-d0544db04aea",
        "cursor": {
          "ref": "9089ae0b-2130-4fa3-928a-6ad8caf513e9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "550e02bb-8268-4cca-a7b8-85b0288d2e03"
        },
        "item": {
          "id": "51a5f821-13f5-4822-95e0-d0544db04aea",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0d939805-6d0d-471e-80f8-a1f8cfca3455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd6fd0f-6901-4495-917a-c783a5771d4e",
        "cursor": {
          "ref": "3ceafb1e-535f-45b6-8bd0-3da07c632ebe",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6fe4c5c-57a1-433c-883f-a493ec46918d"
        },
        "item": {
          "id": "9fd6fd0f-6901-4495-917a-c783a5771d4e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "18d54470-5495-4039-9a5f-edd974342528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1b40a0-0b43-4300-8355-594021f8356e",
        "cursor": {
          "ref": "6252b14d-47f7-4078-acbd-0a1733cedfbb",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6a2d1dc8-9549-4243-9b9e-c1b5f423b05e"
        },
        "item": {
          "id": "ca1b40a0-0b43-4300-8355-594021f8356e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "99784434-2985-4d28-8b58-8852687383c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ad7b87-b62c-4d99-9693-be843e78b031",
        "cursor": {
          "ref": "c69ea561-2069-4227-a938-e04a4d779163",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0a7867a5-c641-4749-855b-20f2de7bc195"
        },
        "item": {
          "id": "84ad7b87-b62c-4d99-9693-be843e78b031",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c8c2aa4f-6399-4911-9170-b52c45ac5f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1814ca0a-adb5-46a9-af36-f4deaa3f8108",
        "cursor": {
          "ref": "08b1a907-b9bb-4a0d-ad76-d05d319ad54f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9b4e1b01-7a63-4663-93b6-3456cc2613f3"
        },
        "item": {
          "id": "1814ca0a-adb5-46a9-af36-f4deaa3f8108",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f30c56b1-03d2-4139-9c15-f2c9d6eb0e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7273b689-1557-4801-a0eb-8616fdbe7fda",
        "cursor": {
          "ref": "dbb24185-8489-485b-a483-11c2a3c92120",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "602b9dcb-da11-4267-8dce-39424102f54c"
        },
        "item": {
          "id": "7273b689-1557-4801-a0eb-8616fdbe7fda",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6326893b-6015-4edf-ac07-e9e1fae9be24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285820b8-0d46-4d64-9995-fa52a3060349",
        "cursor": {
          "ref": "645f6745-5e3f-4077-88ff-5fc051640728",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ada32b38-2c3f-4c8b-b157-89e6fda0b126"
        },
        "item": {
          "id": "285820b8-0d46-4d64-9995-fa52a3060349",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3082f036-a385-4a5e-abc4-05af36f689b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e014009-af7d-4815-8d29-8bef2ef55243",
        "cursor": {
          "ref": "213e272c-9932-4144-99f5-dfbeaece873f",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3c4d3ab8-c607-4da0-8f8d-05490e8c0196"
        },
        "item": {
          "id": "2e014009-af7d-4815-8d29-8bef2ef55243",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "30da68b1-581f-4057-af34-a4512f60832c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c817ef-5bfd-4a23-aa40-76a7355b3fae",
        "cursor": {
          "ref": "838c07a9-93e8-4a46-8daf-f3ca80324474",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "36945773-3255-492a-a29c-00f209e98084"
        },
        "item": {
          "id": "63c817ef-5bfd-4a23-aa40-76a7355b3fae",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a529e9b1-59e0-4859-929d-5dd1b8acd139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d408334-ff6a-4277-80da-ad86f77fd931",
        "cursor": {
          "ref": "0998a215-0ea2-43b1-9ee9-49c1b0ee119d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e09b115d-d366-4a6a-a9ab-5a5ee2ccabbc"
        },
        "item": {
          "id": "9d408334-ff6a-4277-80da-ad86f77fd931",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f2290d7d-c03f-4adc-a8f4-1c993cea5679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af35fe-14ed-4f04-ab49-97a689b4eb78",
        "cursor": {
          "ref": "4263aa9a-a161-46c9-a4d7-08e06e502ad3",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3b9c6f2d-a56e-41e0-9367-35feb3b8c290"
        },
        "item": {
          "id": "55af35fe-14ed-4f04-ab49-97a689b4eb78",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8a7b4a9e-01b9-49fd-8644-1987d98cfd2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abba1f00-c64c-4a6b-b511-f10a313e17f1",
        "cursor": {
          "ref": "92b51f95-9896-4af7-9b13-ea9edf478700",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7364e97b-7664-4d9c-bc8a-7f10ab8c50b5"
        },
        "item": {
          "id": "abba1f00-c64c-4a6b-b511-f10a313e17f1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3f576a7e-29d5-4997-bf41-28ccfc501036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28790449-d32d-498c-90e7-bf6c2719a650",
        "cursor": {
          "ref": "252bbf34-fe58-42cd-9c80-ba65161e09df",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "252d0db0-d554-4475-bbb7-8058a0c273b4"
        },
        "item": {
          "id": "28790449-d32d-498c-90e7-bf6c2719a650",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0cb9671f-479f-45fd-814a-b9353c07abf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9673ebde-c081-4311-8a05-2eee608f883a",
        "cursor": {
          "ref": "2022e77c-39bb-4deb-adcf-d6dcd6422f0f",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1a9f51ea-10c5-4b14-b4f5-b30210feee30"
        },
        "item": {
          "id": "9673ebde-c081-4311-8a05-2eee608f883a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7a7c5d60-c086-490f-a2cb-45cd304b3e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe7ba18-ad5c-41e4-9cc1-c85d426cb1e8",
        "cursor": {
          "ref": "73334f96-e43c-431e-b73c-411a49777e59",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "944f7912-3fb2-4a2e-b38c-820ecb253c3a"
        },
        "item": {
          "id": "dfe7ba18-ad5c-41e4-9cc1-c85d426cb1e8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "431ef003-7157-48b7-9d25-75d04780b7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d5f30e-e8ba-47ea-8fdb-f9034cdd7a2c",
        "cursor": {
          "ref": "338a2879-d595-4ea8-aec1-a2348ca243dc",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5be9c16d-5b82-4589-a1a0-e00a412da614"
        },
        "item": {
          "id": "23d5f30e-e8ba-47ea-8fdb-f9034cdd7a2c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d82358f3-315c-4449-a959-a3170b2a1a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b535c8f-1ba0-425d-9143-669de507b54e",
        "cursor": {
          "ref": "5216e3ad-2727-4c95-9c38-2db7e2bc5e0d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "af84198b-c86a-460e-9420-d1354129da0c"
        },
        "item": {
          "id": "4b535c8f-1ba0-425d-9143-669de507b54e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "25b8fecc-cb51-4c37-90e9-9499f13e111b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379e6d7e-92ff-4ac3-bd68-714d3361806a",
        "cursor": {
          "ref": "579cb530-5e28-4598-9a49-a0c0449744fa",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "56dbf1e7-cb62-4ef8-af89-2640b781aeaa"
        },
        "item": {
          "id": "379e6d7e-92ff-4ac3-bd68-714d3361806a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bb328055-4db0-4ffc-8eee-5ed14270a415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376a21e6-34d6-4dd3-b655-818d3db2733e",
        "cursor": {
          "ref": "0098f5f9-6d96-414f-85d6-c52004fb0d54",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5bcc24d5-8a1b-4e0d-8184-c53dc188e40f"
        },
        "item": {
          "id": "376a21e6-34d6-4dd3-b655-818d3db2733e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "69ca349e-2514-446e-804a-8e609257eaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4b31e1-f2d0-4322-8265-1058a8ba0156",
        "cursor": {
          "ref": "1e6561d0-8134-4a94-be80-faf42c087990",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "618215ca-0fad-4ac9-97dd-96ad964c3371"
        },
        "item": {
          "id": "6e4b31e1-f2d0-4322-8265-1058a8ba0156",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1bdff401-d306-4ec0-95cb-eb31b605b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fba233-cade-45ff-a327-0467cedc2c15",
        "cursor": {
          "ref": "d3c9dcbd-36f2-4fdf-8c31-326022e9ceeb",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c00b6816-d8d5-4b54-a3b6-d9416077d435"
        },
        "item": {
          "id": "d3fba233-cade-45ff-a327-0467cedc2c15",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "de5bf818-1038-4800-8f4f-ee27643969d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b27fd5-0f1d-477d-a607-224a987859f1",
        "cursor": {
          "ref": "440962c4-2927-4ac1-b3fb-36ea21581d83",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b10e4f6a-50a5-45cd-ab9b-b97a1658ed15"
        },
        "item": {
          "id": "39b27fd5-0f1d-477d-a607-224a987859f1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2120aeae-a865-4eb0-a331-2e0f60838758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc784ed5-d3ce-41b9-af0e-50f00e23010f",
        "cursor": {
          "ref": "b36d4025-aa5c-4dc8-af9c-a56226be01eb",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2801a148-fdc6-43f6-bd6d-55b78bd0b224"
        },
        "item": {
          "id": "bc784ed5-d3ce-41b9-af0e-50f00e23010f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c920b61a-3674-4c5b-8788-178f31798119",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a291f9b0-dfa4-4989-b806-76aed71cd9e4",
        "cursor": {
          "ref": "c0bf4dea-0eea-4e91-8f8b-c05987929c4d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "398ba5b8-8eee-4bda-a360-6b970ff77c3a"
        },
        "item": {
          "id": "a291f9b0-dfa4-4989-b806-76aed71cd9e4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "60228271-519e-4024-80fe-79669557408c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfadffd-c0de-4b1b-80a2-74ad69078dbd",
        "cursor": {
          "ref": "1a295017-5e56-4a6f-b67c-8f5ee1e32773",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "32f47bb0-ef32-437a-8781-810c9c83d326"
        },
        "item": {
          "id": "4cfadffd-c0de-4b1b-80a2-74ad69078dbd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b66010a8-6ff8-444c-b564-d49cbd2e8f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d40c19b-710b-4c3f-b91d-96bdb8c085db",
        "cursor": {
          "ref": "117527fb-b360-4896-9659-16504501eb0c",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca4d738b-7e58-4ada-8868-8ce54b2fb500"
        },
        "item": {
          "id": "5d40c19b-710b-4c3f-b91d-96bdb8c085db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c1465d8d-72af-4d88-af22-f1c8a5b7f060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b317751-fb93-47b0-af1c-bbafbb22ebef",
        "cursor": {
          "ref": "7970dc7f-7eb1-473f-b3c2-2325491e81e3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dfcf1f08-0e45-4c40-b8e5-0b2ba0a4d12f"
        },
        "item": {
          "id": "0b317751-fb93-47b0-af1c-bbafbb22ebef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "436d789c-b5a3-4aca-b520-d66c4bccfb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef32e9b-5073-41c1-b9a9-7b59bf10f66e",
        "cursor": {
          "ref": "5bd7d5a1-3ef6-438d-b9b9-a01f9d6c5e74",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "455bf4f1-4e18-42a7-b4a0-d19fc8d6a74c"
        },
        "item": {
          "id": "cef32e9b-5073-41c1-b9a9-7b59bf10f66e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7bc1dd55-ae4b-485c-8398-46190ee2172c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7f5d37-b968-4e68-8525-406197216813",
        "cursor": {
          "ref": "676cc610-3ff5-4406-996c-caa95bd121a9",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "903158cb-d4ab-4f67-af80-246da6407268"
        },
        "item": {
          "id": "4b7f5d37-b968-4e68-8525-406197216813",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "22b27042-f98c-40f5-a82f-e18aceb8daeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d10a0a-2ec2-4b01-a228-8c28e4d8177c",
        "cursor": {
          "ref": "97f81693-8c3c-4336-8eba-428dbce55923",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8dd2f4b3-a88e-4d0b-a59c-7faf79629baa"
        },
        "item": {
          "id": "17d10a0a-2ec2-4b01-a228-8c28e4d8177c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8885c80a-15d2-46b3-9f94-a87192060ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9772d5ae-c659-4549-9f35-0b5e6562fd2d",
        "cursor": {
          "ref": "862179a6-fa7a-4171-b23c-7870757a8b10",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "09a9a071-07da-485e-a42f-efcbfd4ebcb0"
        },
        "item": {
          "id": "9772d5ae-c659-4549-9f35-0b5e6562fd2d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a446ba92-3e23-446d-a310-91caa02635bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562e7839-08b0-4e0a-abdd-3d1d84bad08b",
        "cursor": {
          "ref": "c1b15fbd-bb2b-4994-8638-8547364cb454",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "df795391-b59e-4e4e-bdc6-39036e98817d"
        },
        "item": {
          "id": "562e7839-08b0-4e0a-abdd-3d1d84bad08b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "26d532ea-cb8b-4dff-9846-48dd13ae8c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975628c5-fa39-444e-a34a-c862278e5a7e",
        "cursor": {
          "ref": "36054517-1579-4f7e-9f63-aa4918c001bc",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76c1bcb3-0ead-4c2b-81ac-8b38c2a8ff77"
        },
        "item": {
          "id": "975628c5-fa39-444e-a34a-c862278e5a7e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6055f737-a62a-41f2-b356-1b56e84a4a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77ee591-7f27-4111-8e08-6aa00840bf8a",
        "cursor": {
          "ref": "203bdc3d-5c7b-42ed-a96d-36d7e9255d3f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fc96feb9-6b4b-49d7-b060-4254a610ab93"
        },
        "item": {
          "id": "f77ee591-7f27-4111-8e08-6aa00840bf8a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4749d20a-64bb-4f9f-ae19-7520d476156a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c02a187-2c40-482f-a7e7-26fe3f4e7c48",
        "cursor": {
          "ref": "d961c9b9-a2a8-455d-b872-f2f982fd4582",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6f0d74ec-2677-4693-8bba-674aeef01c4e"
        },
        "item": {
          "id": "5c02a187-2c40-482f-a7e7-26fe3f4e7c48",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "24630a28-87ce-4a2d-a634-421fc2435684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27598c4c-ae07-4dea-b945-ee9f49db8d89",
        "cursor": {
          "ref": "a10710f0-4f68-426d-a74b-bc11d8f90cde",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "eef37c88-9565-4d87-a6db-48127df5fea9"
        },
        "item": {
          "id": "27598c4c-ae07-4dea-b945-ee9f49db8d89",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d6c25be-dc3f-4f0f-a10c-286cfa1e377d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1376ed-32e4-4975-b63c-4366a36755fa",
        "cursor": {
          "ref": "8c27ebf2-e0c1-40a0-a05e-ff5ea762b7a2",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "84a64566-4133-47d0-af6a-81b096ca680d"
        },
        "item": {
          "id": "3b1376ed-32e4-4975-b63c-4366a36755fa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b165b623-dcdc-4c57-bb00-b9ab4f945f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0cabeb-51bf-4c37-a762-1e3994895e0e",
        "cursor": {
          "ref": "e4708871-4baf-432f-be99-461042761ae9",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ff60d430-434a-4850-ae4c-90dfd48a03f8"
        },
        "item": {
          "id": "ed0cabeb-51bf-4c37-a762-1e3994895e0e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bde3886a-d32d-4bb4-b439-1c7da393c886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d75bc1-2370-4cda-b1cf-77efcd2e6574",
        "cursor": {
          "ref": "7cc5319e-5890-4a04-baf8-987de530f47d",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cee6a4ec-3454-4bf7-b0bf-6584f4eee757"
        },
        "item": {
          "id": "f4d75bc1-2370-4cda-b1cf-77efcd2e6574",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6beab8f0-76ac-484e-a721-66877c1decf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4798f581-c9da-4553-abf6-ae8c58c70510",
        "cursor": {
          "ref": "6b26186a-e1cd-4e9a-bbde-f03f5010cc6c",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0fc92957-130c-4fd4-859f-b4c8b52e17b6"
        },
        "item": {
          "id": "4798f581-c9da-4553-abf6-ae8c58c70510",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c8f40d65-d8ee-48e5-a58d-2854248544a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fa49f2-a920-4e13-a32a-d451f1e3a8cc",
        "cursor": {
          "ref": "23a42917-0010-43a3-92dd-149bad5facce",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f60d0e0b-4dfb-4aaf-bb0f-fe35885540c0"
        },
        "item": {
          "id": "28fa49f2-a920-4e13-a32a-d451f1e3a8cc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6dde2658-faee-4355-9bf3-d75aa6122374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf3fc7d-975d-413f-a4a3-ab7591a17ac2",
        "cursor": {
          "ref": "f1d129ff-46fb-4a75-be4a-4bcaffebb677",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a551d8cf-4695-482b-93ec-f1690530a3a0"
        },
        "item": {
          "id": "4bf3fc7d-975d-413f-a4a3-ab7591a17ac2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f9633386-ef87-4245-b331-e2893c872090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26197e09-0a41-43e2-b2d1-24c0abe4f1f1",
        "cursor": {
          "ref": "2ebf75b5-a819-4021-82c7-75224f3fb3e0",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2456e0cd-3e28-42b7-9ac1-dcdfd0486426"
        },
        "item": {
          "id": "26197e09-0a41-43e2-b2d1-24c0abe4f1f1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4d35bda7-9c25-4983-b733-9c9a642650cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75641470-a3a6-4fb4-b4de-5777abb9a70e",
        "cursor": {
          "ref": "694e8d85-87ef-45b9-bcb9-c09fda830a68",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3d880dc8-a811-4350-9faa-cc2a724bd4f3"
        },
        "item": {
          "id": "75641470-a3a6-4fb4-b4de-5777abb9a70e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e8fbc696-f662-40fa-988b-5335d9e8c087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35bfd27-dff0-40d0-a940-4d2dc94ba004",
        "cursor": {
          "ref": "12d984c2-6f37-40b8-8ec6-ad201bd4296e",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b0fb6925-dbcb-4285-88d3-f345c84d7ac3"
        },
        "item": {
          "id": "f35bfd27-dff0-40d0-a940-4d2dc94ba004",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1f3119fc-ed34-43ec-b1c7-6b58a4b9e7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56573f3-54b9-4870-abe7-2b15f5ff9be2",
        "cursor": {
          "ref": "d0a1680e-1c4c-4c40-919a-1bdd99e05347",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cc41d654-8711-47b0-aa26-1d723b67d42d"
        },
        "item": {
          "id": "c56573f3-54b9-4870-abe7-2b15f5ff9be2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6bf1b00e-e1d1-49cc-917d-945ac7e50bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4defec-6c38-459d-a593-2f0d3e4327c4",
        "cursor": {
          "ref": "f1141cb6-003b-4287-8197-816822ef8488",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f89caef9-b5e4-4032-a918-fb79a784c664"
        },
        "item": {
          "id": "8a4defec-6c38-459d-a593-2f0d3e4327c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3cb288c4-3897-493d-8910-65cc20c7946a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a60e975-ea35-4190-9468-5bfa19c9cf0f",
        "cursor": {
          "ref": "a5509bbb-7548-4bab-97d4-1edc20cd7efc",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5d06c6f0-74f5-4d3f-83e1-a9c3621006be"
        },
        "item": {
          "id": "3a60e975-ea35-4190-9468-5bfa19c9cf0f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "49b3120b-5c98-450d-8357-972371f9d74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783a9f19-c21b-4e79-ab42-978b90e9cfd1",
        "cursor": {
          "ref": "8d9f038b-8860-4fd4-b847-bef67bad4dcf",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "54d44518-8071-4349-b5fe-f587644a30ee"
        },
        "item": {
          "id": "783a9f19-c21b-4e79-ab42-978b90e9cfd1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aed67b33-6826-433d-b211-05933a99551d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c56391-9aaa-4301-89e2-b601e7ded2e6",
        "cursor": {
          "ref": "4440fead-2b4b-4b59-a431-2da3df34921f",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f3695792-a36c-493e-ac21-34d14acb9bde"
        },
        "item": {
          "id": "01c56391-9aaa-4301-89e2-b601e7ded2e6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d24ba392-3523-4f2e-b446-017b0b8d5037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a28034c-c1a3-4eae-adcc-a600aa471bed",
        "cursor": {
          "ref": "ec7cc235-b909-4d56-9cbd-1104efb29c04",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "62622868-112e-4880-8574-d271809b7744"
        },
        "item": {
          "id": "4a28034c-c1a3-4eae-adcc-a600aa471bed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "52a3cf75-1050-4032-a15b-93ec741a6e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a6517a-0a3f-454b-b282-11cce1b3eaca",
        "cursor": {
          "ref": "e4beb601-28b3-4556-85bf-1a090a169a34",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9d2201b2-cb02-40fd-8b17-a8c725a25e26"
        },
        "item": {
          "id": "d3a6517a-0a3f-454b-b282-11cce1b3eaca",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e9134dbf-08dd-41c0-b410-8e65b5716866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4498908-cdcf-4788-af3b-bf0d326839be",
        "cursor": {
          "ref": "7a21daa3-6552-4e6f-a27c-8b303242cdb5",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e0068461-0ae2-47d6-92ff-89e3a257bcf1"
        },
        "item": {
          "id": "f4498908-cdcf-4788-af3b-bf0d326839be",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "26b0fc80-e66e-4f40-ab05-31fc29fb2f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b6afdc-9ba3-42e8-8609-b1c0a42c5a89",
        "cursor": {
          "ref": "c2081cc1-375e-42af-ac95-bf697d053412",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1f0fe093-4110-4531-a2ae-9c79e688afd1"
        },
        "item": {
          "id": "c6b6afdc-9ba3-42e8-8609-b1c0a42c5a89",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "35a51363-2505-49ed-b306-77e20665c0e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7982a59-be3d-47f5-aed3-56c08a1ab985",
        "cursor": {
          "ref": "dc31cb83-906d-4584-ba51-0c562b5a9d7c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c3fcc9d1-db34-4cd1-af3e-1bf0e5ad7881"
        },
        "item": {
          "id": "a7982a59-be3d-47f5-aed3-56c08a1ab985",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3a021fdb-d4bb-4574-9cc5-6d3fcd69ec7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a5c6cc-5fbf-4fa6-8781-336da49f2633",
        "cursor": {
          "ref": "f69635aa-bf1f-408f-b483-2af72295c0fd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d24bee6f-61a0-4b2f-b13e-e91ef4490205"
        },
        "item": {
          "id": "18a5c6cc-5fbf-4fa6-8781-336da49f2633",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "015b8e08-436c-4d2d-a93a-f642fb870e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da79575-e369-42cc-b789-e5f2c0f25acd",
        "cursor": {
          "ref": "73b04c20-896a-469f-ae13-c49a961331ed",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7e243462-e2b8-42eb-bb75-e3614f1dcc03"
        },
        "item": {
          "id": "1da79575-e369-42cc-b789-e5f2c0f25acd",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "524667e4-0cb9-4b72-bcfb-a7926e017e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e03a105-00b6-4727-a572-7375db1f1f6a",
        "cursor": {
          "ref": "fc5fc30a-4e5b-4a21-b2a5-9730b2f6436e",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2462d3a-ab03-444e-b300-780a07fde45c"
        },
        "item": {
          "id": "4e03a105-00b6-4727-a572-7375db1f1f6a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "26705e5d-d493-4520-be5e-a06aadb5c7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23125c5c-4155-42ca-aaea-dcc80e0e9d07",
        "cursor": {
          "ref": "1ae1e397-8dee-45d7-b685-db5361a2eb05",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bcfbb333-9cd8-4056-bd95-bacaa321db37"
        },
        "item": {
          "id": "23125c5c-4155-42ca-aaea-dcc80e0e9d07",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d709c8bf-848d-48de-8be4-ad9b7c37284b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd52aa3-4bc6-42bc-9cf5-f24f9a11d4fb",
        "cursor": {
          "ref": "e3d1d393-ecfa-45e8-a628-bd696c273884",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "403767b5-dad0-4d41-a3d4-b3fd2f74e714"
        },
        "item": {
          "id": "1cd52aa3-4bc6-42bc-9cf5-f24f9a11d4fb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d87a057e-514a-4187-99c1-1dca5aecdf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44016dbf-63d3-46f6-b47a-a3ed6e447198",
        "cursor": {
          "ref": "a314c3f4-412d-4fef-bdef-32a6ad84b36c",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e170bf2f-0208-41b4-82a4-2e38f3c0f24e"
        },
        "item": {
          "id": "44016dbf-63d3-46f6-b47a-a3ed6e447198",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3177537d-be99-4b11-b1da-1b9063877a58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb95387-8dd9-437f-9260-4fb41209409c",
        "cursor": {
          "ref": "7c609b7f-9e18-4153-86ac-d2bcbe97b566",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "14b32ef6-60ea-4b5f-a628-5367d581a838"
        },
        "item": {
          "id": "9cb95387-8dd9-437f-9260-4fb41209409c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3dedffc7-a8e1-47bb-90a2-f0f057c4038a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b8105a-84d8-4cfe-a611-ec1fcec7e2c3",
        "cursor": {
          "ref": "8f6ea8d5-da61-452e-a369-243ac654ec47",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f372b639-e84e-41a5-9081-ed6d4debcce5"
        },
        "item": {
          "id": "e3b8105a-84d8-4cfe-a611-ec1fcec7e2c3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "79e27571-c299-4665-9ab4-04ac158e6888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a058cea-b13e-408a-9200-9d4b9a8b0f69",
        "cursor": {
          "ref": "159aa1ed-821c-4783-8c86-e9037ab08a5a",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8ced2ab6-42d9-4e4c-9a50-96c7231826cc"
        },
        "item": {
          "id": "7a058cea-b13e-408a-9200-9d4b9a8b0f69",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3a10a2fe-2bef-4383-a3d4-0b4a52e10581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53bcf22-5230-4af9-a9c5-943f747d4600",
        "cursor": {
          "ref": "eb48ccaf-cf1a-4806-ab50-be2dce3e0f28",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "65c4853e-461c-4f3b-bd82-bb1343802646"
        },
        "item": {
          "id": "e53bcf22-5230-4af9-a9c5-943f747d4600",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1af3a61a-3f86-49a7-8ac9-c935c952f9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed4b1b6-d6ea-4f66-801c-3033e28c966f",
        "cursor": {
          "ref": "47956e2b-2d6d-4fbd-88ff-68ff868b1996",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2e2df635-58d4-4ec0-9a28-e7aeda56965e"
        },
        "item": {
          "id": "aed4b1b6-d6ea-4f66-801c-3033e28c966f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d58e36d8-f95c-4fe3-a781-fd94509d9ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e6232f-0d58-47f2-a320-3ac422dd16f4",
        "cursor": {
          "ref": "8633ff3c-12f7-4380-b10e-3e590d44853f",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a6f642ff-2ce4-4c59-bee6-bb2eae88311f"
        },
        "item": {
          "id": "77e6232f-0d58-47f2-a320-3ac422dd16f4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fa658b05-9488-42c4-aa53-75e58852ff1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a691a5b8-ec2a-4535-a87a-37660adbb10b",
        "cursor": {
          "ref": "c9818003-3a92-4388-938c-b7e16408d6ee",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2295b204-b5ba-44be-b0c3-11df78691949"
        },
        "item": {
          "id": "a691a5b8-ec2a-4535-a87a-37660adbb10b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8591aaa8-172f-4d4f-bbd0-7b820ae03295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c31c452-bda6-415d-82f3-ba4db79a9bdf",
        "cursor": {
          "ref": "8d2577c7-d738-4ce8-9d0c-8812b503c0b9",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cc875794-a48b-4d40-8b60-9803514a6ce6"
        },
        "item": {
          "id": "6c31c452-bda6-415d-82f3-ba4db79a9bdf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9824c071-caf5-4b80-9c3d-64c18220178e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1dbee5-4229-45d1-ae47-4589638e05fd",
        "cursor": {
          "ref": "916ee606-7108-46ac-b701-0303bb0eb666",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "054b290a-d9ae-4d7e-8116-2a2d61de1926"
        },
        "item": {
          "id": "6b1dbee5-4229-45d1-ae47-4589638e05fd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ac7acc4e-f21b-4571-9e57-219d1651b086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a45b020-b418-43ef-8576-3f311587085b",
        "cursor": {
          "ref": "5e4eaa2a-5897-49f4-809a-b79611c6d1cc",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ea1e3568-fcd0-468a-a5e4-cdac6cb2fa60"
        },
        "item": {
          "id": "5a45b020-b418-43ef-8576-3f311587085b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "12445bca-90e3-4a00-aa27-0ee887e49e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f376ec-abb4-44b1-a305-17303787345f",
        "cursor": {
          "ref": "17cb3632-8bcc-48fb-bb81-deec517bfbe2",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a209544f-3b78-411d-aadd-064b67748169"
        },
        "item": {
          "id": "44f376ec-abb4-44b1-a305-17303787345f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c8fff621-2d02-4d96-af5c-41e6a47c28cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6c612f-d74a-408f-93ba-2b31b594c0c6",
        "cursor": {
          "ref": "4416b1c5-60c3-4d6b-baf1-eafa15d668c8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "26e3f63c-6567-43d9-a94e-8c1ce7be100c"
        },
        "item": {
          "id": "4b6c612f-d74a-408f-93ba-2b31b594c0c6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "51837cea-ea00-4106-b858-a58039eb0d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dde212-11b9-45b2-82aa-c02069eb9ad9",
        "cursor": {
          "ref": "cf119f9f-7793-4cc9-8e34-871d99f8ed23",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8cb365b6-43de-47d6-8dde-ad0c8eaeef95"
        },
        "item": {
          "id": "d8dde212-11b9-45b2-82aa-c02069eb9ad9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "20c6a364-9ed3-48ff-9d94-5ffd1d69b1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc8003e-46d6-47e2-ba3d-1214f016d8e2",
        "cursor": {
          "ref": "011345cc-6d05-4dcb-b82e-910efb70b3c8",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d6ee4a18-3e3c-4501-85c9-0d4ff1c83481"
        },
        "item": {
          "id": "dfc8003e-46d6-47e2-ba3d-1214f016d8e2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9bd50f8d-7288-4073-94d1-5fd8bf9c2975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae45ebb-cc05-45b3-8be6-e5edb550ddf6",
        "cursor": {
          "ref": "5d28bf41-710e-4415-8042-b1d2fff912e2",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0043d0c4-9ed7-4529-a546-02eeb8183497"
        },
        "item": {
          "id": "4ae45ebb-cc05-45b3-8be6-e5edb550ddf6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d69f551e-5403-471f-a529-1f223ff9c68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7048d00-8089-42ff-96df-8a4ebcf4ca1d",
        "cursor": {
          "ref": "985e9783-0a0d-4e82-88ba-3962a70f0d09",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "debc8847-3bbc-4a73-a757-259d2ad23078"
        },
        "item": {
          "id": "f7048d00-8089-42ff-96df-8a4ebcf4ca1d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ebb46f8-8523-4394-959b-9417a5a8f162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726c5a2b-7a9c-4b1b-b68f-d7808b865e95",
        "cursor": {
          "ref": "f8baa763-97d8-4fdf-86f3-1b8e0b6d93a7",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "eb14268b-c447-4820-8389-19055e36b055"
        },
        "item": {
          "id": "726c5a2b-7a9c-4b1b-b68f-d7808b865e95",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "969f66c2-7a49-4cc5-9251-0e107b5f7adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46c3505-0e78-41ae-b62e-a8200fe85cd2",
        "cursor": {
          "ref": "b39d99c1-a95c-4397-ad6a-b3fc7690d21a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e355d771-641f-48e5-974c-029d5257d02c"
        },
        "item": {
          "id": "c46c3505-0e78-41ae-b62e-a8200fe85cd2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "848f3a6a-1a3c-48a2-91f1-d343962f78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c4a05e-b2d7-4798-a84b-2a7b1a83d021",
        "cursor": {
          "ref": "5a508b95-c508-49ac-98fa-c1bd344617c2",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f85da22d-fbea-4154-ae1b-59494c0a30ba"
        },
        "item": {
          "id": "e0c4a05e-b2d7-4798-a84b-2a7b1a83d021",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cc3bde96-f097-45fc-bd09-9d2ec0ae0f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7669055-6cf7-4659-b7c1-00020c9af69f",
        "cursor": {
          "ref": "b2925584-cdc1-4ff1-bb90-0aebe0da4013",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b213e0f8-3ce7-45bb-ac17-ff41fd61d8c9"
        },
        "item": {
          "id": "c7669055-6cf7-4659-b7c1-00020c9af69f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ba2e752f-defc-4dfc-82f5-ee2f6d77b373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebaf104-4e40-410b-a63d-69e61c1f904b",
        "cursor": {
          "ref": "c72d224b-4901-4552-9658-f66795b267a9",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e1ea1d7c-b41b-46f7-ab24-80cdbfcadfef"
        },
        "item": {
          "id": "5ebaf104-4e40-410b-a63d-69e61c1f904b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c7379521-d66f-44c6-b7d6-b114d55099c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2fb07a-aae6-4d2b-9b59-5d60acb65506",
        "cursor": {
          "ref": "e2ad9a25-1d94-4d0f-8ac4-c964e153ebbe",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6ae5d5dd-3b17-46a8-946e-bfbd1462110d"
        },
        "item": {
          "id": "ca2fb07a-aae6-4d2b-9b59-5d60acb65506",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6351bb5c-e73f-4d8b-93c0-e8ddc53697a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3565e72-cd05-4521-afab-054af16924a0",
        "cursor": {
          "ref": "e665f183-91bf-4660-abc1-4da461d88ea4",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "24a4b69f-6417-48b3-9ef9-c6ba76b9e841"
        },
        "item": {
          "id": "c3565e72-cd05-4521-afab-054af16924a0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c6f3737e-ebaa-47e8-b2d6-393c44236aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a2bb3d-a5cb-4fce-a5db-01c6e261bd08",
        "cursor": {
          "ref": "af3ee7ff-df63-4801-8c03-83e1828ea952",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b8345032-0947-41ef-a177-1f0e25b27ff8"
        },
        "item": {
          "id": "22a2bb3d-a5cb-4fce-a5db-01c6e261bd08",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "db7f0279-f628-48af-a4d8-30d06d265ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78b90e6-6642-4d73-97b1-5fddc8e25c1d",
        "cursor": {
          "ref": "320be448-7b35-4cfb-9149-9c5fbc003fe2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3af43b08-b159-4c2b-9f41-85c4a0b83e59"
        },
        "item": {
          "id": "e78b90e6-6642-4d73-97b1-5fddc8e25c1d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "01c71f15-1c81-4889-abf1-63b6aa21b5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b978aefa-574d-4f80-8a6e-4568adc40103",
        "cursor": {
          "ref": "32b504ad-b61f-4c2b-9fc0-7da6f4f906d9",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b6fce05b-fb6f-43e3-a2cd-6ae577b26f1e"
        },
        "item": {
          "id": "b978aefa-574d-4f80-8a6e-4568adc40103",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "576355a6-7f92-4e47-940f-1fcdab676444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8625fe81-93ed-4be1-b776-9b18bc70a904",
        "cursor": {
          "ref": "6018386b-f4be-4c86-8369-9495d92f399a",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8be217f5-e2d3-419d-bc7f-9f9d195b4537"
        },
        "item": {
          "id": "8625fe81-93ed-4be1-b776-9b18bc70a904",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "87ba9bda-43d0-43e7-a41c-5fa637ccea55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b3497a-7add-4109-aa01-c36b4cf3595f",
        "cursor": {
          "ref": "8f94087f-d60f-4d05-9472-426ff5f7a0ff",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "be7e96f7-29fe-4ba7-8b26-cb927ef6b48b"
        },
        "item": {
          "id": "27b3497a-7add-4109-aa01-c36b4cf3595f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a341c7c5-5ae2-493a-90dd-b1b7fa29b8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d7bd23-c5c3-42e7-a134-4c5a3f4d35e6",
        "cursor": {
          "ref": "11005d82-17d9-4134-bfca-6dc738fef408",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c5bdffb0-b58d-4577-ab03-67f619ddec40"
        },
        "item": {
          "id": "a5d7bd23-c5c3-42e7-a134-4c5a3f4d35e6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ea8d0335-376a-4a52-81bc-e1b235c4b1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa841937-22f1-4573-af69-56c330770e29",
        "cursor": {
          "ref": "855b8f8e-f7fb-4820-9c86-587250054620",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "45316d78-2ad3-4d4e-a406-013a4f9c162c"
        },
        "item": {
          "id": "aa841937-22f1-4573-af69-56c330770e29",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2f2fbc88-1896-4b78-9c36-51e8cb0df127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef5c5fd-a4cb-4ef2-ae33-e7c7d636efbf",
        "cursor": {
          "ref": "b4f6be2e-42a6-445d-977f-bfd65218a09b",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "404686e3-c9f3-42e4-a9ba-c3d8772ab887"
        },
        "item": {
          "id": "3ef5c5fd-a4cb-4ef2-ae33-e7c7d636efbf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "abc33af2-fec3-4feb-843e-db72e47a4ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607e0470-6067-48f3-9d5f-af2baa8e05b0",
        "cursor": {
          "ref": "cd2c69f7-1ea8-4442-8564-3723931ddfe9",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9d2ae86d-b41b-4fcb-b9e1-802e9f1b4660"
        },
        "item": {
          "id": "607e0470-6067-48f3-9d5f-af2baa8e05b0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "da05ea09-99e0-40f8-aa80-ecddd9d7e1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecd431c-2dfc-402e-9bb4-016089a5f521",
        "cursor": {
          "ref": "a64cf7b3-ae27-4efc-b91c-8045c13ce99f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a707e263-17b8-44d9-add5-84ee6e3720e9"
        },
        "item": {
          "id": "7ecd431c-2dfc-402e-9bb4-016089a5f521",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "163ec089-f07b-4c44-833d-6499c3dc125a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278aa09d-6a4b-416f-9f74-0ba373d16518",
        "cursor": {
          "ref": "4cbe1bad-2e9a-4e5f-a6bf-984f06656c34",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "de74311c-2ede-47ac-a499-02001d8afd4a"
        },
        "item": {
          "id": "278aa09d-6a4b-416f-9f74-0ba373d16518",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d42156d3-c9d7-43d0-85e1-e399dcd81869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f7244b-040d-46ca-ba0e-de3cd0a7f02f",
        "cursor": {
          "ref": "67168086-127e-4490-87dc-aa8d38e5813f",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "806cb188-3313-4bb9-a197-f74c8ccaa345"
        },
        "item": {
          "id": "59f7244b-040d-46ca-ba0e-de3cd0a7f02f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "21bbba5a-577d-4137-9789-bb9802885c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05544d18-97ce-43ad-87f0-71210b248b55",
        "cursor": {
          "ref": "60a744da-ba66-4af2-a8aa-7c92bb6e9400",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d14c6b9e-2e76-40f8-86b4-ca6916f538a5"
        },
        "item": {
          "id": "05544d18-97ce-43ad-87f0-71210b248b55",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f6720a95-01bb-4926-986b-50ba20dadce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "5e66468a-2135-4361-9876-e2d24d997d7d",
        "cursor": {
          "ref": "4e4603ff-4657-4203-93fd-325047f19bb0",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78f7df8d-bcc3-4ccb-9fc6-037c1b9600d5"
        },
        "item": {
          "id": "5e66468a-2135-4361-9876-e2d24d997d7d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e69fab8b-9ca9-4bbb-a9b4-4517e30fcb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0f0abc76-699d-4a37-8fb8-a764d464f403",
        "cursor": {
          "ref": "c84102ff-d03b-4661-b514-572f6874be44",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6cb7af1d-44a3-4a3c-aeb8-618c32afec7d"
        },
        "item": {
          "id": "0f0abc76-699d-4a37-8fb8-a764d464f403",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a4ceadf-c4dd-4086-b1bf-ae5df8860aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ecda05ef-4dfb-4b59-be63-33be18d5e5e6",
        "cursor": {
          "ref": "2f25c20f-2f0f-4e0b-8ccb-160d1ce97048",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "01d0e236-3ff9-4b6e-96b0-40683d191bc5"
        },
        "item": {
          "id": "ecda05ef-4dfb-4b59-be63-33be18d5e5e6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "da9bada0-66e5-4833-a2c8-3b6b6d2c61e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f922a1-7798-4ea5-b57d-e158e11197e8",
        "cursor": {
          "ref": "67a1fb7f-feb3-4181-aeb2-e0849b97cca6",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5e6b47c1-1b2a-4088-ba89-1595d2553688"
        },
        "item": {
          "id": "84f922a1-7798-4ea5-b57d-e158e11197e8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d9ec9d5d-9cf0-4a52-bf35-a76d5f601e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e61a8e8e-6e2d-4e2e-acb2-fc2913213f71",
        "cursor": {
          "ref": "7fc1dfd0-a40d-4a1b-a35c-c708c5ae949b",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "626d2077-1bdd-49d9-b488-bf873fdd0ecf"
        },
        "item": {
          "id": "e61a8e8e-6e2d-4e2e-acb2-fc2913213f71",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4bc3c829-442f-42d3-b1b7-e2b0241f1310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1288,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "61e8a611-aba1-45b2-89b2-4fdb99bba622",
        "cursor": {
          "ref": "36c524ee-3525-4a8c-8886-43864781a827",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d114bf07-0e03-41c3-b478-462256062e39"
        },
        "item": {
          "id": "61e8a611-aba1-45b2-89b2-4fdb99bba622",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e02f693b-701e-4baa-9c15-c5765a4a9146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "80978490-ba90-4756-b59d-72ed3634bb15",
        "cursor": {
          "ref": "0704cd9f-57c2-4856-b6a9-273a945b8acd",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5ceb05ee-4d63-402a-9c1e-facb8f32217b"
        },
        "item": {
          "id": "80978490-ba90-4756-b59d-72ed3634bb15",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1f5156e9-6082-4c31-b7bd-91b11cb2a9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "50d0f51d-7a83-4b6d-b524-5726621c6654",
        "cursor": {
          "ref": "ada87a16-66f3-4294-84fe-b92abdbc0724",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f6c68c0c-85d0-4401-9761-bf3a63a5e653"
        },
        "item": {
          "id": "50d0f51d-7a83-4b6d-b524-5726621c6654",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "32530e8c-dbce-4e03-8571-a7d3b0efbab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a8dff58c-a928-4c4b-99f0-2bb2dad080a0",
        "cursor": {
          "ref": "44f75d9f-ad5b-427a-aa1d-9c2d6c727fbb",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ae42f17e-4075-4909-b780-14d3cd164a58"
        },
        "item": {
          "id": "a8dff58c-a928-4c4b-99f0-2bb2dad080a0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b96e29fc-9cb9-4d1f-9ce2-82d3245fb067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ada2729c-b359-4a16-891d-43514797b678",
        "cursor": {
          "ref": "d2adc6c6-2bea-485e-9d4f-8addea26ef78",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "09fbcc65-b784-4aaf-ad3e-9ab705f16841"
        },
        "item": {
          "id": "ada2729c-b359-4a16-891d-43514797b678",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b74359e4-2ac6-4847-a032-41faad255db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e8ac82-d21b-4432-ad68-085b590fe648",
        "cursor": {
          "ref": "64090940-a8d4-4303-942d-1210d65948a2",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "52611296-e105-4c54-942f-88c02a7eddbf"
        },
        "item": {
          "id": "57e8ac82-d21b-4432-ad68-085b590fe648",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c642d96f-40fd-493f-b23f-a3fc82f4c520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f45824d-ad2d-438c-9f24-986d5d2200bf",
        "cursor": {
          "ref": "c2dd03a9-7819-4ad0-aa84-e8e38be22a6d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3e3205d9-fa29-4020-9d4d-a43b3b4d2307"
        },
        "item": {
          "id": "9f45824d-ad2d-438c-9f24-986d5d2200bf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1915b0da-bd70-47cc-b32b-ad2a356a6ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b24b8a3-4291-4c02-b16f-7f09613ca77f",
        "cursor": {
          "ref": "be5f4355-c40c-4b2d-91f1-a8ceb326c8ce",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c60134b3-fca3-4cc7-8dac-eb1558973822"
        },
        "item": {
          "id": "0b24b8a3-4291-4c02-b16f-7f09613ca77f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2a50d7a9-dece-4d36-a566-9ce72e03dd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1418ca-ddef-43fc-b423-00ec70144891",
        "cursor": {
          "ref": "c2e5517b-31fe-4dba-942d-dc3d7bc26f21",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9d59b743-31ff-4c38-be95-7d7a24fe282a"
        },
        "item": {
          "id": "6e1418ca-ddef-43fc-b423-00ec70144891",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac2e6636-56fc-4cdf-a324-b9dba24034e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e3bd96-4b8b-4e67-9f79-17cf4f771c09",
        "cursor": {
          "ref": "7ff6f605-a868-498b-81eb-badf07f18147",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "296380b1-84bf-4b42-b3ab-752f9fb6a233"
        },
        "item": {
          "id": "02e3bd96-4b8b-4e67-9f79-17cf4f771c09",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ee34536b-90ec-41e9-882c-9cc7d279cd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566a4e6b-73f8-4bae-9ec0-507d8487a3ac",
        "cursor": {
          "ref": "e13d8c5c-6102-445c-bbcc-8eb47926e896",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3fa7674d-155d-43ee-a712-8127e907d8f1"
        },
        "item": {
          "id": "566a4e6b-73f8-4bae-9ec0-507d8487a3ac",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "40613f4f-45c9-4919-a81f-a2191871982a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905431ad-923b-4414-8bf0-39238cfcb403",
        "cursor": {
          "ref": "e360aec6-9ae0-426a-b89f-fe99efea9170",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0252889f-73eb-48d2-a669-e89e9479e2ce"
        },
        "item": {
          "id": "905431ad-923b-4414-8bf0-39238cfcb403",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a99a6459-1656-4bfb-8b75-3fd6bf52b3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cce4a8-d5af-493b-b923-547f7dd30a7b",
        "cursor": {
          "ref": "49ffbb16-3808-45dd-8b9c-66e2f90e3bfd",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f622ff2-35cb-47ef-9bd3-eef1eb267954"
        },
        "item": {
          "id": "38cce4a8-d5af-493b-b923-547f7dd30a7b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f2fdd2c2-a169-414e-be00-2a020c20a4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88590b9c-721f-418d-b37a-f8eaaf854539",
        "cursor": {
          "ref": "4d85acaf-6277-45e3-b280-621c50ef3ca0",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "744e58cf-8d04-4dc8-9c91-13843b3ffd1d"
        },
        "item": {
          "id": "88590b9c-721f-418d-b37a-f8eaaf854539",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c426a64c-96ce-4f8b-a06e-1af299215d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760b911f-9799-46e4-855b-1488d08f5f1f",
        "cursor": {
          "ref": "85d02b41-0a9c-4be1-a068-228faabbdf27",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c9bff053-688e-4fe9-9f21-8ea12160843d"
        },
        "item": {
          "id": "760b911f-9799-46e4-855b-1488d08f5f1f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6b8440d2-aed2-4499-9a16-a58eb9015836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ec008f-6136-4a61-904d-6ec781ac64bd",
        "cursor": {
          "ref": "a50cd04c-a32b-49b5-8e2a-425b13f21481",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "693b5fbf-3f33-40f8-a096-fdd7f9965a0e"
        },
        "item": {
          "id": "61ec008f-6136-4a61-904d-6ec781ac64bd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b4c17ec4-89a7-4b1d-85a2-9c84aa3386b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb38a9e-2a89-43c8-ba81-40f9681dfdcd",
        "cursor": {
          "ref": "faddabb5-937c-4a6e-9105-826d7116a55a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b4ca1f7d-a9f3-4a25-b4dd-3cfe59c6115d"
        },
        "item": {
          "id": "6fb38a9e-2a89-43c8-ba81-40f9681dfdcd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d07b9e9d-bd21-41c5-8fa9-3b99aadbf137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1769f75a-80ba-40a7-a81d-c75722ba32fb",
        "cursor": {
          "ref": "c1940c6b-831f-4d57-84bc-759bf4372034",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "101c398e-320b-4842-a47c-39d59265f145"
        },
        "item": {
          "id": "1769f75a-80ba-40a7-a81d-c75722ba32fb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "afe1ff49-d0d8-4bb0-b79d-caf8e5fbc99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 842,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "332df347-aac0-4d80-af5b-007d57837da8",
        "cursor": {
          "ref": "e9cfcdb4-6a5b-4f5e-ae5e-a4796fddf859",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e84e2177-f663-433a-afec-50e107fa5fa9"
        },
        "item": {
          "id": "332df347-aac0-4d80-af5b-007d57837da8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "39b8ff19-f805-4331-8fb1-a9afa7a629f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 865,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7e79a170-8bc8-4972-bdfc-af3cd277bdd0",
        "cursor": {
          "ref": "9d1c326e-c9bf-4a69-af3c-506a41659136",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9b4b75f-728d-415e-96c5-b62773baf405"
        },
        "item": {
          "id": "7e79a170-8bc8-4972-bdfc-af3cd277bdd0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d740f1cf-20a6-46af-b93f-8cddb352b03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8b7f883f-a14a-49cd-b4ad-ae9ba024e3d8",
        "cursor": {
          "ref": "e70733cb-5433-4669-899b-f52303484cfd",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "41e0e05d-93ac-4b2d-a96c-60239e39f5f2"
        },
        "item": {
          "id": "8b7f883f-a14a-49cd-b4ad-ae9ba024e3d8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "41e92fb3-9758-45cc-90e1-dc4cf545d4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 711,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9d0ddb3d-9380-4f71-aebd-a9213f578ac2",
        "cursor": {
          "ref": "e20a05b0-4958-4a60-aa67-325d0c3c3981",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7dad418a-2ff9-4275-bb5d-38c46ed6e6eb"
        },
        "item": {
          "id": "9d0ddb3d-9380-4f71-aebd-a9213f578ac2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c2bdd7e-543d-4e50-8921-a17983f0fc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0b28c32e-65dd-467a-a040-c6533d7b6d10",
        "cursor": {
          "ref": "6e168bde-07f7-4b7d-bc80-6fb97ec9c66b",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "14feb580-1972-4dc9-8361-b5e71b56247c"
        },
        "item": {
          "id": "0b28c32e-65dd-467a-a040-c6533d7b6d10",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4fb49f19-2606-448c-a661-2ffdc40d4de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085565ea-51ed-4214-abcb-0f2efcfcd322",
        "cursor": {
          "ref": "fa1f21cb-56f4-4f2d-a823-2a0571bd10f5",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "55a77769-e735-44e6-96a5-df30587615f9"
        },
        "item": {
          "id": "085565ea-51ed-4214-abcb-0f2efcfcd322",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "034b77c9-f6b6-443c-bd60-dd9c1211c784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7959f2-c502-415c-b61f-1f5232001574",
        "cursor": {
          "ref": "68bedaca-d9e2-4c78-83a8-1b634f258d58",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c8cbb771-f03b-4a5b-ad51-92081b61766a"
        },
        "item": {
          "id": "ca7959f2-c502-415c-b61f-1f5232001574",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eb84a78d-04fd-4cfb-99f2-5af93ab92978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e663e9-18b5-485e-a781-408293b02bef",
        "cursor": {
          "ref": "8b40ac1e-bc27-42eb-8b7d-19ba6ed4dc8d",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "767c8ec1-15cd-41fe-86ea-7f48906ca08f"
        },
        "item": {
          "id": "47e663e9-18b5-485e-a781-408293b02bef",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d4107556-2a4f-4df1-a0b0-ef70327389b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf1cce5-024b-4c4c-8b85-28cd08e8a1d7",
        "cursor": {
          "ref": "972a96d4-687d-4231-b3c0-d47fd08faba9",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fd73f3ee-c2c2-4139-9297-73084bd52dc6"
        },
        "item": {
          "id": "ccf1cce5-024b-4c4c-8b85-28cd08e8a1d7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5715eae1-2013-4b55-8bfe-6f3df48e0a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692600d0-6a81-4531-807f-43edb62f3e79",
        "cursor": {
          "ref": "6fc0b8e8-c120-4817-8837-db2e6746ddac",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "92a15131-157b-44e3-a294-de4143c514e3"
        },
        "item": {
          "id": "692600d0-6a81-4531-807f-43edb62f3e79",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "18c2e10a-1033-43c8-9250-040092e4b8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378f74c0-4cca-4786-b49a-d921e444a80b",
        "cursor": {
          "ref": "9025c500-8a2a-4917-af1b-1d9ca1feb69d",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2a8612c2-cd0a-4a7c-bc11-c624c88c5f43"
        },
        "item": {
          "id": "378f74c0-4cca-4786-b49a-d921e444a80b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d028f281-a028-4de2-ad10-6dd2e70232c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179bc100-4d49-4aac-ad45-207bd1d151ee",
        "cursor": {
          "ref": "4daf592f-970b-4c0b-800d-4cd242671649",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1c931321-b42c-495e-9fae-eba955a9474c"
        },
        "item": {
          "id": "179bc100-4d49-4aac-ad45-207bd1d151ee",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "90a14bb8-f76e-46cc-949b-9a34dea310e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa737283-7fdc-4e2f-adda-a289633cce8c",
        "cursor": {
          "ref": "092827ea-69ab-48e1-8e32-31fd700fec35",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "380b530e-ff10-409d-b247-3cd71efb81e5"
        },
        "item": {
          "id": "fa737283-7fdc-4e2f-adda-a289633cce8c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b4480ce2-d46f-4c06-a559-097a40064cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49723800-b3dd-4159-b46f-9ca5d896c929",
        "cursor": {
          "ref": "5d2e7fe6-0628-49fe-915c-94d752583204",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cb0e36cd-e488-4327-823a-c3b531eb0203"
        },
        "item": {
          "id": "49723800-b3dd-4159-b46f-9ca5d896c929",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6e6f0f4c-9d8b-494d-93fa-1c5fb32cce28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420099d1-e15e-4290-bbde-41cdf7a4370b",
        "cursor": {
          "ref": "728136d4-9d2d-4f62-87ab-7b3245f0a52b",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6ecd832e-ccec-42a5-bab3-faf272bff404"
        },
        "item": {
          "id": "420099d1-e15e-4290-bbde-41cdf7a4370b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7521ac32-31cc-47a4-bd71-a0f5d37e2a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cde003-6042-437f-a670-f48b0c3fc689",
        "cursor": {
          "ref": "a12a117a-d918-47bc-844b-ed17256e66c3",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c93aca3e-dc71-4ba2-a579-2ea4e1cdd987"
        },
        "item": {
          "id": "39cde003-6042-437f-a670-f48b0c3fc689",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1a49373f-1bf0-416d-8a91-377e6f11868c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a8b26-f976-4658-8a96-881eebdf0e0f",
        "cursor": {
          "ref": "b63e9b40-6bbd-4dad-b691-9efb26c2110d",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9e232729-6fa6-4cec-b59c-6e90d4e8de33"
        },
        "item": {
          "id": "a20a8b26-f976-4658-8a96-881eebdf0e0f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b5025427-a5f7-4003-8805-0e3946235430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230805ca-653e-460f-b6f2-61ffac72fa1c",
        "cursor": {
          "ref": "e06cdd75-07b7-458f-ad94-054446590d3f",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "74c39387-ecd3-4a96-96fa-eb01076df5e3"
        },
        "item": {
          "id": "230805ca-653e-460f-b6f2-61ffac72fa1c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6b013f5f-eba2-427a-ab4a-d255def60ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e73a17a-4de5-4006-b6a8-8d0a841881f1",
        "cursor": {
          "ref": "6dc9054b-58bf-4aa9-936a-b1ecbcf30d73",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0e0b8785-05c6-4cf1-8f0b-f605e4751a4b"
        },
        "item": {
          "id": "6e73a17a-4de5-4006-b6a8-8d0a841881f1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d4615552-ad68-4b4a-b404-478fb39b6e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691db909-9433-4aaf-a3b7-fad3f858670a",
        "cursor": {
          "ref": "39c2a135-15ba-413d-9755-b026f0f47836",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "386d0ccf-9373-4ce0-8a78-4d394b996769"
        },
        "item": {
          "id": "691db909-9433-4aaf-a3b7-fad3f858670a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "55b349d4-6b1c-45fd-939c-dcf436666495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b575763a-976a-4f8a-a4e3-e7578707d638",
        "cursor": {
          "ref": "ad3859b8-e91f-4c87-b099-3a5645d24fd7",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "de06431f-2c71-4167-8dbf-d0b4c9e689a8"
        },
        "item": {
          "id": "b575763a-976a-4f8a-a4e3-e7578707d638",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f6d703ec-a52b-4861-876e-bff9c4616bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052f6200-b2c4-48a6-9d30-12c509089e5a",
        "cursor": {
          "ref": "e4859ffe-269c-466e-8325-d6925cdc1e08",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5ac2b8a6-0197-4d95-b719-b54e4563653c"
        },
        "item": {
          "id": "052f6200-b2c4-48a6-9d30-12c509089e5a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "40c7ea48-10df-4062-8310-943754b4eeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c34210c-b681-472b-b6c4-83ccad82ed0a",
        "cursor": {
          "ref": "0ca627ed-9407-4417-a34b-0b67c46a88a6",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9b946eab-03dd-43e3-9f31-c3802abd7b05"
        },
        "item": {
          "id": "7c34210c-b681-472b-b6c4-83ccad82ed0a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a719be1d-730a-4f0e-a28d-7a0ffbe52908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600d8972-1886-48c2-b2c6-7abf8b13b848",
        "cursor": {
          "ref": "46177eeb-8cd9-480a-b0d7-00dd91740fad",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3241f9b1-5bba-466c-9b14-114a5a595076"
        },
        "item": {
          "id": "600d8972-1886-48c2-b2c6-7abf8b13b848",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "673b26d5-4fca-48d8-b72e-130a6f7e9a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf948fc-c919-4409-9734-c4d1d199e1f3",
        "cursor": {
          "ref": "823ac90a-0a9a-45e6-a9c8-5060b683358c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0b3d1615-b449-419f-855d-ff4106c51e0c"
        },
        "item": {
          "id": "eaf948fc-c919-4409-9734-c4d1d199e1f3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5eeaafb4-9511-4f7b-9512-1d1de41c40a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dec5029-9d22-448d-a488-ffd8dcd72164",
        "cursor": {
          "ref": "3f227f3a-be26-4aae-a51b-660a87c2c689",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "84698f5d-422d-49f5-aef7-53c0d1b82a0d"
        },
        "item": {
          "id": "0dec5029-9d22-448d-a488-ffd8dcd72164",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d9c308c6-96a5-48fe-861c-cb14eb5a9592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0d3136-2830-4697-a144-84b47442053b",
        "cursor": {
          "ref": "12d8607a-74e9-4cbc-bdcf-4be84880f503",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c1220007-ab8d-47e9-9246-069697ff2a09"
        },
        "item": {
          "id": "fa0d3136-2830-4697-a144-84b47442053b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "187cd13d-bada-4653-ac61-bcc2b0e05b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184080d3-9d48-4dc9-a8b4-bcaac28664b9",
        "cursor": {
          "ref": "9af4d304-d00f-4613-8fe2-4a0708de4fcf",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2e548964-d003-499f-936e-32c7e2f3a1da"
        },
        "item": {
          "id": "184080d3-9d48-4dc9-a8b4-bcaac28664b9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee8e4fde-3771-42c1-8938-d90046c477c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ed619d-c073-4b7f-a197-664b25720f80",
        "cursor": {
          "ref": "4bf2d7d2-6017-452c-bb5b-2489cae86e31",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "1ef2158b-3021-405c-9399-6760ea84e6cc"
        },
        "item": {
          "id": "64ed619d-c073-4b7f-a197-664b25720f80",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b472dfb7-6eb1-4f33-a0da-a130a828955b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fb6723-ba5c-4ba1-8019-450ecae3bbd2",
        "cursor": {
          "ref": "257491e4-a41d-4515-96ea-3eff7beb5ca1",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "915cb3b1-46b0-4cc0-8a89-fa2bb13d89b4"
        },
        "item": {
          "id": "26fb6723-ba5c-4ba1-8019-450ecae3bbd2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "88c32119-c174-4f32-b6a2-214c5574b46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5b57ce-4311-4082-abef-3ce13bbe0b38",
        "cursor": {
          "ref": "b4e70c1d-4d2c-4ec3-8bc4-35a36fa31c24",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3262a3b0-e52a-40ef-bb79-3ee95fc424e5"
        },
        "item": {
          "id": "3f5b57ce-4311-4082-abef-3ce13bbe0b38",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7548d49e-656c-45d1-bd68-bff706dd696e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f528fd0-59b9-43c6-a140-4203b30ec878",
        "cursor": {
          "ref": "4fd4d880-bace-4e60-9469-14077fa1cd24",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e9abeedc-1723-42c7-958d-c24a75ae9d3b"
        },
        "item": {
          "id": "5f528fd0-59b9-43c6-a140-4203b30ec878",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a71865f2-7237-4a5a-879c-944500f7f336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd5be0e-d4e8-46d6-84be-bad336acb0bb",
        "cursor": {
          "ref": "8569a786-156c-4924-a6aa-d7d96a94cb62",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9cf77d11-1764-437b-8f74-73b04beb2f91"
        },
        "item": {
          "id": "1fd5be0e-d4e8-46d6-84be-bad336acb0bb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "422e47bf-f149-4400-9df6-56950b1fd804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c613c6e2-ba80-4148-99c9-e307feb2065d",
        "cursor": {
          "ref": "d4443f28-9ed5-439d-b4f0-1624c230e4c9",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6c17b462-ec07-48a4-b437-e667fb6a94a6"
        },
        "item": {
          "id": "c613c6e2-ba80-4148-99c9-e307feb2065d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "700b097c-f7f4-4694-8ab7-69212f07c8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bd20e6-284f-48b2-a275-0eaed7b90a2f",
        "cursor": {
          "ref": "8b1ced68-9dff-4b74-8d4d-61b849196589",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8535df12-45c4-4087-b20f-4e2d713f9070"
        },
        "item": {
          "id": "b1bd20e6-284f-48b2-a275-0eaed7b90a2f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5e5aa402-d171-4052-8184-d3f7a5f84534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f48c9a-2d27-44de-98b9-fca57822ddcd",
        "cursor": {
          "ref": "e95894b9-6d16-43f9-aa03-46134c5fdc24",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6adcc63a-ea84-41bd-a1eb-8b62ac11367f"
        },
        "item": {
          "id": "98f48c9a-2d27-44de-98b9-fca57822ddcd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cddc1d7d-aec3-41a5-abd7-f8e91ad40602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16bde08-24a3-4928-83b2-e2e74fb8952e",
        "cursor": {
          "ref": "5758b9aa-45be-4815-b551-2ca32dd1bc37",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f78e3637-bcc5-4fc0-9a83-2049a7b25952"
        },
        "item": {
          "id": "c16bde08-24a3-4928-83b2-e2e74fb8952e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "41de6394-731f-4053-b4e7-86ad0ff57264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8210b29e-63e6-43ef-b22a-d5e7adb48975",
        "cursor": {
          "ref": "b84072a5-8771-4f7d-8f07-f7ad90e6b67e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f69c5d32-070d-46da-aaae-06e142b7d7cb"
        },
        "item": {
          "id": "8210b29e-63e6-43ef-b22a-d5e7adb48975",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "711cdce3-f005-4826-a400-4413638da742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526b1fad-0d4f-4aa3-8f40-bc7fd2f577a1",
        "cursor": {
          "ref": "0fdeb4ea-a574-4625-96a2-51421441490a",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7eeaa02e-3ced-492e-b592-34c300059e14"
        },
        "item": {
          "id": "526b1fad-0d4f-4aa3-8f40-bc7fd2f577a1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "534f3ba9-0003-46f4-a72d-fe99809725c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278f0294-9a3f-4b31-bce5-a53c3601a2c7",
        "cursor": {
          "ref": "f2637fd1-60ce-47dd-9e6c-9098ae4acb15",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "686c8c85-5dee-403c-ae7d-e058c3e042fb"
        },
        "item": {
          "id": "278f0294-9a3f-4b31-bce5-a53c3601a2c7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3eee9103-88bb-42ee-8407-e2c21fb81215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f314727-c983-40d5-9c56-d732eee76aba",
        "cursor": {
          "ref": "5f43c0dc-8f97-450a-bbda-a959163e9eeb",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "92c8fc8f-474d-4590-9699-31da138bbca5"
        },
        "item": {
          "id": "2f314727-c983-40d5-9c56-d732eee76aba",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4eb22c84-4935-4220-b7bb-234f8a9ab573",
          "status": "OK",
          "code": 200,
          "responseTime": 863,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e888c1-d7c0-475c-ae3b-6e026d52b905",
        "cursor": {
          "ref": "2a37dc78-eebf-4f98-94c2-d9fd5792c9ab",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b9597eb7-fea7-4d7e-8c72-2fcbe8fad0e3"
        },
        "item": {
          "id": "47e888c1-d7c0-475c-ae3b-6e026d52b905",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ba58669d-6a4f-4bf1-a98d-ae925de38ff2",
          "status": "OK",
          "code": 200,
          "responseTime": 1247,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a4919c-5203-4ab7-87f3-ddef59404d68",
        "cursor": {
          "ref": "3bb8ff26-2e73-4f05-a5a0-b7a87dd28650",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f3aa57ea-ea7a-4352-aab2-b6582d5e22b5"
        },
        "item": {
          "id": "d5a4919c-5203-4ab7-87f3-ddef59404d68",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "d5a4919c-5203-4ab7-87f3-ddef59404d68",
        "cursor": {
          "ref": "3bb8ff26-2e73-4f05-a5a0-b7a87dd28650",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f3aa57ea-ea7a-4352-aab2-b6582d5e22b5"
        },
        "item": {
          "id": "d5a4919c-5203-4ab7-87f3-ddef59404d68",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "28a7fa2e-e984-4f44-9e53-ac7bccea9f19",
        "cursor": {
          "ref": "edd1a858-c0c7-4c7a-976e-8521171ac2e7",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e527d012-ff7f-4362-8dee-c53e9675d177"
        },
        "item": {
          "id": "28a7fa2e-e984-4f44-9e53-ac7bccea9f19",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "2fd219cd-53de-43e8-865a-7b92523db3b1",
        "cursor": {
          "ref": "ff3f754a-c129-4fe3-bec3-a964c62ea02e",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "68e2835d-71d3-4512-8288-892ec48730fb"
        },
        "item": {
          "id": "2fd219cd-53de-43e8-865a-7b92523db3b1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}