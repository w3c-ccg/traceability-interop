{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "133b5ed8-d322-4b5b-89be-3612c5dea92c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "42cd4c5c-2abc-436c-abeb-64bad6993f16",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54138d9d-37fd-4c63-b12b-b1fe325ac981",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1314164c-d6b2-4aa8-be4c-29a09a78a913"
                }
              }
            ]
          },
          {
            "id": "cf03fea9-b685-48c0-ba76-75628df71308",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e48ebc9b-7569-437f-9653-14beb9d36471",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c0a9135-4553-4994-9128-1dc817d943bc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e063ac0-9160-4b66-915e-c841f2bcc586",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9e5095fb-5ec0-407a-9ac4-713a2d363fef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa9e2381-6726-41d2-9210-6a85585cbfd8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "072fb804-9889-43c4-ad93-8ebd73bfbae9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c697511d-21fd-4095-8df8-3e46758b5529"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "491946c2-c0d8-4a96-947a-f246b8e0c676",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1eb1ff56-7734-488c-a9ec-665ee1af7271"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86d0003e-5390-49cd-81cb-ade2ed3b2cba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fbfdbb88-192c-41f4-b5e4-566a017322bd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c64a6e88-d98b-4caa-a4e4-e95d64b1ee86",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bb234337-6be7-4410-a6f2-9909fc2a0442"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78c8947a-3e4f-46f1-b657-764acebe6473",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31cd1daa-7a24-46c8-a433-d7cb747d4425"
            }
          }
        ]
      },
      {
        "id": "aed8de92-aca8-4ec4-a76b-3b1aef1454fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "62c5dc21-5a0e-47e3-ad58-f17e17132c6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfcb1611-7d7d-4b42-a90b-b9fce6ce5f31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9481fe6b-097c-436d-9d0e-2bab2e266269",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40905ca-4e29-4ee1-8676-49ac88238018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ffa883c-342b-416a-a2a2-74c830cfdbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eb1919-512c-4216-95a0-f664fbe236ae",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3672f115-ff59-42e0-ad99-c3bc9af79b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "174f6aad-494f-4732-a036-0e6a909966d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222eb3b7-d877-4ef8-ae5d-d4be61f1ab45",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb47d0a-747c-488e-bd70-44f4607370b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e69aef02-1e65-4479-bc93-4109dfa498fe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "812caa87-60dd-4218-9913-9ce3a4f208d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e44eb0c-fbf9-465a-b9e1-9351b246f0ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22795728-7f93-45df-90cc-12949f1dfc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b15a1616-668e-4e84-9a5f-387c8c9bef02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec0a3ce-fb60-4704-8589-311e80f662eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edb75c5-3b05-434c-9015-ce54fe3eef33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f5f4f695-111b-4576-ac68-cb3c8f30871d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "567f2eff-42d3-49e1-a314-d497c470bb90",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22fe4425-1aec-4da7-adc4-7ecb185afb59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3a527ff4-3ec1-4c84-93f2-cb235836f87f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9db5ffb5-29f5-4e62-852b-024abaa0b0df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4e9ba3c2-13b8-4293-817f-e9de885f09e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0413e904-dd04-45e0-9a15-ca803792df4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d15ab2c5-7822-4a4d-aea6-b8127b2f87c0"
            }
          }
        ]
      },
      {
        "id": "a53dfe0a-081e-4903-a512-7bfc9123b627",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "af8dde16-2099-4cdf-b712-c4a56c0c0fcc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3125e99c-bf0c-479d-93df-4e103708ff32",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a7eccca2-dfab-4807-b467-e4ba4ea68c7e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc16fb9-4d76-4b0f-8801-d24dfb53c645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ffd7b9-7c66-4817-904e-16854182d890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f214ec3-7b06-452b-98f3-f33a82591d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f94bc4b4-1267-4daa-8812-628ed28de3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761b459b-69f7-4404-8b6a-9233f27052d2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74629fab-ac51-48c5-bcff-abc8b7e5c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355b9218-d318-4f6a-b231-8a7e1507354d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfce3fb3-140c-4eba-8ef4-3d9c5bdd073c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e2d1fd4-4682-42e0-b3db-21bc5ac167e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc592a5-b511-41a4-9b7b-ac63bd9f9d42",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8faa24-0403-430e-ac89-58d41246c129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9407fe5-4357-40eb-a250-4cba963b1f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a51b24-3180-4ce7-a7bb-11b43a9b5833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f72ed33-54fa-428d-8f20-0bbcc883d636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7c986e-e423-4a9e-91c7-8fe13a6870eb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c7580d-0af7-4913-ab4e-fe282442028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a67959-7d1b-4e91-9930-4866a15d8f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88aaae2-3959-4c6c-8e16-870256954b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "453aa374-d57a-4353-aed7-2f512a3de883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02b2c1f-2e7d-4285-bdb7-e338161a9b4f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebc1d33-e809-4fbb-8271-998abf4b4d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e5d9be-2849-4c4f-81b2-c913104e7fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6205a09-686a-4dbb-a2f2-5aeb1da526aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fbb2138-4031-44f6-a44e-70aea201c634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996d8451-f2e6-4144-93ad-fbf7a249dd68",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a80938-9ff5-46cd-aa6c-52d4d06dc4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e918e091-11f1-40da-a67f-33a28963d4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f41f0c8-ef6d-4af0-b68d-7ac1dcd19dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b94b8c79-0714-4c2c-89a3-5233ddd93066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff5a2f7-819a-41fa-b9ff-d12c43b0c594",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6337ee95-c2a3-4199-b2a2-8c30a7161681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a92e89d-f32f-4f61-a12b-1ca28613a0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc648858-2280-4252-8b41-d69609bf2bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "329e0d91-1dc9-4461-8d29-2bba368f8061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3b6d71-a5e4-4ac0-9f42-f3b3e313f15b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb7cf3d-4a3a-4cf1-a6f8-081e2314f57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481ce2c7-14a8-43ae-8090-6b373d32ae07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e9797b-5e1c-4986-997f-413ab6556f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37e19a5a-5138-4b28-bf99-84d637094b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19910dbe-7147-432e-85bd-6038a5054985",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09989f4-d1f5-4887-a2d3-c3d1cf1b6cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dbe330-7a34-40d9-a3f9-abea0418d435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cab04f5-5c99-4643-a199-a4781339e45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f49d0313-620a-4117-b503-8b956495c622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826e8a67-e14b-4a7b-8220-d4dae044d1c1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0402b5-97f4-416b-a6dd-f89376868b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65348d36-23ba-4a8a-9de5-b281ec72611c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f4f501-9dab-4a02-9f29-1fbeb6c77337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2e90048-fcaf-411b-b589-f3ed6b1c5ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736f1865-c060-4e46-a54b-056b7effd507",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135328c-9635-47fa-87bc-6c9d82ffd36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dcb143-ba36-4075-989f-bccd143c26e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd132e5-b6f8-4c66-a0e4-8721ce90e1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "631e2426-be4d-4707-b044-3ee2c03b5f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0811243-fa86-4a24-8ad5-f65d5aebfde7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8fbc1a-8cc4-4440-af5c-0807bb196971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6712dc78-b3d9-4b67-99cd-49c362e37b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79601750-502b-4a2f-af74-d92743ee1bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca18577-e8c9-45c6-9029-f23ed3c74fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4705efde-bcae-4ae0-9223-adf6e853e000",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb0000a-82aa-49b9-848d-7710b56b71da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8cad79-6feb-483f-ae2c-aa3028215d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50707ce-90b1-48ff-bdcc-bcd6cae9897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95839819-f161-4f6c-8bb8-ce145d716d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539e2e87-03de-4d8b-b929-61ca291f0561",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13426668-3b9a-4a1f-9a26-59d3d034bd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe27ec8-6f20-4053-8270-cc5e67694797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36382837-1acf-4709-b8f2-9acc12e5e818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b41a3e52-c0cb-4b63-bd33-d9ce9ae513a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61009d7-fe82-4f80-aacb-e4be794ee16a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64af8922-05a8-448e-a7e6-994c3e7befe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe02177-31f2-4518-a975-f5b788f40830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6f9e90-2dec-4b43-8dca-d6bf7ffa3b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c4ce8c0-0505-4b29-8bad-01f8d4b1bd79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c835451-bc13-44bd-961d-7acb6c292142",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1513c00a-812f-42c1-9b71-9808c977c24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b5663d-d747-4c39-97cc-170853bc792f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81aa036b-52b2-4a66-90cd-d776a82dfaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f87a41f-c0e9-4a7e-b516-31be2feba52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e36f5fe-9244-4e59-b791-e46b9733d8f0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0bf468-17ab-48c4-82f1-650d49ef085a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a093dcf1-150f-41fd-bacf-aa38cc3e9710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a3cb75-88aa-451e-b147-34faded79cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2b2d2d3-cb55-4a7c-9981-315a45710211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1323b317-e962-4b2d-9473-8c3a5de0c11d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1763ff1-eea2-468e-a682-ca4e816a0963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c8ed73-8f9e-4b7c-bcf6-4c2a855a1a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85286318-306c-40c2-94ad-26e434772f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "adea1ee1-57a5-4fb9-acc8-6c8bc1c0c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74f8263-1ad7-47dc-99dd-d8c0207255f8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dffc3a-2be8-40e2-8fd9-3ea05c31bbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12486d00-1f6a-4a8b-b3a6-1217b3d8ec74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe5f41b-f8c4-4c38-8957-6de1f98bf509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfde60a-2c20-446c-ab34-3c9f73008c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e4e90a-053b-4d37-9606-2718eb85ced8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36694915-5dc9-479e-8d32-882e2100ce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce659be4-2dca-4755-86d6-40b8970a5b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7d82cd-f276-4e14-8a4b-b806521cfb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "363a7218-9822-47e0-af9a-3b26491b1421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51831472-935f-4d26-af09-4eaa63d58ed1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e7e73-6432-4278-8ce2-483e2529e293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1478d230-97a5-49b6-8f38-8dddd030f4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ae64e2-147d-4c0a-a2b8-5bcf64bbd002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac630658-ab31-45dd-a3e5-2e8187bee14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7eeb8a-f665-450b-ba52-44c314c8a10b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea74565b-bc4b-495d-a264-373e1cb91f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92f0f5a-aa8a-44b3-97aa-62b118f64672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278de73f-7caa-4110-90ff-d0f52525f286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93e8f9a5-4ddd-4cf4-b1fb-66e29e092a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810150ae-88bc-4865-9c2e-129102e48017",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5685b8-448d-4712-b272-5f656e8718c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1ac6ce-a7a6-4b0d-a074-06077aa4e527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d306974-8a78-413b-a938-3e329959642e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aab989d4-a344-4f92-8156-be50c3fc103b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b1c468-acdf-45e4-8a61-c71951769750",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90db907b-91af-4771-93e1-2a22e7c6b0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ea5f73-0b93-4436-8acf-8c5ccb1d8201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63d96f4-8834-4f63-a9f9-e45589b716fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2d20ea-7813-484e-a55a-6a044f3861c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3ce8c7-30ee-4ea6-b213-7bc72d449df9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df706d0d-5c86-4a98-8f6f-49e926adf994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1717bad3-a90c-4958-b963-308769741bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb285cff-d8cc-4097-ab3a-92b330c92bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec6483a-f194-48cf-b200-c316786f368a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef03da4f-b9ac-4ee6-be81-f16cc78478a3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c8338e-2dc6-4106-bd3b-d2393a80d430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1583df13-94c1-498a-9ecb-d9a1e466ce2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520e925f-3feb-4e2d-8475-3ee82599260c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be2f9bd4-d8ae-4d56-bc43-a47b8d13e66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf4883b-8715-4a57-a513-76a58195c223",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ab500e-0ae1-4c01-ad04-60e322365fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cc50c8-9971-48fc-a08e-58cd6219b6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5886abe5-4837-45b6-9aa6-2d5e736a88c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7eb4ebd-6aad-4a6f-9895-cb0f144a2248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f97145-e20e-4245-898f-383ae65ff2dd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e842f202-124f-4b0c-808d-d15da7289b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80ab9bf-9b4f-4975-a9c0-fbb7bd2e5700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30592e83-1092-4468-b364-9cdf1a721e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "649c887c-fc4f-4312-a9f8-ddf56a9b9570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fa2916-96c7-4e26-8607-37c19d3792c4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b8f22f-ceac-4ac4-9d0c-372f7189fbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a75149b-1a0e-450c-bd4a-bc2e3dd5c7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda016ad-7434-4d15-b017-222e30a346d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16827e80-cbca-411e-b8a8-aceae62899ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c4257e-09d9-4cce-a1c7-649c4ee07390",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f35cc6b-9878-447f-95dc-11ec87b40f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74b3298-4f83-40ac-a857-51d88475d5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a633a8-7e55-45d0-996c-b687ac7bb68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "55863c3a-31a9-443f-8e64-513ffbfd96ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2494db3-c92c-4470-b8b2-292f50173271",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a0b76b-0545-4c1d-89cf-b3fc92da47b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d062a59e-d8a3-43bd-8088-0a9f73e09b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91400657-2467-42a7-b0c1-a0a870ccf82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fca99ff9-6b64-446b-bcfb-d105b71581e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596b129a-b1c8-4c08-98df-db741350af0e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f6ad87-1c6e-45c4-9ee0-237fc49cb81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a9104e-a130-4a4a-82b4-43fb6dcc6458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16ee087-e869-4357-b666-d74b6e7cb4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfd1c8b-79b3-4a64-8ff5-b47c539ccd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10f73b1-8b4d-4206-9ed5-7e64a55ca395",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911c3f03-8a34-4553-af0a-c489e95aa978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99658932-217e-4599-99b2-e711914c69cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db9a152-0356-47ab-9997-29491a674a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de826234-44bb-4bb7-8268-605c78ee3d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2f7e35-32ca-4525-bcd9-03d0a2c846ae",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c88450-d306-4921-982a-f80c8780952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb20efe9-9432-4014-aa7d-04713d2c3667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876a830b-e866-426b-9e16-a0ea807f0f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94c08e93-b967-43eb-be7c-88bffbae0720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4020bbe6-182b-4d02-b9ae-00e50b52f4e8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbba32a-3f9b-43b1-9701-e3d83b49c708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8781acde-391f-408e-b073-d2a0645925ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cb2324-472b-4d35-9e08-97afd8597feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "148d7b82-74d6-4f67-8a0d-8b77ec4685e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e73512-0d7a-4ab3-9b36-a820c7b2c578",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620d9525-1f9e-474c-8b0b-3827319911e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3b5cd1f-e4ef-48d3-a75b-778d149b022e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b0f5b7-1813-48f6-9e73-0b0511e20b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59baf8c5-39d5-4174-a5f9-3797ec18273c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d1f043-0d8f-48a8-9b6c-fc32139f90e7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405299e2-810d-488b-8547-6d7fca7ba362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55303c7e-ccd4-49f1-bd70-d8ff4b66e666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d02aec-4594-42a7-b23d-50166e99cf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6995ab6-7877-4c1a-a4b7-7cf9aac4acd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb3e3bf-9cb4-4b2e-89d3-67bd09ab80d5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508d70b4-4f11-4b82-8136-dd5f90432686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c92ccd5-4ea5-429e-bd77-6dfa21517111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd5b68e-e207-4dc6-b82d-d56e50e051e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dce41615-4e83-4503-b0ff-961afb1b7cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50522dd5-435f-48dd-aff0-db2ab8c74741",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5bf70a-33df-4523-b670-2a95906794cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225f11f8-a2c5-472f-877d-887449a09bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edb068a-27ac-4465-a9a4-20e6f3529b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de350d6e-b8bb-47f1-8e70-2281285a6025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a051c5e-5010-4fe2-8f81-dc360292e20d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c7150e-a79f-4fa7-b7fc-7d6f865d4111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdde2999-40e6-4217-b5f5-e49911a113df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a449668-aef3-448d-a6d8-573668c25e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0897e668-f2b8-4f3d-ba30-132e7d1ae37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c432e5-55d7-426e-a156-54ce302e56d6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d267d4-9673-4ecd-bb65-c5ce95f0fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914b9125-a61a-43b6-888b-837d1318a0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e7014f-a1f7-446a-8bfc-ebddbed13016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "32483942-55f0-4dd5-ad64-116803f88c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b670dd9d-1f1e-4400-975a-b3821ec52694",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76401635-dee9-48c6-a81f-dbea50bca690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05ee086-9e99-49ed-9a4a-c096ea9419ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff12ed4-3710-4312-bad6-3bffe6f41b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a61e302f-6b3f-4a41-bc92-c3b993d88124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d357ccba-befd-4731-9a96-b51fc1721484",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3bfce8-9e02-4547-b7cb-2cbbf9d7a940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a83e5b-3c64-40ac-a03c-549de245b03a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8963e867-f7ad-4834-88d5-45c36daa1b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bda33104-5c84-4852-ac37-d58755e17b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3694d040-bf1b-423f-889e-783dbafc8c4d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eb74fc-4b11-4ee9-a543-b77e87da79b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c253078-5fc1-4e80-831d-fa46eca20531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979c41ab-af74-4e4a-a7fe-ce3001dcba73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "631d1747-f9ea-4070-b38f-c4d2a412ebec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944cb3e0-2e76-437c-b735-b0adbdcc23d2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c990c7-8915-4986-bc81-5fd4626a42c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b294f464-487e-49c8-a6d4-55adddf5aba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5a979a-8174-4e62-9aa5-4a06ecdb513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9efd2631-82dd-4451-aef7-ece836605112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd82016-9812-4fd3-8b3c-8327e94d31b1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb28dee2-57f1-425e-8a8c-3f0e835edaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e566b0-2333-46e8-9549-e65b7158ca19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7533556-c3ca-4657-a44a-aee884f81e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3fa786-a398-46ae-bebe-cb2934051310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afab51b6-8b6a-42ff-b35b-b26bc9c4a3a1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5443e8fb-0e41-4b03-870a-2d9e7547c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb1897a-c781-455d-87ba-8b0ffc48f319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c207d8a-ee18-468e-b282-7d919aa8ff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec74a668-3349-400f-a8ab-64ddb089a66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401a024f-f1a8-47f7-b398-62cb0d08fe79",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882662af-0d15-47d6-92d7-bc31c3afb2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdf81ce-c671-4063-8203-7373bb1da613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebc67a2-ad20-4bd5-8b29-b8de97c84295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc85c03-5e56-4801-8f1d-e1a8d2ab7a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3db97d-92e7-4991-ad50-f1a46bfd1f21",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1237458b-dd79-4b5b-8c51-14794a1063ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b17cd5-50de-4194-a9ee-24dd880ed4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b869b43e-5c51-45b3-aba1-00d500fa41f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "324a2828-5e79-4044-a3ba-f4ed020addf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98dc4b1-09a1-47e2-aec7-c6fdc0480190",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f883100-e547-4f6d-9887-ff8d26ec2f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc437c88-5f3c-4ea2-b7e5-194b030d7033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd298be-4cfe-4a8b-9f45-e3f86c61187d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b83f1e5-6738-4a3a-9e63-a3ac3adc5da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498444c3-0a9b-4ceb-bea3-20632506c713",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b740c5a-582e-438d-8133-01f3ed48f541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c2d55b-3006-401c-b1b5-8240eb789328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533290c6-6f15-4d0c-8da9-41e8cf78f562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "617adb19-4dad-4f8b-b329-3f9f52bec0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5d5bbb-dbcb-45a0-ab93-0cb87eb226a2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb08fdf-14dd-4d63-8fd5-d868fc067d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412bfccc-2e14-49b3-a3ca-72bfbe261bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c857c82e-c7f8-4db4-9d33-9d73d396078a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1124ce4-2808-4684-8cbb-58c39dfb3db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92383a2-6040-40d2-bbd6-7d4d7e9686d0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b6dbac-4182-4982-8c54-09f4c5f15a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a672446-d28b-46dc-b2b1-af485da9e3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce42079-354b-4f67-88ed-13327c56cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "134f5f63-5bf7-4e7c-a438-abea41543e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc515be9-590c-4885-9697-730b7f2f403f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad01957e-6d9d-480e-9dce-7694b39ffc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51560dc5-3317-4b7f-8617-ed5cb16a8fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed5ae01-914b-4060-98d0-35debf5f0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b71697-f85c-4cb0-bb63-4923b4d8eb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6b998d-5c02-4d51-b939-d929caa51536",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5157c929-f43c-47c1-8b4c-74aaaf98aa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f117743-0392-43e7-920a-3ac2279bf7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe7e9a5-9a48-4d6f-8d68-b7b56d607864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d47868-3e8c-40b7-8e5d-c7c682af205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52142ed1-295a-4ca5-961c-4a6a4b848a98",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bea08d7-3d99-4fef-b347-e0430b0c2f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e41a8e-6109-445e-96d8-746e734fe976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78a83fa-6449-433e-b7a6-15934fab5226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e25435-59c2-4d97-9a54-06fd3d6c57da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb19783-56e8-49d9-b875-7acef3f01aa7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765b9b75-1826-4d49-b548-553ef2538f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5937d89f-655d-4ba3-9eac-c412ab1b36c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb06e64-09c0-4cbd-bff2-a47d2902ed6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac122d1-0573-4194-8f8a-58323b7c7aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10d8f32-1206-4226-8ba3-c4b96e716db7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365bbcb8-48dc-4c48-aed4-b676b6931e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4110afc2-89c2-4673-b15c-4cb1a9814b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106e1e99-5d8d-4915-8077-c194d5f3417e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6f1c61-215c-4ca4-b0e3-27159a01b3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a98d9a5-52ca-424b-a32b-d67cb6168de2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccc8f6b-cbcb-4cc7-a5b3-69df04c5ad8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8f04a3-59a6-491d-9557-c6ff7c337272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1453c222-c5c7-4f84-b75e-76915131abf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c88bd832-2691-445d-a29e-17382d873819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d75419-9445-4568-9735-5782b115c66e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9151b0e5-7728-4771-b1b3-129ce278453b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27c6cc8-aba1-4303-9795-22ec87e2660c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ca441a-65ed-4889-8c2a-25981e69701a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "619b20be-2b58-4912-a469-f48d89842953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043421dc-8f97-47d3-a6d5-7a284d1736aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3a8be9-315c-4cb3-97bb-13f7805cd2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8298d8b2-febd-4c00-a01d-a9c2e516dd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72935c3-d40c-4bfb-9795-4c888772eb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9cc9b7-eb31-4c8c-8d4b-bf9993c1182e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59b1fe6-7fc4-423e-b15f-c7210d1b36f6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ff84f8-fb21-476c-a62e-5342134e8416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d855bbc-ba13-4911-a590-b7caa69557f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d479d17-ffb8-4e0f-ac26-630158759817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d922ca0-46f2-4b11-94d8-d61507e04050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f903ac-8004-4611-8125-0144479a1e6a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d216140-ce0f-49f0-a7c9-faa34ee9d802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cd7987-7ea7-4ffe-9d70-9a68b53a302a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51df3f1-ba92-4445-b838-dcffcde6edcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9be979cc-94c7-4be7-b909-c807012b2ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd45f6e3-5427-4fef-a467-e30586833b71",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfc3874-37cb-49a9-9bc8-e1576a6d3e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8384fa-763f-46de-a39a-9aba28f54bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15d1c36-464c-4820-b2a8-1854f13f6cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05bcf00f-f3a8-4bf7-b790-aaf6596e7d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e037c3c8-ab54-4244-a2ec-0784dbc07291",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fc78dc-11cc-4633-8a91-ea39c99ed033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496c5d9f-0e59-476f-b3bd-51a779ab50a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899b93e3-8b3d-47cc-9091-501ce8802441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "790b46f9-e439-404d-b5a8-59d1ab433e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f6ee6f-ff23-42ec-8fc8-c0da2ea00d7f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6f0b0c-03fb-4256-953c-e111ad614d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9417a013-7ec0-40c4-bfc7-778efb3be92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2af147-9141-49d2-8fb0-ed3d25ff39c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5e510e-162d-48c9-9afa-0217174c145d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9ad828-b2fa-4308-b51e-dc21d76d6eb3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9371df94-a578-452f-8077-78a64b2c6bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7df076-9ffe-4be8-ab9e-b266115f9e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5254f53-5dd3-4678-a524-c798eb856526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "160ee179-1e07-4add-ba3f-fbf3eb1b9a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902694ee-cc7f-49bf-a510-fa9121daf13c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb866302-fcbb-42eb-a51b-1a73c81e94df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01e1ee9-26a2-40dc-aa4d-c3497ab5ebe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6153ca0f-0ad1-4168-802a-c48ec8d948a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "940935ce-5cbf-4e05-9987-073c4d05420e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c232870-c04e-4021-acb9-83f6ba50268d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a16cbb-1b01-4dc6-a6cf-b10b9fa45aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200801af-1057-455d-bb4f-8470aa44bf73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285f832c-f71a-4f19-bb88-394d722c97dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2587c68e-1705-4c44-9c74-57e6586cfd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d9fb2b-d597-4f74-82ce-71deeec63e19",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcb275a-3bd2-447d-89ca-12363efcf3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bcd488f-f3ab-4d6e-9ab8-75e9c3b4f1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e36ec0b-5c73-4c3c-bb98-c47669f11196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eba9438-3d32-4e8a-a244-86a51e67d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15b657f-534e-423c-a0ac-87fac8562241",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbb993d-9763-4f1b-9232-b6385ca1fbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1f7f92-c554-4595-8d98-7689ce64a703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2d60ec-1dac-4832-b014-b5eca9150d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4978f3c8-957c-4bd0-bd87-6683557332e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6927f46-d223-46e5-a7c4-15cb8fa25111",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b6fce3-9c13-4976-9632-aea805708c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aeefc1e-ece6-41ac-8b19-6501b8c4a9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cefbc6-40ff-41bf-a750-d3985de4bf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6e00bc-9673-41d1-8dba-b89c240a1c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0621b2-433a-4e4b-a2b4-563beaab8877",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9416f4-31d1-4573-8cfa-8dea44d6f884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4636479e-0ce9-4e72-90e0-73a7ce2ab5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27581f0a-f112-4953-a44b-f0b24fb1451c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe430460-239a-4f1b-8c8e-c7a9ba7d6d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c128842c-7fd8-4e01-bd32-e66110ab54f1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8889fe8-b00b-48ac-bece-77a1fdcfb111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f2cddc-477e-40ed-8434-f3639a293ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955dee5a-54d0-4b57-808a-ca781b298eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09f26261-7844-4cc0-93c7-5599cc6a8bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16170c6d-d332-45bd-8343-e71ec4deb564",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eb7d80-f4e5-424d-849b-16878613bc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d58674-e316-4a50-949a-de94282b4b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a022334-b090-4c7e-9ee7-21a5fb7d743b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "786a595d-bd0a-4c03-bab9-c21187653f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd7d993-fc23-4f24-af51-e5c8a6951664",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b52f2c2-b53b-48d2-9feb-25420594e45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6672cf09-c0d7-4543-a7f8-edb46e063faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70236c27-0c1f-41d7-821c-e9dfea3c0907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe433d7d-ffab-4d16-9bf3-f0c58682db1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3aebbe-b897-44e8-ad36-6b4b74c3b1d8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c4f83e-ca2a-4977-b47a-88da7d6bc874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213aed91-386e-4b54-abfe-d7b8000facbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89b3f52-b7d4-47a3-b198-cc852beb8ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f438bd-651e-40a8-826a-a741a51541e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9a0e36-3f6f-4df0-bad5-35f85871ee93",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0428f6-a0ff-447b-b7bd-818abeb879d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97560c2a-7bd4-4dff-89d8-6c9956715927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579682ad-9fe0-4724-b493-7919581c4486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa7cf9b-296b-4226-95ba-4aef2d9d3ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed9fa9f-d10c-4a6b-9915-52a23270deb2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059fc9c6-b4f0-4039-a728-355ce80c9fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910fde8e-568b-47a7-a39d-df3c4aa9be72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfc7d18-c29b-4da0-b75c-5a9e007572cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c302a5d5-ee13-4ae5-a5d5-507b17d11874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e349304f-18fc-47cf-9f6e-0a2915996502",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3c0bf2-9074-40b5-8f88-75616cf047ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567951bf-80ed-4013-a9f6-c69e31673925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29b8dbe-3ee5-486d-a55e-afb5bd2f5f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35162dd2-f6c8-4653-82ee-ce14f8737ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b831683d-44bc-4055-a01d-556fdf912f70",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da576b0-04c7-4728-8706-1837be4060be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d32fbaa-d2e1-4ee5-947e-ed89c0858de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1babf82-1041-4cce-9fd3-fc11ac78be5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7452c080-cea3-4bae-9f97-4510926676e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c471a73c-df7c-4b5b-93b7-8ad6e693a934",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89ea221-4e18-4c10-b811-95eaf905584d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46e533c-9934-44d4-a388-363898c28920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469d8476-b7ca-4448-900b-56ddb1c730cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0dfbb08-55c4-4fbf-86e1-ba416a4f66d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1543cf6-3965-45b2-821e-1ec9c41b6e93",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e889ce50-e125-44e6-ada7-585c37a36e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f045e93-8505-46da-a95d-cc05a8fb655e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b4c4d2-5037-4254-a98b-8c20a45b6487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2214c992-d4a9-40a2-b11b-612b2f75e908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c1aed9-5b35-4546-8e90-4f2c281cc69e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b61d8d3-ccd7-4779-a753-f4a4279c4062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac55f3e-6f51-4dfd-84ee-64c553ec106a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784bf4be-aadd-44d3-a820-78f93d54e7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6388f7d2-a450-4276-80a2-6f4140ade627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dbf1dd-8658-4fc3-ab75-3646267e08e9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bceff7c-4068-4828-b8bb-02115899a27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df6bd95-6e0f-4867-93e7-83ec1428aaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24678300-4771-4dcb-8f1a-168662e410af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27783de0-c682-4bfb-aeaf-0f108051439b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac1ff4b-ba3b-48f1-97ef-0b62cf0dfdbb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eff4c96-dab7-43df-b213-b12ac650b15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c53bfd3d-cbc2-4f5f-a1b8-a07fd5e8afd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6737c4f0-b330-4298-b16b-0313c19a0714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ebaecfa-ab7e-4ae0-9e20-1349cfd3edab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026713ab-db9c-40dd-8386-9deb2f66a1cc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45ab75f-dda9-4dea-b668-b6151c33b9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea26d432-e980-47f5-b13e-303c8d3bbabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3301aa93-cf06-4aec-917f-dee06b1e782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "07556bd9-f7a2-4cb1-8d10-428306970361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5230df59-54e3-4d3d-9c88-ebc225e6da69",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0049b435-2b26-4f14-b6c3-5b9c8bf5b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8ec3cd-2935-4fcd-95f6-daad47199400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451002e7-a5c9-4be1-bde6-e123483974f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "235e29ba-463f-4844-9cd4-e17d188789e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c7cbba-a634-4176-888e-a46bbeda9754",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69a6049-44f8-470b-9332-68f5f18cff23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0da3a94-6adf-4d25-82ee-fbb0477146f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ae9079-946e-444c-ba8d-dc9645b75a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79b48f03-6bcd-4413-ab6b-1dbea7421dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a405e49-a21e-44bc-b789-bce5c4e2b58d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addd05f3-0a1c-414d-87b2-c821db3c6eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b738a31-92e6-45e3-b888-90aa61864471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65174ed0-3779-47e2-87cf-eccc5597546d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7afdd108-e617-487e-b160-cbf70c686e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0850db76-26fb-4f0d-85a6-9882bdfe6b20",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3f691f-e765-4ba7-93ef-4c34da7004d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7522224e-4688-441e-b4a8-8e7392020a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7254d0-c051-4d20-ad96-88b19f920928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8928390e-2fce-4e7b-b688-06d52e0a0910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7474d832-073a-4dc1-9bda-c00cff3e6f24",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cf511-bd99-4744-93e3-01cf43ae602c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "01bf2be0-a935-490b-a2c2-50310534e47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a3077d-924b-48d1-8fe3-4ab2806ef2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "99d25eaa-a419-4e6e-8040-40fbf95890b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e963774d-7ec4-478f-ae63-631afec69872",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed7ca623-1024-408e-87f6-910a2772ec03",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264a7fb8-55d7-4168-992c-87b9d9423a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f752550c-6d83-4eb7-a1ca-a2e8961e2950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3d7b90-3b73-4d95-8f22-d8cd43091825",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3d4b245-3526-4b95-8ce1-0d0131646457"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02d1c1fb-1823-416f-a7cd-c15e86b439f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71155052-e64d-498e-880d-c3f5e65889a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a06378a-0479-43ba-952f-0cd1e53c059b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beabfb0f-ea99-486e-968a-03ff1983da12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d6e08ba-8433-43cb-a8d9-194fc2485977",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7743991f-eebc-42d3-af8c-ca2deb402715"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7b144f8-de10-49a5-a030-c95d418e19a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74a3d7a4-ee82-4e05-a649-74983a0a3d1f"
                }
              }
            ]
          },
          {
            "id": "1254b9ff-7a8c-4c2a-9e6c-b2e9aa402035",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97c5ab48-18b9-4a4c-9ff2-2c5a9d0299a6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "315934f0-b444-42f2-9860-0b78cec712cd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866462ae-d26c-4728-bcd6-a2927769da97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a521bb1c-c248-48ee-935e-a2235653c202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78440c5e-f161-486d-803b-d85697fd5d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d87adf-9b69-4aa4-b6f1-907fbb860762"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7447d21-983a-497c-b254-d3210f1eb44b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f03740a8-0e70-4b31-a8f4-2a7d81b0273c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "188aadee-736a-4faf-9278-1775bb7cda20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5445ee4a-7931-4126-940d-c83d72af60f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "737b7685-817b-48a6-aa5d-065e175e2aeb"
                    }
                  }
                ]
              },
              {
                "id": "63302d29-79be-461c-9153-00b76a2260ab",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4fab3c3-8a88-4975-a30a-62f2066c4d1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fadb3fa-39b4-443c-8322-62e2a7417719"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b667c8e-3a64-4296-9d38-12ee4ebb041d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8dd61f9-bdcd-4b52-be9b-377a1655fda7"
                    }
                  }
                ]
              },
              {
                "id": "e0a5dab9-84cb-4324-bddf-738b836ce936",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d39666e-9b83-42b6-aef1-91e96d7e1c16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66f2a08a-cf3f-40e0-bc40-68d6ed322f6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ef5c1f5-19ae-4f82-8643-ff4b89f9b3d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4a5345a-22e4-4323-8238-6bd5682594fe"
                    }
                  }
                ]
              },
              {
                "id": "e4efe64c-96a3-4427-90e0-f4ec9b3a7fc5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c892cf1-27f5-4687-b5ba-4b5701b06129",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58585868-857a-495f-9477-d9e61fc23c54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa273dfa-0f29-47c1-ab80-35a6ae21369e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fa7c3a84-9ada-4ce8-b8ac-c3125e54934b"
                    }
                  }
                ]
              },
              {
                "id": "b73459be-8f61-49d0-b058-d976046bb2b4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a7961f5-e02b-4458-accc-53a49cb0a3fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67864fd9-271d-40f5-8944-253cf590efd4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03e5def9-f807-4b5c-807a-fcd5cecbdaa6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c9a66dc1-7900-40fd-8406-550281bd6a5c"
                    }
                  }
                ]
              },
              {
                "id": "4b9a59df-e6a5-4565-9846-7aa2ee4778b5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "504dc3b8-471c-43e8-8875-ef96ffa06d25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74e4e20b-1181-4ae6-b6e9-4d8627363a0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a39e74d4-904b-4edf-94fe-7f6cfe111664",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b9e1532-484f-497a-85a4-67330008f99c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6718d374-958c-49f5-adb8-965ecb17f6d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce44e08c-60eb-47b7-94d6-253e48315dcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c921a136-44d7-4e10-a828-0a633fa02457",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5625cb83-0d08-4909-b099-8e3a6dc4e211"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45854a5d-f54a-41c6-bd8e-70c5b57c1db3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cf437290-8931-4022-a7d2-93fcfc2401d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f46f0a06-6d47-43ed-b8ce-78a8c513cc84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf5a0b6a-11bd-46ea-8455-ede4920e8a15"
            }
          }
        ]
      },
      {
        "id": "1feb7d6c-844c-4341-83b0-85fa3be8e889",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cda872ad-0bf0-4ab7-908e-e9f6e63e4af0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aacf4514-2d52-4e74-9604-16b7eac6a2d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0e465d93-a9e8-44bc-85b6-b559a41ae5d3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f452c0e7-026b-4f2e-a320-7efcac5e4bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8591d6e9-6a9a-4b43-ba6e-bd318b41a0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccf164f-e6f0-432d-ae04-8f4a669270a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f90803c-80fd-4b67-97d6-821dc21427b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d8dfe2-8ef8-43bc-85d3-60c9ac75b136",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9291b412-e38d-485b-b00f-94fcde45df51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c71ca64-cd8c-4462-a619-bb12d9f81137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cc445c-268c-455b-8da9-e133176cf58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96fa72ae-da39-478d-83c9-fbf5d0b8be87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be175087-3a0a-4482-9aca-f270ab1eee61",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddff961-2063-452f-bdcd-e0f6905ba883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590e5e00-5bfa-4b9c-8fb3-2e645ad8f7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7033084e-ae4a-4ca4-887f-aa547f939276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3bdb34-f4a9-4431-bf94-2dfbf4edcb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a82e1f-b596-4244-9706-d05b846eea9f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2432b3-c8ff-4d9d-aa9c-be22368eaa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63abfc0-4a99-4292-9723-f28a74c9b046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65179f0e-455b-4514-830e-9c6b90d9a451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83face7e-0b9d-48a9-bad3-26f7c79fef85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfa7581-107d-4aac-9f86-a85e94c5e992",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fc09fe-d3d7-4a75-b40a-7d3ee612eed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba05e78-a7e6-4d50-9557-32888a5575a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d513ef0d-4775-45d6-8829-8d44f48ab5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78104ad3-2530-4cfe-94fb-ceed2f55149b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faf608e-7b71-4e5d-b715-d6d964acd1eb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cfaf76-98ec-4705-af6b-69ec8fe080de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f450dd-4de7-407f-9c72-ab05a3725830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a147805a-13b7-4e1d-bf5d-570c21570c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f602ed5-0b70-48d7-b592-ac801bb88762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa6458b-4f51-46c1-9a8b-3a6a5c34b1e2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e47404-37a7-4877-ae3f-3e2b9f3e573c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605c5ea8-0305-4d09-a837-3acf6cdcae65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7266232d-4ad2-4c58-931a-83a43bd7c5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc92a5b5-bc1a-4153-a79f-73610775c584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a36ddaf-56a9-41e0-b881-e2cfd78dae8d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92cb47a-4fa1-4d8d-be25-5bf2447d8c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f271a0-fa0b-47e6-a5d3-f30bae483ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7566620e-f659-40bd-bde3-7137e2096b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6655bbbb-239d-4867-93ae-53e7c646ab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cc37d4-54df-45bf-8a94-744fb3678f4e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efa8ad4-1fa3-4cff-8685-d991694e8d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266813d6-e1a6-4f85-8e98-97fd7ee04f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe843f08-8b87-483d-a9be-c232a0dd4556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e93e2e1d-3f25-41ce-ba9f-73913b27866a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2748658-79d3-4546-ac2b-a17712c5b7fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f9f1fd-dce1-4e5b-90d9-dd2c37c3641e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c8a55e-4e74-4ee1-988d-362467dab7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00e4c94-4221-4d60-b2ca-803be43b14f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60bf0108-3934-4e75-8135-9447383ca419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f755c57f-7837-4547-b768-b515a4dc17a8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d737356-cc9a-47b3-9b6f-f3835d40a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5117d7c0-6fb0-4385-9d65-a38b3670a126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0175a769-e085-4058-8b1f-625eb4960846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6094f235-3056-4309-859a-7fcc77d1920a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5155fe-4c6a-4ca0-a9b5-6f0184a100fb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011030b8-fbad-4484-8712-2d7f9ec17fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f39eec-edb5-455c-9915-48cb1f8f161d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c7c463-ba77-4548-b977-bfb6d316fe92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c899eb-6797-4403-a8e1-4aa1b40fb50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcfb21d-e0b5-4e34-b816-524b4fb466fb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260431eb-b9c5-4b08-945c-84d0cd266b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b53dc1-f577-4556-8f51-29d4f44dcbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e352af24-2efb-4794-aa64-ec84ea6769b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7200f119-4634-465b-8c97-b484e277dd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5e7a11-16f7-42b5-aec3-7ac51a941ddf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3750f42-c6bd-4813-ae4b-9ded70a6f1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148956e4-5451-41ea-a58f-2a0354ca0055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a71fe1b-d83d-47a2-9181-2a30107d9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3983c130-6a72-425b-a6ae-6a8829cb0061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de25ff90-a008-4248-856a-86d5ba0ea1ed",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef8de00-850b-43a0-9025-791dd1fbc877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fab2f12-3f7b-46fd-8149-1d90111a1dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ce8a6-4e5a-48f0-9580-6b8c56234e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "85227403-9225-4d89-9307-a06c3461c92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e94ba2d-e6ea-4ca7-9bc6-3110206c5096",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c611582b-bbe9-4cc4-bc2a-4ca1ae3df970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e177ba0f-5cdd-4660-a8cc-f6629565a6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa2caff-ba51-488e-bafd-69cad5c58572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee23588-d12e-480b-9b9a-dbb03915c6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b46135-8065-43f5-b05b-79c94e260995",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d3a750-efac-45a3-9858-29b38e155a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57ed375-7fb2-4905-9a86-1c08e7f0ca88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c27de80-2076-4291-8356-6743a6994217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0859c695-ce0f-4b8c-a1c5-02808b185019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991dabb8-2d89-40d0-a1fc-860ed1df07f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6abbb4-4014-4718-943e-2dc75a445d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ec77c6-cad2-40bb-af3d-ac7a845b4c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ad197a-bcc2-4eb5-b264-13aa25e011dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab8fb9f-1e49-4afd-9aba-0ad7f8bf88a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ea8a0a-9a0b-402d-9f3f-a6c084e3dc4e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ed056a-4f6d-47cd-9353-d847c512d58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6ff5dc-4bbf-4c84-a758-39bef9048675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954fb4d4-ee5a-4b30-a53d-2b7049439102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56fcb8f-8d43-47e5-9de3-7451cf7bf748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c247e14f-03aa-4af3-8609-748f33f1d2fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d9be66-d574-4bcc-af4c-36719a7df4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86701a69-5d31-4dcb-8e28-79e53ba1a21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047fd260-dc3b-4424-bc1e-50a4d7ccfd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0007073-b5f7-4333-b1c2-b47d66f61acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbd6b4f-0ed1-4e99-8dbe-5a356e2ccfce",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f17679-549d-499c-a599-131e7d4e1ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c771046e-903c-48ef-836b-7737098543d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8417c17-5557-47f3-b460-155d3566f9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8af0c81-e0ce-45b0-86fe-e9a4019fe232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cad02ee-a585-4942-a47c-99a3b4494339",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4692a9e4-2e31-4a03-965f-6307558199bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb0a0f8-bfba-47f1-848f-6a1111494e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ff8c6d-a1db-4fd7-b2f6-4a0de89f259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f411654d-802d-4d55-bbda-819ece99cd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38251185-9be4-4148-9da5-3fe91716a3cd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaff3a4a-1d04-4a0b-a7f6-20ed2328f8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0e064e-d0a2-46f7-8d8f-fdae5cc4e16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5477a5-dd69-4ee3-b49e-a0dcd66962aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ee7b71-343c-4143-a5ef-73f8d92720f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c97be8b-8256-4a88-8b3c-fe6f2b1ee911",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f4001a-7ca7-418d-9c4b-3fece225c664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9582fd18-4643-4240-81b6-bbd693ab5f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d35ee7-6adf-406e-b051-ebadacc4d9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "765e795f-b3c6-4bee-b824-ea8a9d405b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661b668c-f553-438e-b826-a23599781b9e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cd5542-0f5b-4332-805d-bad9a437a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cda3ea-3276-421a-b7fb-902d345de954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62b815f-8718-478e-b6e5-3fe7a6b5ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "632408ad-3a3b-42ce-908a-1cc1076a9d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba42278-efb6-4481-a29f-538fc9ad55b0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238a4582-0d51-4548-9cbc-943adf1cb1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0563e3-7348-45fb-bcd2-a143c501a176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ea58fc-b727-4c41-adf0-bbf0130c5dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72acd96-5885-4604-84bb-e55b778aa838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0720b8dd-53f1-4af2-84ea-86355582a29b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad7f770-7caa-4d29-b105-bb95c47e36da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ade91a0-316c-4719-aadc-cde96eb80c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3789f1eb-9ab2-4e25-9e74-a704e3611d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0be29a9-3c60-4cc6-b0cb-c33d54d89ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c091a1f-23c8-47f9-9777-7ecbd6ab1b70",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e149d0d9-4dec-4032-bd9e-c032a95897bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2735e037-bef5-4e51-ab2f-4a8643cb4ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460e6513-7d86-46fa-8f9a-654532d2bd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e04e08-47bc-40f9-8eef-61404942088c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c6f61a-c08d-496a-82bb-c2dadf346317",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3f2a2a-7d16-48c5-be11-d2c74368475f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa01625-b860-401d-8d33-91334f26c8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23aae3ef-f561-48b7-9cd2-2356ecde6199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e20cda7-ffd6-4264-89e5-92dfc46535ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09a90a9-41c2-45b0-b3df-df516a11d62f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96e3621-f4bd-4791-bc54-544562ea2dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92440f2-10c7-46fc-b591-56c053ea42b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5ca3d7-83c9-44c7-b03a-27861dbf8253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5d29e8-ac9c-4a37-98c2-0de020e0c5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf7cb57-a327-42c8-94ab-c7d8e472e15d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d3e923-a2eb-4513-bb50-89deb50e92a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0079e1-1213-4864-ad80-7308d3f495fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335fb693-6e71-40f2-a11b-8864ac2ba852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ba582f-5ffc-4caa-b5ad-b334bfcce064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4431f6-6bfe-41e9-94e3-c31df78712ec",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a69cd3-1d70-4348-9c81-7fad9756859f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199d18e9-d36b-4bb4-8987-408df92dffa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a56343-66c2-47df-bfc4-0ffc04ccb259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbf529d-2591-4863-94ae-16309ceddbe0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "902c74f3-1745-4156-9247-69290dafe713",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "704a9663-899e-425d-a59b-1421e162da3b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3944c3e7-2875-4d5e-a0d2-d6fc4bf35ed4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "09590c11-65cd-48c7-a581-a4b5b892efb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc4673f-eb81-45b5-91a7-0b7dc39ea716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "913c16a0-11ea-463b-8bce-9799a15c5439"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e58f63d3-ddb2-469a-bc4c-cc77703979de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de292fc3-5c8d-4730-a79d-c6d7c6d0437d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be7f2cff-2b05-4dd3-831c-a859e92acd6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d35626e-dcab-49a4-9890-1c75d2b6c6b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b364115-847f-4ded-8a51-38bc54579406",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1b89f22c-9b03-470d-b570-b2733e8bcc76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7b5cb10-3273-4193-89d1-70334f06dc95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8dc41a81-5896-4fdb-9ba8-c35746b2dc1a"
            }
          }
        ]
      },
      {
        "id": "b640b00c-e172-46fb-b5c8-a58fdd224b76",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8edcc10d-17d0-4342-b3be-b3cdcbf7ad03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64922da1-d9dc-435b-a30e-1c207c108030",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "109fa1a4-08cc-4319-b56c-f60165b89c05",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5114f37d-6f0a-43a3-b7bd-19c45182c69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590e1088-f089-4c35-a29a-41b1d412c5c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cee394f-101f-4cf1-9cff-8b02a1722f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8209bd2-0681-4939-8ce9-eced0c8c2537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5235b53d-e2a0-45d6-9f71-2d800650b1eb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aada14-92f3-458d-87af-e07e61b31953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a23d28-5477-4b26-8785-242158ac124f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed624c1-da8d-4780-894b-521ee2b9ad39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0232586d-9781-4f8c-9236-d7f756b9153b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb007d5-4c60-459a-8db1-ec1cdffba5c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cf6f5d-7891-4fed-8fb9-427a9eac8970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a90a45-340d-4b73-bfc4-ce0a4b30c875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966ab978-9f70-418c-80b7-10627833a49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "560ab71c-e804-4605-b50d-d59dce8432b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29846f74-c6be-40ef-ad1d-44c26c93b120",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db98d44e-3653-46cb-9c75-8efc4f904636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40453f06-c404-463b-b702-2f638020dee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3a97c1-1e7f-452b-9632-20f6d07c1bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8cbb5e-ee13-4272-aaa9-1ab761e63114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66c8b52-bce1-464f-8c60-e8bc8a08a1cb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f7c39b-9ad8-48ad-9d43-c9f3ad460dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa1c8a4-a0c7-4c1a-926c-1c229a4bc590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0313997-52e0-4001-a25d-163a2d488853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3f3e66-101a-4452-a7e2-d94ac1f000c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae2bcaf-6678-495a-91b6-1db4d505604f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c208bfb1-a452-4292-aeee-3a10f5bf626b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5ed822-5f02-4636-82cd-a1db6ada1924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c8410f-673e-470e-838e-0cc52149e807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c78d9144-c928-4ced-902c-fea905ba986c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6873092-a75d-4a8f-903d-a57b7e6fec53",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5e43d6-1036-4e78-af8c-35a2ade06196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0f55b0-1802-45bd-b44d-832246b45923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1decf729-cc80-412b-84f5-23882bd6eb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb932df-f8c9-4e47-a007-c66037843181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d5817a-c847-4627-a3fa-f437ea1f113d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d023f5-12f7-40f5-ac1f-f916de70570c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50e3148-9378-45d2-aaf4-5ef29fce5338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a0938c-c240-4b41-a159-506ab540c46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7090de-55c0-48d0-815d-e426a7ae9da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb48a476-ec13-4588-9cb9-682bac0c9906",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c55ddaf-053c-4c29-aca6-1f7f4f9c1f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd60174f-115f-4e1d-b147-a74505a2d9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b0c667-788f-4586-b427-e53b9b1a73e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd8be2c-031d-452a-81e2-60f2eb3a2d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3fba82e-9e14-4fee-9b69-f0574b3e4c9f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451ade61-8eb4-4add-ace3-52775422f30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a788c1e-ee82-474a-8543-987706f8aee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ff6a8d-c3dc-4484-b4a1-b3bd8f26e856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7f242d-c79c-48f5-aa7c-d369382bdd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d4852f-e903-4b30-9c64-e003d1d4bcf9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca8bc0f-a092-4eae-b086-6facf98d181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43be27c6-b8ea-44fe-80cb-36dc2bebc351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840fd73d-81ee-46cb-95c7-16c80a39c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "03cabb2b-37aa-474d-9f5b-2c5cf8ae45d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201ef83d-6835-4175-9e56-2881538c4fbf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7a4544-b92b-4b50-a857-e17f25854746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26a2404-d9b1-41d9-8ed3-fdc8724e244a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b69704-6d23-4724-a302-fda5e962d473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d12da5-e843-45fb-bf41-675ccb3f9aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a973f3-91df-4439-bb55-e0b882dd36c2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4450666-6cee-4b27-aaf6-b0bd52d8565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f45d18-154f-4bc2-bb96-23041b83ffdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84743327-bd0e-4077-b1eb-47ea74a8e1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe708c85-619c-4b3c-9f15-604dab8da746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df77d51f-889b-4c4c-9336-739dcf3c6dbf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d783e2-0f77-40e3-ba59-3d9e5b74480f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3906b07-a4a5-4756-95a1-4fbf9038c091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4aba7e-eb2e-4eaf-87e7-9b790f84987d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e87db8c7-060b-45c1-89eb-1c1003e72b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25a0e48-e3a5-4feb-b063-877be338e51e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d23a982-1b68-43ac-ac9c-4a254471be3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d22e3da-b7ab-4472-bb27-11b2e0d92a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee6ccc7-d5e0-41e4-95d8-7b1a6a811491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3b892f-dd8d-4ebe-ae93-6c2112ca223a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c79ed64-feeb-413b-8461-273a4bc326ea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12d752a-98a0-46d6-8ad9-02090c62a994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be407aab-4ca4-4f13-8d88-927d3e3c9447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff004df-220a-43a5-bfb8-dcb33f3b05ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd9242a-92b6-4bf0-8aba-7a4a536e6c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b96d9b-5d46-4f2b-9b5e-ddc39e9332ff",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639fa8f3-120d-40d9-9c26-41fe4939b50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57669076-6a79-41db-995c-ef6d2a4f61b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db76828-5f2b-4a36-aee9-48f36707906e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a71817-a716-4deb-a1ee-8e23654b35f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749c1d1c-b3ae-4606-af6b-c1dbb408446d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec87a299-2250-4465-919a-eed09e46b4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977e2d5b-c08c-4990-8515-ce247bed3520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac0d6b6-f827-440c-8f92-03f734a92dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "77162cfa-8b3a-4a2a-a083-58a81aa54347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232f67f6-e10e-44b4-bda7-2c569faedbb3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e838a57-2f0d-4a2a-b44a-8cec1d2dfc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb14e87-4002-4bc7-9e2e-46110051a2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62543b65-07fc-4e6e-8cee-190b71a4f77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e06aff47-5077-4405-9857-90b24077087d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7c954c-f19f-428b-bec4-395750da0c22",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3523bc4-81d6-443b-9e13-eadde723bf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7b47ea-bbd3-4c1d-a421-f30a39589a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b141f7-cfb0-42ea-bb8a-2d5d71921b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a2f932-6f0b-4169-874a-01da6d5d1d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a1502a-f9fa-4070-a6d6-7b68406eaec1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2bf5be-a949-4e7a-b8b5-fb2cbac42535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3dbf64-8744-45be-802f-9456e3e831dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2893ba-7974-4c3a-a588-e1ee48dd318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62bf746-f3e3-40df-b611-af25af0c6fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45aacbdb-3d1b-4987-af1f-2d522d97efa6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ac660d-e600-4725-94d4-b30a784f5ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aae127f-78ba-466d-b046-30bd7cf7c562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9472d91b-aa6f-473d-93f0-b53c03b07b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8d820d-8392-4f27-ba73-0db9fb59f5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0e4263-ea8f-4b64-bb3f-d130687c439b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b63deb-3eec-44e5-b231-776a0959156f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f48a45-ff3c-48fc-b133-5426fcf8b1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6a8686-cc7a-420b-a0ed-0210de63510c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6cf038-43e6-4a85-9eb5-f2be5a044bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c17f4a0-1a46-412f-aeae-bdc63df89396",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f1ea7-69aa-4df3-8cf5-b75de90ce9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca2018c-b597-43fc-93db-f8897effefbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c6c4ca-ba46-4bb0-81e6-e0f55d254d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d21eeaef-88a6-4a35-832e-9f3387a2b7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd210b7-0eb0-4b63-830f-4d137c5d2abc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc3534a-ac5c-401c-9396-4ed2cfe43f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105d1ada-2da3-401f-8d10-ca71b686a0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6749b728-8720-40ef-b516-5c7d8d26019a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3adfc9a-8c7f-427b-8507-879b5972abf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238a9f34-1c04-4782-90fd-a23330259840",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136ffb94-9319-40f7-9921-c4936e575aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9fd42e-5405-4dfb-b0d7-988ced8b1b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651b1637-6950-4c49-b5b2-b18a4fa17c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f6f560-b552-4c72-acfc-f324cd98864b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f8e64e-c172-4f13-9241-a4b9d1d4d38e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daac82e1-2544-43f9-87c7-2937bafb4a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbdcebb-6f02-4b9c-9fe8-90fdc2141670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17b6ffd-7058-49e2-a7ab-467cdff1d395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe98d5d-1f7f-489f-899c-5d7733f4896c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ab1923-f438-46b2-a8cd-b4cd6953bbb5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a4fda5-109a-457e-9a03-208e14b4e3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452799bb-f34e-4c87-ad24-e84b39fc8d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f17b70c-134d-44ba-9bee-fd66d50eb73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "359b5ca1-e9d1-473c-84dd-3facf1464102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fb000e-78f7-4241-8019-1714e18cda9d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68afd5e5-62bd-45f1-b8e3-32a66eb06c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22585bd9-83bb-43d9-9b22-a6736221019e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0d905f-fb1d-4027-a23c-3c6f6e167390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6434278f-b355-4f97-ada7-7e768476227e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93090c8a-f545-4679-bc28-cccd1253fa01",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc4636e-0193-41e2-9c02-347778cf72be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c13d95-8015-4264-999f-e60c94bbdc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11518732-64b9-4017-bed9-e8db8a96df45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78d893dc-31e0-4109-a2e9-a9e0866c5f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86991a46-4580-4403-b6ab-0423799a884d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c170cd86-108f-4d25-8f75-7fae536728de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3670d2-ac59-4a38-a0f0-2c1e7d84d83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c015d092-47c8-4238-8a31-848af85a2f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f288ce26-f064-4096-bae4-ded3917bae16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1a1f7a-9748-4c5f-81ce-b4ab2897254b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2a8943-277b-4cd7-a8b3-3f23dcac0a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00309474-4ed6-4532-83f0-944d70208dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e53f31-12dc-46dc-92bb-ba58b832b42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf294b4-b28f-46df-aa26-473eedf397a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06928076-a582-497c-9959-59a1c8621738",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d55e8a-305f-4f94-ae49-d94ca3b8fc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83fa93e-efa2-4bda-9896-4ddb897ca6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6c2045-1102-47b7-8fa0-63fbfec515de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb81302-b3d5-49a7-a58f-8de2b46157ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150d6339-3e3a-404a-bbc3-fcfd49c94fcf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cff333d-a014-4c29-8450-b091a43cb761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d810c303-49f9-4ee0-a5a0-a4945b5ab36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6916eae0-98c4-42c8-8d9e-c09621325ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66f2397b-ebb1-4c36-8e7c-62dcb7e2f7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cabcf9-7761-4abf-861d-91158d5bccb9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67620a12-391f-4805-ba36-c8fea29b7d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa3d326-4b44-45bc-b271-6562a9809eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84b35fe-7d52-4c2b-8d8f-6cff0c0a26d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc8cda3-57b6-4162-ba2d-e1bad0d4fb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e991c1f5-0eb2-446b-a475-c0756c827075",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f2e8f1-d614-41cf-98ea-5215b31d3e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b5119b-c5fe-4ac1-aad6-6383101fc4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c21b27-56bb-4b57-b9f9-21a2d2d15e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d181d3f7-8768-4fba-bcc8-28773f6e01eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e954c77-7c7d-4858-bbde-9d8b1b34e4da",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21699627-4adc-415d-a762-7494d1680de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772005e8-1816-482b-ac9f-32966708b8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac50864-028a-4cc5-b890-7f9736096fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43bec5d8-5beb-4bdf-8df6-0b71eceb9e90"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ace9c542-aa54-479b-bfd5-0318a8260f1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58c1ef0e-6c46-48c8-bed1-721a166f8d08",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1517ac-6c25-4024-afc3-78705ddd1cd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ce03eeaf-b070-41e1-95b4-4eeeac32d2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa7eed9-51ac-4acd-8234-23a31724a644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef0eedfc-e3e6-44ef-b49d-2ddf06047802"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b874112-afb6-47e5-97ee-57f426e776b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d419696f-41fc-4b93-a749-6f06828d5354"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1617c640-b05c-4574-becd-8407527160fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fff89d57-8e73-4ab0-957d-8d48521a1517"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed8157a2-6595-4333-aa92-3a9184abdc60",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f857e56a-748f-4198-b37c-87cb814a3606"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc259bd9-7301-4bb1-a629-39b3a24e65b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a52b8dac-ac92-489e-8831-b7b9885d42c9"
            }
          }
        ]
      },
      {
        "id": "2b611e5b-dea5-446f-8382-658226652a68",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9cccdb27-9aca-4489-bf13-b487d052fff0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8973c8d-a870-4664-8086-138e4af406ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3464d58-b30d-4853-87ca-cc14d0c27d99",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c73eee-85c7-49e0-9708-85d311aa4cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870d0d01-f8f5-47a3-8b21-776dcff82221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff559f6b-f157-4832-a476-4a72fa385122",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abac93a5-a693-4884-8b18-b3bac0d8ad7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e7a87c-a7a6-450f-866b-077b02bcc75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41c155b-847c-4e6b-9647-ca07c8822415",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9466197d-ad09-4481-bfe8-9712cdf9f170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f5f4c7-db2d-4c64-8741-80c410a380b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88e458b-67a3-491e-9b7c-862da12453a4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8fb33d-024b-494b-a9b1-932712008a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe5daca-f7d1-4c24-9400-c14174410a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6e0db2-0de6-4f44-9af1-371c94d67327",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ede61a5-f2f2-483d-8ca5-d320593ca9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bb0765-4c06-4781-965a-5528238ab096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7136dd52-7c4f-4c9b-95bd-ab6d565ced1b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db936f72-2f2b-4217-bcae-6bd39e619726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbe3aa5-d868-4378-a45f-6965a670023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d114ead1-e3fb-4627-829d-2d1975971385",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2bda4d-3b8b-4e9e-960b-49a9a3e24fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e6bbf2-6b39-4261-9990-935928fe2241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da39c8e9-3375-4aa5-aad8-e12107aa104c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a610c68-bb0e-46fa-94c1-07bff98a8e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224fcf3c-b4ee-4af4-ade1-35da714a6281",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c3030f-8dff-46b4-8d62-31fce9b7ada0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571f057d-1b74-4f3b-9219-3e45ed5a21b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699c50f2-439b-455f-b7fb-1beaebffae29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b103b0-e17f-4957-a0c5-033d6503ee7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aea6bc8-d5f3-4065-8728-898b1a2fda5a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc3b015-fb23-41e6-a16b-a99df5411788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2082b4fb-4675-47f8-87e3-8d6c9904032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3876309-8327-4efc-a413-88d3c81bcd2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b61b5-3aee-40ef-a10d-623d9fd49ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0f4cff-4df6-4c5d-8f16-441a6920af3e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adece4a-4da5-4a4f-bf71-c203ab52ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0054fc-42cb-44ac-b550-dfe05c76fdd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e7764-6d9c-4648-a1a9-ff6398aca79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c46b9b9-2c79-4c33-8b8f-cc73c8913db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b381ce65-d015-475e-b6f4-bf91145e55e9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8732551b-abd0-4a20-84e8-10e21fc8a912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c6d06e-cc6b-4b28-b868-2499cbc7eae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5a9e72-5909-4afd-8351-e45b135fde5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e40d61a-7703-4b0c-9e07-4cff22352c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec018fab-7cd9-453f-a217-77a06bd54b7c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c846e88-c92c-4144-9b99-845d247ade8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af94ce27-b12b-40b8-a077-74d1ba74bc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411d6d69-f9a8-4734-826d-48c4706e318d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f972686-dc11-43d6-9413-f72d9a1e06e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f82189-6d1e-4dac-af7c-a1e8217bf48c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d33a3d-8943-4c0a-904d-0d4012630714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e30942a6-d98d-45b7-bd22-6f2abf4724c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac07d51-ddf5-42ec-af60-66e70ef0c09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a74a046e-f57d-49f9-91c3-2bc107477fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b619e85-01bb-44f7-bf2e-c7c439f8cc4c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45401ea9-f48b-4ff3-9fc3-2b5a1aebe694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878c51cc-386d-40c2-90ae-2dbceaffd5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe47a233-193a-49a8-ba2e-1bc39d9f0d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810dbe0e-5658-40f9-8b63-04919b0a0bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8339047c-700b-4207-837f-ce855cb8b179",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d502fa-0b72-4c67-baf9-544eec5c918c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d4039f2-0614-4d2a-8705-4b3e2293d280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d9933f-d215-4dc4-a39c-d77e953585d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c15918-402b-4950-b486-7ada9aaf4019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbd323f-2ebc-4c1f-8bae-8a4923880395",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ca09b0-973c-46e5-82ff-cabfdd87efe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8bc0dbf-52ed-42cd-b437-10670c281c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3c2b6f-5db7-42d8-8bff-f8e338f57fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54ebbd2-cb3e-4c02-936d-e6b8d8972b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958f226-b26b-4aea-b7af-368dbb56ff2e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063dfc5f-c6f0-4e70-81d1-5040df448591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9d929c-b4c8-4995-972a-2d8825477feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939e9833-0696-41ea-b6ba-27ef200dda57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f0197f-ab64-45c0-8a9e-d76000e2b463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbfdc05-47bf-4020-be36-898eed716d0f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c0ca3a-5afe-404b-a815-525d54b8da6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38ce2d6-c226-4b9e-a4d0-1732624c97a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9192e6f-49fa-4297-9d1e-35bc654c3651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfe0008-2466-4c94-b7a6-a0f4c05f39ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09edf2c-0848-46b7-a252-ce46975b8634",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a436d811-c665-4d14-8e0c-2647ec0a035b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1167fa-ad74-42d3-addc-e8ab7c7ee508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0246e404-f85f-4cb0-b1ed-1e15bd645ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c072d5-3708-4d47-85ba-1558bf157d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031685f4-7f25-4fcc-81e5-d9cb896958af",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987814a1-0854-496e-ae34-29a271aba27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f480d2e-e8b8-4290-a594-7539326d991a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f11451-dacd-4122-9499-9ded7fb4fa6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5624e0d0-a993-4447-a416-52a6b14a24c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce4f2b1-20ec-476e-bd38-e2e851dd07ee",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794b69e3-3a08-45e1-9835-4d2fd5570487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3912b0e-dcfa-453a-ad81-bb15cb79357e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca40bda5-b4b0-4b67-9b62-b03a9024540c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e106a18-dd01-48bd-bce0-c0ac399fd33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593761c9-cba9-4f2f-8775-9245faada3ed",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a29ab04-8e64-4edd-bf57-982497c151a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32801146-a1c9-451e-a6f8-c320eadadbcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cdb298-23ca-4189-8915-f42565c115e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da99be1-87ef-4c87-8773-c7d5dd965c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24e19ca-372c-41e9-a478-09226d9f0a45",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fca32df-0f2b-47cf-9816-756a1b00c5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f354f544-08de-47e4-a860-dc0bd53d308f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaaf037-e96a-42f2-9003-6ebaa56c168d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e00da66-6e7c-4a5d-a8d2-e0f4f836e888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf44d2a9-da31-471d-bb2b-dfea6d4518ef",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff16113-e49d-44b4-8445-caf63025c32e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5babf5a8-79da-481f-bf9b-40b77d3a8266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a61743-b240-4dc1-a893-6022eb7f5260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c92a35b-6166-4512-9ecd-f65a9835e6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdd2db3-e627-49ef-af34-8967c4c55644",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2016c619-dce6-4a3b-a38b-8fab2b9d9685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8ae5f66-6da3-4b16-8b92-3f4dd6bddaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06474414-74db-42b2-99d4-23231b8ddb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80513dd8-7ecf-4a0b-ac06-d897dbbcf832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087b76f2-c70a-4309-a05c-8a877d301c10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1012cc-fa1e-4a10-bbe4-39acdf8be3f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4372cc55-500d-4c3e-b70c-34724aa08c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b14083-0df4-48b0-9a98-b23151970aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89975f3-f7b2-484b-8285-94961794a11b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d122da-bf1b-4de2-834e-a613971353ff",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba29cae-b726-43b6-afa2-5a20d98453fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003904a0-b70a-4bb4-9a32-f17b43c9d875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797d3f47-b547-44b2-80f7-1252922f9802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f75d206-ac28-4215-85ef-cb0686f57578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d6abe4-f1fa-46ee-8ea0-d6586fe8ea2d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2786c72-bad4-467e-a579-2790523f1efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051540f1-c336-4a61-924a-652b37ecbcf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3a05d1-4357-4afd-ac79-24e08fa4e7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612b68b9-7fac-46da-8ed3-3767bcc407a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cc539d-92f7-4bd8-aa2e-098945a5dd8d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ead7a0-b19d-4cd8-ae6e-9d35f6f4169e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c392bb5-71ea-4b54-96a5-34c5ec959b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f2b6d0-4535-4696-9054-42264047196a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba9e48d-b991-4ed3-9234-6214d7e5f862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9f1c33-9d30-4d36-8d1c-d3361c65e09a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f29b46a-43b4-49db-8df4-87e299413c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c982002-182f-450f-bf70-27aa986c5d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505ec272-7582-4920-b6c7-3c3c13b57879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f74170-ebf5-4bfe-9d32-c3756f545334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad0e02-d75d-4ce4-9e8a-d60b9f39682e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afac17c2-6dc8-459a-8e3d-e970049cc931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2132d10-9d3e-4eb3-9853-d9ed8726162d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee8073d-4b12-4a79-b74f-9cdf426d0261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4abc693-61bd-4617-9b78-7b99fe89ade0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd97ab46-5e78-417b-b96b-53762ffa5e89",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9934fe-3885-40af-8f2f-f785850e5f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa5c13db-ee9d-4162-bc46-944901979590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43164745-48a2-4952-befc-61219572e099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38f8a77-056a-4bf9-8021-9227bb22df6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7e1535-b99c-4d13-bfa7-0db663ed299c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437256a4-dc14-444d-851b-c19e0dedd889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9bd683-d94e-4fa7-8727-f3effa3c8b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3490d4af-c714-4154-aa7f-30b7f9e99326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81be2241-06b4-458a-bb78-6ab3a2cf3e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab4212a-ecfb-46f2-8bfc-94b5410c4c70",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005d8a52-e711-4cad-bf68-48512aa866f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e0a86e-1340-4010-8299-cfa070dd4dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182b7a83-aca9-4333-bfb2-5dfb97c73ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2789c7-c5ab-4c50-b6d5-dff3a601dd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc2f287-b537-47e2-a033-9f5db30dff5e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ff85d1-f94b-4fc8-8b46-fdf80e353a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5213a9-f84a-4954-9820-937801ad1c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c91fa2-2889-4163-8cd1-96a833cccd59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53ae821-b55e-45b1-9e28-d5a66174dada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c8d382-1a9e-4915-b797-a0c676a09193",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbb5ff7-f77d-4cf0-beae-460d85a0f721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0351d875-fafa-4350-b977-f72c6fcd80fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39b9a4b-f375-4c2e-beaa-7796e05ecaec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a5b026-7d0d-4fb4-b74e-768c2210f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81e9216-ed90-4e4e-8164-1f5b8f8a245e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f931a6-f451-4c64-be5c-b132d615eb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0adda5c-6457-49b0-896e-ee8b9f941358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc472f5b-a0b8-4252-9459-177f08ec5f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80916fba-840e-477e-9b77-c44d47491f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa28f03f-6bb3-46db-a044-03d499b300eb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ba60f4-f4dc-4478-9e27-e30bfd1fdbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8d99a3-92fa-4e22-a4b9-5a289aa2c8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3752580-7049-4db3-ae99-7ec351ca1e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f51f59-c8e9-4740-be3a-38fbe261a3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5f042-e4f4-4b1b-9701-5964c538848d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f16339-9620-4c8d-b6ae-0be6433b4bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eac8352-e7b5-443b-9180-842d16da2156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23688b3d-587c-4e71-a9d6-a78131825be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3c021d-1c48-40a9-b73e-8ed98f509608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8812cbc-8458-4976-9ae0-569f0a85553d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d4cff3-7511-4690-af35-ea57b0890607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb33fa9b-6106-4312-afc8-9f19dc1f2c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56b2659-e9e5-4efe-b523-c7fb14ed7ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037356e1-6809-41d3-a175-7c0f19b6240a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39c42b2-39ed-4dc1-a692-c39049a0cbd8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c1b947-16d9-4bf9-ab7d-a91e60283886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf74c9c-e682-46d0-ae86-df04c6d96dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddeee83-19a3-47f5-84e4-9bed44909a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d941b2-a298-43ae-83b6-eee99dc63cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0a92a7-0362-40d0-81d0-d4e06b75a294",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967e42e0-98ea-4287-a6a1-e6362c571701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5be09fb-4be5-452b-91dd-f334be083382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6d4d56-efea-4eea-947c-28a8d4aaa291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0d4d65-1f59-4fc1-8c65-e09c04494ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce6f0e9-4f1a-4a61-bef1-b448477b95b7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f51bdb-478f-4a5c-8509-1d2dabaf346b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa82d35-3637-4773-bdf7-b7147ec1f918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435f0856-01d8-4d4a-8fc3-fbdeda25192b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744a5440-87c4-4c50-aaaf-551cde4dac73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa73a8c-52bf-45b0-b0ce-8820eda5e7ca",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb8a645-4c01-4af4-87fc-ff2784e45ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b8b746-db0f-4e65-9c05-025821527eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d314ce0d-cedf-4771-a0a6-a121d80340c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3025aa6e-4ad5-450d-bb42-90ed099526c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87a6998-8244-4ed9-bc92-e788308c3ece",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5543d2d7-4591-49df-a3db-d608f52bf902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "062a2f95-8ec0-44c5-9849-ddb84bac59c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7486f7b2-0c8a-44ca-ad83-c561815acbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a07f579-45b1-4199-8350-c4d848a66866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c4e6dd-fba1-4fd8-9321-d733ca018050",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd411e3-88ed-44d0-b5a8-1dbee03a098c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f299720a-67a4-46db-9c39-75c20d84f6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd1a197-abad-4ef8-a899-69a566eec77f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea8e6ae-cd24-4453-a848-b60e6928854b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8b55e3-5759-4104-92b9-fc09d7b4df41",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1e12a1-680a-47d8-8983-1d516e0041bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe596cb-8b90-4489-9aed-f6518eae4093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2907e808-4309-4afe-ae98-d8b0fe431138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c1a184-992b-41d9-bb45-8ab671cf40e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e43a73-df41-47ea-8341-3492a97b48d6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c458097f-499c-4814-bc49-fe4e2ef07b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e633687-7b2e-411e-bbbc-623efab04b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7014653b-1154-4311-aae5-9c06d8320011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a22b6c-e09d-44e6-8987-a1899efca9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbd766b-6fd4-45fb-ad4c-fd38778835de",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2416d351-84ee-489c-bbce-1f06f812453a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e296a21-68bb-45b4-9199-42792c4a360d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ed98e5-a19e-4eb6-b789-d6f015b4c637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ebbf9c-1d06-4208-9302-d83e139ff51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fac9e0-1394-4123-b50b-458800d3bc8b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d05457-e1e0-47af-8aa9-e4d5cc3d0fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1564955b-c0b3-4cc2-bc0b-da86dcfd2cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "299717d3-a310-4411-ab36-2269808d3ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d417f3-e417-47a4-90f8-9bbb84d3bab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e6d86e-2b6c-48c5-8eeb-00f707e6025a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e91e9b3-d2a5-4662-9d63-9ab66f72ead6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d725fc3-0911-4dab-a3ee-e6d402a6b9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e21c611-c15d-42b1-98ac-d09e71f0b29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a56975a-d4bc-4ce5-923a-d4f9a700d25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a74edb7-16d1-48af-a6b8-63ad2283b331",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d18942e-cb55-4818-8d50-1365db9ed28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d1b3ca-6a83-4693-bc0d-f3a5e76278a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42780445-320a-4b78-b4e7-7350c7e24ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f995b96d-7339-4c3f-a591-a82639bab88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a57e00-4fae-4115-9235-90f05607715c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171aa71b-1a9f-48cc-b0e1-3aacc676a2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f0857a-3f13-4b8d-b3fe-61892e7be92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5937a3-d339-4543-bfdd-5143ab4dfcce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ed7619-0d3e-452c-a9e0-2993a109cd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6cafc6-f3be-48ac-b69b-5fc8ba25279f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdebd8ae-bd82-4e31-a1c8-1a0a78cd679b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce21a8c-d994-48d4-9974-1f4c71f3e258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b1c397-9d2b-46aa-ae00-f166ba326d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e837b93c-0be0-46b3-94a6-ea8c67bc75d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9d1ff6-250f-494c-babf-3d9c8cfea00d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084996cc-2b39-49e9-b603-9a015ad4f53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368074a3-4ed8-48fb-bc38-9441752f1504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965757f5-2f85-4a0f-b5dd-ffcecb053eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04bd49a-4926-4bba-863a-db3a00ca8879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c217b432-eca4-438a-b9f5-91ce5cddd654",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0608e6-cc36-4f89-9c31-60485d89bdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c75280-8169-4567-884c-1e9862ccd0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c1b3c9-d0bd-4e9d-9e01-bc3c9be412a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e45e599-2c1b-4d3e-a965-b09a5de4ae23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee068ba-7f00-49af-a968-b568643676f4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8721064-acc0-4bf8-b120-847e26502207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08d7564-d3cb-49a1-90c2-279dd1f65c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa16d20-d51c-4b22-8a62-1111805617bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b3a03e-b3b5-4b5d-9163-c41f682e44af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea16c42-fc32-47da-9580-2310796d6208",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa70ca0-79cf-4203-98d4-6d25c6c434de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491b130a-b875-4030-a3cf-5b10aff7bcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ea4f72-5e15-41d3-9c77-8a16e30761b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5432617-4b7c-4e9e-9714-9ef2e3684ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63408a1a-aba8-431d-8b00-c0db8283c31b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56afa31b-5819-47f5-add8-40ae54e492fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ce0bdb-e942-4a48-9a81-ab9ee22fe9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14051041-5d66-4479-b479-61fac2e5b0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a84595-9187-44cd-a33c-79391c365c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90500e5-2a84-48cc-a3a7-d20777e5d5f3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306b8bdb-a64a-4fa6-92c0-ae476f155559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c057f0c-72ce-45be-b518-3c72a34e894b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2ab4c6-0cb0-44f2-afc7-62577f181c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413c724e-14ef-412c-967d-8dbbf92f44e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fa6c98-0b81-4c54-8970-5fbfd4389ec8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30671741-b11c-4ba8-b651-de541aaae67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc34cca-db4f-469b-a119-2a83cfc04351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e72137-1abe-47b4-b68b-3e58fae30da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea30c8e-5890-408c-b3ae-dbb8d48c3698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2f3df3-c24f-4806-ac20-334c4712f90e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8a6a3b-4698-4d77-ae55-b88a26ea29c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb12f1e5-b451-4c2f-b06e-03435fd902de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf966b2-c4ce-42b4-aa88-1a67294225cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f9efce-e97c-4287-82d1-726b5ac0fe80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ab40ee-abd4-4446-94fe-e933b51d0973",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc7ec59-5faf-4ff9-8068-53b1a9ebb923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bd7d03-e665-46c1-b878-f9e48e5f784a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0132bf-b04a-4da3-b633-b253e2eb67a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7217caa-ad26-471c-9d3a-78f330280750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68076707-115e-4676-baf1-7413e98aabb6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518625eb-a97d-4802-b9a5-de03929fe895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53996bd1-d65d-4205-874c-eea965a624c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a441d69-1bf0-44ec-a347-c2e8a2c0cc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "addc291c-309e-45f4-abcb-2b80fcd6e93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1f4cc9-9009-4e5a-8db5-a8974979bf79",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d46fb93-efd1-4e0d-921d-a3b232370936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7dde83f-da4e-425e-950e-1dee1c9e428a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed626e7d-e70e-46da-aa02-03c1bd80af9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a90db5-e337-41a3-a7d5-fa61716aa15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c1dbbd-cfef-4877-9feb-7f5adf330b78",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0205efd9-4ca9-4eb8-af17-500da7485698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a128c5ba-439e-44c9-a694-f433ca37da3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d64b836-d839-40d6-85fe-ecbee10c76a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b213ad6-a9e2-42ed-9235-62516dafc3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17963fe5-9000-4467-831d-cb9d82876189",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d555a7e6-69ba-4667-be4e-d37ea0675557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8292d3-b7f5-4880-93d7-9a1a40632eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335de3dc-964e-4887-8468-9e1e391bfb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681b93da-673b-4144-afa3-859f2b6ebb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5672f04-332d-438d-97a0-7551675c6488",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355bb2e4-6778-424b-a50c-cd57a42bbfd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2f3f4de-5c1d-4902-b864-16fffa3bf960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3105de37-1968-48df-ab99-864e5afe179d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3b3a0f-bd7e-44ff-9a2a-b00527c993b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46445682-afab-4c78-a058-87629dfe086d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261cd973-e157-491b-9793-4acef0c0709c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae26834-efce-4855-90cb-26f0c0db68c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad37df7-57fe-4d29-934a-640012088f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57121522-dca0-4c71-9a01-10a4e53b6124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d011259a-3b1f-4df7-8e7e-0d05b56f6548",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2fd883-472b-4c31-9de8-b0b49388ab45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce87ec2-dd73-4b99-9bce-0d93906f1b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f86c570-72ee-4405-8234-187318c394fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4767338-c8e0-4846-ac4a-b5bec223e31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e3694e-0f77-428f-823b-96eb159e7487",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d682dd3-b009-438c-8567-3c2878cac9ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80426f32-fb76-4c16-90a1-03c1fe6fb119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61d7769-b46a-44b5-bf01-d28238e91495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348520c4-328a-47e4-9968-12b8e2286140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a88fffb-8e95-4c53-b5bf-8010b8ccbfdd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d8c291-366f-49e0-ad4a-a46dbebc446f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8416ffce-3349-4632-9ae4-e197d750377b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa27cda-54b2-463f-b656-8df7011a5b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc35bccc-16e9-4e5c-b3a7-3440a93ece76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473dc65e-731e-40ed-9c7c-48c8d5815524",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d47065-d51d-4392-b01e-0cb1a1772776",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75701ca9-e379-45de-97c5-8fb4d2086011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47ab656-2ae3-4758-af41-b13e438e8d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b56a77f-1271-4567-9e5b-17784e1185a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb829db2-b669-453a-9cf8-77c105cbd5f3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66375fc-31dd-4aea-9514-c2c388ac83ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f242194b-eafb-4705-9aef-4f3dc32577f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94253130-ecd0-4fd6-9564-7b86cd015062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5995d768-b4be-4ff1-a7f3-afc32cbda2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783a9c45-0d16-492d-97a9-04cb23446865",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cedcdb-ad62-4dbe-bbfe-33312441a150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e7dde6-70f5-4c7e-b15a-bf0eafd4ac83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4e2c1-5766-43ad-bdd5-87461e367097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ed5595-46a4-43b8-81a8-8b34cd715eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f7645a-c62b-4be1-a33b-91706479261c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe74ead3-3aca-49a2-90b3-c6eccc8dc2df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a501118-487a-44c4-a00f-f8eb524c2067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08ae7e5-d7e6-455d-a68f-2e207eabba48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d485c2-d799-4c8c-b7a3-b22ea77a94d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b2b599-2512-464c-9d13-498e3edd6b42",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261e3253-ec93-438f-a71f-b5a3a15c6f6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a548c9-1f96-4c83-9459-8f1d6b03b231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5c2728-75bd-47af-bce0-9ccddaf40995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b905158-a856-4198-b7a9-bfeedf94086b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f942f5-d230-4264-aed8-91565e812f5d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e034cd6-02e7-4ace-873e-af4298f2a7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae7a9c99-9e83-41b5-a8ae-b3badc91ae1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9da71a1-29f8-48c3-88e1-9868bbbae962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1a1302-a371-4642-985b-c8675eed565c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ef6af9-4ba7-490e-b6d7-59b2c709d72e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947eeb9d-535c-43dc-8f7d-42605bb362c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ae4169-56b7-4d0b-8427-c0e3853cd0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a947204-2355-4c49-b36a-f4ff3224ba94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a1f51d-3b05-4e4b-a339-337d15ec3ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af424e9-b1cb-4094-8895-f06682500402",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d849b3f6-0c97-4330-848c-5532bc9ce8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415cb3ee-4639-4829-b07c-45bfb701cf68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0135160d-ed06-40b3-8697-075315538a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb1633d-2273-492d-b5ef-032326a8b674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a46cb3-975e-4384-b6ed-836098a4aad1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6f8008-727c-4454-9b00-3b3f30cfdbd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc9a575-ec60-44cf-b273-e4112362e6fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284a838d-a3c4-43d3-b17b-e9bd35432142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd606c7-13e3-49e4-a990-7d5f3e006c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2d6b63-d69d-4a76-b20c-bbb6a252dbc9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766fee0e-a127-4b6d-9a4c-2769181aca6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8535b1d8-5f1f-47c0-a7de-c4f98ac77fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345db233-d903-4418-b735-ab76d7791067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eedc52a-fd06-49b8-b426-1992e03bf0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eacf8e-98be-43f1-8d62-10a0232b4f64",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252a13c9-31e2-4ec9-be73-936983119a49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e767336-b023-4986-b099-e9449234daa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca134e35-2892-47dc-9e62-ac1823ddf667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfac221-429a-42a1-93d0-4dc7ce9ad6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7306bbac-a2b2-40b9-a4df-6c926b4868c2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582c13a9-f2f3-4456-82b6-b679fc14c9dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "569650ec-ea19-4a88-8d50-78feddb613e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107b8396-d20e-46c9-8355-5372e03aaedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dba2e82-2cbe-4329-a5d1-80d1856d7398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c003d1a-d432-40b5-a68d-cb7653fb63ff",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355de62f-1009-48dd-82ed-c50a0a11aefe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e8a4083-f10e-4891-a0cc-591aa4847edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af39ff2-7882-45d5-aabc-f14105f4fe0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e911d72-ee78-4b25-af06-078c298c8195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7d478a-32f0-4be1-b845-1944feeed993",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044cf39b-ff0f-4711-aebf-e41500739d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593e567a-7786-4d19-840b-ad1de45d35e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f482afcd-2c29-4024-b731-d88417ea2d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9e8ccd-b025-4a70-8676-db8d70070bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dd5a8d-658e-4ab4-a3c1-13b62b0ca4cf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab917f5-51d7-4ab1-bb8e-0d083cb0b0d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a7b5a35-1632-4299-a837-a042767d533c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22c4d57-baaa-4378-9795-8dd2333cca12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786c904a-947f-43d4-9904-aa0eaf497050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d20bd8c-50fc-424a-ae15-2ac5d948c79e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b457d12-e38e-48a7-b465-b59872a21744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d56709b8-c373-4689-b856-2575fef69298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4e8ac9-6b2c-42ae-93b1-8b38c99578fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b968f0-fd39-4f7b-9095-7d28d6111c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72a0b4d-56ac-4eb7-8918-bda514359c07",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0d91ba-84cd-4bbd-b3a3-e67852bd32f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed53282a-7ff3-4adf-afc7-072aab60d8b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60b4c3c-7d89-4f80-a43f-2c373686d2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8af857-b508-4839-a1dc-988c2c6981e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39760eb-c664-4dd0-9966-89f023c1d988",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddef24b9-dbfd-4b36-bbc4-4c1ba4b93228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743c99a6-e0ed-44d0-b20c-5e82f8d56577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c32431a-07e3-4c4a-b549-43492d5d2a1f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b32561-bb8a-41c6-9495-ece894ca730a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5605734a-b75b-4edf-89a2-512d67d7476d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f313658-2883-4f68-813a-1ec325e8a2dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d578f4d3-0b45-4424-af59-9bb12107cfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1464c5b-1849-4b5a-bf2b-dc1aeb012345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dd9349-2436-4476-b903-3ebbaa3e9eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985f87cc-6139-4305-b5ab-846e51087940",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a74404-0b3c-468e-b56e-9bab2527c9af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f892cc9-5bf5-4ee1-8f51-42be5971f60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1927c4-6e0d-420a-b2e6-52eb8c4ade0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec006bf-611e-41d2-9103-b2950adcb796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15738896-5551-41dc-8a92-c2fff8b3cbd7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e097059-c823-4a82-8d66-01e3267c4736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3715f633-e188-49c1-aca4-9fd1eebc135d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff37caa6-0ca5-45f9-805e-221dbfe3006d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447d47e0-2701-47cf-a107-d5a5eb197eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270f9e4f-7029-476b-81cf-13cec1cad9a9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa6a858-0158-4390-a788-85ee15f99d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e2d701-db9e-4cad-8138-0fb1f0345724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0622bc-217f-42f8-ab4f-7b878536c9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a08111-a7cc-4451-a56b-011517bf7701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3410a47-8ddd-4006-afc7-bafa1b97c5ef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d8454d-c598-44ed-9b2e-917a17f660a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f12b480-2057-44f2-9b9c-23d2ddf1b99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26df6a78-40c0-47b6-8a05-2a0a31b726de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f2a184-b079-4bdc-9683-fab78672d726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf0ecae-b41c-4e22-95d2-b04bd8dfd5dd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9f5f10-bbce-4ca9-8362-42ffe24c25b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3906246e-0f00-4b91-b6c8-ef34b05dc390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fc7095-6a10-48b4-91a8-86038d3746c3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89830a4-2f2d-4ae6-8261-25e840b362db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea1c1c6-737d-423a-912b-f585727a887f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa3e4de-8466-4933-a906-555f48b6b2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8ac415-aee0-4e42-afb7-abfdd56a1791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f736ac-f558-4925-ad17-d674285516a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d362a3-2508-4dd9-b631-805d68e92607"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a15be5bd-3429-4d38-8ad6-9e90a9595939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44208de6-cf75-4194-9e68-523a6d4383f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "866a5313-c40f-418d-84b6-bc360710dfe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0e37af4-34ed-4acf-b55d-6033beab03ff"
                    }
                  }
                ]
              },
              {
                "id": "b2b19de8-1480-4a4d-bcb9-e3de3826c9fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2f9cc4d-7416-4691-82f1-e50c12d79f13",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edaeacd-3e0e-4d42-9121-2a6bf2c6e140",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aba70133-8ec7-4ad7-a5a8-30732257c019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120cb5d6-4491-403d-813d-73c9bc8f31e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a590cde6-f95a-4ec4-b3f3-f416657d01ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbdfc049-78fc-4209-b914-0eb4e1152b00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1db411f5-1523-4c5f-a5e9-3f1d8b3cad0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a859345-a345-4db5-ac2f-8608dd02b39a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9d6e4b6-e6e2-4af7-a022-d9f21350b560"
                    }
                  }
                ]
              },
              {
                "id": "64a73bd0-beb3-4680-904a-70160c95d5c5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aba3b3b8-4cff-487f-a1ce-8fdceaf040af",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e87580-c10d-44af-8789-80eaae888e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "212d0ae3-7a06-457d-be97-1cd35455ef08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b37219-7420-4adc-8963-a74492547316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e792015-d6a6-41a1-9490-6cda4f3ef877"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1fcf46f2-950a-4baa-b019-a765cf20cec9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d33cf4b0-de53-4263-bac2-ed2ee15a7cb5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d974ae1-c763-4a34-9c16-bd234b74387e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c92630c3-7b2e-499d-b562-0f220766134a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76395db5-2876-45c3-a852-dc190bc0789f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "304c9158-298b-481d-8bf4-4f74c3b90653"
                    }
                  }
                ]
              },
              {
                "id": "4b8b0d30-48a6-44b2-ad4d-557f8b1cf022",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45bd5967-aa87-4254-b18c-d1ea9189c266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "55d84bac-6106-431a-8c37-25b366245635"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e9a8370-ece5-49a0-ac73-e06ab83ac940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71e9f461-1358-46e3-bbba-89db3ac5c7be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cae5c5e-10a4-4129-8eb5-3a96c5449c55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "12830d55-7758-444c-92d2-90d12db74ceb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ba9257f-7904-4f99-8257-c6f3c4202c38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ace4d9ed-4f4d-4239-9581-15ff577f6a82"
            }
          }
        ]
      },
      {
        "id": "2b2e79a3-d40d-4118-b093-47cc20995dd7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fea16455-7672-40ab-89d6-8956e7eeb023",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94fb20be-159f-4a91-9ddf-11f8ba8e3288",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54b43884-6f33-44ab-a140-bab56c3eb9aa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28501ebb-5d8c-4736-8576-00c861ae4ff1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "990bd692-2414-4f1b-b6d2-dff584154ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aeb2a0f-d642-45bf-8f73-1c80e953ef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6b7172d-6d0e-47e6-8f7b-cdbe3b6be975"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfebb6b2-022c-4fad-87da-2d4775de71be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcde9173-c7f5-4c70-9a0e-e5dfc6397fb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1610c69-cdbc-40be-86aa-2d24b20f92e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72337ffc-f8ef-44a4-b71a-42d23d2e1c73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9600ccfb-19a6-45f9-8c52-c9f6ddc8a9bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0099e084-10e4-4b5a-a307-6ff31289dd3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5673e880-3d4d-4bb0-8215-ffda8f8cd713",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7c901ab-dd81-4459-aa33-21e7e911a86c"
            }
          }
        ]
      },
      {
        "id": "9335a710-3fa2-4c80-9d51-1b1c3ece98ac",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8bd4eb25-c297-4e70-8395-34c2e37d5032",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17ee4ca1-73be-4bc3-bcb5-f2540f0b739e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ffb1b38f-d5c9-4e6b-9d30-97a52ff978b9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdd4f1e-878f-429f-9a08-00d2527efc14",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bc93e53-b69e-4d6b-bd6c-659f7d748fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6726a5b-80c4-4310-a246-5b10530f05d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab0a3c8f-2ac3-4848-841f-1c81b8363ebc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9520cb34-d5b5-41b3-a262-4a502b137720",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c1653cd-6ba5-40cd-9bd5-9583d6b36fc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f92db68-324c-4e1f-ad63-fd70e87db024",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2e26254-4cfb-47e4-9dae-d7e5d2676432"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9924866-19bf-406a-9404-8eb385fe0b5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "04f31694-d150-4433-b663-9eec3698cedf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76a69b39-31e7-40cf-b779-64998966a9f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "832063ca-6509-4295-98d4-f94e4658ac00"
            }
          }
        ]
      },
      {
        "id": "d526edf3-57c0-41d4-8e51-cedeae2b3599",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "46230cae-63cd-40d0-ae2a-00a870d9907f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4f93f20-3cf1-46d8-a5d3-56d45e09acf3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f66df82d-ce4f-40e1-8f99-4119f984cc8d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efff5263-5f4d-4b2d-b4f7-f4874a67cec1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f0032b6-3f03-45c0-ab98-3748b82c8791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54aa0b23-1fd2-4552-8762-98d8a5ac06f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80a97641-d996-49ef-8023-fc9bf2fd0375"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac79e7dd-ad08-4a47-a8d8-d7da2aab151d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3bf77ba-a52b-48ff-b658-cea552559e53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4cf7f4f-c61b-42a5-bd74-29aa67747f5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44fe6c9a-30a4-44e2-9a87-753ba7e8e38d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f5cd764-3444-487f-8a9f-12854b92aef1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7d2bf5b1-acd3-4184-b620-8ca1d4f11a03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ee22879-909c-4600-ad9d-7b4d3a58ef78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6817632-62c6-4fc5-8acd-114bc7df110e"
            }
          }
        ]
      },
      {
        "id": "978bf569-2a7f-4f1d-b4b1-df395c5e1913",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60de68dc-32ef-4293-a513-7670b01d9bf9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91186c5c-80ff-4c6c-8a5e-544d91c38541",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6e9bc4cf-25d2-47dc-9c2e-4f62cbd08850",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a0c1fd7-1f08-49c2-ab39-939b0f65eee8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af70f0e5-0997-4cee-8251-c7b5ed68b24e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.34736842105256,
      "responseMin": 10,
      "responseMax": 636,
      "responseSd": 71.6885224248677,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699317272293,
      "completed": 1699317304018
    },
    "executions": [
      {
        "id": "42cd4c5c-2abc-436c-abeb-64bad6993f16",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a6c96582-7b90-4ff6-9862-355e68c5959c",
          "httpRequestId": "a2721bee-96e0-4602-9f1e-71efeefc4c02"
        },
        "item": {
          "id": "42cd4c5c-2abc-436c-abeb-64bad6993f16",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8e8bcdb8-6ac5-43de-a184-f7b268c7bf88",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "cf03fea9-b685-48c0-ba76-75628df71308",
        "cursor": {
          "ref": "2b88fb56-7f9c-4350-8aea-8e91020ccff5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8e42569a-02de-48ee-8195-87446821345a"
        },
        "item": {
          "id": "cf03fea9-b685-48c0-ba76-75628df71308",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9e5c811b-b15e-4cc4-8d5f-af77a8cb6964",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "aa9e2381-6726-41d2-9210-6a85585cbfd8",
        "cursor": {
          "ref": "d99d8fd6-b6d2-45ab-b88b-10aa2175d87e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf6030f6-9c05-4f70-ac0e-b88bd63144cf"
        },
        "item": {
          "id": "aa9e2381-6726-41d2-9210-6a85585cbfd8",
          "name": "did_json"
        },
        "response": {
          "id": "fd0d1ab3-c8fe-4f0e-954c-7c0739c33e64",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9481fe6b-097c-436d-9d0e-2bab2e266269",
        "cursor": {
          "ref": "2f83b3f4-cb74-4e83-beda-c5e650ca4b64",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "092a4fb9-6036-4429-8804-6152bcf5624b"
        },
        "item": {
          "id": "9481fe6b-097c-436d-9d0e-2bab2e266269",
          "name": "did:invalid"
        },
        "response": {
          "id": "22f2f31c-c896-4178-9df0-d60b644dbb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9481fe6b-097c-436d-9d0e-2bab2e266269",
        "cursor": {
          "ref": "2f83b3f4-cb74-4e83-beda-c5e650ca4b64",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "092a4fb9-6036-4429-8804-6152bcf5624b"
        },
        "item": {
          "id": "9481fe6b-097c-436d-9d0e-2bab2e266269",
          "name": "did:invalid"
        },
        "response": {
          "id": "22f2f31c-c896-4178-9df0-d60b644dbb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eb1919-512c-4216-95a0-f664fbe236ae",
        "cursor": {
          "ref": "8e73d89c-f20b-42b2-b0bb-29ab0cbb2aa1",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d464520d-b425-410d-ae90-1e948983da2c"
        },
        "item": {
          "id": "b3eb1919-512c-4216-95a0-f664fbe236ae",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5d70c9d8-f17d-4546-bd87-d5c532a7535d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222eb3b7-d877-4ef8-ae5d-d4be61f1ab45",
        "cursor": {
          "ref": "e3a44e35-5439-4e9d-a1c7-69ba861bc047",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e8d189e-6f10-48c5-97d7-3882340b51be"
        },
        "item": {
          "id": "222eb3b7-d877-4ef8-ae5d-d4be61f1ab45",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c8058703-5d83-40fe-b16b-e45eda17643e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e44eb0c-fbf9-465a-b9e1-9351b246f0ea",
        "cursor": {
          "ref": "11cd8ae1-a527-42d1-b7bd-4a75c58b8c54",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8631381e-ed29-48b1-a600-bace4544f294"
        },
        "item": {
          "id": "6e44eb0c-fbf9-465a-b9e1-9351b246f0ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "547ebfcd-6c1c-4020-8fa2-cd30581215a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567f2eff-42d3-49e1-a314-d497c470bb90",
        "cursor": {
          "ref": "c0bf5358-882e-4483-b113-3d71a1f8b973",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2ecc21d-58dd-4cc2-b0a2-171017c3489e"
        },
        "item": {
          "id": "567f2eff-42d3-49e1-a314-d497c470bb90",
          "name": "identifiers"
        },
        "response": {
          "id": "46308fc7-aadc-4383-82df-fe1ab09785a9",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7eccca2-dfab-4807-b467-e4ba4ea68c7e",
        "cursor": {
          "ref": "f9056f83-e785-4dbc-b9c1-57bd5a93a7ba",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a3ff8baa-00af-4324-8132-a050a26db554"
        },
        "item": {
          "id": "a7eccca2-dfab-4807-b467-e4ba4ea68c7e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ccfa79a0-4f1a-45c2-956f-5c1fbd0430ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761b459b-69f7-4404-8b6a-9233f27052d2",
        "cursor": {
          "ref": "2464a24c-b148-453f-a6ba-7f1897c3a218",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "16d7ba96-a5b4-4687-9d2e-eaa4c061be6d"
        },
        "item": {
          "id": "761b459b-69f7-4404-8b6a-9233f27052d2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ad96d56d-7cba-4034-96d2-e784b02076a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc592a5-b511-41a4-9b7b-ac63bd9f9d42",
        "cursor": {
          "ref": "e12a56e4-17f5-4bc0-8504-2264ec808d10",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b91a82f4-e443-40da-bf0b-0cdf623e4653"
        },
        "item": {
          "id": "6fc592a5-b511-41a4-9b7b-ac63bd9f9d42",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "97efd7f0-2c82-402c-87c0-306756877cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7c986e-e423-4a9e-91c7-8fe13a6870eb",
        "cursor": {
          "ref": "45a7ec4e-da28-4af2-a3bc-b66d5caf65ec",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "be91f42e-6eb5-4005-94c0-b2e451480503"
        },
        "item": {
          "id": "fc7c986e-e423-4a9e-91c7-8fe13a6870eb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "12762fd8-e8a6-4867-85dc-d3de261cbb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02b2c1f-2e7d-4285-bdb7-e338161a9b4f",
        "cursor": {
          "ref": "cb1e7ab8-ec1d-4bcb-a3c8-9e58cad9bc3d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d561a2ea-83db-4713-ab0d-7810dd574fd5"
        },
        "item": {
          "id": "d02b2c1f-2e7d-4285-bdb7-e338161a9b4f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "278318ca-2175-4150-87ee-b6e905e80cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996d8451-f2e6-4144-93ad-fbf7a249dd68",
        "cursor": {
          "ref": "a61a303b-de57-455c-a1e4-cda9a283e015",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "38ba76be-736d-4966-8095-cb66afd09459"
        },
        "item": {
          "id": "996d8451-f2e6-4144-93ad-fbf7a249dd68",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b6295121-0b8c-4b31-a6ee-f96a794d9ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff5a2f7-819a-41fa-b9ff-d12c43b0c594",
        "cursor": {
          "ref": "7285cd18-e72c-45f6-9842-42b07428e18d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "de3a9332-7bbd-4ef6-8b2b-20439193e208"
        },
        "item": {
          "id": "7ff5a2f7-819a-41fa-b9ff-d12c43b0c594",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e6b2fb1e-ddd7-42d0-ad65-5e246a43b19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3b6d71-a5e4-4ac0-9f42-f3b3e313f15b",
        "cursor": {
          "ref": "03e765b4-1efa-40c7-ba13-abadc5805ae7",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2dad80b9-961a-4e21-bb10-00815af30a3c"
        },
        "item": {
          "id": "6e3b6d71-a5e4-4ac0-9f42-f3b3e313f15b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "190d8f83-9273-44cc-8ba5-89e1c8bb790a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19910dbe-7147-432e-85bd-6038a5054985",
        "cursor": {
          "ref": "c18ded3f-c6ba-4547-8787-5694dcda1239",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8f152d87-109c-40d9-b0b4-fdb625179c8d"
        },
        "item": {
          "id": "19910dbe-7147-432e-85bd-6038a5054985",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b4730dde-e0dd-4b9d-a776-657120392caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826e8a67-e14b-4a7b-8220-d4dae044d1c1",
        "cursor": {
          "ref": "6181ee87-ded2-4377-9037-a3ecba847379",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6e89cf0e-63cd-4abc-b616-b279362725b6"
        },
        "item": {
          "id": "826e8a67-e14b-4a7b-8220-d4dae044d1c1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5bdb5961-9b15-4f84-9aaa-698da9c01938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736f1865-c060-4e46-a54b-056b7effd507",
        "cursor": {
          "ref": "8c569948-97fc-4b52-8be9-922f14809f6a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f7514f9d-e9df-47b1-860a-1b9c85a8f872"
        },
        "item": {
          "id": "736f1865-c060-4e46-a54b-056b7effd507",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f0ee80b5-8a0a-41d8-b448-15a9d2200f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0811243-fa86-4a24-8ad5-f65d5aebfde7",
        "cursor": {
          "ref": "73f326a1-4b2f-4e70-834f-d5ba705ff223",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "48ac3de1-9bfa-4120-9b3c-0ec14b2af436"
        },
        "item": {
          "id": "b0811243-fa86-4a24-8ad5-f65d5aebfde7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d79ead66-22ff-46ae-9de2-b25c52e137cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4705efde-bcae-4ae0-9223-adf6e853e000",
        "cursor": {
          "ref": "4d731ef6-6ef2-41cb-8a2e-33800e9c614a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "22d87a6a-d152-4fc1-9bcf-c5070dea04a9"
        },
        "item": {
          "id": "4705efde-bcae-4ae0-9223-adf6e853e000",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "abf7075a-4e83-4946-8c81-a9ddbeeb0533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539e2e87-03de-4d8b-b929-61ca291f0561",
        "cursor": {
          "ref": "45c6bdc9-e325-4b70-9c57-d28a854cd759",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "74399500-ab72-41ff-a5a8-b2ff0bad4447"
        },
        "item": {
          "id": "539e2e87-03de-4d8b-b929-61ca291f0561",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "78cec47a-0678-4482-ab6f-100c22ff272d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61009d7-fe82-4f80-aacb-e4be794ee16a",
        "cursor": {
          "ref": "2038e28c-9495-4301-ba77-09657fd0ff92",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "19144522-690f-4bf8-8fb2-c81e28749c75"
        },
        "item": {
          "id": "d61009d7-fe82-4f80-aacb-e4be794ee16a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e9d9202e-69df-4d29-9206-3653e19c9b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c835451-bc13-44bd-961d-7acb6c292142",
        "cursor": {
          "ref": "1b5253f2-25c9-4c9f-b282-bb6c6c6f456a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a886edae-bf6b-44a9-8f9c-7d09d0e9b3fc"
        },
        "item": {
          "id": "9c835451-bc13-44bd-961d-7acb6c292142",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7be27baa-bf66-4f80-9e67-d3546bdb7c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e36f5fe-9244-4e59-b791-e46b9733d8f0",
        "cursor": {
          "ref": "62536004-86aa-4fb5-9b5a-c102463522fd",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "39bf89d4-3a7f-403d-b91e-3b70f2d483f8"
        },
        "item": {
          "id": "8e36f5fe-9244-4e59-b791-e46b9733d8f0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "38783868-48c7-4243-939f-a695e08e2287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1323b317-e962-4b2d-9473-8c3a5de0c11d",
        "cursor": {
          "ref": "263f13ec-e301-41c7-b876-88b91b6ce281",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a10df69e-5306-4bad-b74a-c835052b94f6"
        },
        "item": {
          "id": "1323b317-e962-4b2d-9473-8c3a5de0c11d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fff34e6b-652f-4955-a2f7-56b772aa1e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74f8263-1ad7-47dc-99dd-d8c0207255f8",
        "cursor": {
          "ref": "8da4d4a1-2605-4db9-9eac-d47aa2d8a1f8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e4825c33-fdbd-425a-8700-18d25ac5fccc"
        },
        "item": {
          "id": "c74f8263-1ad7-47dc-99dd-d8c0207255f8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5ed03bb9-d204-4a54-a7cd-47e604f59f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e4e90a-053b-4d37-9606-2718eb85ced8",
        "cursor": {
          "ref": "61ac1089-69c3-488b-b992-966b91ee1ea2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "77df38f9-25ad-411c-a103-0fd9547ae377"
        },
        "item": {
          "id": "43e4e90a-053b-4d37-9606-2718eb85ced8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5968f0c8-29f8-4293-8ac8-ee3a059949cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51831472-935f-4d26-af09-4eaa63d58ed1",
        "cursor": {
          "ref": "4a8f7631-0ea2-4be3-b283-d416263615a7",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6dabf3ce-17c7-483e-a257-2e2c83eb3c05"
        },
        "item": {
          "id": "51831472-935f-4d26-af09-4eaa63d58ed1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bd55c6ce-d47f-44e3-ab58-ccef30e2655f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7eeb8a-f665-450b-ba52-44c314c8a10b",
        "cursor": {
          "ref": "558456c4-04c4-48d9-aaae-0da8e3b27bc8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d73452af-09cb-4a01-ae95-80da7bfcc90d"
        },
        "item": {
          "id": "3b7eeb8a-f665-450b-ba52-44c314c8a10b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ce13034a-abf0-43a2-be02-49b2f5544ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810150ae-88bc-4865-9c2e-129102e48017",
        "cursor": {
          "ref": "6d79fb99-7696-4530-8c3a-db47dc4d9f8a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e247f7df-149e-4c59-9130-fac6f41397bf"
        },
        "item": {
          "id": "810150ae-88bc-4865-9c2e-129102e48017",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7ae43e56-6f71-4ea4-a6c4-2c4f73d68959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b1c468-acdf-45e4-8a61-c71951769750",
        "cursor": {
          "ref": "b92a0842-8115-49f0-bb44-3c170e4f6e7c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8405ae92-cbf6-47f5-be76-901d8227b239"
        },
        "item": {
          "id": "e9b1c468-acdf-45e4-8a61-c71951769750",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "68d37394-544a-4f32-9ad0-1d7e13fc8d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3ce8c7-30ee-4ea6-b213-7bc72d449df9",
        "cursor": {
          "ref": "93edd8c5-46a9-4247-9558-aa7be2824399",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "865ae133-1fea-4ab0-a5a0-45ddf1e5a7eb"
        },
        "item": {
          "id": "5c3ce8c7-30ee-4ea6-b213-7bc72d449df9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "386e6784-b21e-4b38-af49-180faf2f8682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef03da4f-b9ac-4ee6-be81-f16cc78478a3",
        "cursor": {
          "ref": "2a20269d-7f35-40a8-87e0-e9e1093fd7e9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "23121bb5-74a7-4d4a-8302-7661e3179d62"
        },
        "item": {
          "id": "ef03da4f-b9ac-4ee6-be81-f16cc78478a3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a9d4106d-14eb-4c6d-9331-1d90afbfb5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf4883b-8715-4a57-a513-76a58195c223",
        "cursor": {
          "ref": "f1925a76-80d6-449e-ba31-f858eeaadc7b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "acdcdf7d-5afb-4045-bc1a-34508f7c0c9a"
        },
        "item": {
          "id": "adf4883b-8715-4a57-a513-76a58195c223",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c2ff00c7-fe42-4643-852e-550cf5eafce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f97145-e20e-4245-898f-383ae65ff2dd",
        "cursor": {
          "ref": "f28866b7-2348-4a1e-aefe-805c63fa7b93",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ca61c038-2efe-4b85-bda0-57de12b99436"
        },
        "item": {
          "id": "e8f97145-e20e-4245-898f-383ae65ff2dd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e7071cd4-fcba-45de-9f12-c9791393dd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fa2916-96c7-4e26-8607-37c19d3792c4",
        "cursor": {
          "ref": "14d62fed-ee5d-4732-b0f3-871770fbcb61",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "754a1c6e-8477-4fd6-9774-03fa64b0187e"
        },
        "item": {
          "id": "c9fa2916-96c7-4e26-8607-37c19d3792c4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4c252be4-4ee4-41be-917c-5e6d5f666294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c4257e-09d9-4cce-a1c7-649c4ee07390",
        "cursor": {
          "ref": "94f6588f-f25b-4c1e-b470-dc1302f225a3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bcb1a461-66fa-43b7-a02a-278b79a07034"
        },
        "item": {
          "id": "f7c4257e-09d9-4cce-a1c7-649c4ee07390",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e82f6028-23a8-4e47-863c-dc4a06afd48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2494db3-c92c-4470-b8b2-292f50173271",
        "cursor": {
          "ref": "f97591be-e1f0-44da-8e78-37e26e6bc51b",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3ad1f5d0-234d-4d4c-b7bc-c1af0a4a575b"
        },
        "item": {
          "id": "e2494db3-c92c-4470-b8b2-292f50173271",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b578e13f-07b5-4883-a919-c88449b5ce6b",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "596b129a-b1c8-4c08-98df-db741350af0e",
        "cursor": {
          "ref": "d5734e85-8e99-463b-9f21-cd127bd3a64a",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7408003a-2853-4924-afb1-aa14a48f9679"
        },
        "item": {
          "id": "596b129a-b1c8-4c08-98df-db741350af0e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ea2c3258-305c-41b0-afc9-9037c2e0b1d8",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c10f73b1-8b4d-4206-9ed5-7e64a55ca395",
        "cursor": {
          "ref": "b25334bf-8600-4c89-9007-9e61b4d1ae6d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5c9d6010-fd4a-431a-868b-49dcaeae1bed"
        },
        "item": {
          "id": "c10f73b1-8b4d-4206-9ed5-7e64a55ca395",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "06be77e4-6d74-43c8-97f3-0499e72b12c2",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0d2f7e35-32ca-4525-bcd9-03d0a2c846ae",
        "cursor": {
          "ref": "96b35ecc-addf-49ef-bab9-486d42b8ec95",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "77119c5e-5ddf-4538-bcc3-bac63e2e49a0"
        },
        "item": {
          "id": "0d2f7e35-32ca-4525-bcd9-03d0a2c846ae",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "71183584-3e8f-48e2-b7ea-3307188326c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4020bbe6-182b-4d02-b9ae-00e50b52f4e8",
        "cursor": {
          "ref": "61b513b6-8ddf-4015-840b-c2eaaee60705",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bc0c35ef-b9db-4328-8a3c-079c71379965"
        },
        "item": {
          "id": "4020bbe6-182b-4d02-b9ae-00e50b52f4e8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "53002f7b-b6b7-4f2d-90a1-2d44b82092a6",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "62e73512-0d7a-4ab3-9b36-a820c7b2c578",
        "cursor": {
          "ref": "2b13f44d-3dfa-4e88-8ce5-1ae9bbdb9314",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5638fba4-5a2d-4bba-9408-83f62d0425cc"
        },
        "item": {
          "id": "62e73512-0d7a-4ab3-9b36-a820c7b2c578",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9893252d-bee5-49ac-a411-4b58ffe10d58",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "99d1f043-0d8f-48a8-9b6c-fc32139f90e7",
        "cursor": {
          "ref": "48c82725-b841-49de-af47-de32aa3d8b47",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8502362f-c905-4424-a511-ad546129ed69"
        },
        "item": {
          "id": "99d1f043-0d8f-48a8-9b6c-fc32139f90e7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6beb0ad0-d3b2-4097-8ffb-411f1c091df0",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2bb3e3bf-9cb4-4b2e-89d3-67bd09ab80d5",
        "cursor": {
          "ref": "d3f62363-0581-4b31-999d-552157a02bed",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "25cbe2fa-9ee7-4485-9f93-6ea1ab34c803"
        },
        "item": {
          "id": "2bb3e3bf-9cb4-4b2e-89d3-67bd09ab80d5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e9f5a832-9497-4268-9c54-22cea5332ea8",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "50522dd5-435f-48dd-aff0-db2ab8c74741",
        "cursor": {
          "ref": "b5315411-efd9-4404-91a8-f2cb4fd4dc0b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "134b8afa-7035-4aa9-ae84-4481b9b107e0"
        },
        "item": {
          "id": "50522dd5-435f-48dd-aff0-db2ab8c74741",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c13717fe-e7a5-487a-b53b-11366802ec82",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8a051c5e-5010-4fe2-8f81-dc360292e20d",
        "cursor": {
          "ref": "82b407bb-89e5-4559-a610-49ef8e52ab20",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "113a7cfb-de00-41e2-b0da-4a50e5931642"
        },
        "item": {
          "id": "8a051c5e-5010-4fe2-8f81-dc360292e20d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c41e508b-2c8a-4560-9ac9-d94b970abbca",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "22c432e5-55d7-426e-a156-54ce302e56d6",
        "cursor": {
          "ref": "10b987b6-eeb8-4297-aaab-9b59ac69f399",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "631994a7-03c0-475e-b66a-62ac7bcaa3aa"
        },
        "item": {
          "id": "22c432e5-55d7-426e-a156-54ce302e56d6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "624642b9-7cf2-43f0-a624-29d57eb25781",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b670dd9d-1f1e-4400-975a-b3821ec52694",
        "cursor": {
          "ref": "453e0eaa-d9dd-494a-bfd9-818b7592387a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b0a65329-dc4c-4e14-8e77-df2d33b70489"
        },
        "item": {
          "id": "b670dd9d-1f1e-4400-975a-b3821ec52694",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f92c7a2c-6177-4496-82c9-ccec658b543e",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d357ccba-befd-4731-9a96-b51fc1721484",
        "cursor": {
          "ref": "94d8ed8c-b84a-492a-aed6-c3b99b8f1996",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "924e32ce-f1d0-4121-bea9-638493fb0b85"
        },
        "item": {
          "id": "d357ccba-befd-4731-9a96-b51fc1721484",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "270bd457-5db0-48f5-b56f-5fbe73a38b10",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3694d040-bf1b-423f-889e-783dbafc8c4d",
        "cursor": {
          "ref": "16dbc7c5-31f4-4d9f-928a-316eaad0ae40",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f27b0367-c775-44f0-b02e-0f49feb49afe"
        },
        "item": {
          "id": "3694d040-bf1b-423f-889e-783dbafc8c4d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "800ee66d-0d56-4a23-8f6e-603b9d1fa7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944cb3e0-2e76-437c-b735-b0adbdcc23d2",
        "cursor": {
          "ref": "47b82d33-50c8-46cd-8c55-34a8e9ec563a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2eb09401-7a4e-4e71-9996-c3b87509ad81"
        },
        "item": {
          "id": "944cb3e0-2e76-437c-b735-b0adbdcc23d2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8737f905-fe56-4b3d-9356-f5949806d86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd82016-9812-4fd3-8b3c-8327e94d31b1",
        "cursor": {
          "ref": "338ec48e-906e-4974-92b1-bfac805ca0ac",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1093ef1a-a0da-423e-b090-64c7499b8d50"
        },
        "item": {
          "id": "acd82016-9812-4fd3-8b3c-8327e94d31b1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "20f205b4-f84b-41d3-af4e-4b4e50d78452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afab51b6-8b6a-42ff-b35b-b26bc9c4a3a1",
        "cursor": {
          "ref": "c4a3145d-6fa9-4910-bacf-e45ed20bad79",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f7f3d3c5-0680-4c1b-a964-4d983a79f466"
        },
        "item": {
          "id": "afab51b6-8b6a-42ff-b35b-b26bc9c4a3a1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9da3eadd-edf6-4399-b0ea-4799b88a8dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401a024f-f1a8-47f7-b398-62cb0d08fe79",
        "cursor": {
          "ref": "c1aee5c6-9358-4d17-945c-c6310d7086d2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1fb0e83c-2b1c-4c1f-abbe-eed2c8283b7b"
        },
        "item": {
          "id": "401a024f-f1a8-47f7-b398-62cb0d08fe79",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d46d7cf3-51c4-4e6b-82cd-205cb62d9dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3db97d-92e7-4991-ad50-f1a46bfd1f21",
        "cursor": {
          "ref": "a42cb039-f311-4407-affa-07b00ab9415b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e0d30e59-cfe5-40fb-95f4-03d54eaa287f"
        },
        "item": {
          "id": "9b3db97d-92e7-4991-ad50-f1a46bfd1f21",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "796219b9-8e6e-4058-b87c-f02e323f3913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98dc4b1-09a1-47e2-aec7-c6fdc0480190",
        "cursor": {
          "ref": "39efd633-ab21-4667-bf60-23f0b8d772e2",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dd0a430e-85cb-4899-9315-3c18249313e3"
        },
        "item": {
          "id": "c98dc4b1-09a1-47e2-aec7-c6fdc0480190",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a2e0940c-7129-4af2-a52d-cee8821631d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498444c3-0a9b-4ceb-bea3-20632506c713",
        "cursor": {
          "ref": "a0dfd54b-05b2-48fc-957c-17957ebd93da",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "22765e77-11cd-4eac-b20a-4a004271ccbc"
        },
        "item": {
          "id": "498444c3-0a9b-4ceb-bea3-20632506c713",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f9dd432b-4e91-4e8a-b4ce-60009ee25dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5d5bbb-dbcb-45a0-ab93-0cb87eb226a2",
        "cursor": {
          "ref": "a43e7a93-e32a-434e-b519-932a1a9bbf87",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "67df1a3b-4a49-4958-a278-6b92f31af6c5"
        },
        "item": {
          "id": "ad5d5bbb-dbcb-45a0-ab93-0cb87eb226a2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5027761e-4dc8-4c51-8d35-e257e4007680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92383a2-6040-40d2-bbd6-7d4d7e9686d0",
        "cursor": {
          "ref": "3a05a65a-157d-4a1e-ac1a-b466c647933c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e2159d6c-0b52-4b23-9bd8-814ed7956282"
        },
        "item": {
          "id": "d92383a2-6040-40d2-bbd6-7d4d7e9686d0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "35e11762-c726-493f-be0b-7e7809fcbeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc515be9-590c-4885-9697-730b7f2f403f",
        "cursor": {
          "ref": "bd3503b4-d57d-45ab-b575-ea7d67a29c92",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3e5ca163-82ae-44b1-913e-70bb224ebaa4"
        },
        "item": {
          "id": "cc515be9-590c-4885-9697-730b7f2f403f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "54854528-f99e-4414-9b01-ff660c708995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6b998d-5c02-4d51-b939-d929caa51536",
        "cursor": {
          "ref": "ae0ae487-2a2f-4801-914b-7858e7ae032f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "81846c8a-7a08-4bbb-8809-132464b56d29"
        },
        "item": {
          "id": "5f6b998d-5c02-4d51-b939-d929caa51536",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e6187075-c488-40ad-9675-d4e86c7ef71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52142ed1-295a-4ca5-961c-4a6a4b848a98",
        "cursor": {
          "ref": "85b637a2-5ab9-4794-a9af-74d9d5451bdd",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b7e9a20f-96ad-4ba0-9521-08fa2b29caa3"
        },
        "item": {
          "id": "52142ed1-295a-4ca5-961c-4a6a4b848a98",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bc6b8408-987c-49e8-ab5e-f297448608bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb19783-56e8-49d9-b875-7acef3f01aa7",
        "cursor": {
          "ref": "d05925c6-558a-4e51-a499-55e4f9248715",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1c7bd5a5-e4cf-4b2c-878b-a21cdf9f08f0"
        },
        "item": {
          "id": "4bb19783-56e8-49d9-b875-7acef3f01aa7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f8627cf0-b5d0-421c-90cc-085836c4ce37",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f10d8f32-1206-4226-8ba3-c4b96e716db7",
        "cursor": {
          "ref": "c4c58540-e4a1-463d-a57a-e680195a4e2f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2028ed51-3783-4d22-8829-c06a7b883ac2"
        },
        "item": {
          "id": "f10d8f32-1206-4226-8ba3-c4b96e716db7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7d22e4c9-7b5a-46e4-9b74-3a4c92e82882",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5a98d9a5-52ca-424b-a32b-d67cb6168de2",
        "cursor": {
          "ref": "7e97434a-8b0f-42c8-8eac-8ae7428841e2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6578c51a-0de2-48a6-a448-42965ec01f4c"
        },
        "item": {
          "id": "5a98d9a5-52ca-424b-a32b-d67cb6168de2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e3ecff5a-8b6f-48c5-a914-86eacaefff84",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b9d75419-9445-4568-9735-5782b115c66e",
        "cursor": {
          "ref": "909e912b-153d-41ef-be22-92eae2eaa7f1",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b834bbb7-648e-4e00-a88a-8a1a1b768a45"
        },
        "item": {
          "id": "b9d75419-9445-4568-9735-5782b115c66e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0448c218-068d-489a-8c64-897269a4a4c5",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "043421dc-8f97-47d3-a6d5-7a284d1736aa",
        "cursor": {
          "ref": "172136dc-6935-495d-8f15-bd0bb9c34f6d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9352b86b-6bf4-4217-b7d3-6032bfe6bc7f"
        },
        "item": {
          "id": "043421dc-8f97-47d3-a6d5-7a284d1736aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "42a2af55-505f-421c-8e5f-211c212e7b67",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f59b1fe6-7fc4-423e-b15f-c7210d1b36f6",
        "cursor": {
          "ref": "dfb2040c-f263-4aa5-a79d-28bdf51056eb",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cb387f50-18a8-4ce8-9830-b3d6e61feeb8"
        },
        "item": {
          "id": "f59b1fe6-7fc4-423e-b15f-c7210d1b36f6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bb6b4854-cd1c-4962-80a4-8b188dcef09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f903ac-8004-4611-8125-0144479a1e6a",
        "cursor": {
          "ref": "64141206-76d0-4371-a822-1e967f5f42b4",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ea676989-5cb8-4db5-abfe-97538cac8564"
        },
        "item": {
          "id": "58f903ac-8004-4611-8125-0144479a1e6a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb8acfff-fa01-4aec-a1d3-790ac8b97943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd45f6e3-5427-4fef-a467-e30586833b71",
        "cursor": {
          "ref": "cb6eb9b5-6818-4b67-9fdf-5fad8f9a682e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f5a6ddc1-861a-4a1e-b78c-400cb32d6fe8"
        },
        "item": {
          "id": "fd45f6e3-5427-4fef-a467-e30586833b71",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "97007827-4297-4388-ba47-bb0a80c93583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e037c3c8-ab54-4244-a2ec-0784dbc07291",
        "cursor": {
          "ref": "f11ff0a9-5c1a-4c79-b5e6-b82146ff4e3c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d666a8cc-d9cb-4ff3-b379-d8086f628e98"
        },
        "item": {
          "id": "e037c3c8-ab54-4244-a2ec-0784dbc07291",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f7beb22e-7cf2-4ecc-96ba-3ef44338e8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f6ee6f-ff23-42ec-8fc8-c0da2ea00d7f",
        "cursor": {
          "ref": "e7b3f34a-dde9-4100-a618-69abf8ea7e09",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3d0a296c-c231-496a-820a-6c89b7183547"
        },
        "item": {
          "id": "31f6ee6f-ff23-42ec-8fc8-c0da2ea00d7f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "db5b5bab-3feb-4c84-a803-8be2f6988978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9ad828-b2fa-4308-b51e-dc21d76d6eb3",
        "cursor": {
          "ref": "ad87376b-5f92-40fe-b6da-61236d18562b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e17b01ae-c003-484f-9408-89d28fe505cd"
        },
        "item": {
          "id": "7e9ad828-b2fa-4308-b51e-dc21d76d6eb3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6bbb2715-5eef-41ba-9142-b0315e943b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902694ee-cc7f-49bf-a510-fa9121daf13c",
        "cursor": {
          "ref": "f7a4c6a8-7902-4ee4-861f-88a5df5c8a48",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "78152f16-5af8-466d-8c54-b333993ef7f2"
        },
        "item": {
          "id": "902694ee-cc7f-49bf-a510-fa9121daf13c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e9b5b1a1-30a6-404b-95ba-d2efdc6170bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c232870-c04e-4021-acb9-83f6ba50268d",
        "cursor": {
          "ref": "f3f4f030-2bfe-4193-be56-8c8198fd00a0",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "66ed507d-565e-41da-b550-75d45389a07f"
        },
        "item": {
          "id": "8c232870-c04e-4021-acb9-83f6ba50268d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "546c340e-801a-4719-8f9d-3ad23ad4d3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d9fb2b-d597-4f74-82ce-71deeec63e19",
        "cursor": {
          "ref": "074c0ffc-f394-422b-873d-9ad186ccc85c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eb44c125-9aab-46f7-89ef-9fd84fc16eee"
        },
        "item": {
          "id": "c4d9fb2b-d597-4f74-82ce-71deeec63e19",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3ac38277-06bd-4b0e-a88c-8139672c11eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15b657f-534e-423c-a0ac-87fac8562241",
        "cursor": {
          "ref": "2ef1ee7f-4662-4670-890d-6155c572feaa",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e132510d-35c4-4a1d-84c7-bcbf13b27612"
        },
        "item": {
          "id": "c15b657f-534e-423c-a0ac-87fac8562241",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "63840134-7dd8-4d52-8429-ab6edc8658b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6927f46-d223-46e5-a7c4-15cb8fa25111",
        "cursor": {
          "ref": "ee2e6fff-fb8d-4d3a-a496-713c1fb08577",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6930f651-507f-4dd5-ae3c-76af45b1dd44"
        },
        "item": {
          "id": "f6927f46-d223-46e5-a7c4-15cb8fa25111",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9557a8d5-0fa0-4715-9a7d-4071c428d69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0621b2-433a-4e4b-a2b4-563beaab8877",
        "cursor": {
          "ref": "385a1a9c-4e0c-4fc5-b761-3e0f3ca3af54",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6bad0937-9bf4-4694-b811-02debeba5599"
        },
        "item": {
          "id": "4d0621b2-433a-4e4b-a2b4-563beaab8877",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bac5b220-ef19-49c8-8250-8adeb9fcf71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c128842c-7fd8-4e01-bd32-e66110ab54f1",
        "cursor": {
          "ref": "f49b9e04-a116-4aa4-8054-3a2b6d5a5681",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c25c1a8b-47b1-4d6a-827c-047bc228da19"
        },
        "item": {
          "id": "c128842c-7fd8-4e01-bd32-e66110ab54f1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6bc69169-f1fa-43d4-a46a-29592a096d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16170c6d-d332-45bd-8343-e71ec4deb564",
        "cursor": {
          "ref": "dee8cf55-c355-4b46-ade6-f0e0aaefb5d5",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "91cc681a-bfca-4d7d-b036-df67e0c30328"
        },
        "item": {
          "id": "16170c6d-d332-45bd-8343-e71ec4deb564",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c725dacb-e0e8-41cd-ba72-7ce2b84a272f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd7d993-fc23-4f24-af51-e5c8a6951664",
        "cursor": {
          "ref": "6e5706e8-9dcb-4cd7-9249-d67caa7bf29b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "eaef3d34-7ebb-4bbd-b466-32948acf9f13"
        },
        "item": {
          "id": "cfd7d993-fc23-4f24-af51-e5c8a6951664",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6051d9d8-a447-479b-8cc2-63a23e5ae756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3aebbe-b897-44e8-ad36-6b4b74c3b1d8",
        "cursor": {
          "ref": "262fb627-951d-46f9-a88c-4540271bdc09",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4ecacca1-0ebc-42aa-9417-35e3fbd337a8"
        },
        "item": {
          "id": "3d3aebbe-b897-44e8-ad36-6b4b74c3b1d8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "035c1251-d07a-4d36-bda3-bfc9c5adcb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9a0e36-3f6f-4df0-bad5-35f85871ee93",
        "cursor": {
          "ref": "e9ede11f-e564-4f46-9aaf-90811f7b036e",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cc9622be-71e5-4de4-bb63-9a9ef05bd388"
        },
        "item": {
          "id": "cf9a0e36-3f6f-4df0-bad5-35f85871ee93",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5ba4aaeb-9a0b-40a5-b2d1-8906819b7f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed9fa9f-d10c-4a6b-9915-52a23270deb2",
        "cursor": {
          "ref": "f6dd362c-c6c1-4e84-84c6-0a33cedc516a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "852f3712-094f-42bc-8f32-dceb15790c1f"
        },
        "item": {
          "id": "9ed9fa9f-d10c-4a6b-9915-52a23270deb2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "363d5254-7f4c-471f-bdfc-69031568aee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e349304f-18fc-47cf-9f6e-0a2915996502",
        "cursor": {
          "ref": "e076ccb2-cf98-4591-9877-3c7f15d1c74a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0caeafe0-ae3e-476b-b9ec-00dea27f5c82"
        },
        "item": {
          "id": "e349304f-18fc-47cf-9f6e-0a2915996502",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1187a2c4-73b8-45ef-8785-322d2e576be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b831683d-44bc-4055-a01d-556fdf912f70",
        "cursor": {
          "ref": "1d481f18-1c3e-4e17-ba58-1ca2e4d03508",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "03efcf91-a8b9-42ea-9429-5c0c8caffecc"
        },
        "item": {
          "id": "b831683d-44bc-4055-a01d-556fdf912f70",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "00c63704-a737-4fa4-8eb5-c6dbc6199bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c471a73c-df7c-4b5b-93b7-8ad6e693a934",
        "cursor": {
          "ref": "d1f8a142-c3ea-4ba3-ab92-2be73b9e2d07",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "62d0694e-7a7a-4aa4-aed0-4e8e949eba62"
        },
        "item": {
          "id": "c471a73c-df7c-4b5b-93b7-8ad6e693a934",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8594652f-fec8-4327-8cb8-2433ef71ca1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1543cf6-3965-45b2-821e-1ec9c41b6e93",
        "cursor": {
          "ref": "930feaf1-1a94-4036-908c-a9dfba12b76f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b18bbb33-06dd-4eea-892d-6cb4352a04cc"
        },
        "item": {
          "id": "f1543cf6-3965-45b2-821e-1ec9c41b6e93",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3af147b3-1815-4b96-94ad-6032d3d6f872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c1aed9-5b35-4546-8e90-4f2c281cc69e",
        "cursor": {
          "ref": "cedfb755-4394-4d46-a561-a483c31499c4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "50d19188-50a2-4d69-b1db-fd512161fa85"
        },
        "item": {
          "id": "77c1aed9-5b35-4546-8e90-4f2c281cc69e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "67b090ab-65c6-4e67-8bc0-fb16f2d0fed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dbf1dd-8658-4fc3-ab75-3646267e08e9",
        "cursor": {
          "ref": "3d3d9e93-089a-4567-9679-e5a37781b010",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "079d35ad-b685-40dd-b68c-c03109231948"
        },
        "item": {
          "id": "03dbf1dd-8658-4fc3-ab75-3646267e08e9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b823cf16-bba9-41ec-9ab3-6f3b7724abe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac1ff4b-ba3b-48f1-97ef-0b62cf0dfdbb",
        "cursor": {
          "ref": "8ab4822d-b67d-4af2-a754-b59d67bd415d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e17441e6-44fd-42e3-88c9-0d269506a21a"
        },
        "item": {
          "id": "cac1ff4b-ba3b-48f1-97ef-0b62cf0dfdbb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3ea8f167-9702-40c6-bff4-05b15ed3fa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026713ab-db9c-40dd-8386-9deb2f66a1cc",
        "cursor": {
          "ref": "45ee83b1-53c3-465b-81c4-389ab926d8a7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "02fb8d6e-f12e-4fdc-9315-c23cefe9cbc3"
        },
        "item": {
          "id": "026713ab-db9c-40dd-8386-9deb2f66a1cc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4b59dbe9-38e9-4e67-8e4d-1feb0d4f6b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5230df59-54e3-4d3d-9c88-ebc225e6da69",
        "cursor": {
          "ref": "a62f7491-86ae-4d7a-a913-8668012ee992",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "309f397e-f347-4f85-a7c2-b62fd0a4ced6"
        },
        "item": {
          "id": "5230df59-54e3-4d3d-9c88-ebc225e6da69",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "761b03f9-4efd-48c1-892a-ecfca7863ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c7cbba-a634-4176-888e-a46bbeda9754",
        "cursor": {
          "ref": "7a6639ff-a6d6-48b8-8395-9a9c1f26d482",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fb5d8467-71f0-492a-a622-2b10f7542bd9"
        },
        "item": {
          "id": "36c7cbba-a634-4176-888e-a46bbeda9754",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2715fc1f-340b-40c2-a47d-75bc197e6ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a405e49-a21e-44bc-b789-bce5c4e2b58d",
        "cursor": {
          "ref": "f5465040-7dde-4859-99fe-cabff21097f2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f9f9b488-59b9-46cc-9e72-92d41399fef1"
        },
        "item": {
          "id": "0a405e49-a21e-44bc-b789-bce5c4e2b58d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "01a11870-2e20-41eb-a63b-d412bcdbe30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0850db76-26fb-4f0d-85a6-9882bdfe6b20",
        "cursor": {
          "ref": "bfdff706-dbad-44ff-b92c-3a8f0cdc9d78",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f1b74d43-96df-414b-95cf-4680f28f4c33"
        },
        "item": {
          "id": "0850db76-26fb-4f0d-85a6-9882bdfe6b20",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b8e94f5f-8170-43da-bcaa-f45b97eb5416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7474d832-073a-4dc1-9bda-c00cff3e6f24",
        "cursor": {
          "ref": "77990c4e-8d12-4ef8-96ae-90e3de681cc3",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "94ecf4c5-6d33-43a2-9e82-8a085dab62e5"
        },
        "item": {
          "id": "7474d832-073a-4dc1-9bda-c00cff3e6f24",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "17780783-4556-46df-8f15-bc45e7422982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7ca623-1024-408e-87f6-910a2772ec03",
        "cursor": {
          "ref": "a9186075-f251-4b64-89dc-62d4e0805be1",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6310449e-81f8-44ab-8146-389dfa3f2b94"
        },
        "item": {
          "id": "ed7ca623-1024-408e-87f6-910a2772ec03",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "84b25051-5f41-4902-9f0d-936920cb2e0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315934f0-b444-42f2-9860-0b78cec712cd",
        "cursor": {
          "ref": "9055c220-f70b-40dd-8422-ae4a6cd45a00",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "90a6bce7-b57b-441a-9c2a-791498a9b018"
        },
        "item": {
          "id": "315934f0-b444-42f2-9860-0b78cec712cd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a81c46c7-3a51-4f6e-90a9-f0d399c94539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a7447d21-983a-497c-b254-d3210f1eb44b",
        "cursor": {
          "ref": "cb737089-2d42-43c3-a4e9-db72dd8dd8ed",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "258fc677-5e53-4928-8c3f-550411590984"
        },
        "item": {
          "id": "a7447d21-983a-497c-b254-d3210f1eb44b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "93de2c9a-2c19-442f-ac4c-f203024625c6",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "63302d29-79be-461c-9153-00b76a2260ab",
        "cursor": {
          "ref": "48057cb4-51f5-46e9-925f-15fa77125d32",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6a13f9f5-1edd-4163-8d52-5758bc9a9097"
        },
        "item": {
          "id": "63302d29-79be-461c-9153-00b76a2260ab",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d61c04e1-1dad-46f8-ac0e-acf6c2c6da02",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a5dab9-84cb-4324-bddf-738b836ce936",
        "cursor": {
          "ref": "24d9276d-a777-47d4-9212-0a59709767ae",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "44063e69-1cbd-4acc-a7e4-a42e38f40f90"
        },
        "item": {
          "id": "e0a5dab9-84cb-4324-bddf-738b836ce936",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "11e005cc-5290-42ea-9c69-79d1d29c0d29",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4efe64c-96a3-4427-90e0-f4ec9b3a7fc5",
        "cursor": {
          "ref": "4e758694-02c4-4957-94fd-c38beb1a7cf6",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "64ccda3f-9a2d-4c5b-92e2-dc022cee7799"
        },
        "item": {
          "id": "e4efe64c-96a3-4427-90e0-f4ec9b3a7fc5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2e10e93-ae31-454c-aae9-861b4785f637",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73459be-8f61-49d0-b058-d976046bb2b4",
        "cursor": {
          "ref": "77e9cb01-aeb5-430c-9dc9-1f10d08fe546",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "30f98b34-68af-4355-9df2-5087cc15de20"
        },
        "item": {
          "id": "b73459be-8f61-49d0-b058-d976046bb2b4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3ca11da4-6247-4f4c-b64d-98f30bcb6f82",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-07T00:34:47.626Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-07T00:34:47.626Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4b9a59df-e6a5-4565-9846-7aa2ee4778b5",
        "cursor": {
          "ref": "101a0898-5d9e-4e9f-adf1-0dcb4c6eed1a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "40969e27-c7d2-4220-b9e6-ac3b105b568f"
        },
        "item": {
          "id": "4b9a59df-e6a5-4565-9846-7aa2ee4778b5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5736a529-adec-41f8-ac61-0529a0baed3c",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e465d93-a9e8-44bc-85b6-b559a41ae5d3",
        "cursor": {
          "ref": "1b617599-8f70-4dff-bee8-f88a7301c61b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e1a37005-b77b-4938-ac56-097440e84d68"
        },
        "item": {
          "id": "0e465d93-a9e8-44bc-85b6-b559a41ae5d3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0364b045-7c7e-4e63-915e-7af51e1f5a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d8dfe2-8ef8-43bc-85d3-60c9ac75b136",
        "cursor": {
          "ref": "9ccd96ec-1761-4e3c-9b5f-b1180e53138f",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "64111599-23e7-4f5b-8547-65b7e5564602"
        },
        "item": {
          "id": "82d8dfe2-8ef8-43bc-85d3-60c9ac75b136",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e3fe4f7b-b57c-4deb-a4d6-73800f35c94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be175087-3a0a-4482-9aca-f270ab1eee61",
        "cursor": {
          "ref": "18382b1b-839c-4ecf-a0c6-fc44b6e1424c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f228bacf-00ab-4c5e-97d3-ec215ac1054b"
        },
        "item": {
          "id": "be175087-3a0a-4482-9aca-f270ab1eee61",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66ce22d2-85d0-401b-812e-185d420f5b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a82e1f-b596-4244-9706-d05b846eea9f",
        "cursor": {
          "ref": "1d859124-05f4-4af3-84b2-5eab0fec93d5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "493b6fb3-6360-4ca2-8b86-a880ab45a95f"
        },
        "item": {
          "id": "56a82e1f-b596-4244-9706-d05b846eea9f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8a981186-7c79-4770-ba64-d45c990c819d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfa7581-107d-4aac-9f86-a85e94c5e992",
        "cursor": {
          "ref": "3cdc360f-eed5-4a32-8cce-569d963a6c29",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2d4697a9-42bb-4f5b-916b-652122cc2e4a"
        },
        "item": {
          "id": "1bfa7581-107d-4aac-9f86-a85e94c5e992",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "013fcd3f-c404-4b86-900f-f80185a4ae3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faf608e-7b71-4e5d-b715-d6d964acd1eb",
        "cursor": {
          "ref": "266e462b-7410-4021-92bf-964d583656bf",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0dcb65ae-8b43-43ea-9917-cf4191c6f0ae"
        },
        "item": {
          "id": "1faf608e-7b71-4e5d-b715-d6d964acd1eb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "642ab1fe-78bd-4571-8b1d-e6c26b7724a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa6458b-4f51-46c1-9a8b-3a6a5c34b1e2",
        "cursor": {
          "ref": "9d4ec24f-a4ed-414e-b9b5-57cbe01e0da1",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5afc8cb7-f95a-49c1-9221-b1ea75c83116"
        },
        "item": {
          "id": "faa6458b-4f51-46c1-9a8b-3a6a5c34b1e2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d0e0c22a-ae7a-4716-8220-c23585042c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a36ddaf-56a9-41e0-b881-e2cfd78dae8d",
        "cursor": {
          "ref": "c5021d53-5944-4159-aed9-e8e179713530",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "deee0ae6-d30b-4628-b186-7b4d5719514d"
        },
        "item": {
          "id": "6a36ddaf-56a9-41e0-b881-e2cfd78dae8d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4f3211b7-5232-43ea-906a-1cecdd219f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cc37d4-54df-45bf-8a94-744fb3678f4e",
        "cursor": {
          "ref": "bec10dab-e305-4424-a247-9077c8f42727",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5f84e741-7057-4401-9350-a111de4117db"
        },
        "item": {
          "id": "70cc37d4-54df-45bf-8a94-744fb3678f4e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "12dc7764-af99-49ad-aed4-e783d6798bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2748658-79d3-4546-ac2b-a17712c5b7fe",
        "cursor": {
          "ref": "c90ed51d-c028-44f1-92de-c0ac19251386",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5d51e8a3-8d45-401a-b900-c00ddba7d60b"
        },
        "item": {
          "id": "c2748658-79d3-4546-ac2b-a17712c5b7fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b573d7e9-a740-42f3-9696-c36944a1ce77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f755c57f-7837-4547-b768-b515a4dc17a8",
        "cursor": {
          "ref": "6c8e615d-53a5-454a-b17c-2fdc555c7f14",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d8086d76-7c48-4a12-8e85-3f14ad9f46da"
        },
        "item": {
          "id": "f755c57f-7837-4547-b768-b515a4dc17a8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bc47d83f-bc8b-4d3e-8bd9-49a423879a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5155fe-4c6a-4ca0-a9b5-6f0184a100fb",
        "cursor": {
          "ref": "a42d5110-75da-48e6-ace5-1007afdf7ae7",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1e9d9f1f-9e13-41a7-bb2d-e85320f415c2"
        },
        "item": {
          "id": "8a5155fe-4c6a-4ca0-a9b5-6f0184a100fb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0cdc12fc-dad1-4439-9694-f0e3cdc85b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcfb21d-e0b5-4e34-b816-524b4fb466fb",
        "cursor": {
          "ref": "6efdd1d8-5ecf-4d9a-9305-f7210d6d150a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "769eeefb-d51f-48f3-a72a-9089f89edfd9"
        },
        "item": {
          "id": "cfcfb21d-e0b5-4e34-b816-524b4fb466fb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "78f51f65-af3f-4537-9a43-e0f7b314c0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5e7a11-16f7-42b5-aec3-7ac51a941ddf",
        "cursor": {
          "ref": "22251fae-9a36-4e83-8bba-d682c9f69052",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ffbb5429-6825-4925-a31f-cf001b99ea8f"
        },
        "item": {
          "id": "cd5e7a11-16f7-42b5-aec3-7ac51a941ddf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b759cc72-4e17-44b7-9e48-e9229fedfab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de25ff90-a008-4248-856a-86d5ba0ea1ed",
        "cursor": {
          "ref": "6e074bbb-ad54-4d3a-8643-e26904de5315",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f2104b58-c828-4901-91bd-d44b35841b26"
        },
        "item": {
          "id": "de25ff90-a008-4248-856a-86d5ba0ea1ed",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d69eab03-e169-442b-81b8-ce8043614f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e94ba2d-e6ea-4ca7-9bc6-3110206c5096",
        "cursor": {
          "ref": "5525ca53-8a2d-45c5-a3ac-ed3c536aff75",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e66a9b94-8586-4df0-acf0-bb0483421057"
        },
        "item": {
          "id": "0e94ba2d-e6ea-4ca7-9bc6-3110206c5096",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "439aeddf-43d3-4438-9a38-c1404be3c0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b46135-8065-43f5-b05b-79c94e260995",
        "cursor": {
          "ref": "5e996ba3-25cf-42ff-99e1-25d757f4f5f0",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "99ccabe2-d0cd-481d-8ca7-70fa8713ac28"
        },
        "item": {
          "id": "d1b46135-8065-43f5-b05b-79c94e260995",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5709380e-9ac3-4222-bd0a-3ae110fc8676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991dabb8-2d89-40d0-a1fc-860ed1df07f5",
        "cursor": {
          "ref": "a11163eb-e1db-4317-a5db-40fd78c1dfbd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2b73d3eb-f09a-4da6-bb3c-dfd422f70111"
        },
        "item": {
          "id": "991dabb8-2d89-40d0-a1fc-860ed1df07f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6ad16491-ed1e-4f83-adea-d8c2c7b49d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ea8a0a-9a0b-402d-9f3f-a6c084e3dc4e",
        "cursor": {
          "ref": "545b2e8b-cd8b-4acd-80e3-ace593b7eb2a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4f03dbb4-d916-4f4b-92f1-06612a0458d1"
        },
        "item": {
          "id": "19ea8a0a-9a0b-402d-9f3f-a6c084e3dc4e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f12140e5-2b33-44e6-bc3c-a40d6020b064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c247e14f-03aa-4af3-8609-748f33f1d2fc",
        "cursor": {
          "ref": "e666d033-0785-4256-b2e9-4b8f553e7958",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1ffe5883-9d86-409a-b84b-d37f45088f00"
        },
        "item": {
          "id": "c247e14f-03aa-4af3-8609-748f33f1d2fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "799e4631-5d4e-40e7-9e86-37d26a3db333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbd6b4f-0ed1-4e99-8dbe-5a356e2ccfce",
        "cursor": {
          "ref": "9379b369-46d6-46ac-9684-690175584ec6",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8ec40079-732c-44fd-806a-8ced003a6321"
        },
        "item": {
          "id": "fbbd6b4f-0ed1-4e99-8dbe-5a356e2ccfce",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7e70fa52-e911-4120-a50d-fe74112d106b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cad02ee-a585-4942-a47c-99a3b4494339",
        "cursor": {
          "ref": "a6b03903-b1c1-4bf1-b432-e04e02c00e1d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "22133e3b-123a-4048-a53e-5d76892fee0b"
        },
        "item": {
          "id": "3cad02ee-a585-4942-a47c-99a3b4494339",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6405292a-d10d-4346-a01e-637d1a1bc5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38251185-9be4-4148-9da5-3fe91716a3cd",
        "cursor": {
          "ref": "7512fe6a-329b-4887-85fd-fb54cc331c95",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e8dfddd3-635f-44cc-8e37-1bb26a161a84"
        },
        "item": {
          "id": "38251185-9be4-4148-9da5-3fe91716a3cd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "da1852a6-0591-40a2-b352-cd456954bd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c97be8b-8256-4a88-8b3c-fe6f2b1ee911",
        "cursor": {
          "ref": "4b6b252b-4176-4c5c-8e41-b4317128ee53",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5f6bd324-f601-4c1b-89c0-4a3bfbf40aa5"
        },
        "item": {
          "id": "2c97be8b-8256-4a88-8b3c-fe6f2b1ee911",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "278b7543-8717-4c5e-b0d8-145f32e1d128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661b668c-f553-438e-b826-a23599781b9e",
        "cursor": {
          "ref": "028d5279-66e9-4835-b0f7-0be988b40424",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4da69b40-ad37-4cee-9a12-4def6fb101fa"
        },
        "item": {
          "id": "661b668c-f553-438e-b826-a23599781b9e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2ecde8bd-0824-40a7-8840-5b8f11bd2cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba42278-efb6-4481-a29f-538fc9ad55b0",
        "cursor": {
          "ref": "0f112c6b-7d82-4c4e-b197-42a5fd80ef8f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f32944a2-84f6-4bc1-8be7-ca8f2f577824"
        },
        "item": {
          "id": "aba42278-efb6-4481-a29f-538fc9ad55b0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6ddb6c0c-534a-42da-a0af-2949c58cd584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0720b8dd-53f1-4af2-84ea-86355582a29b",
        "cursor": {
          "ref": "ae8930a0-f578-48a2-a300-f103bd2bf3df",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7d702e7e-8463-4d1d-8c31-7e72f7ab3248"
        },
        "item": {
          "id": "0720b8dd-53f1-4af2-84ea-86355582a29b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f0c618c-b06c-4a2f-a52c-1d7ac31e1880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c091a1f-23c8-47f9-9777-7ecbd6ab1b70",
        "cursor": {
          "ref": "02ec8c72-ce04-409c-a392-33bda6cf4406",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "427bcf22-caca-4f51-8da6-419e20aa4e44"
        },
        "item": {
          "id": "2c091a1f-23c8-47f9-9777-7ecbd6ab1b70",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "435b68d2-2ac2-45be-9341-5e18e5ba4d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c6f61a-c08d-496a-82bb-c2dadf346317",
        "cursor": {
          "ref": "db7745d8-e06b-43c4-a971-704247c1692b",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cd14b3ab-3bc9-4455-9015-a84dc90be125"
        },
        "item": {
          "id": "b9c6f61a-c08d-496a-82bb-c2dadf346317",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "45cc4eeb-4155-4fd7-8a2b-a90b991cd457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09a90a9-41c2-45b0-b3df-df516a11d62f",
        "cursor": {
          "ref": "89aa702f-f7fe-4afa-9d0b-e1c9123d7b36",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a34e5760-e7ed-463d-b329-f062e62958b5"
        },
        "item": {
          "id": "c09a90a9-41c2-45b0-b3df-df516a11d62f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1a47c003-86f7-4ece-9a53-1e31e2681b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf7cb57-a327-42c8-94ab-c7d8e472e15d",
        "cursor": {
          "ref": "0edfd078-f0c4-4504-ae39-6261832ec44e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9975d51e-89a4-418e-9596-c1de6cba9454"
        },
        "item": {
          "id": "cdf7cb57-a327-42c8-94ab-c7d8e472e15d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "31040b87-7456-4230-8eb6-f11d5aec4f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4431f6-6bfe-41e9-94e3-c31df78712ec",
        "cursor": {
          "ref": "62167082-75d0-4ee9-92aa-8d53af59863f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d81a4f9c-0719-4821-9bf9-f66863b60c24"
        },
        "item": {
          "id": "0c4431f6-6bfe-41e9-94e3-c31df78712ec",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5607aa7d-df49-451b-8ccc-a54417920631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704a9663-899e-425d-a59b-1421e162da3b",
        "cursor": {
          "ref": "afae188f-5809-487f-afdc-29a1b089f173",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b4da6b8f-2a7e-4a52-93de-3b2134b05452"
        },
        "item": {
          "id": "704a9663-899e-425d-a59b-1421e162da3b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b97ba048-ed92-4fae-a36c-c264133138f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109fa1a4-08cc-4319-b56c-f60165b89c05",
        "cursor": {
          "ref": "5c5d0df3-8568-40ab-929d-ec7d3d48c308",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f48551c1-95d1-4314-b882-c1976945973c"
        },
        "item": {
          "id": "109fa1a4-08cc-4319-b56c-f60165b89c05",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9af42c71-351c-461c-b650-db5ce98fb681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5235b53d-e2a0-45d6-9f71-2d800650b1eb",
        "cursor": {
          "ref": "681b0bfa-7e42-4d89-93c9-572198588eda",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "68c93ec6-8b65-4b09-9d6b-8d2c680bd389"
        },
        "item": {
          "id": "5235b53d-e2a0-45d6-9f71-2d800650b1eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8464210d-45c1-454a-9803-b97a96132d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb007d5-4c60-459a-8db1-ec1cdffba5c5",
        "cursor": {
          "ref": "a8d52792-325b-4e99-a0a2-ce5d97f5af53",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "993eda5e-85a4-4d77-b7dd-f63ccb337cda"
        },
        "item": {
          "id": "7eb007d5-4c60-459a-8db1-ec1cdffba5c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "837abda1-6473-4975-b2c7-0d12064e0301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29846f74-c6be-40ef-ad1d-44c26c93b120",
        "cursor": {
          "ref": "0597e1cc-4aee-4cd0-9cb2-051edccae5eb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "411ae38d-7e45-489b-ad85-95c2907ad37a"
        },
        "item": {
          "id": "29846f74-c6be-40ef-ad1d-44c26c93b120",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e454e41-5d1f-42a7-a4a1-1465259a42b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66c8b52-bce1-464f-8c60-e8bc8a08a1cb",
        "cursor": {
          "ref": "e0d1e3c3-c78e-4468-adbe-48ddb60b92fd",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "73f2d6db-bbfc-4921-b1e9-9cf366eaac33"
        },
        "item": {
          "id": "f66c8b52-bce1-464f-8c60-e8bc8a08a1cb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2cdf61c1-dea8-4e38-9130-4dcf43ce442f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae2bcaf-6678-495a-91b6-1db4d505604f",
        "cursor": {
          "ref": "c736af37-99a3-434e-ae59-fb48c11079aa",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8f6ffca6-8197-4a94-bbd0-4095a5605d68"
        },
        "item": {
          "id": "eae2bcaf-6678-495a-91b6-1db4d505604f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "caaeb4ac-3b1c-46b1-b428-b2a2356b1286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6873092-a75d-4a8f-903d-a57b7e6fec53",
        "cursor": {
          "ref": "66e8412b-d2cd-4ee0-a358-cedef0055237",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ca725f17-de0f-4fc7-b72a-ed7e18d9a4d0"
        },
        "item": {
          "id": "d6873092-a75d-4a8f-903d-a57b7e6fec53",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "72b7eca7-9fc5-4aa8-8348-5a0fe5df970c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d5817a-c847-4627-a3fa-f437ea1f113d",
        "cursor": {
          "ref": "8621d7e0-6631-47c9-b694-6978ad699f47",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "647ae166-0e43-413f-9a5d-502b56f234cd"
        },
        "item": {
          "id": "a5d5817a-c847-4627-a3fa-f437ea1f113d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5c06320c-eb0f-419c-a8e9-44917ac239ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb48a476-ec13-4588-9cb9-682bac0c9906",
        "cursor": {
          "ref": "8dff9f25-435a-439a-b401-ebba2b9c1791",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0d9f0b89-ba81-4616-96e2-35791ab73e92"
        },
        "item": {
          "id": "bb48a476-ec13-4588-9cb9-682bac0c9906",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aa21641a-24d7-4a2d-80d7-b3f3c472dc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3fba82e-9e14-4fee-9b69-f0574b3e4c9f",
        "cursor": {
          "ref": "591a7bc3-3991-46ad-babe-6523b81d584a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7a483631-f77a-4505-87ef-9639cbcb3158"
        },
        "item": {
          "id": "e3fba82e-9e14-4fee-9b69-f0574b3e4c9f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bd39e13d-8518-4e64-a228-766f17be419e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d4852f-e903-4b30-9c64-e003d1d4bcf9",
        "cursor": {
          "ref": "6cd7a4a8-f130-48de-b898-42e5faf58248",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4a8b2cad-8bd3-4265-8368-d5ac37423e8f"
        },
        "item": {
          "id": "c0d4852f-e903-4b30-9c64-e003d1d4bcf9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6f6eaad7-6cfc-447a-8c5a-8615d96dd4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201ef83d-6835-4175-9e56-2881538c4fbf",
        "cursor": {
          "ref": "da292531-87ba-4d3c-b041-5eb0e7df09dc",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "77c1235e-3571-4a0c-bf57-f2fea6b19463"
        },
        "item": {
          "id": "201ef83d-6835-4175-9e56-2881538c4fbf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a65a186e-cc81-457b-b1a0-12fbe5a77ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a973f3-91df-4439-bb55-e0b882dd36c2",
        "cursor": {
          "ref": "0d2ea082-0a95-474b-88d5-703847f421ee",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0ef25c06-9c8a-402e-8832-0b336c950ed4"
        },
        "item": {
          "id": "64a973f3-91df-4439-bb55-e0b882dd36c2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9a4ef350-f835-4e9b-9440-fc06a5ed8e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df77d51f-889b-4c4c-9336-739dcf3c6dbf",
        "cursor": {
          "ref": "bf8ecbaf-1409-4224-a741-bd880ed01867",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eef3e1ff-3c5d-49d0-ae31-37ae1d7cefea"
        },
        "item": {
          "id": "df77d51f-889b-4c4c-9336-739dcf3c6dbf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "402974b7-caa8-4604-9bd9-b1aa3ff0184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25a0e48-e3a5-4feb-b063-877be338e51e",
        "cursor": {
          "ref": "13a14acc-f37c-4937-863b-555620d20620",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "48929f1f-edb4-48a1-b15f-ea6756700c8d"
        },
        "item": {
          "id": "f25a0e48-e3a5-4feb-b063-877be338e51e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "286a66c7-8e8e-4dd2-b3ff-f08b3d81f3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c79ed64-feeb-413b-8461-273a4bc326ea",
        "cursor": {
          "ref": "0f39ea90-d45b-4d67-b41d-70f09a1d43e4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4342a043-26e4-4280-8837-7d3f9d0ef897"
        },
        "item": {
          "id": "9c79ed64-feeb-413b-8461-273a4bc326ea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "791ad204-e47e-4ed5-9e62-b94c982af78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b96d9b-5d46-4f2b-9b5e-ddc39e9332ff",
        "cursor": {
          "ref": "1ae9f38e-9df5-4501-999a-1258a8c674c2",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a1645db4-39f8-46d3-b168-987b155e548a"
        },
        "item": {
          "id": "a3b96d9b-5d46-4f2b-9b5e-ddc39e9332ff",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b4275a57-55d1-4c54-bc7a-25a4c984d0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749c1d1c-b3ae-4606-af6b-c1dbb408446d",
        "cursor": {
          "ref": "0ba2703e-43f5-4566-9356-d095c609f338",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b8a3845c-50d2-45d4-92ff-c8da26c53dda"
        },
        "item": {
          "id": "749c1d1c-b3ae-4606-af6b-c1dbb408446d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1362ffdb-409e-496e-9bd8-620e62085bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232f67f6-e10e-44b4-bda7-2c569faedbb3",
        "cursor": {
          "ref": "9aba849f-159e-4515-9f3e-967fbc295103",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "35aaf998-a3ec-4afa-bdb2-af3f1c4fda89"
        },
        "item": {
          "id": "232f67f6-e10e-44b4-bda7-2c569faedbb3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f7f2ffeb-e38d-487c-a6b4-50a4017d5c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7c954c-f19f-428b-bec4-395750da0c22",
        "cursor": {
          "ref": "c6a8401a-9f24-4f62-bb4e-bda915ec706b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf89940c-d9f8-45bf-bd05-c01b6119bb80"
        },
        "item": {
          "id": "7c7c954c-f19f-428b-bec4-395750da0c22",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "56400ec2-1e71-498c-bd9e-c2016f9654b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a1502a-f9fa-4070-a6d6-7b68406eaec1",
        "cursor": {
          "ref": "f151c3fc-6cd5-4643-9953-ae313cf74017",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9dbd8e4a-749d-432a-9041-50dba3d908e8"
        },
        "item": {
          "id": "68a1502a-f9fa-4070-a6d6-7b68406eaec1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9cf935bc-1927-4c75-868b-eae25ea8487a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45aacbdb-3d1b-4987-af1f-2d522d97efa6",
        "cursor": {
          "ref": "dd112b1e-45a2-44ac-b10e-b9a1a42fbbd5",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5e8d36c4-7f2a-44c1-86fc-e8cc7dd55b81"
        },
        "item": {
          "id": "45aacbdb-3d1b-4987-af1f-2d522d97efa6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "38a81646-7866-4be4-8427-a1fb2e5560ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0e4263-ea8f-4b64-bb3f-d130687c439b",
        "cursor": {
          "ref": "41a3256e-8fc1-4522-8bff-76476048e935",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0c8090d8-4486-4df4-8bb9-1bf77eec3f26"
        },
        "item": {
          "id": "3e0e4263-ea8f-4b64-bb3f-d130687c439b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "53f0d094-08a5-440d-8e63-2c4b15d2c977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c17f4a0-1a46-412f-aeae-bdc63df89396",
        "cursor": {
          "ref": "cb91fe43-ef02-4c07-8f25-4b895b86b277",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4bb15ddc-a766-41ad-8f7a-c82b5f0e7730"
        },
        "item": {
          "id": "9c17f4a0-1a46-412f-aeae-bdc63df89396",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1ded64e6-bbf8-44c2-afc1-e8fb54ff8e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd210b7-0eb0-4b63-830f-4d137c5d2abc",
        "cursor": {
          "ref": "b75801c0-41ad-4833-98ed-dac87fc6dcc3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d83e543-c796-4665-a423-155da0112cec"
        },
        "item": {
          "id": "7bd210b7-0eb0-4b63-830f-4d137c5d2abc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "39273dbe-ad19-4b97-98a2-4480e291d51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238a9f34-1c04-4782-90fd-a23330259840",
        "cursor": {
          "ref": "bd51457a-0f37-4175-a748-3383f71541ab",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ec6c58d7-0d75-4b2f-8de9-e6874f65112c"
        },
        "item": {
          "id": "238a9f34-1c04-4782-90fd-a23330259840",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "abe3e44f-eeec-40d5-9dad-b00495f8158d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f8e64e-c172-4f13-9241-a4b9d1d4d38e",
        "cursor": {
          "ref": "3b75332d-cbcb-4987-8489-e933de02da22",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e59d7ba8-2424-41b5-946b-5c60a1b47025"
        },
        "item": {
          "id": "f9f8e64e-c172-4f13-9241-a4b9d1d4d38e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a09aac0b-881a-4cb8-9b7b-3d1b5545c739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ab1923-f438-46b2-a8cd-b4cd6953bbb5",
        "cursor": {
          "ref": "f9d69cd2-0c74-4fa9-9158-8ba8a2de3150",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e8aa1a66-23d3-4caa-95fa-35196a9edecc"
        },
        "item": {
          "id": "84ab1923-f438-46b2-a8cd-b4cd6953bbb5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1f0747f4-bdfa-4a0e-b3bc-f9486ad9b391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fb000e-78f7-4241-8019-1714e18cda9d",
        "cursor": {
          "ref": "9ccee542-ab05-49e8-b39a-934c1be6226d",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e2fb9ad6-2f0e-42a5-a036-f24f38ad3ae6"
        },
        "item": {
          "id": "01fb000e-78f7-4241-8019-1714e18cda9d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a308e1a6-6aa9-4899-9970-4a21da950bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93090c8a-f545-4679-bc28-cccd1253fa01",
        "cursor": {
          "ref": "185eeb69-950e-4d90-9955-08ba2ddaf9f3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ae6f2b11-b96a-4a93-a17e-d46263759565"
        },
        "item": {
          "id": "93090c8a-f545-4679-bc28-cccd1253fa01",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3fbed412-5b64-49d5-a8dc-f73c8d28fb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86991a46-4580-4403-b6ab-0423799a884d",
        "cursor": {
          "ref": "8c2fc975-b23e-447a-894c-e7697d27a71a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1bbecf68-6ba1-42d8-8a44-19d65031f6b2"
        },
        "item": {
          "id": "86991a46-4580-4403-b6ab-0423799a884d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bf5e8de7-a84c-4a32-925f-0f410837b2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1a1f7a-9748-4c5f-81ce-b4ab2897254b",
        "cursor": {
          "ref": "da7e07df-c960-42b5-a990-4a26d3199e7b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73e02d02-1dea-409a-a2eb-c6631341b898"
        },
        "item": {
          "id": "9c1a1f7a-9748-4c5f-81ce-b4ab2897254b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5db19380-507a-4b7a-b067-051fd5d33058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06928076-a582-497c-9959-59a1c8621738",
        "cursor": {
          "ref": "19ba88d0-62b1-47be-b4f9-a4b51c8f25b5",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0fa6fbaf-f71a-4619-b2dd-318e8481d972"
        },
        "item": {
          "id": "06928076-a582-497c-9959-59a1c8621738",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "77e74871-f8bb-4bf9-a1f6-602eee9420e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150d6339-3e3a-404a-bbc3-fcfd49c94fcf",
        "cursor": {
          "ref": "6d6fffb9-6ccb-4616-a9c8-9a9bb806d268",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c7aa7b9f-a8d7-4ccf-850d-0eb1ba25d43e"
        },
        "item": {
          "id": "150d6339-3e3a-404a-bbc3-fcfd49c94fcf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "baf28af7-19fa-45ae-b906-1771058f2585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cabcf9-7761-4abf-861d-91158d5bccb9",
        "cursor": {
          "ref": "b8e01148-8edb-4387-b748-8174dc5b8962",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4d4b5c9c-ace6-4a38-b786-acdc7f80d86b"
        },
        "item": {
          "id": "09cabcf9-7761-4abf-861d-91158d5bccb9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f07127ec-5d33-4ae1-bdbb-bc9192b630b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e991c1f5-0eb2-446b-a475-c0756c827075",
        "cursor": {
          "ref": "86ea09ce-f4aa-4442-bfbf-cdfe97c6e319",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4fb3b3fa-7abc-4ae9-a06e-3f1585fe3d29"
        },
        "item": {
          "id": "e991c1f5-0eb2-446b-a475-c0756c827075",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "70575ede-65c9-4cb2-9f00-c26a431afb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e954c77-7c7d-4858-bbde-9d8b1b34e4da",
        "cursor": {
          "ref": "b95d8fea-3204-4bfd-8182-3c6752850f93",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "65cc5656-2201-4bb6-b9fc-9a02185a80b2"
        },
        "item": {
          "id": "6e954c77-7c7d-4858-bbde-9d8b1b34e4da",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "01249921-2f44-43d6-a1d6-feb703e14c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c1ef0e-6c46-48c8-bed1-721a166f8d08",
        "cursor": {
          "ref": "2a51e30c-f18e-4e07-b4a3-91aec08cc487",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1c12b9e0-f42e-4137-ad91-5e2648611795"
        },
        "item": {
          "id": "58c1ef0e-6c46-48c8-bed1-721a166f8d08",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7f6aa90e-34ff-4b1c-b7fd-1d6bb69ad94f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3464d58-b30d-4853-87ca-cc14d0c27d99",
        "cursor": {
          "ref": "e0a302e5-43c5-4435-8961-4c923c2e36cb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3476384d-94da-4313-84c6-2de4d941d527"
        },
        "item": {
          "id": "e3464d58-b30d-4853-87ca-cc14d0c27d99",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c918f26-ee8d-43c9-8527-6f70bec77ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff559f6b-f157-4832-a476-4a72fa385122",
        "cursor": {
          "ref": "31ebe914-4946-43f0-9a03-cbefbc6338bb",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e5bf7456-8b9e-404b-826b-91c357228a44"
        },
        "item": {
          "id": "ff559f6b-f157-4832-a476-4a72fa385122",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6743e1d8-4c72-413f-a3d2-310183fd12c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41c155b-847c-4e6b-9647-ca07c8822415",
        "cursor": {
          "ref": "9db672dd-6c11-480a-8bdd-5700c83db411",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3b5c4416-cd2e-4774-9cf9-a141f07f6fac"
        },
        "item": {
          "id": "d41c155b-847c-4e6b-9647-ca07c8822415",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a999a115-8010-4284-a941-6e0cbb7c0d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88e458b-67a3-491e-9b7c-862da12453a4",
        "cursor": {
          "ref": "e826be4f-34ec-4eec-89bb-ddb0e3eca761",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0b93bdc4-2c12-4aa5-8f39-2e4eadd1b7d2"
        },
        "item": {
          "id": "b88e458b-67a3-491e-9b7c-862da12453a4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ab34d51d-409f-4ea2-80c3-5d9cf3a473b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6e0db2-0de6-4f44-9af1-371c94d67327",
        "cursor": {
          "ref": "2e9a15c9-192e-47e4-8710-36f586425637",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4e211cd4-854d-4e1d-8cb3-8a227f72487e"
        },
        "item": {
          "id": "8b6e0db2-0de6-4f44-9af1-371c94d67327",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "217d9f2e-d817-4d22-9205-9e76185605be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7136dd52-7c4f-4c9b-95bd-ab6d565ced1b",
        "cursor": {
          "ref": "406c36f5-3a3b-4d52-99f5-83a2a9ff1509",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "610dccce-df1e-4078-955e-68cd636ec8fc"
        },
        "item": {
          "id": "7136dd52-7c4f-4c9b-95bd-ab6d565ced1b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3202014f-a807-44d2-9935-e96c12a1fbe0",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d114ead1-e3fb-4627-829d-2d1975971385",
        "cursor": {
          "ref": "00a1e2b2-3f6d-4514-8fd0-fc36752bb891",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d5171ade-c458-43c1-a280-f26d98e6cff0"
        },
        "item": {
          "id": "d114ead1-e3fb-4627-829d-2d1975971385",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "66e4ded5-8311-49df-87ce-500d5f57eaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224fcf3c-b4ee-4af4-ade1-35da714a6281",
        "cursor": {
          "ref": "78692dbe-451f-489b-bbd7-dc8b826f0e65",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a2c8c54a-da69-4cbe-b218-bc0af327588a"
        },
        "item": {
          "id": "224fcf3c-b4ee-4af4-ade1-35da714a6281",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6a2c3dbe-ea1a-40a2-8787-df1d9d60af54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aea6bc8-d5f3-4065-8728-898b1a2fda5a",
        "cursor": {
          "ref": "13b71461-a2b7-4aa9-9a9d-0718280a5f8f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5d24e99e-6f35-46b8-8ee7-00786cc8ed85"
        },
        "item": {
          "id": "8aea6bc8-d5f3-4065-8728-898b1a2fda5a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fdc8b912-11e1-49be-8768-8bef929ad46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0f4cff-4df6-4c5d-8f16-441a6920af3e",
        "cursor": {
          "ref": "d1583910-6cbc-44c9-81c7-101c3f620b46",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "85b55530-6a22-4c34-bc0b-3ada6e8bffe6"
        },
        "item": {
          "id": "6d0f4cff-4df6-4c5d-8f16-441a6920af3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3135965f-5fb2-44b1-9170-32dad4ce3b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b381ce65-d015-475e-b6f4-bf91145e55e9",
        "cursor": {
          "ref": "a3c1d6c8-ec1b-415a-b8b2-a25763e1e4aa",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e6757289-f8c7-41aa-92d4-6521bf5cfc87"
        },
        "item": {
          "id": "b381ce65-d015-475e-b6f4-bf91145e55e9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "da86a9f5-a32c-4a73-880e-58d29e0d34ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec018fab-7cd9-453f-a217-77a06bd54b7c",
        "cursor": {
          "ref": "24333514-6ad0-48d1-b07b-dd3d2cf979b6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "868227e6-7ea0-4bec-b570-0a1d4d5abddc"
        },
        "item": {
          "id": "ec018fab-7cd9-453f-a217-77a06bd54b7c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dd052362-f9f5-419b-8fd2-8384860382ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f82189-6d1e-4dac-af7c-a1e8217bf48c",
        "cursor": {
          "ref": "ce833301-beb7-45c5-957c-17dba62d20eb",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2145f12b-c3ab-4d12-893e-73242b663d91"
        },
        "item": {
          "id": "43f82189-6d1e-4dac-af7c-a1e8217bf48c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "96562f8d-479b-41d9-862f-c7e0ecf926e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b619e85-01bb-44f7-bf2e-c7c439f8cc4c",
        "cursor": {
          "ref": "dbdd6620-9d8e-43aa-a99c-a37ba161d607",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c5305225-0014-4765-b5df-d869bfd86049"
        },
        "item": {
          "id": "6b619e85-01bb-44f7-bf2e-c7c439f8cc4c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "677ade95-673e-4f23-b9ff-d9df0d18b4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8339047c-700b-4207-837f-ce855cb8b179",
        "cursor": {
          "ref": "69b7f755-5455-4d57-98a0-92ca72312f35",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4ecaf52c-e4c6-46a5-8692-4a1b2172639c"
        },
        "item": {
          "id": "8339047c-700b-4207-837f-ce855cb8b179",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e0de2f2e-f3ef-4ff6-a69e-6fdfd7be9044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbd323f-2ebc-4c1f-8bae-8a4923880395",
        "cursor": {
          "ref": "ec9b269a-6d8f-47c1-aadf-bb196119d644",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d1c069c9-4dfa-44ac-b57b-7124195bc392"
        },
        "item": {
          "id": "3cbd323f-2ebc-4c1f-8bae-8a4923880395",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e2f0e24d-8bdb-46c6-a4f4-ab12d7d9f2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1958f226-b26b-4aea-b7af-368dbb56ff2e",
        "cursor": {
          "ref": "710d2371-fdb4-4229-bf83-339bc31399cf",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2c5f7b83-b632-44c4-ba4c-84562b6878d2"
        },
        "item": {
          "id": "1958f226-b26b-4aea-b7af-368dbb56ff2e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f5d47639-f258-4ea1-bba0-7462263a131d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbfdc05-47bf-4020-be36-898eed716d0f",
        "cursor": {
          "ref": "fb2a8b58-75a1-4b06-8e38-a98c5e66c8c4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "de09da3d-3728-4cf7-9fdc-bca49ef3c7e5"
        },
        "item": {
          "id": "9cbfdc05-47bf-4020-be36-898eed716d0f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a1ace51b-f03f-4acf-adc0-8d41dd89d093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09edf2c-0848-46b7-a252-ce46975b8634",
        "cursor": {
          "ref": "dd6280d3-af69-47db-8bb3-e19f6fde878d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3db03e8f-cfe8-4779-b924-1be99b6a84e1"
        },
        "item": {
          "id": "b09edf2c-0848-46b7-a252-ce46975b8634",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "890b6a94-577c-4961-b77f-e61a1936968b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031685f4-7f25-4fcc-81e5-d9cb896958af",
        "cursor": {
          "ref": "fab52e7f-5545-4961-ac22-088392e58b65",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2413164b-eee0-4b9f-85e6-a4cd9ef9b5b8"
        },
        "item": {
          "id": "031685f4-7f25-4fcc-81e5-d9cb896958af",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "adea9aa1-9dec-43a8-9b65-7a33b2fa7414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce4f2b1-20ec-476e-bd38-e2e851dd07ee",
        "cursor": {
          "ref": "5ef0e04e-5c64-4a55-bac5-6ea4e3b7fae2",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "af6af5a3-bee9-4838-9176-ae2466992814"
        },
        "item": {
          "id": "1ce4f2b1-20ec-476e-bd38-e2e851dd07ee",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ebc026e2-7a97-4795-a1bd-30fea4d6b1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593761c9-cba9-4f2f-8775-9245faada3ed",
        "cursor": {
          "ref": "7ab008bb-cb21-4d90-a105-0da863e9995a",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5272fc4e-51a6-4e5a-b498-ac861bb359af"
        },
        "item": {
          "id": "593761c9-cba9-4f2f-8775-9245faada3ed",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "19a446c0-462c-4281-bc24-6b4a5b94c818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24e19ca-372c-41e9-a478-09226d9f0a45",
        "cursor": {
          "ref": "9ea409f9-2540-4904-89f7-c12a0e5dba6d",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a340231d-c2c2-4969-850f-dae1f7d09afc"
        },
        "item": {
          "id": "c24e19ca-372c-41e9-a478-09226d9f0a45",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7a9c16d1-90d2-4034-9a57-3af0d2f411d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf44d2a9-da31-471d-bb2b-dfea6d4518ef",
        "cursor": {
          "ref": "239ee8cb-77aa-4ede-9369-2b90639b1298",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a4681e70-7682-4d91-972c-1183407f01ed"
        },
        "item": {
          "id": "cf44d2a9-da31-471d-bb2b-dfea6d4518ef",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e360d23c-5df3-4f83-a132-d44889781b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdd2db3-e627-49ef-af34-8967c4c55644",
        "cursor": {
          "ref": "903c8643-85ab-48d8-83db-8e2bcf71df8e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a20a0274-46ef-4d4b-83e3-4105b09336d0"
        },
        "item": {
          "id": "0fdd2db3-e627-49ef-af34-8967c4c55644",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f6b00115-8f4d-4bb1-84c5-451a7814bef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087b76f2-c70a-4309-a05c-8a877d301c10",
        "cursor": {
          "ref": "0db47306-c1ad-4e3f-bd43-fb27a22cf992",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b605eb70-0850-4476-8ee1-9f23786b0870"
        },
        "item": {
          "id": "087b76f2-c70a-4309-a05c-8a877d301c10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "70c39449-3e9d-45ed-bc89-f6df2170c98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d122da-bf1b-4de2-834e-a613971353ff",
        "cursor": {
          "ref": "ca8b7b54-0949-43b9-b85b-7bf614017a5d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "25ac6b14-687b-4127-ae69-74c57276e690"
        },
        "item": {
          "id": "d2d122da-bf1b-4de2-834e-a613971353ff",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ee2e4d89-f08c-48d2-af1b-2fe1a5bed93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d6abe4-f1fa-46ee-8ea0-d6586fe8ea2d",
        "cursor": {
          "ref": "aa7794a1-ef25-4406-b1a9-c4102db35276",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bee7355b-a6db-4601-9270-c1b9b59f5aea"
        },
        "item": {
          "id": "04d6abe4-f1fa-46ee-8ea0-d6586fe8ea2d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "844cd2a6-9955-4414-a305-37dee2c1f57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cc539d-92f7-4bd8-aa2e-098945a5dd8d",
        "cursor": {
          "ref": "841aa501-405e-42ac-80a7-5a6fc3cefb32",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a6203f22-c45c-425d-93c4-30f06a133fce"
        },
        "item": {
          "id": "65cc539d-92f7-4bd8-aa2e-098945a5dd8d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5e717c2f-28ba-47ad-a57f-2d22db7ed0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9f1c33-9d30-4d36-8d1c-d3361c65e09a",
        "cursor": {
          "ref": "9d64ac1b-3ceb-408c-936c-3c7e85c29126",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53cc01cd-1979-4002-9fdb-89bc0a897cdc"
        },
        "item": {
          "id": "ce9f1c33-9d30-4d36-8d1c-d3361c65e09a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8049445c-c70f-4f58-afdb-34663cfbe33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad0e02-d75d-4ce4-9e8a-d60b9f39682e",
        "cursor": {
          "ref": "62caa12c-0960-4b14-afea-2dcf1e78a9f9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "29351448-30c5-4094-adea-8a7fcd641275"
        },
        "item": {
          "id": "16ad0e02-d75d-4ce4-9e8a-d60b9f39682e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4f583bad-1ba9-467a-90dc-2f8cf9393c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd97ab46-5e78-417b-b96b-53762ffa5e89",
        "cursor": {
          "ref": "6daa8771-e62c-4d40-824e-471e96e1c93a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "98f1fe9f-702b-41e5-ab1d-0d495051251b"
        },
        "item": {
          "id": "dd97ab46-5e78-417b-b96b-53762ffa5e89",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "14cf7ed1-bb03-46e6-b97f-b9538a3b4fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7e1535-b99c-4d13-bfa7-0db663ed299c",
        "cursor": {
          "ref": "c1c51f44-7a53-4e36-bd03-a614f20c6c4e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2a8f4192-ba92-482f-8c28-d8daa76473ec"
        },
        "item": {
          "id": "ec7e1535-b99c-4d13-bfa7-0db663ed299c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "79a5764b-271b-425b-8e04-7c1dee094831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab4212a-ecfb-46f2-8bfc-94b5410c4c70",
        "cursor": {
          "ref": "632bf43d-0fde-46cf-9bb1-a7de12f33838",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "337ad385-82de-443f-8a4e-6ca5ad47e722"
        },
        "item": {
          "id": "4ab4212a-ecfb-46f2-8bfc-94b5410c4c70",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "801fb952-f735-43d4-9722-2adadf84f34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc2f287-b537-47e2-a033-9f5db30dff5e",
        "cursor": {
          "ref": "126b9b53-5789-417c-a66e-46f8ef83e0dc",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b0d0bf06-7417-4f1a-b1f9-7f9011379d8c"
        },
        "item": {
          "id": "3cc2f287-b537-47e2-a033-9f5db30dff5e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fd6524cf-ccdb-47d8-93f7-bdaadc64ba69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c8d382-1a9e-4915-b797-a0c676a09193",
        "cursor": {
          "ref": "1d9ca1ec-abae-4f36-8719-b4a3191fd1fe",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d63b8ebc-53fc-46b9-bbd4-72ab95b3b234"
        },
        "item": {
          "id": "70c8d382-1a9e-4915-b797-a0c676a09193",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24e62d7d-e08e-4b80-b1b5-7c39be3d2001",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f81e9216-ed90-4e4e-8164-1f5b8f8a245e",
        "cursor": {
          "ref": "6505db26-ba08-4811-974f-1f6ff04dafb9",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2f56793b-616d-4441-ae44-7064d118c3c1"
        },
        "item": {
          "id": "f81e9216-ed90-4e4e-8164-1f5b8f8a245e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "707f94c1-9432-4c08-8f69-5ae308f6241d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fa28f03f-6bb3-46db-a044-03d499b300eb",
        "cursor": {
          "ref": "506cb970-0c9a-455a-b3fe-771d97734ded",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3d1d6ed4-9395-4b93-9823-5c4364b98aef"
        },
        "item": {
          "id": "fa28f03f-6bb3-46db-a044-03d499b300eb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f42223ec-4bce-4af6-a63f-3696889c36cc",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "0cc5f042-e4f4-4b1b-9701-5964c538848d",
        "cursor": {
          "ref": "99747ba3-2cdd-4ff0-a515-135845fc3449",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2109ed30-1639-4558-989c-36de13888920"
        },
        "item": {
          "id": "0cc5f042-e4f4-4b1b-9701-5964c538848d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "144c9a90-dc89-4519-a5c0-4a4d2dca7ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8812cbc-8458-4976-9ae0-569f0a85553d",
        "cursor": {
          "ref": "83a48883-5a2c-47aa-a7cd-871860bb1a10",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d68e2d83-b31e-4e5f-a82b-84942a85b2fa"
        },
        "item": {
          "id": "e8812cbc-8458-4976-9ae0-569f0a85553d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ff6ed2da-182b-47c9-b692-104b05f2461d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f39c42b2-39ed-4dc1-a692-c39049a0cbd8",
        "cursor": {
          "ref": "c57c7132-1097-4ba0-9287-042061612ba7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "753be0a7-86b0-4638-aa6a-430dd336f99c"
        },
        "item": {
          "id": "f39c42b2-39ed-4dc1-a692-c39049a0cbd8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "242906eb-93ce-4a75-93b8-4e363b0fe716",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "bf0a92a7-0362-40d0-81d0-d4e06b75a294",
        "cursor": {
          "ref": "a783e1b5-f61a-46cc-80bf-9e98e3209ed3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95d62411-e99c-4727-acf3-09b5b52bd8c3"
        },
        "item": {
          "id": "bf0a92a7-0362-40d0-81d0-d4e06b75a294",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8dabb6e7-ef87-46aa-a7d2-f0a36166fa5a",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "cce6f0e9-4f1a-4a61-bef1-b448477b95b7",
        "cursor": {
          "ref": "b7bd20cc-c50e-473a-b233-64ef4cf364d4",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7511080d-66c3-4656-b7cd-f08ea36dab31"
        },
        "item": {
          "id": "cce6f0e9-4f1a-4a61-bef1-b448477b95b7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d63481c5-9d95-424e-b8c8-fe1bfbd61834",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "afa73a8c-52bf-45b0-b0ce-8820eda5e7ca",
        "cursor": {
          "ref": "2b885387-9c49-4b06-9509-86affb031cc6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b21f15bc-169a-4948-ac1d-3634fdb21047"
        },
        "item": {
          "id": "afa73a8c-52bf-45b0-b0ce-8820eda5e7ca",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b7524f28-e668-4c38-8765-f8f25cfc954c",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b87a6998-8244-4ed9-bc92-e788308c3ece",
        "cursor": {
          "ref": "21b821a7-9580-43a7-b623-bb533c131f50",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cdde0b49-1fb9-4360-a50a-ea66cfe6557c"
        },
        "item": {
          "id": "b87a6998-8244-4ed9-bc92-e788308c3ece",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "02edad97-e7b6-48f1-9074-71617ef92ce3",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "62c4e6dd-fba1-4fd8-9321-d733ca018050",
        "cursor": {
          "ref": "071d5faa-cce0-4978-88ee-84815501a48f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3d3ab5e9-3479-4aba-a997-6561e4cf2a31"
        },
        "item": {
          "id": "62c4e6dd-fba1-4fd8-9321-d733ca018050",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eb03bcfc-4a34-4d11-aba2-86462647a9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8b55e3-5759-4104-92b9-fc09d7b4df41",
        "cursor": {
          "ref": "f112cb61-e858-4c4c-a456-eff103420723",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "67776529-8423-4409-9e4f-1ad779b40b39"
        },
        "item": {
          "id": "2a8b55e3-5759-4104-92b9-fc09d7b4df41",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4e780d0e-a8e6-4fd0-aafd-eba9638e6b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e43a73-df41-47ea-8341-3492a97b48d6",
        "cursor": {
          "ref": "7c1506a7-9506-4bd3-b90b-9356e1d25d2e",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "85d4b236-3ad0-4df8-83da-5255f2ffce20"
        },
        "item": {
          "id": "61e43a73-df41-47ea-8341-3492a97b48d6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "89964867-f619-43a7-b59e-c0b042bbcc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbd766b-6fd4-45fb-ad4c-fd38778835de",
        "cursor": {
          "ref": "7e12ba49-40b6-4192-b406-69e23af9c3ef",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "06e0ddbd-510a-47d9-b889-5a7828380a25"
        },
        "item": {
          "id": "0cbd766b-6fd4-45fb-ad4c-fd38778835de",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e49f07a9-1e0d-4e32-8ad4-d873fb56d206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fac9e0-1394-4123-b50b-458800d3bc8b",
        "cursor": {
          "ref": "910c8150-9e3c-495f-a270-d773aa85ca33",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12d0a58b-3199-48c7-9057-5675d50997de"
        },
        "item": {
          "id": "45fac9e0-1394-4123-b50b-458800d3bc8b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "36cb2cec-9f1f-47ce-9092-b3e2e3720740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e6d86e-2b6c-48c5-8eeb-00f707e6025a",
        "cursor": {
          "ref": "d1539232-ecec-4cff-ab6d-43f30f155306",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "846a1db0-9aa6-4a4f-bd96-fd723dc13cc1"
        },
        "item": {
          "id": "b1e6d86e-2b6c-48c5-8eeb-00f707e6025a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2afe35e4-44b5-4ba1-b71c-0d63cb04801c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a74edb7-16d1-48af-a6b8-63ad2283b331",
        "cursor": {
          "ref": "a222c958-99d1-45c5-9e9e-e40c07982d69",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "be0fb58d-356f-42b1-83e5-8c9e06011c95"
        },
        "item": {
          "id": "0a74edb7-16d1-48af-a6b8-63ad2283b331",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "05c8aa61-d085-4166-88c1-f202eb809425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a57e00-4fae-4115-9235-90f05607715c",
        "cursor": {
          "ref": "25a58412-c964-43ab-9e7d-be1ccb12ae61",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "23f73c02-1176-40b5-8deb-425eaf918dbf"
        },
        "item": {
          "id": "32a57e00-4fae-4115-9235-90f05607715c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1394cfd6-0050-458a-ad6b-5eac86f706f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6cafc6-f3be-48ac-b69b-5fc8ba25279f",
        "cursor": {
          "ref": "ae6c9946-8a20-4b5f-9979-0df13e046c8a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ead7c287-a799-444c-96df-4cea75e079bb"
        },
        "item": {
          "id": "4c6cafc6-f3be-48ac-b69b-5fc8ba25279f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "adf6aa76-a769-45b7-9209-de8c44600c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9d1ff6-250f-494c-babf-3d9c8cfea00d",
        "cursor": {
          "ref": "5689055d-e17d-478c-bd3d-f034b2045905",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dc0ce29c-8f5a-47d3-8128-6c51179b4b29"
        },
        "item": {
          "id": "5d9d1ff6-250f-494c-babf-3d9c8cfea00d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b1c44a0a-e92b-4d51-9381-06d7c551055d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c217b432-eca4-438a-b9f5-91ce5cddd654",
        "cursor": {
          "ref": "eff93123-5f31-41d3-b79d-9147d083b681",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6284211a-d709-41fa-aca6-f5857f34abdb"
        },
        "item": {
          "id": "c217b432-eca4-438a-b9f5-91ce5cddd654",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "34bf0ca7-75ce-4cfc-8ad1-188b7e92f60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee068ba-7f00-49af-a968-b568643676f4",
        "cursor": {
          "ref": "d493af28-70c8-451b-9862-2448aa67f8df",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f3269777-0b60-4970-8040-603e3fc53d5c"
        },
        "item": {
          "id": "cee068ba-7f00-49af-a968-b568643676f4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d510782a-cc50-4d9e-8996-5437c187f61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea16c42-fc32-47da-9580-2310796d6208",
        "cursor": {
          "ref": "8dc32a04-116f-4335-b745-313559c2a5e5",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bfcb8724-78a8-479a-9492-ea1dab4e390c"
        },
        "item": {
          "id": "eea16c42-fc32-47da-9580-2310796d6208",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a6e4c9d1-94b6-47c3-8463-d357b5e81636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63408a1a-aba8-431d-8b00-c0db8283c31b",
        "cursor": {
          "ref": "1e6618f2-cae6-44ec-81e1-30d4328ef52a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "63a94573-2109-49af-997a-43318eeb1900"
        },
        "item": {
          "id": "63408a1a-aba8-431d-8b00-c0db8283c31b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4f2d8841-02c3-4737-977f-91838148fd52",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a90500e5-2a84-48cc-a3a7-d20777e5d5f3",
        "cursor": {
          "ref": "1a0dfc60-44cb-4268-8ac7-1fb7cca6a5ea",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1099c56f-0b46-4a11-8d92-c6f6c99c9ac4"
        },
        "item": {
          "id": "a90500e5-2a84-48cc-a3a7-d20777e5d5f3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cabc5d8e-0e4f-4186-a114-74ff3c43c398",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "27fa6c98-0b81-4c54-8970-5fbfd4389ec8",
        "cursor": {
          "ref": "76a9273a-fb50-4dea-8ba0-cade53f6fbe3",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6068e9f1-15cd-4c88-86dc-2f6e11e08875"
        },
        "item": {
          "id": "27fa6c98-0b81-4c54-8970-5fbfd4389ec8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "88b0f578-a588-4fbb-9b32-6624a1026026",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2a2f3df3-c24f-4806-ac20-334c4712f90e",
        "cursor": {
          "ref": "b35b4557-2931-45ff-8e80-fcdc75984763",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ffba5666-731b-45ae-9741-6c121f8c2d49"
        },
        "item": {
          "id": "2a2f3df3-c24f-4806-ac20-334c4712f90e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55dd540f-e236-4156-94d6-f4d306ff83ae",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f6ab40ee-abd4-4446-94fe-e933b51d0973",
        "cursor": {
          "ref": "530b56ab-d90e-4810-8457-888d42d9f722",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d1d9895a-38e5-4e16-b5f5-311fdf7aade2"
        },
        "item": {
          "id": "f6ab40ee-abd4-4446-94fe-e933b51d0973",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "452e6180-e84a-4744-8625-eab491ccfcf5",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "68076707-115e-4676-baf1-7413e98aabb6",
        "cursor": {
          "ref": "4aa16996-023f-455f-80d3-2233399fe1a0",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0ec09a8b-b99b-4822-8623-a92a4fa59ea5"
        },
        "item": {
          "id": "68076707-115e-4676-baf1-7413e98aabb6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d7204fde-94f1-423d-b2b3-cdbc6e4ae45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1f4cc9-9009-4e5a-8db5-a8974979bf79",
        "cursor": {
          "ref": "3718593b-e7e0-405a-8c77-01defd9fd43d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f8e7c075-9a81-493e-9106-8c771825c77e"
        },
        "item": {
          "id": "df1f4cc9-9009-4e5a-8db5-a8974979bf79",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0799bb65-99d1-4d55-b030-4f3e3411fae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c1dbbd-cfef-4877-9feb-7f5adf330b78",
        "cursor": {
          "ref": "4b4d20b9-8293-4aa9-82a9-d40029478713",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "786290fa-5716-400d-b6a9-165d399876bb"
        },
        "item": {
          "id": "e2c1dbbd-cfef-4877-9feb-7f5adf330b78",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fbf009f5-c860-48da-bf2d-d4e174c6368d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17963fe5-9000-4467-831d-cb9d82876189",
        "cursor": {
          "ref": "f7ea9b06-c100-49d8-a197-c1706f5bcde0",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d1ded5a4-c9c7-4b18-a691-318e426da77b"
        },
        "item": {
          "id": "17963fe5-9000-4467-831d-cb9d82876189",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "540bb620-1571-450d-a423-acb208224612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5672f04-332d-438d-97a0-7551675c6488",
        "cursor": {
          "ref": "d63b10b1-1caa-4796-a7ad-9553650f62ce",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c7cd196e-f892-4e1b-acce-b05f5da83861"
        },
        "item": {
          "id": "a5672f04-332d-438d-97a0-7551675c6488",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8f4a9b67-27a5-42a6-9158-b2f45636337b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46445682-afab-4c78-a058-87629dfe086d",
        "cursor": {
          "ref": "6e1b011d-5db1-4ce4-a686-a1e2ed966729",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "977c1e2f-0fca-4be0-8e71-aa2c9cd0fa53"
        },
        "item": {
          "id": "46445682-afab-4c78-a058-87629dfe086d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6d6241b6-3879-4057-a30e-6a9785689ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d011259a-3b1f-4df7-8e7e-0d05b56f6548",
        "cursor": {
          "ref": "6eacbf7a-9f0b-4b73-a270-adc0b7ba732c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec771a1a-7fc2-4ad6-8bc0-49bc840afea6"
        },
        "item": {
          "id": "d011259a-3b1f-4df7-8e7e-0d05b56f6548",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3bf6c79a-4c50-4ca8-a2d1-be9955cb375a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e3694e-0f77-428f-823b-96eb159e7487",
        "cursor": {
          "ref": "296200b8-5e28-4752-9f25-8dfed6ab8aa6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a8efe9f6-04e2-44d6-826a-ea244c9f30be"
        },
        "item": {
          "id": "03e3694e-0f77-428f-823b-96eb159e7487",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "39c41445-5b59-4d6a-801b-a76e5c1d667e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a88fffb-8e95-4c53-b5bf-8010b8ccbfdd",
        "cursor": {
          "ref": "be1e5d57-4b45-4952-a386-5b618131d307",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b2667598-4b60-4079-94b0-6dc60c0c2a1a"
        },
        "item": {
          "id": "8a88fffb-8e95-4c53-b5bf-8010b8ccbfdd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "34f0fa64-75e7-4ffa-927b-8af29269ff26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473dc65e-731e-40ed-9c7c-48c8d5815524",
        "cursor": {
          "ref": "ccb7a7a3-1936-4a9e-a5ae-ed7d1b437c78",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bfaf007f-8098-4d15-be08-79f40c4dc94e"
        },
        "item": {
          "id": "473dc65e-731e-40ed-9c7c-48c8d5815524",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8cab3d5b-9f9a-4f65-95a2-d04c6d57c7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb829db2-b669-453a-9cf8-77c105cbd5f3",
        "cursor": {
          "ref": "21d424c3-9120-47c5-895b-855205e28f26",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e3dfdc5a-4002-4115-a743-bf5f92bfcbff"
        },
        "item": {
          "id": "eb829db2-b669-453a-9cf8-77c105cbd5f3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9a792252-796a-4613-b784-9e7927f7c7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783a9c45-0d16-492d-97a9-04cb23446865",
        "cursor": {
          "ref": "fcbe7fbf-98c1-4685-b0a9-ed46b18f46e6",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1cd6f402-94ce-4af0-8f1b-4e127e6f0b45"
        },
        "item": {
          "id": "783a9c45-0d16-492d-97a9-04cb23446865",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2c45222c-aee3-4531-9bd8-38a1e4821961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f7645a-c62b-4be1-a33b-91706479261c",
        "cursor": {
          "ref": "6fd7fffb-4834-4c55-a024-3f0bef6faee2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a935e813-bf4f-412b-9bfa-bfa43fecbead"
        },
        "item": {
          "id": "d4f7645a-c62b-4be1-a33b-91706479261c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3894ce06-49c0-4640-b337-b5d2f19815a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b2b599-2512-464c-9d13-498e3edd6b42",
        "cursor": {
          "ref": "626a6182-6442-4f7b-b863-52013dca12c4",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c033352e-ffdd-4f8b-a4cb-213fecd05d4e"
        },
        "item": {
          "id": "55b2b599-2512-464c-9d13-498e3edd6b42",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e586de92-03e4-4dcb-b6ed-75d7ae59bc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f942f5-d230-4264-aed8-91565e812f5d",
        "cursor": {
          "ref": "4a412d2c-b001-425b-915c-0344e9063ef6",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9fe6df0b-d5eb-4ea5-95bd-0b35d9630bf0"
        },
        "item": {
          "id": "09f942f5-d230-4264-aed8-91565e812f5d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3d1ee364-e706-44ed-96d0-4c31d019d81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ef6af9-4ba7-490e-b6d7-59b2c709d72e",
        "cursor": {
          "ref": "81cd5763-cce1-4c02-978c-4ad11489c368",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "647a0658-da37-4119-8773-6cdd2cf19fb6"
        },
        "item": {
          "id": "b2ef6af9-4ba7-490e-b6d7-59b2c709d72e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "862afc8a-49c6-4f3c-b866-d99776cdd011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af424e9-b1cb-4094-8895-f06682500402",
        "cursor": {
          "ref": "88511df1-22da-41f4-86ed-b74381ac3cb9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c0cc46e6-94ad-46ba-ad0c-dfe90bd68bc6"
        },
        "item": {
          "id": "2af424e9-b1cb-4094-8895-f06682500402",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "01ddd526-62b0-4e3f-af8e-b0a2fc1ac6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a46cb3-975e-4384-b6ed-836098a4aad1",
        "cursor": {
          "ref": "66a68f7a-9059-4e7a-afd5-cec71aad18ea",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f197e73e-d45a-435a-b600-c064252a3bb1"
        },
        "item": {
          "id": "28a46cb3-975e-4384-b6ed-836098a4aad1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3acbc1b2-423f-4ce7-891a-d3aef46f0475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2d6b63-d69d-4a76-b20c-bbb6a252dbc9",
        "cursor": {
          "ref": "9700d8dc-aaa6-4299-9663-80132adde088",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "31abe35e-0b63-4e8d-81fb-96bb0eb3bcb4"
        },
        "item": {
          "id": "ac2d6b63-d69d-4a76-b20c-bbb6a252dbc9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "79c3d575-92ef-43b5-b47f-f501d0c54e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eacf8e-98be-43f1-8d62-10a0232b4f64",
        "cursor": {
          "ref": "660cc554-456f-4c6e-a890-89ffdcedacfc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fff53ef7-b5e9-4459-81a1-7f3b698d6143"
        },
        "item": {
          "id": "95eacf8e-98be-43f1-8d62-10a0232b4f64",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3a423693-ea79-4722-9b7f-2e8d0cbce169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7306bbac-a2b2-40b9-a4df-6c926b4868c2",
        "cursor": {
          "ref": "fe4e610a-618f-4019-9029-c6e6d43e92e2",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dda8fde4-fdd6-4efa-8f1b-75b60f05c245"
        },
        "item": {
          "id": "7306bbac-a2b2-40b9-a4df-6c926b4868c2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "51bdcbbd-cd8b-40fd-8580-de2db32f0ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c003d1a-d432-40b5-a68d-cb7653fb63ff",
        "cursor": {
          "ref": "2d285ef5-c045-4fac-8d79-ae6ffae6c4fd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e36266f7-585a-4579-9be5-c5b1143cfd48"
        },
        "item": {
          "id": "5c003d1a-d432-40b5-a68d-cb7653fb63ff",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "64e51888-792d-4faa-8414-7b196883c291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7d478a-32f0-4be1-b845-1944feeed993",
        "cursor": {
          "ref": "d0cb3168-6b09-4f71-bd64-7e3e1d55ba09",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "10559682-ba3a-4c2c-8ac3-8d86e9096719"
        },
        "item": {
          "id": "9a7d478a-32f0-4be1-b845-1944feeed993",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0d66659e-5ac1-4540-87ef-7d8a3590f732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dd5a8d-658e-4ab4-a3c1-13b62b0ca4cf",
        "cursor": {
          "ref": "b7ecb5f2-e713-4de1-81bb-97e493c1c080",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "428ced2c-3d02-4c34-8f92-eb44676927b6"
        },
        "item": {
          "id": "95dd5a8d-658e-4ab4-a3c1-13b62b0ca4cf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "033531c9-4d23-4521-ad45-5a1ed43ea2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d20bd8c-50fc-424a-ae15-2ac5d948c79e",
        "cursor": {
          "ref": "49f97e21-daaa-43a0-8f68-9d1ef21f3c29",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "66a247fd-0c21-4489-876f-45cbebb73d43"
        },
        "item": {
          "id": "1d20bd8c-50fc-424a-ae15-2ac5d948c79e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3b9db54d-0b1b-420f-9b16-227cdea16947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72a0b4d-56ac-4eb7-8918-bda514359c07",
        "cursor": {
          "ref": "d345da6b-f008-4842-85dd-5a8589c8f3d5",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b3960643-4252-49ad-926b-bc5f0820cb87"
        },
        "item": {
          "id": "c72a0b4d-56ac-4eb7-8918-bda514359c07",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ee93e5b0-5163-4fdc-968f-9ebd173f33e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39760eb-c664-4dd0-9966-89f023c1d988",
        "cursor": {
          "ref": "1afae305-879c-481b-80de-38d1d6145740",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "78c6ad13-7bee-43c5-81e2-a1c34bcaa477"
        },
        "item": {
          "id": "b39760eb-c664-4dd0-9966-89f023c1d988",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d33a09fd-546c-4d07-92dc-b6662bc35fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5605734a-b75b-4edf-89a2-512d67d7476d",
        "cursor": {
          "ref": "451a3e77-1b4e-48e9-a010-ba65daaefa57",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "89e24b67-e845-418f-b4a7-2c571c313cd0"
        },
        "item": {
          "id": "5605734a-b75b-4edf-89a2-512d67d7476d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "560ee3a7-8dbf-4538-ab5e-ff94b43ba631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985f87cc-6139-4305-b5ab-846e51087940",
        "cursor": {
          "ref": "81237984-8f88-4e77-81f2-801e6bd68ea9",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d34cdf74-3368-4a57-8bdf-5f0f21a99fbe"
        },
        "item": {
          "id": "985f87cc-6139-4305-b5ab-846e51087940",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "69473534-c207-4eac-9f25-8320bb1635bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15738896-5551-41dc-8a92-c2fff8b3cbd7",
        "cursor": {
          "ref": "d98a9adf-dcd9-4bf1-94b7-323986988d6e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8270a89d-f4de-4270-b769-cc69d7a16f79"
        },
        "item": {
          "id": "15738896-5551-41dc-8a92-c2fff8b3cbd7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a36853d1-c3a8-4e7a-8785-58162f371b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270f9e4f-7029-476b-81cf-13cec1cad9a9",
        "cursor": {
          "ref": "ee222051-4fd1-4a78-9241-24e730eaf17d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "916fa32d-00d1-4fc5-978f-0658d91378ff"
        },
        "item": {
          "id": "270f9e4f-7029-476b-81cf-13cec1cad9a9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fdec7cbe-c6dc-4f58-bc61-bf751c5432e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3410a47-8ddd-4006-afc7-bafa1b97c5ef",
        "cursor": {
          "ref": "4b128fac-77bc-4dfc-b560-56640b8547a0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8d4f54e0-05e3-409a-b384-14e98154bbb8"
        },
        "item": {
          "id": "c3410a47-8ddd-4006-afc7-bafa1b97c5ef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "de6b0367-4d11-441e-bb62-82346b6de349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf0ecae-b41c-4e22-95d2-b04bd8dfd5dd",
        "cursor": {
          "ref": "fb89e5ad-e4bf-4789-906c-e1400b79ece8",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "938f6004-14b4-4a0c-b648-c0939dc1afb4"
        },
        "item": {
          "id": "4cf0ecae-b41c-4e22-95d2-b04bd8dfd5dd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2d6963fa-c6a7-4e66-a2cb-96e92e4970fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea1c1c6-737d-423a-912b-f585727a887f",
        "cursor": {
          "ref": "fab836f6-e58b-40af-a3a8-58b38f0c1495",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a8ac2dde-d507-4b4e-94c1-4826d1fd32e2"
        },
        "item": {
          "id": "6ea1c1c6-737d-423a-912b-f585727a887f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0c693d3e-66cf-4d58-8ad5-b80e0ea947a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f9cc4d-7416-4691-82f1-e50c12d79f13",
        "cursor": {
          "ref": "4ea03a97-51b6-42d6-932d-e69884ce295f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "65511760-1645-4a38-af33-36dd5c2208d1"
        },
        "item": {
          "id": "e2f9cc4d-7416-4691-82f1-e50c12d79f13",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5da60fe1-8860-43d9-9d36-a177d4ea47db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba3b3b8-4cff-487f-a1ce-8fdceaf040af",
        "cursor": {
          "ref": "2d430121-87c6-4b3c-b92e-efdc23c4ca6d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2fdc1a70-117b-45dc-81d4-87ea395bda77"
        },
        "item": {
          "id": "aba3b3b8-4cff-487f-a1ce-8fdceaf040af",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "894193eb-a246-4721-8051-203d9c43d3da",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d33cf4b0-de53-4263-bac2-ed2ee15a7cb5",
        "cursor": {
          "ref": "0ce36538-5522-4b69-8135-488428a2bf80",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "84efe221-e6ac-44c2-81b3-48ba5c5e781c"
        },
        "item": {
          "id": "d33cf4b0-de53-4263-bac2-ed2ee15a7cb5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0b7b87c7-ac05-41da-abfe-e82b9817438b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8b0d30-48a6-44b2-ad4d-557f8b1cf022",
        "cursor": {
          "ref": "bfaeceb1-1a32-4d66-8296-46914a56beed",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bc343f59-63e2-46a7-b0f0-4c065f8d3043"
        },
        "item": {
          "id": "4b8b0d30-48a6-44b2-ad4d-557f8b1cf022",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "cec4874a-b41c-465a-be19-f04b7746912f",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b43884-6f33-44ab-a140-bab56c3eb9aa",
        "cursor": {
          "ref": "556c41e9-db43-4ea3-bd7c-51cfd74d8a0a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "255c1f08-9f57-443a-b1ca-b156bb7a9ab4"
        },
        "item": {
          "id": "54b43884-6f33-44ab-a140-bab56c3eb9aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6dcf5492-1ae4-4528-a45c-ae8825822f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b43884-6f33-44ab-a140-bab56c3eb9aa",
        "cursor": {
          "ref": "556c41e9-db43-4ea3-bd7c-51cfd74d8a0a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "255c1f08-9f57-443a-b1ca-b156bb7a9ab4"
        },
        "item": {
          "id": "54b43884-6f33-44ab-a140-bab56c3eb9aa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6dcf5492-1ae4-4528-a45c-ae8825822f13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb1b38f-d5c9-4e6b-9d30-97a52ff978b9",
        "cursor": {
          "ref": "1aff69db-d501-4b70-8b9b-c8a19587e548",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1803d212-6066-40cc-9bf0-74a32a464241"
        },
        "item": {
          "id": "ffb1b38f-d5c9-4e6b-9d30-97a52ff978b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2e3c17bf-dd25-4edd-a53e-67557181bf5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66df82d-ce4f-40e1-8f99-4119f984cc8d",
        "cursor": {
          "ref": "cd4e5397-ebd8-436a-bef8-a16c4402e28c",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7bfa1f31-85f8-4174-991c-ce74b2d7586c"
        },
        "item": {
          "id": "f66df82d-ce4f-40e1-8f99-4119f984cc8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "63355f82-cc6b-47c9-ae0e-74e4c5f31e02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}