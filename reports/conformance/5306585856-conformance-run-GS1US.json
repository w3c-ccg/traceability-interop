{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8a13ade5-2dcc-45d6-9b17-b83541be47f1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "87d5f38d-9015-4777-8631-0c609c2f2cef",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "011bda02-c965-4c40-9fd5-1599fb874715",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1d5b2d84-aaf2-4448-9595-b379a8355ccb"
                }
              }
            ]
          },
          {
            "id": "ae9f1439-653e-4212-a22d-83595350f2a8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcb5b0d2-d7b7-4792-a107-4334b1c9a45c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6dd535fb-c15a-49b7-811b-ee9d4daa3cfc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c2b49b5d-b20e-4c78-b3b3-abb9ede44734",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7384f5ed-375d-47d9-9e91-0108dd30d9f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d63bce9-6567-4b21-921c-13d4c67887eb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0df74dcf-dd3b-4630-9ac6-a4a940364d07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e9a9bdf-65f4-4da0-b133-9bb63f616b53"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c0aec37-c032-47b8-8a1f-1a1dbb0d2e88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12fb9a1b-8e20-4bae-ae95-4bbb0948850b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ddcb0d1d-b506-49a2-b5e6-75849926c46c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "302fbd25-ae86-4847-afeb-d858c1d50d01"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e508bd5-3c54-4753-8af9-e202f577b2fb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c0302137-a19d-4ebd-955e-1b3b8cf442ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0c00147-1b76-4936-8683-6cc64a5e6577",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f1c796a-60fe-43a1-82e8-71450a525f3b"
            }
          }
        ]
      },
      {
        "id": "51ffda15-d3a5-494e-a144-383a1a8c37eb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5b8aeecf-691e-46cb-a20a-c61a11711787",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d21e695d-bea4-498f-9c9c-91080557caf9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebfba7ec-f81f-4c50-b327-ab8b78516a02",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09239648-756f-40e4-bc55-d5df41ed070f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "316f7cb1-dfe4-475b-a1a7-69dfeb0fb2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66912c28-c0c3-473f-ba99-4cae26f24831",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56e8bd7-2d1b-435a-b4f0-3f156791215b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5df5f70-7cc2-4847-8ea6-20d4e9c500ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9180b180-1b36-4b6c-925b-435ad7ee86a8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8178ab1-3597-4db6-aab8-c209f98dd4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3380ae1a-fa0c-457d-84a1-790f8a9428c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9cba45a1-7c09-4a54-b585-abd45268d70a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ed38f70-9750-4e75-9b6e-b6986441f3ed",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffa46a0-65bb-4b2c-82e7-46da2afd3e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f383925d-867e-413d-93aa-b43f869de317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9568594c-a367-400f-a328-254423afedad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283f6067-fad8-41be-b1d7-96538b379a73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d22e0e86-fb70-406a-841b-a45f7d810d64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e175e4cf-c973-44b1-af4b-6721a5aade7b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9d42633-be5b-4c3c-a71f-0c9a31001e77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5594e373-9006-4780-9b6b-b1953410f5f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "becb2f3c-dd5d-4470-8d78-74b1a73bad2d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "762f7453-ea11-4826-aeb5-e39b8ea74606"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b06d00bd-f452-4556-92a3-76e6ed225fad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ed11ca13-e468-47fc-9d47-0ceaf8d940ba"
            }
          }
        ]
      },
      {
        "id": "60e2c0b8-efc5-479e-a0d9-756205a7ad13",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4c392ad8-12ee-4407-b031-2bdc7699e872",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4966dbb7-8533-48f3-9a19-5a71ef6ca1d7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c8893eee-54f6-4f79-ae1c-8e215261e326",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d5029d-44bc-4d2f-8ed5-52abc9ce8219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732ef3f6-93b4-4f36-a68a-edd39162c6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f135e78-24a2-44cd-8429-a52eedde4f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc451e1d-e825-40e1-8329-f63e29249191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6173d688-eed6-49ff-8f56-453dc29c6e7a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f5bdbe-0db0-4d5e-9976-6cf8915e614a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fb4673-2657-46f3-a646-d24c32dde81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f6c788-34c9-4463-ad78-61530087db5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fb16c7d-d716-403b-bf93-23642ea57100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338e12e4-1372-4a16-8be7-e212d93d7318",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084b6a3e-bd57-44a5-84e9-69a4a2b51965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7e72d8-b269-49ea-b4ba-68fc41172735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4baedef-a11e-493b-9103-dbef13cf2387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c71e6c0-31f1-48ef-bee3-ec56c3a3c222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25ae613-e7e0-4220-84ed-53743d6f904d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78caf757-d95f-4dbe-b11b-b684cde16dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f4b851-d61a-4a14-9144-b1207db13c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b22247-c2d5-44c3-be20-38014b06ade6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc92fae-016a-40f9-8598-12cd1b471206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f03e00-1b52-4d58-9bb5-683d7971478b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3e2584-d957-4271-9191-dc0829fe3bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc2b47b-7463-4e9a-bc97-3dbaecb7bdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d6e45-be1a-4fd9-8ecb-1402e5b3e86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b96582cf-a5fa-4603-ae31-fc6e247e662e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f686ef47-9eab-4448-ac94-602a7f20784a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b572a5-9eb6-4091-827e-ff8394fec1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4ddc2f-3783-4568-9c00-2a625100b2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee56e71-5bac-48b1-861c-83bc2d2d2dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bf9e322-14df-4a82-9c5f-b8edb05f8492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4a7fa4-ff07-4ab5-b2d9-11dfb7809e0a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa0024f-6b4f-4777-9520-7acb3dced6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aee7772-6f7d-41d3-8839-9c93cde14355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef742d5-89d1-4bfd-95e3-3b5fb7962054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3041df2f-f51c-47db-b25b-fc950db59479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285dadb3-9063-4d63-bd27-e3b493c2e9df",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfbea96-57d4-4cf9-8321-fc88ecfe9a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15dfd26-d99e-4fa2-ab9e-82732d924433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bf453d-ae09-444e-8f16-7695ff175fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2769b87-5dbd-4a6c-9472-9bd53ee1853e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66b3459-2854-422b-b06d-2bce951ceb07",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ba83f6-90e7-4f86-a5f1-6d2e07bfeafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2073a4cf-eacc-47e6-ba8e-6b0540bc24d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e54aa1-3954-4c4f-a7bc-2a1d9e7c2300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54636675-ce72-456a-9f69-dcd1dbda59f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87583d05-ad18-4e34-8fab-6def27186d79",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4c6b96-4d91-4ac8-9ff3-a59ed9d50565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0846e467-6bc5-4f8b-8895-bfc7819bfc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0e1aa7-8f40-4cd3-ad2f-e000f100a37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11b282fb-7193-461b-940c-ceb1243233ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a76012-b34d-4722-8faa-7e70b8e046d0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6672bb3-8260-49a6-9543-91c801dd219a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a18ab1d-6fa1-4a87-8f01-50962d0636bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a6759a-899b-42ee-a864-b2e4691cb627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "594622ab-f25e-47d4-aed3-cde2045e8da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d769add4-30ad-4732-82d9-14af0adb2d49",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ddaf74-23ac-4804-a54c-7fb155743bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf37caca-6048-4174-942b-398bc82bd900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124d3c00-2427-4194-9072-6f150f91617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4baf3ed-cc0f-4f4c-a061-a412c0e68f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5ad73e-2a8c-41a7-ac1b-2dd66757402d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89fb822-4af3-40b1-ac43-305663658228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c52761-f76d-4abb-b141-cde95421fda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fb0a92-ead8-447c-b23b-fa8a7e52d2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22d173c5-3570-4be9-935d-7a0fef35cfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155ed7c6-b332-4a3a-ba88-fc5219d7e619",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044e7567-6732-47e3-9a9d-f71e4bad57d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e56eac-7387-4353-914e-d5eec7c79f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20183e42-2036-4e4a-9998-c95373a040a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26d760be-119d-449c-be3b-fd59cd4a8e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75984bf8-3316-4172-8a6e-f8a58770ba8a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168d4446-de55-415f-9bf4-48d90e391c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ce31e8-4def-42fd-b1b2-cf641bdf580a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de742b62-cf99-484f-a6e3-aec6e0a1a827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9e836b4-3ad5-40d5-aec7-7938a0c72014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd50d73-db51-4c9e-8e82-f59cde234edc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cf3bc4-fd51-435d-988f-b82babcc1190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878a625c-c19e-4d6b-94d5-16f0cee0179b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b731e436-12a3-4178-aec6-a49ef63514cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73805e1a-fc3b-4bef-b286-1b7e2cd3111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b95221-5004-43cc-90a9-117b99cadc27",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85af60bd-e3c3-4732-ad5b-fcbc1e11c9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e4e16a-aabc-4146-b5d5-59a6e8f28205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0859dac2-d5f0-4b57-bba1-f44347d233a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17df3b84-db7b-46dc-9857-a4209353ab7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ade8a80-3c15-4e79-82ff-354b01541ecb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d48bbc1-7e67-4efb-b4f5-3c68cb42b337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebffcd3c-59fc-4b61-a1a4-beeb6814fc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaf39fd-f7e5-4cfb-a43c-50f85dc8503c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b877ae6-9348-43db-b5ae-dde012b44ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83fb380-4b08-429a-b406-52f1cdb5b60e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5632337c-3de3-4343-8d15-31040a5866a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624d2404-43a2-4376-baa4-cfcc2bbe20cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d9cfe0-1e19-44d5-bdfe-477c38502739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d49f0be-3e9d-4162-aa95-6b39a1dec9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bafd96c-374b-4d3d-9743-d9838fee1bec",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfcbba3-06f8-4e16-835f-65380dcadc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7d1d56-c6bb-4feb-b09a-8d8d78e473dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7790be23-fff4-4110-a775-44353c2d1063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4797b234-aca7-4bf2-a349-f8797059de4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f093bfbb-26a5-4f8b-b40a-96ad0e2a05a2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41133a7c-0634-44a9-93d7-58a53e03f575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52da89a3-7e0d-4f1a-abcf-a94dfd344531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf659e34-60ba-4105-b738-c68206e0b642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8ac720-e032-4a2d-8532-afee60561674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caf9bc8-980f-47a3-801b-89fe9428db22",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01d2656-836b-4550-88af-90528c345553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71c311d-a4a0-40bb-88d4-0e234eab0bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c88d02-e8f4-4bb1-8c43-199240cc393c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82ee8c12-ecb4-4651-9ca7-7fa5c6b6abb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e321b2f9-475c-4002-ba4b-e7573705c37a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa28f10-d782-4e79-bb38-6bdce499211f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5734f8-da2b-41ea-bebe-a1109f90dede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ab4a85-ee5e-4f06-9a87-4977f6d4c834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "beab093a-c73f-4dc1-97c5-9a34209978c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034a37e4-8cdf-44e2-8309-a51d4e3111e5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a93499-5774-410e-9b41-850ced97ff17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cea6a2f-7e70-44ae-9f7b-b1fed4125d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db73096e-52eb-44c7-b143-35ead9c23fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "42ec7239-0192-4771-9993-9984817b0ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b628bcf-1186-4ce5-a8a5-014536b18996",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4665f2db-4cb3-4aba-8c7d-13562bdb5e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fab1d9-ae75-4aa0-8c6a-bdfecb993254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f813a0ca-fbf9-4c2a-addf-0819b56e5591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace3f5f5-5cc1-471c-8050-b52e71d936e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0197b3-c752-4dca-9654-812710b6906f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c93a20-792a-4256-a188-d7b1fb8da8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6be1b6-0445-463c-9995-953920049d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaccc53-35db-4380-95f2-afa7728611a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9058464a-9e39-4098-9b79-55c7dcd82857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf63fe1-4bfc-48ef-8cf9-401c6534da76",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e07e481-3399-405a-bc4f-aa4caf2436aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae91a50-aa2b-438b-ab27-fc470f23bd4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15826ff4-ad1a-4b34-89ba-4a1c3cf22cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77d64783-74bc-477d-8814-e14ae8a9bbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c51c21-a30b-46a7-bb8d-06a77ca2ba4b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702bf043-ef5a-41f7-ad28-c242566ca284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3580bd-cc28-4b11-b51c-4dc565266146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2eab440-9270-4b96-b803-e80d647b0773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ada86fe-36f2-4450-946b-2fe04368e010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7c1685-51c7-4cf0-b6b3-972b26d8dd0e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e43216-106f-41c5-a1a5-5046f653a88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7098708-b267-49f1-ad8d-812550e5b2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9060f4f8-e6a7-422c-84e3-d468417658b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27df0139-90b9-4946-a590-23d51bcdc3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651f4e3e-f346-49a1-afc2-5bdfed523e19",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f67ba2-3f91-4072-af17-9aa3c2fff176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717fce3d-86d7-4a0a-9f8b-b0ff94ee56c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b353391e-f89a-46c9-b724-cf0676c373a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e148c4-e987-41c0-b79a-8628158450a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3f009c-bd21-40b2-b3b4-03b62d988c16",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669f2d2c-8a30-4f33-9b38-b066564364c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea71f697-6d01-4757-b44e-043a71e6926f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641122d6-4cc5-4d62-b2b2-03fbc4157edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4260fe3-3f3b-4faa-b39f-cef997e44d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d816c1a6-ab6a-4e01-afd3-c3b750d71097",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcaafba-a660-4000-8b4d-98e07a1f88e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6f7633-3194-4b52-952a-e188ae1f3c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da37159d-49fa-4404-bd83-3b06046c3219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f26e435e-3d6b-44d6-9cec-c9cad79afe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e207bd40-08ab-4ec8-b28e-9b91182d3a34",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3df3f3-93aa-4107-8bae-7a7dd618f7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15ff38a-a0f4-4331-96fe-dfb77d2ad4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be164f8-d8f8-42c0-a1dc-1b07223353ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4d37e3-452b-4251-b28c-f6ccdbc535f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e2730c-249e-4011-868a-2b3e6dad535b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd8744a-0113-47bc-806c-836c18e8b9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9c320f-cae1-4cc7-ad98-218aa0c4b199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bd4e99-216b-4706-8034-e76f4e3d55d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb10643-e18a-49f3-b67a-0642d21a1a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d184df1b-aafa-4a13-a790-bd4506d2f937",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ca4ad6-1027-4674-8b9d-3aa455b63d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948e9d66-c566-4a7a-8a84-4fdc1510b4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d103661a-691b-4ac2-8c97-6e943c28ef49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "32152664-106f-4194-a303-efed89ff9e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917db4fe-0dd4-4fff-88a9-94d46098e549",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2677ca-4567-458d-92e2-955bfcaa492e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c375e07-cd4d-4abe-aae4-2a97af7289b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6dba3f-e715-4219-ad9b-df1c2181815a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c65292-90da-471e-8ea1-893350cb1278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232706a8-3cd5-4032-ac12-8677c0606b2c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb49725d-2b7d-4501-84e1-8cf4a9d902a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac46c6f4-39c3-426a-9e4e-3407be7b6793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47e71d4-91d1-46ab-abcb-90fa638b63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c36ef5a3-567b-4de9-994f-4355600d8708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3f2b86-eca4-4993-ba41-173c759a23cf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30b9d42-6e96-4430-93d1-22db391b3187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e768882e-a962-4835-a485-b61d7b4c5e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e57e850-62e4-4a98-9a79-ea615a68dfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce86f914-0f69-4dec-90de-544ed048bd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55812b8d-0764-4225-bd7c-73d32bedac9b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540ac3ec-c2bc-43a4-a5ed-d50621146337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d1e550-bee2-40e8-a19a-839f0830f780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cb9cc1-74f2-4c2b-af37-3718ad63c019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "58d9f09d-5775-491f-b288-3efe1deba4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856f320d-5980-4086-a901-caf316069811",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75934de4-c7cc-40d9-9621-b1a49cf0289d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255750f1-c6f1-43ae-bbf4-08f4e0f5f55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20a18fd-45e8-4e7b-9a67-da32afa5de26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d064219-53c9-4992-952a-02e9552a16de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06f325f-af89-48d2-92aa-63350463bb14",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e50009-a5c8-4435-a49e-f5094493ee2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0e2ef4-a235-4b45-b164-92c378c22c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba310c95-bdf9-45c9-968c-b8614ec48296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8845046-d619-447a-9416-cd109c87e0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e672e67f-38cc-481a-bef8-70f79c3c86d1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2a17bc-1fec-4a93-9afa-0ba81053cd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2730e45-2195-4715-8e58-27c6973ce052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e22493d-b7dc-4260-b688-f49ef3f09e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "804e5869-6491-42d2-bf33-6ace8bf33e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752c2f2e-a7a2-49be-858c-07b0c26c9c12",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750fc7fb-c04a-4ec1-96c2-9930e2deb156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632a42ef-17e2-4b45-98ff-1925b2ad1117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f4caf4-845e-435b-92a5-851c94d08aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7315d107-c309-4957-9166-b0a691094e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e89b49-dd48-4b46-89bc-7e1bf10ea117",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da158412-c1dc-449a-ac45-3af58acdc942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483a3dfb-59ea-4099-8e90-0ab5ca94ee21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fce7b67-7f46-4bb2-a3b4-cd311eefd894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "44e90efd-1782-4a3a-b314-417aab6f8f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34325973-81e2-4ac2-bd76-7cae8f8f9868",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f4364f-79d4-4569-a606-5c42e81865d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b2b430-d930-4107-abe2-14e46009538a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de07bfd-25d8-4146-9e56-a472d85a3c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db692f8-1d74-4350-a6cd-c101e6687746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ada9c3-e5a0-4508-8368-ad5803b9c043",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cb9e3d-9ce3-42c4-9616-d036f8d0aa51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29c02c8-fac5-4370-a148-65c1cdde1389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d919cf61-394b-42c2-a24b-1fc71f3682ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7d4a33-c807-499a-9768-9251f374148d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5c05b1-255c-4332-8ce0-6c4d928ea0e0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2fc383-e644-459f-a75a-201d7648ea9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4ebe83-52a7-498e-8c8f-350d2cc66913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295e3aaa-561b-48d6-a992-a3484481154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5dbc487-6c8a-400e-958a-4049b3fcbe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046d46db-48e5-4123-a376-394b283d2524",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d4f98f-5f2b-4b6a-a580-6d02d8cd6351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ea748a-261c-4ac4-b1a2-54b800e678e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45072a80-6bab-4b04-bfd3-b8d6b7dcbe87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f27d97-3d60-44f5-9620-b9881f27a91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d5fc8-0d4f-4d48-8ed6-55fc4aa924b6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c6e8c0-6fac-48cc-8159-ed49dc05ac40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac366f-ee5d-4d23-8158-569e8c779025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed7f45b-1072-4262-b9d1-123ffb9e6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a81cc320-160b-4b79-a956-2a7426a3a906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f9e7c6-1c48-4d8f-878f-3ac485493eed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54221ccc-1592-4861-8280-b0eb69252fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523b19eb-2b0f-48c9-9fe4-26172560ec8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9489991-393c-490d-9ab3-955c24810dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "768c3abc-32dc-4436-82ab-9cd7a57924a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386a5e67-a3ae-4fea-a065-8128c5c8f088",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6849921-bece-4fe8-ae24-2776117f2cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e110e1-5b36-4e76-bfc7-4abf305b145b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7222a653-148e-494a-aff1-fff0d620fcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "aefd0808-99da-439e-9b8e-ba8e6356d035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72f1ac2-15ec-4fb3-89f4-b0880fd119fe",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9661ce8-ff2c-40f3-998e-d99f2c0923ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ed86c4-c16a-4035-a09d-6784899ae39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3327df-086b-40ae-9ff9-f2bbb2aac547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66df47d5-4f93-48c4-a659-c5336561cc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1f2424-69cb-452e-bfad-75df5afccf04",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e839a33-a568-4999-8245-3e53d46557cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bc2550-0104-4541-b4f0-5e09312895eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9e5cee-5a6f-4d9a-be40-555216de77c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f29c5c-a965-4941-bf15-e3f00957bcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daf5d63-e25a-4e88-b8a7-feccea187078",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f1f19f-adf0-4b7d-ba71-ddda6494343c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589ef58a-f16a-4596-8db0-b2abebe60b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a4f23b-91b6-43da-b31f-47f7795b656c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e156fdc-83cc-4a54-b84a-e608d2886d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28857ee-5329-4cac-be85-c2a2bffe12a2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c3363-6ec6-4ca5-a6d9-a3fb689a781e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816812c0-fa8d-4046-90ea-a2fdabf525ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a5174d-c4f6-48a8-8411-a6267ccdd3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f6641b-f1a5-4b0d-bfc8-ffb27c44b08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8405e3b3-7a08-4f8f-803a-bbc58e949e8c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44851b8-add0-4af7-a778-a53bed005cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956961d9-cbc8-49c1-96c0-878265c2ca17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c8cbb1-4158-41b2-8fc4-45e0f1ab78ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "318a3798-8d41-46e2-98e7-5768e2c4d8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f63cafd-e352-451e-b754-e9da0678fd5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4d0bda-03df-4a15-9e76-cbfdbd98f1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71703dfb-6b1d-4818-b125-4c27beb17fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca3eb08-1f48-4e67-a5c0-a6cafdd16ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0195f9fd-7c15-4d45-9be5-6b36fd9da0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3221b3-41d4-4841-bf9f-f05a2848cf55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08f86cf-0198-41e1-bd91-96e10f73a52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a708cbb5-0088-4cb9-9a49-5593168c5c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9389a414-5280-4866-9413-de8b7426dcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a23488d-2dd5-4074-99b2-56692d598dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cd27bc-8194-4c9a-a376-8a93b16e9131",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bcad88-17ab-4f60-a3ae-ea7ac1d5f46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a3955e-76bf-471a-8356-4ee640f750e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e7cf6f-847a-4ffe-8eac-7b8152062310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13ff051a-b9d7-4314-bc04-37086729fe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e232ed2-b289-406c-9f58-c5c17816e08f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20576bd9-b182-4819-8c55-4380d9cca4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d3a52b-2126-46fd-aa45-267615e4d2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887dd114-b957-4e67-bf5e-2a86159cdac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "42dfae59-c3c0-42af-97a3-648cd84271f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473be4f2-3f47-4fb8-bed4-c60c7af79a0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5c7944-3469-4145-94c9-328c7cc97382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02fad2a-a3f4-4eb1-8fe2-621d1c63dfa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9362e5e-447f-4511-b499-2a5877658147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f6fd2c-ed82-4709-8cc5-b99d0061ba1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a453b2b5-2742-4bd0-a83e-866ecb4b9b3e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd6adf9-5d6e-4898-99ee-298b09e55083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7d9876-32dc-4d42-9f0b-15410ba45ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d78e37c-c9d4-462a-ba1e-d97c6b3a92ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a2d147-c834-4371-9917-d9f0364b0af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3780c440-b7f4-4091-a5b3-25c18cf9c983",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15815c0d-208d-4f99-b6ba-3496c3178af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b19943c-fd4d-41b8-9f26-b60da7064dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e82b9a8-ff8e-4fd0-9ded-4762011f49de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a028a92b-a99c-4be5-9bf3-b95c32aa1f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d815ab11-3b78-401f-8ada-8681d2c0845c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee830ad-e824-4e1b-a8a7-782704282992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab71e7e-0bb4-47a2-ba9f-5e743c585236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8e6954-9e23-4cc1-898c-860209d4c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad9fb52-9c25-419b-8c4a-d4186c1bb2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3269077-f193-4d81-a6e9-453f1b508de0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e613a4d-9145-4fd9-960a-84554632814d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8841e05d-3855-4963-a25e-6c3c10e445d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b002186f-16dd-4a61-a54f-fce326a94b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "164e6ccd-23c7-4f79-953e-4eddac09e86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a4e090-2a6f-4b49-8ee4-1e1cb7436ede",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f211585f-b872-44a1-9cd5-94c8e2060d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d639b2f3-6801-4059-a01f-2f47b18cf3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabff6f1-0f00-4729-999c-9dbfab562ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df044587-60f9-459e-9b74-36844f437718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c38e79-593c-45c3-b8e9-a9e1aa391787",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd8b798-fd9c-4a72-8d36-3da322f84883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c379ebe6-e185-4a16-a18c-1409194e95bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca8360c-3c8f-41d2-953e-e6310f26333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c60f0aad-6ef4-4e96-a306-ca6ef4adb133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc9c35c-6330-4aed-a930-8fdc342d1d57",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea60136-e7c1-4510-8ff8-8599b15ab6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4060de8a-621b-4206-9668-d9b229b7a1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2948824c-1a27-4e01-ade1-8c136e07b96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee2dbda-b5cc-4f4b-b91b-c96729fdff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3c1ef6-1f75-415a-897f-0b462e2c7da9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6232348-aad6-4669-a4e4-40216a77da32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c243eec5-83fe-4c6a-a516-0b4f1b732933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6ac0d4-4145-41c2-90cd-e4c3654af92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b57536-7747-40ae-a650-25370cff3b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cd2daa-7fe7-45a3-87ca-b78e21dd7855",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80aac54-8e09-4489-8a30-d39f900756d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8754a9f7-faa7-454d-ad4a-0d598d1666ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeb768f-5122-459f-bbc5-21f114158bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e49e16-c649-401c-adc5-f95acf5a3326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac74243-b2a9-4454-b4b2-94d09476446b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0bf873-a35a-4795-87d0-924694616504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5622c16d-7cae-4515-b5ba-eb9be0eacf94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf00868-d917-49fe-9804-78146e0072c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdcf713f-4e39-4581-970a-5ec96f9b20a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c382bc-6e89-4e12-b713-d34f14d51f31",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa161395-744b-42ac-99e0-33a94abe66d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad7770d-03be-4ee4-b25f-ef6a2e17a8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47604276-9238-4f66-ba8d-7e5fcb3b1249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3364d155-77e6-4d9b-adc1-ee949895c5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c391e514-a47e-48eb-aa43-c59b34e0beb5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244d2ea2-2134-4a51-ac45-44c0b9787063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a5a0e0-fff9-42a5-9871-5344cf45395c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372668f6-600f-4a70-b339-a981ee3c643c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76fa05d1-9db9-448b-ad2b-06870d4ca03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4060cb-e237-4748-b1ee-30029ecf1a3b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34f80fd-29f6-4c59-bdf5-b31888d7971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380c4940-2999-4eca-9fb3-127f4cca927b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7d25a7-83d6-47ae-997f-b2957b473107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61b3a05f-4de3-4cb4-b443-2ba034c371dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b796017e-253d-47fe-9075-31e8ed69afe3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7661813c-4929-48a0-b1f9-17c9af2ae6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db7fd43-73ab-4c6c-8085-e5bd07c50140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d0d52e-fc61-424b-980e-225d97db8214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69ed4d6b-df69-4c20-a731-63dc446381ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2aea38-04b9-47c3-b29a-b2453569ed17",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdeab502-792a-465e-bda5-80bfe739e26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075eb6be-5a34-4444-bae0-f7915b1f29f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574360a8-86af-459b-b681-59203641657b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9b8a31-641e-4798-876b-52846bfaf9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068d987f-cb9c-4139-8cf3-2452525dec7d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa47bc1-abcb-4896-8744-68c789435e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9565b72-adcb-4464-a646-07456a26e65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c28fb0c-f656-4c1a-8c9c-c804057e321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab39a23-4d35-46e2-90c8-7394f2e02b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c54f5f-0cb1-4114-a076-8453cafdcdbd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8784aa23-fae6-40dc-953c-5beaeee88825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba16933b-6306-4fa1-a4b9-b57895458068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3e6574-cbd1-410e-a896-1aebe2fc6157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8097866a-4aa8-4931-bb37-45d0cb919d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957d3d80-6451-45fd-be31-cbd42b78bd2b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eddeefd-d052-4f80-bf22-6eff8bc8ac33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fdb499-16ad-4991-9808-b3b5dd0b47bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581aaf7c-eeaa-434d-9288-89391c356d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77d5eee5-cf2e-450f-a3db-23387737cf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b264fc1-2cd8-42f9-a60a-5d78392de231",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30533bb7-e7ec-4631-8f7f-96e8714d0c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acfce1b7-e270-48b1-bc97-ae1d9cb1951a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15a8fac-bf54-4cf7-b6e4-ef49b1130de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0636de0e-e48b-411a-81c3-abcc611f0077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6d97b4-bcfc-4ead-8f25-2e40cb72bf3d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583cf0f4-9922-4393-822d-a843a2e8dd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bb752f-6d5e-4d7d-89a1-037214f89a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a2be72-2ee2-427b-bcba-b7b6a9c731c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "97dca989-a639-4d1e-a026-5c269f413233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c2a7c9-bc44-4e07-be35-2d2984920b56",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6223d13c-667c-48bf-b00f-2d173bef2ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbe34c2-0e6f-4775-8629-22a6229e2ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d82f49d-1a00-4322-adcd-7c0f0ebe2443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd19b97-42d9-4252-af65-c1b95877f3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c70e35b-df3f-413e-9882-b10f7209ebea",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e031b807-135a-4f30-a574-4a25c04d6cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d11c242-dd58-472f-8b9b-51d72c535745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef90e340-ebd6-453f-8e62-fd5c3179cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70001a81-c9a9-403e-bdef-a31ad1ffeccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa5f946-89c5-4908-9c49-8d500750efa5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ab53b3-eb60-4cd2-ae92-6f8f44e6f250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4d17c6-242b-40ad-bc59-6e6dc05ee455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb850caf-d1e8-4b97-b3ba-56030a74d9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f7e2f9-a1c4-48fa-b969-0b0bfb07f325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e90ce1c-6060-4ce6-b4c9-2778ebb1278c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179ac3c7-46c4-44f0-837d-be91acea8490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b476cdf-1bb5-44e2-b302-bd162886f162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c30abe2-84b3-4a73-afb9-b24be61ca944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6761d47-dac3-48fc-bdfa-9115dd16f14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b508c7-9b68-47a0-b096-dfb4484b62b3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4ed6a0-df4c-443e-b15a-431b80aa6909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c065f9e9-4f3f-454e-9040-bda5547790fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5222e825-99d0-47bf-866c-13cba1daeb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5da022-8777-4235-b32e-1bb0fbc749c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731ef821-757e-4f82-89b9-4da08f677eec",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3712bab2-b462-40db-9026-d11d6f38aa6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83ceb99-5433-4e26-95f0-52e541838da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd73fbb-e8d7-47e1-ae07-83bb645b8006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1556a575-6652-4525-998a-6a482f7309d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f1b839-1308-4576-a7c9-59803970dcd8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23203133-0fab-498c-8e32-289113fd5806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce76bf1-1f68-4397-9ed0-40913135d3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e15aea5-1107-4d07-8f3c-032669415b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8017dee6-fc59-47b2-a7e0-41aecb01965e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954b83d2-a955-494b-b846-8df3c886f780",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d472714e-30c7-4712-8f94-a7fa1a97b816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349b9b65-c5fb-4426-b9c7-56245617a2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d4cb64-df90-427e-92d1-c626e6f1d66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1907b42-c0a0-4f84-83a9-85658ed3e673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01753d13-1fbb-4a36-9e6d-d323e519d855",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e2785d-6324-4947-a896-9cbc792ff1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431b3984-febd-4280-9550-79d737a89dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e7bf45-a623-4cb0-8f63-7c7c6047633d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15662c25-6ab7-42de-9067-67377ac1cc14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba5df1a-aaeb-4ec2-a11b-0547833b0e92",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5be9b1-9376-4254-bd2f-879b25047cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6041888e-f351-4a2f-8712-3cb6e812907e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3045ada-d8a2-48b0-8a66-111c98bdfe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "836750b9-feca-4f38-a479-dd1189bb39c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec64c85-2312-48cf-8e24-238617bdcd35",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccab8091-6a09-49f6-9c53-140a27895018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f24dfdff-cc5f-4399-ba4e-e0de1a580528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ef1311-ee40-4824-a344-a46ad4c5cd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31b17725-22d4-4105-b222-d83e8f8d991e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38e7a603-d6a7-4ff6-9fee-7bab3d567216",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28b33e49-20b7-414c-8ac2-8f5035004e66",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7465a66-ee0d-45a1-9106-da588a279c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04cf22ef-b75d-486b-aa14-85cc4531a2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed5aab0-3011-4794-89cd-aa440fefeb34",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c16422c0-0b4b-43a5-a10a-67aff910de15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53152b4a-1c11-48cd-a235-fbefc1715ead",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "957adf05-4b5c-4ff8-9e13-a14f84a597a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "316260b4-8b6d-4c12-a648-28a80412d5bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4539648-50dd-449b-beb2-12d5034a320c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b62babe-0d28-4f11-bc6e-40cada25f3be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da7be4c8-2dc1-4fc2-865e-a65f3dbc15a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44dd877b-3840-4b4c-91ef-ca09dfb46b7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be110289-7061-4e88-8d51-261a4c32cda6"
                }
              }
            ]
          },
          {
            "id": "4742b289-21e3-437b-a3b9-a4b5a636339a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e3cc635-139d-4d15-b337-9aec6c4e695b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aff817f2-cb62-43e1-bc19-e12c03c3fe8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e698908-7f32-4037-b32a-bd799bdae890"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96d1c8b7-eada-4d8b-84d8-3c7f0cdd421e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10aff167-2742-4fb6-a6d2-fd2d5ba7244d"
                    }
                  }
                ]
              },
              {
                "id": "0df00a71-e986-4a68-9675-4e320bba7dc1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7baf3991-2880-4546-b797-69e0272ef857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f52947aa-1b63-4a7f-9ccf-7436a7337c03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaff5a50-b404-41fa-9f81-e681b38f6994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9234e8c3-981e-4d19-808a-54e57af4d52a"
                    }
                  }
                ]
              },
              {
                "id": "23d6fc4b-209c-4523-8e65-ba9c78f45a80",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "493bd4ab-55e4-471a-b027-efa9b97bf4ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d25ae85-1fdc-4740-9476-40963e50b817"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ffae815-0499-4483-b33d-b49db166c34f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f743130c-72c7-4f64-8036-e705a4847915"
                    }
                  }
                ]
              },
              {
                "id": "66d6370a-4c84-4f80-8c64-24556b1b0ca3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33f8299f-4bf0-4780-bb44-7009014e7502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2506ac7-d16b-404d-a58d-caf4b1686daa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94af154a-f6f3-4d1f-82b6-b0df802ce050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5ced48ee-ffaf-4eda-a2a9-ae85bc4ea47e"
                    }
                  }
                ]
              },
              {
                "id": "959c465b-77cf-4bfe-86ed-dbaa92e45fd4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4d396a4-70ad-419e-b2e5-8b27dac48264",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f772f1a-0a84-4fff-bfbe-827b00ae97a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eea8a95b-76ce-4ce2-a23c-c00d69b9c9b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "efaf8945-b4eb-4457-94a5-213cbc11531c"
                    }
                  }
                ]
              },
              {
                "id": "4bc55943-d50e-4801-a7e7-6325630a2152",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ed4542e-9972-4cad-b921-8b9aa21b11ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d33759a-be23-4445-8829-4b37f5950504"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e65d75-bcc4-492c-8a58-1f2fe58f1f6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d392a89-4738-43a2-b5e8-2fbe39028b35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dbaf6cdd-de85-4644-b94d-f55475b8603e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5d995fa-f7e5-4479-a5df-e2f17a821d0f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8efd33f6-e33c-4fc4-b301-724bf83c3f74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be8bc1b3-9bbf-4cb7-a1e3-f25e65c2dd3d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d50dbdf1-0b24-4f04-a06c-ca9195dce257",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c7691958-fdcf-41aa-b104-f75342a3330e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9328016-c4fa-4eab-b9c3-0c5e40e8deba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69dd4d09-2655-40f1-b21d-cbb71c6e6d6d"
            }
          }
        ]
      },
      {
        "id": "9c0485e8-5660-4730-bd02-2430680634ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "32ce5201-4e02-41b7-a836-1082decf476e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc81ff7c-6e15-4297-83ce-21ec1d8bbb02",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78fdf148-801c-4cf4-9047-2a94253b204c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8903255-1340-423c-a7b1-82ab99a75fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1076b974-f7dd-4236-acad-3b10148a7c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d33c315-0074-4d0e-bef4-e9e2e2224216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e72bc7e9-c790-480a-b859-751af649d090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7060c6e-14a9-468b-b180-4e6c25d319a5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56084c82-4a3f-4abd-8f25-71c6625249ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97de01f1-c8ad-414c-a4b6-f0678ddd184a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0c3fe7-3d77-452e-ad2c-8c8bdd6c0d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f18b72-5b4e-4671-ab9c-32bb8ef81f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d788ba8-a853-42e4-99e3-09e359aa1c53",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81e2136-a65f-48ea-975d-ef954c767fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b82fb2-1a24-4b96-aa71-161cbc29de30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778926bd-cb7e-4bef-bbf0-4aaf9ce126d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e38a81f-2bf3-47ec-88b0-d4189447dca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1960419f-47a5-4e62-8863-bcbd64550673",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6a11a6-2330-42b1-ae0c-537c3fe84037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b94721-2261-4fb1-a4ea-fed6839d2eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930373d6-4ada-4c30-ac94-6907b7e7de31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baeffe0c-27ff-4d80-b0bb-011b0327c036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10b4488-2b8c-4227-ba9d-5402d8609af6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bd4556-450c-45e9-aaa4-427b28368a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1610b28-c04e-4529-984a-75b96e5ae730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6081670-e7df-4d5d-bd96-163f74c6d916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ff6f7f-9b58-48ec-af5c-b0c014299a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286af9b5-0949-4a8a-aa21-e350b2685f43",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2d25c5-2314-4611-b836-46da8a899da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7083bd6-0f2c-45e1-81de-a19e97bfc356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44ebcf5-2abe-4889-acbf-f20438fab3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b36f551-1205-4ac9-ae27-f906339c1d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc731db-3338-417f-b0d7-1a52904190e0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f200a03-6058-4d2b-aeed-6946ecfb46b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba79756-6913-4dd3-be85-6e187a5f85c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4c0f95-98f0-4d47-aae2-b8862a461b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4185d3-00c3-468e-92f0-ed4c91252602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298ee46e-c5dd-4d09-8754-957263b8b61b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b1fa40-aad9-497a-af73-75ea8f627b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc402f2-feac-418a-8207-d3bbcd0d541b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d542d20-8a55-4030-b4fb-d5a9bb14d148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a711189e-2270-4cb6-896a-a6b8caf1fb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d8cf65-ad02-4a36-b980-619d5e8ff040",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517486ef-a142-42dc-9a91-6ed6526e4289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae82ac8f-3fec-4565-82fd-4517e5e6ad82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51f57b0-0847-43ec-808c-e56ab72b747c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b07f181-dd43-4fde-9d0d-308131add836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5734b6e-fcec-490e-bfbf-841f65641ba9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71559671-b11f-4440-ad76-01851f81f8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e002163c-da59-4dbd-926a-32a2cbe23401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed5a09-077a-47b4-87c6-257846ce2e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c05f424-1d06-4883-9574-a742829d0b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22018e3d-ba79-430b-a951-e1652c3b2aba",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0a0d80-c308-4f90-9a4f-9c676a45663b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61acea6d-d42b-41d7-bacc-3030c2f10680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac27b513-855b-4c10-919e-14b78a07a671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a40e859a-f723-4b3c-8d33-c9478cbf8c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba15c48-2f09-4d76-a4b6-ebf4171d5e46",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901025a8-8952-4ac7-b4b1-656ce46f5aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a9dabb-55c9-4531-9156-65dc78acf8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b619d8-b54a-49fb-8d45-b6c30031c03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49d5b668-b66e-4f8d-8cb4-fc20460811f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964fcc2d-4071-4849-9971-50cc87cd9d9f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9855530e-35fd-48fe-ac9a-b216318814b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b266080-1535-4a35-bbee-63a41c877789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5943e36a-577f-4f2c-89f7-4798b804212c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1df48865-7b22-4d92-ae24-d962d7064f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d0f4a0-24fd-4857-895d-ab04c68f4a08",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d23680-9df2-47a7-9678-5f39df07df25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb1a507-9273-40ec-a066-337251d09189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85099aa4-4d41-4abb-a279-e5e5c58b4a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "149d98fc-49ee-4109-a42e-a128be69ad77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5dd37e-309b-489e-a21a-16a3864c9498",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc5d845-1018-4b78-bd1b-4e372838aa83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9d8b0d-3d70-4896-a6ef-8b58eaddbd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2128fe31-bf0e-4c28-a7ad-e3eab381727c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "236f96d2-5023-49f1-94d0-75a256c08171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d6cf9a-1312-4b27-8436-88fc42a69889",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5935f010-3333-4bb0-b67d-7488fafb8a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a049f288-611a-47ea-8232-aa6225484f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80fc30c-f90e-4e20-9252-a839d67e3d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1a342d-4f89-407b-bc82-7a0fc2449d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c077ae-1dd5-4ba6-b62e-84696ad963f2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d96d96-703f-4aa5-b659-810462c195c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02fb5f6-1963-4382-a2e5-eae3138f8ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3035f5-79ac-466f-a3e8-a9bcd858466d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc204e2c-4f1d-4e23-b423-6f230275a205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b640ccd4-497c-4403-9d31-9e54670f343e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cc4c81-bc23-421d-97b1-f1c43bcf6e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b616753c-68a4-4791-bdc2-a2afcc6f68aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f862f475-4896-4ddc-a35c-4a4f97291a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a6aaa4-16cd-44cc-a072-e3231516297b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959d3f61-5315-40fd-9eb9-47b9986d8337",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998220cf-534d-4e59-bb02-8adc288b47b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815a9525-06de-4c9a-a1f2-72c1c107e2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31263cb-ddee-4b4e-be48-d3f7b08cb538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a1cde0-e1ff-431f-88ba-8eca01d53343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a6f838-ed80-4d40-ac5a-80d5f4c51d25",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dde815e-5223-4d29-9463-69b4acb69452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f05006-34b5-4c67-aac4-70f01addf682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c351dbfb-b023-4932-a40a-3299f093eb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51201b7c-21ca-4d40-b2c6-a776247a28a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5c91b5-106d-4917-b184-6ffd6bb9b225",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89a3d23-0bb5-48b1-8829-a60d7c122615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06ee517-fc6e-4be2-85a1-0dfcadc51d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4d10bd-28d7-41e2-bbf9-82a2bcfb8631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccec2b3-4f13-4822-ab10-4ca6c4f0cff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd9939b-7021-47c7-a0c7-95d1a7dffa0b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430e753d-29de-42e4-b84f-f3a70d00d680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2733d0-fd7b-473b-b2d9-b05808d27dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c1905e-cb2e-4170-a31b-81f2ab42ee26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7734de-096f-4122-b8b4-3bdb621e951d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77293c27-ff88-4bfe-be16-cd646aefccc6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4ff269-3e1c-4ba3-b0a9-45d3d26e6422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a719b68-3bd6-4000-bd1f-5b2ff05d73fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203eef4b-c325-49ec-9c47-c31bfb159c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "465dec3f-1bdc-42ad-b127-008fb226b057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f30d4ea-260c-450d-8a8f-f0b04214e5dd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a2c00-69c4-4c0e-8d90-0ef95f706b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85497fb6-131f-45dd-995d-034afec04637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb0d5a6-598b-46d2-a87d-7759724eda0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c510d8f-c4ed-42bf-b584-d4d731411a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36105d37-5bae-4aa4-a805-5c45f20dc783",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3416d73-ea55-4c81-b28c-3e1390505cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969ca0c7-0422-4309-94b9-6ace28c66416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7528bf9-e149-4ab8-b376-c1a149865f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31bee372-7cb9-4e4c-9c2d-11491680dde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee967537-693a-440f-93e4-e9ccac30b336",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0721fe-046e-4ad9-a10d-f498b5789f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da8c6c1-9179-4d1f-9269-9513b2dd80a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61de520-5ab1-4f8d-9311-5a74fbeaa7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93999424-a3fa-423e-b1f9-c062fb9cd364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae4d28-3c58-477b-a0a5-3927a3af320b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee01754-8b31-418a-ace1-495045f81df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4460c163-01e8-4ed1-b2dc-a2aaf3da4de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e4b0a2-ca42-416b-aa06-408aac75f638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c27f71-b79f-4a91-a88f-119fe397291d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba9cc5f-66ac-42ae-a64a-acb7f951ce77",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b675d7-7061-441b-981a-217f321f03fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8d0974-8eae-4952-9b47-9fab1b8ce44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10cc151-c8c8-4956-bdad-984d8834c335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece8cbc6-d9cc-439a-845b-dfd483b9eb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2ee77a-5deb-4a81-b0f6-92979e4c8247",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db582e55-2077-41ed-adae-0d6a8411e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509c6f08-3410-49a1-a4c3-0d530d3ba3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1813622f-7291-4809-8016-1adfd7559817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a390896-da0c-468b-a474-8a9b4be5bb13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a63902e-5016-4b8b-853c-6c20acd3f568",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd856f3-ae9d-4401-992d-c9853ff80f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be620122-a4ab-4792-99cc-5b947eb105a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb06ed21-4785-4b6a-877a-8a58b398152f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d64ab03-3c9a-4f0a-9dec-7fa7225b4fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22554dd-0e49-43a1-b1cb-723b06f4ffdf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d5c0e6-f56f-4cb0-8fdb-71aff0829d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7e0e3c-ccee-49d9-b8b3-615c8f7ad568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7990520-d487-41ad-92b9-d36c7a6ff4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf52c34-bdbc-4e5a-a373-1555059aee34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2228c990-3443-423c-8dbc-2cff94a989bf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250847e3-af7e-4790-be8b-9dc3da640ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4c1eb9-59d0-45c9-be6e-dbe2c7bc9435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f95e83-5482-4800-9bf8-e620ecde261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6c565a-94a6-4f97-be01-30ba57e7716c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3277095-c986-4564-a8de-c72b3d69456e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2c41352-cd11-440e-ac4d-c53282ae3d7e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209df5bf-4d6f-46ef-84d0-1a01727d0398",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e41e3b-c317-4bdb-9728-4e8fd8d7e4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99efe3db-6f10-44bd-99b0-5775997f23d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "148946fd-9305-450b-ad38-3a7b01994820"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e560c4c-1f0f-42a5-a6d5-59d141eb9ae7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c79e105d-a3a1-4d04-9c19-60d381d31cb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "486a82d4-06aa-4255-bdab-7a162a008a95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17449a85-dd25-45a1-a327-8366655ee896"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e8a33a8-8b52-4147-a9dc-f7a69b81f99f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "26f95a79-e8cd-4535-bb68-144fb16acdd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "278d12b7-371c-4fcb-9878-26fa8178e24c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9f4f89a-b5fb-4416-a391-09d7022d9f9d"
            }
          }
        ]
      },
      {
        "id": "e37b2348-2aa4-4194-9244-ec30ce2021b2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ee59b759-9be8-42c7-a5a6-72ae7ea331ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2320e4bf-5a5e-4fb5-a51d-a4f8dfa79ede",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "edaeb410-bdc9-4e19-8ee0-89637e451a77",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e061fa-c559-4833-bb0e-900a39035bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ae539b-8f76-4bcb-8b39-01b8e46d1886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f597b46e-3b94-496f-9edc-bf4077c2c442",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4043318c-8665-41e1-9447-434db61c2847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55d06ab-3c9b-4064-b905-041cc9970c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d8a49a-ba8f-4201-8ad4-9c21388d8543",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f944d56f-78b8-4760-ab42-51a8597cf62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b11a2e6-efdc-4ebd-8c1a-0d363f2cd7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d754795-97fa-4647-9c1f-50015db6dcb3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be449744-3858-4ab6-b4da-bca4f6e11aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcaed9f6-5e17-4b7b-a6c8-677322547811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1e6f10-c08d-42c3-af9f-232ef0440c94",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b17a3e-0b44-46d6-8322-59d91cfc8984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2c2197-d7fb-4570-96f5-30255ef34a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ad0e1e-2371-4d47-9369-a1fcc76c5db1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9da48d-8493-46a6-8f10-7485ac38fb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5cbec95-0449-4cfd-b041-dd718b3d806e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7118a42-e424-4b6c-91b9-8f9c0d8a8e21",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9bc3d1-e28b-4526-8bd5-9ebe76309faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1f7787-9e05-4b42-8926-3097c38ef582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa60f232-caca-4609-aa11-703976a4814e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bda98a1-b67c-4076-a069-253ee5c94640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb7ae28-93d9-49ea-8637-3c3ffacd81ce",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bdba91-4cc5-49bf-b95a-e5df99627781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217065c4-fa8b-4604-bfbe-26e900fbae8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36dfe66-45ba-45b6-ae52-a1a1497da338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4dea6df-bd22-498d-80f6-e855466dba17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613c8221-8154-4e00-ab1c-c171fe437e64",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf751b84-6164-4562-a379-a0868cd10815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb7f503-f236-4bbf-a06a-700de5200dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed9042b-3d2e-4481-aa73-901a6aa9c6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b143d793-2ff9-4887-89ca-8219ca82e84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57ba96f-5798-4c04-a254-465b76734e5d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d13fd6-d7e1-4621-91ef-67e68c1d344f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f24d9ff6-d6f8-47f6-9e4a-919c9669614e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803cfe67-ad0c-47d5-8f4c-4e6e1f9794a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08231ee2-a382-4005-8627-b73932a43b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c12dd0-18b7-417b-9971-fc223a1797a0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbfe361-724b-434d-a028-61b60df308b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e00b62-d5b0-44e7-b8f6-280aaa012dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8d1c81-9197-4f03-ad55-ef6772256837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9625c2e5-0850-4ba6-985e-bce2b7f583fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21037781-f586-4b12-bc1c-6509550aaacf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd28aa3-90e4-4363-af2c-14866637f2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b2151e-7a6d-4e6a-b1ea-1e4561d5e9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ef2d3c-b113-46ba-ad7c-0c95547815d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f535a0de-f244-41f5-b68f-8b996c1ed65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364aaacf-e691-4ec0-a9de-92d01c08bf8d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e2c938-2af8-475c-bd2a-be66b6cd4e62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabbc9fa-c6fa-4ecd-89a8-09ac42994ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe26990-7f6f-4a35-9b1d-845ef1a64a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c21a5f1-aba4-4585-aa93-d3983e9f7125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5f77ea-9dde-44a1-82fb-8c80d767b0e6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb26d6b-107b-4c8d-8a85-bd9c7fb025f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd85411-5c0e-47a3-a099-b893df1c3c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248fb089-7620-439f-a348-ca9239471b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d032ad78-2372-4b3c-a01c-c684a2aa4ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7bbb60-874e-47fe-bc79-19aa8afc79b3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329ba0aa-437a-4042-9d17-fcdf48ee5227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7e50fd1-7961-4fa5-986f-7fe4c3e4bd14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6a8840-e658-4f3b-953a-68476f288c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e85ff0-0987-4ae0-833b-42a04bcb4c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2118de-de00-4ac6-bc8e-748cb6cc6d6c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7338580-b44c-4033-9d1c-b61412a1ea75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def641db-b9cb-4f13-991e-37d55b64ec5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd1d02c-9cb3-4396-a05a-9fe8928e953f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb001cc-be62-4eb4-a604-fe5ec4749290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9929629b-0014-43b0-8aba-b18bda490ab2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039563b4-3e2f-4946-a2d6-1ab494dccb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3a8818-755d-4a73-adb0-4a0ad818458b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9977cacf-65c0-4a38-9cec-be008c6991fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8604e57b-398a-461e-a31c-902d8922fbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef948673-23bf-431f-a49a-1fa625ca2dd6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c022a49-475e-4d91-af35-5d9008341c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe6aa7c-fcb9-4f47-b1ca-faef0e690cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5f0c49-39fc-4a36-a218-d445d354080e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42552387-3025-41b0-b952-f957d87cf3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d46c43-f246-41b9-814c-521d5d95383b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11cbf98-1506-4024-8a26-9aaec45d903a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b2f1bc-f9f3-4f1b-b42c-1acf99e8291a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd930d7f-92c7-4daf-bad3-471783a5c957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6e80dd-886f-4e3f-91f3-bb92ccd95e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc2372e-8b96-4124-8d54-ca5b54310b00",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b163859-407c-4f23-b014-0756871d1cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972793ea-2305-4bc2-abdb-d4852232db46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb4316-8acb-4861-8d20-2f958190f970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18da2e15-2406-4001-ae9a-dab9cea768e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b858e2d-ae89-4cb4-b146-dbe6b5ce7f6a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98bcdab-4531-4f57-8755-2f1b4953abf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706a43eb-3ea5-4eac-b596-610c266b123e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180451c0-ffb0-4310-9b9e-edb79a63f452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c433ffd-1279-4642-b9fb-8f9ecc719695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0a9dc5-0994-43c8-9630-4123d3a32850",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3702d163-2243-41b2-96b1-8364984bb022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125d151f-eb55-42f8-9ad1-d88f5d47f5d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07d9bf8-f179-4153-abbe-47b77b493af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89c3dbc-7c00-4f60-adb6-c7ce7c4f4279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f97bc08-e13f-49d7-88e6-4f75ef3a9ae5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e0c7e2-f22d-422c-8a38-8bd11d9e44ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718a00ac-209b-4a16-8254-414198e4e927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79572957-33a6-42b4-b196-fc25c2a7bee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abacc063-54c0-4f85-80fe-c555e753819d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd87b2b5-33b1-4ee2-af33-3f4378df25e2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04a8d6f-accb-4c0b-9340-28dfa957f0a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe9ae20-4b71-4284-9308-eb6d34413308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ed789d-50f8-4479-991d-7f5d34e33a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f0be85-80d7-4072-b7ba-c033b05cf4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7ee4b8-c9a9-421f-b35a-29375d05037a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a937f6e-8118-4732-8c7a-06e4d4e128b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7bd1ce-a10d-4e5f-a8cf-a8b4a766cea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44fb960-6d46-43e4-b36b-ed069e408c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371368d5-5dd3-4fbb-b3f7-915d14623fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cae0f41-ea93-4f72-b744-542bd6ec9bcf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f0e975-c067-4d05-b699-503c34ed4137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c4a6f8-a2c5-4a35-8972-c10c3e3b4fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0657d4-cab7-4486-8724-a748dd73f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de808ad1-0598-4eed-b055-406b98fca28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf79cce-f246-43c7-9213-81ef835072a2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037fc505-c9eb-40c6-97cc-45107db74fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5329f0-d2e9-4b9e-a55e-54bf40d1a74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89651be-fffe-47ac-8d22-2f77fa331e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7274232-3602-4ed7-9ec1-d70e778ca723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3093b1-1fae-4fc1-84c7-5241bade7ea2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea22b04b-3887-423d-8bd7-b39a1f333205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662246dc-3854-4d90-8eac-4c344b01e016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d8f68a-1482-42df-947a-ede97f0abfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f8020e-e25c-4c9a-b14b-b09b4de5118d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed622ea-25f7-4867-b32f-28d7f5b83cff",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a695a3-7c4f-4b1a-bfa0-ebe569b04e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c32f785-df22-4bf2-8e86-113b4f85a904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34273f71-7862-4461-8f24-4f07101e6eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65715d66-d6ad-47b3-961b-9ce467b14d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400f6054-89e5-4b02-87d2-c0add6e1244a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd5847b-2ea2-4b84-9029-a7fbdd43e91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bed811f-f1a8-43fa-a1ef-b349681871d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9898e9-5a4f-47b5-b490-db471aac1d17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055933dc-838b-40cf-83e6-206d96c1b344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ab28a7-c1f3-402e-a191-e2ae8465ff67",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c22316-cb0f-4abd-9a1f-5b8cc72184b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "307c0b4f-7d77-4dec-8464-56f5c7c9b6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2915c694-075b-4227-aad0-8cf3f55ec09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f91b63-4762-4273-8724-02a16bcc9443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6099652-3a8c-4432-945d-05ca730767b3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1daa3d45-1aff-451c-9c93-90b833ded9b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c4bbda9-2487-40ca-831f-09d58e669d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59444db7-77b5-482d-99ea-a5636bdb5aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02695eb-c34e-4b71-a843-6dc2c7f952a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcb8c41-b044-479b-8791-0e343d850e8d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bf9c3e-f610-4c40-80c2-0cd1e20ad9ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03c4444e-36cb-4254-84bb-584af774e21e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50eb84f9-a1a0-4dae-9e5f-cde51c24004d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1373fe-da67-41d6-bca4-50c8fe45385e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1e072-de1f-4961-b29a-9275d40fa756",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282c0c3d-e347-4c0d-a8d7-616f902e31c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad2c976-0ef1-4a11-b9b8-ce517d0d9e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e58e40-812a-4b54-b8f7-e0fbd3ef3d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9c4f2e-d18e-4594-8dd8-c7bf7b0825c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a28940b-14b5-4b58-bd50-53e77dd15cb1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bca481-bbdc-490d-99a8-ba4ee43eb2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b745502-b370-424d-ab13-c47b12c0910e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6995e3e0-be63-41a6-8d8c-e7727c2702e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400486e7-1db8-4eba-8d8f-4b3d9a2cc92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c84ac2-e46d-4157-8b78-4f4f497b7719",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3bac73-5408-4bc6-9684-59ee50d7870a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705de1fd-c365-421c-99db-38e13c6444a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1e37a1-e8c5-4000-9b8d-f18767b9e8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c580ccc-5f7c-458b-bdeb-6d50b0590506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68856cf-9df4-4163-9cf4-dcd5b53457e9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737b2ce2-309a-4ea4-bdae-d8171e137246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda040d4-680a-4f35-a526-e70d2eb91261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baab738-783b-441e-8515-e32a257d6e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4d386e-87a1-4bb3-8406-2e6727f86f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91eca83-bbab-41a8-9004-1b51b87f3b82",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c64d75-edd4-42af-858f-96ee720a8feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d149ed63-f307-46bf-a41a-6b709cc0da3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0696e4-e51e-49bf-80a1-7d9902789744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91fca09a-daaa-43f5-a98b-e8279bc429de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae4af38-6939-4bb4-b5c2-2cf7eeab910c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d84889-f533-4838-9283-8e86435290c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1601cd0-0ca8-4661-a96a-cf01b6be258f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e138c8b4-08ab-4615-9a1d-9ae7e5f61759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed1f03b-1f01-4ccf-8eeb-5e834e5e0424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4ddd95-e4d7-43fe-9777-63c34804b02e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac85bd7-2056-4573-bca7-b45a715c63fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf0b3a5-041c-4989-adfa-316f12ac7a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a40fa9-6259-4303-86d3-46cd8f5b2342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29d8da8-8db2-49ca-8230-ed6f70f53161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f069aaf6-6003-46a2-a9d6-5bf5e03e442f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51de06f-59fe-485c-95fa-f9b7b5d80194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095d6b76-236d-4cec-8a3e-b2a52c81deeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1566ab05-01ca-48d8-a08d-cbc2204e3929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddffd81-1f8e-4899-8aba-4ebeb44f329e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbecffdb-bef2-41d4-a30c-531354142d26",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b05fc0-6f3f-4763-8c86-d7103ce8ea3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00a14a0-b12b-4fa3-8786-9155b5f6d2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3579606d-b2e1-4b1d-b93a-b3dc19ba5512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23881f78-c00b-4000-8dca-30145dbfe393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a83aeea-5807-48ff-97f0-f3a9c523ce03",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fdf5da-e6a9-4a22-a154-000373d5a5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c90528-4fc4-44cd-a84e-d0d115876a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666676da-ba8f-4ef0-89ac-ae6363ab52d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af4982c-512c-44c4-880c-bfd7ce784ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2cc6e4-aae5-4ec0-9290-549b927c486f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb933e9-a6ca-433b-a135-a8cd372e5e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba908ab-c5f8-4a0b-a361-60cf88217c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b70d62b-a209-4d11-85de-175e2e070f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7a5882-55d4-4fa1-8984-91b7156edf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b09543-fa74-417e-9a97-b23635bd8b6b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f34503-b060-4689-84fe-078d6bcd95dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec21f568-8253-48a1-a282-55c4fabde682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fecf71e-27c3-4b8a-9f90-1c8be2decb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88526eb8-5a67-4dc8-aff9-8da5ed9c3740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c2cbc7-27d0-4795-a52e-214d99f3ecbb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3a5b3f-e09f-49db-8a71-7ef9f9c63207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3f2ffa-e72b-414b-b829-2016946aad04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df387999-57f5-46f6-b404-9ec49bee3999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739a2045-ad78-4f32-9826-1d9f3357d36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ec225b-ee40-4d79-ad01-2dd473dad372",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f9ce09-5c31-444b-8acc-2e22e2b6e777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71767f2f-f3e8-4fb7-8fb3-08fed8cca7d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a86d52-543f-4d31-8615-89988b9a549a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee01cee6-2de0-4c27-85e6-0e06de58ffa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2675f0f5-229f-4fae-bb96-eb3b536aa246",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ebb23a-5261-4b15-ae41-911dd64a7444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd9b9ad-c8bc-405e-8c76-1a7a46b181eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29961620-a81d-4efe-be3b-c299141192e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325a7dc4-9e4e-43d6-97b6-86a724862c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535d74a5-e8e3-4b10-9c40-e757de3198fa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416906ce-c73b-4b3d-982a-db8abcbfd6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1018050-f9b9-4f33-b6f2-e85e2bf0e980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae50a594-d890-47ca-9fad-12aca3757f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9372710-7986-4f42-aa39-b5e192b23941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d649069e-8680-498e-a3d8-d6b3ecd4bef8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dfb2e9-5264-48b7-9b6a-ac59378e567e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862d8320-af73-45b4-a5b0-84257b78070e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7813227b-8d88-4c9d-a0c8-26958f0ee00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d45e357-790b-4fde-b8fb-8f2aaf015ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a85713-8e46-47c9-9b1d-02bf7205f948",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cbcf54-7386-4b10-b478-86469d0db645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69373db5-da6e-4540-8e26-140ab543d9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e77df29-a354-459f-a5bb-d8883afae82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330c8906-1f69-4eb7-94c1-55761b4213fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3562afb2-80fc-4315-b005-5ded4c47dc45",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d8ca1-74ad-4273-abb8-d3ec52b13a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c34465-62b2-418d-bb79-4f8c5465c944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a75e11-393e-4880-bedc-245387629459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce526e8-2f8b-4411-9af1-ad83f9683562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb200f4-2305-4005-94dc-646a0cd826b4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2193edbb-7bfe-4921-9792-60d47e5b6f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2aec58d-899c-4b13-bdbc-736477a35a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abba4f06-f760-4788-ab64-6bf598720a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85500dc3-54e4-42ad-823f-acbaf56a6ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd50f881-57c9-4c57-b07f-57fdbf8b4a12",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef74fb6-7dc6-47b5-b552-c6a752d30698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ef3e04-49f7-4903-9439-791031491364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6ce267-7d3a-48f0-aa48-478396ca830e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4b93f9-0fde-48de-a888-670a683e5b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e3ea5b-4507-4cd7-8a6c-42b19fdb9c84",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c1fc87-99ef-407d-986f-f98758f62af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f946e9-bb9e-414d-972b-0d9c3ce55ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8484b42-4571-476b-976d-0c666731d93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7bb29e-9a9a-4500-a213-c36e51c3c348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d70e611-024c-464a-a6ad-a425e7a3616a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fc8073-7da5-4377-add3-bcbf5299d376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b410e5a4-342a-4886-9622-c10328794741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd646fa-e5e6-4580-9f4b-3f1b722e236e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e0ff89-3c50-48ad-881a-339f24435629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f617b-921c-472e-ac76-618f3f8db4ae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118f7bfe-994b-47b1-b9ee-56211157fb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e9d53c-c967-4e18-9037-c6038e34c0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1470554-e7bf-4f46-a761-8120a3712905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824b1efb-66fd-467e-b518-b82aef86d496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13e19cd-8b0b-4195-afd7-b705520c2a5e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea515312-9404-4c33-9a0b-6f8e065b9d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782a5560-6fe7-484d-a810-b43c4827a213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8da49e1-4d31-47eb-b7b5-a785a2c195d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c497f9d-3e03-4efa-b6ed-66e3773787d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bcb85d-22f2-4d92-8f70-e833279fd653",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cf190d-46db-4d9a-8315-69fef1b0e8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d72adb-a82f-409e-9388-a50941fab985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb33da5-b9dd-4314-b1ce-e4ed46a38cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba42986-fba4-460e-85d5-76c794ca932d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f382ff02-9420-458d-bb16-e0cb3729b606",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09aeb479-79b4-4c05-8009-8d40e0feb9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510debe5-f13b-418b-850a-61c1c4fdcba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77eae0b2-5026-434b-850c-a3be30b1eb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc91ba4-cd63-4851-8893-763aa194542d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964a5f81-07a9-4e22-b0c1-78985248a852",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd37e78b-707b-4c0f-ae07-edbce674cc0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815b83fb-4f9e-464b-af2b-cdf449c03ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2ffe2d-0c93-4258-b538-7a982aaf18cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696465e7-6731-4505-8b95-23cc5bc21efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88e162c-7ce4-4f71-b5eb-95ae7bef8905",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d40f58-d655-4f29-8f00-c1e09749aa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a159b0b3-0375-4f60-b209-d2c4a5e8e28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "debfc72e-803e-499c-93a3-059674becd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c907526-5b3b-42d2-bc47-2167158e8be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f75a8e9-130d-4df0-ae4c-11aa8d779d86",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf3094c-4fa4-4533-a2a4-189ae06ecec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbeb0ac7-8fc9-405e-b184-826daf4444e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4714780f-35aa-4a42-b43f-ca0bce77e095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54659c35-6a3a-4330-9d4a-450e24e4d963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e977d15-9a76-4828-8d9f-40cc1d9c3a77",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a839dbae-2aeb-4652-a2d1-807ae007b47b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1590a7e-978b-4f08-9876-cfd99419e89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4228a2ae-42c0-4c46-8214-ae2c4a8858c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac6f4a8-4b53-4e26-a74d-3a9c99c4557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d80157-2279-4915-a76a-ee291a49811c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b231c0-7ab7-4be0-a4bc-beec6eeac0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff63c8ae-53a7-4444-b1d7-b8ccb7245db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e74147-0764-4abd-a85d-dc958101215f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1838af-8028-4554-b31d-d291fecce000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3586f3-43c3-4b70-a1af-3be64718d584",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f24b78f-80c6-4f30-98fd-985dfb8b3d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0fb5389-d500-469e-9ca5-d9c83d70db2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e649626c-735f-40dc-967e-36c70bb0e208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26736141-d99e-4807-bf24-f30c3bc93e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ec7649-97a7-47a1-8a99-321ae50dd3e6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71132f0a-4f24-4cb7-a98e-416c0b680fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fed89b47-ec2a-4ce7-afb9-8e6a59f0c7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfc5916-96c8-4e3c-8c64-94394726deff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e48e6d-d4a2-4f06-9e65-562bdaf9550d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc0f80d-f230-44e7-858a-877cb420d202",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2611c6-a928-41e3-a3e0-fb836b9b40b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a4d647-4175-4530-8bdd-e869872fc936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db31ba2-b726-44ae-b4ac-af17f0a70e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c483a96c-e3a0-41e5-acd7-ccb708b015b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0548d39-78a9-4114-86de-a6c3055392e1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abaa95d-01c7-4d72-8788-e4ea0dd35775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d47c6cf-318f-4993-898f-1619d6327dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cf08fd-0ee2-42fb-9a20-5461d192b3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7deb7b62-fbe0-45d6-8394-8d51d6d63011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c6951c-42fc-42ff-89d3-c385eec941e5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db30360-ba3f-4d80-aee1-c6c02d00fc55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff8801b-ee92-4166-abb0-b65c123bebd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ae6264-437a-446b-9fe3-7681173474e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28945a1-f6ff-4c95-8c41-5e9bbe3a0629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae8e9f5-3306-4525-b422-b09042cfe956",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e46f943-bff0-43ee-8cb9-300c40cf3456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648f22d8-fabf-4c40-858d-10f162bf42b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469b7901-a572-4e1f-95fa-3ed3766f8a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5efeea-138c-495d-8ae1-65eaf15fe520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5bf7ec-01ed-4118-8811-94fe0a4d2469",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e562a130-e321-4f1b-b5e2-4eb447510ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d5de1a-bcbe-4f9d-9111-e17f638b16c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d91569-de72-4e2d-b2a2-b92f7e5662df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94ff3b2-53c9-472e-aca8-87b7ed31de3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40508f06-734f-41a9-a325-c83dd98e4145",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8927043-b281-41b0-9094-20aa9bcb361f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9579410-391c-4cc8-be88-5378e0f85f04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8970ef5-af99-47ee-8e9b-a391c4651542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69af47a2-92a4-4bdc-818b-b449f9931dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdd01ba-b17e-4356-bea4-04a0824a11e3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befb0fa2-1246-4b25-915c-ff562f329a39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c86cf7-1ea6-48dd-b732-afd7dfddece4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafd63aa-e00d-49b2-9aeb-fff48278ae47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b631d4-6e87-48da-adb7-30ed929216d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357548c9-a2f4-4f5c-92bb-f1faf85282cc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f11e0-18a8-4b88-9d29-e6f130efa169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d3df66-840d-438b-8010-ef852d955cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1279792c-0afa-44aa-984e-2359a8361961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c41e7c4-6a07-4c63-ad9b-cd6ef04a4991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55300a5e-96aa-414b-a1eb-468f314f4069",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60627abc-4996-42f9-bc49-854ce3acbd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02b252a7-37e7-496e-9aba-866584e1c0af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2597df0a-d94f-4c21-b1a4-c8352fe5b3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da78afe8-f87f-4294-9625-a32efd8a1a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94bc347-726b-452f-a348-47f1b04e9cbb",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabd59e6-23aa-4280-838b-88cf01340c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29809462-dd12-4218-9156-443ebefe95e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb60f390-51ef-4617-88b3-968e9e43ef18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026133d0-07ab-4066-b917-a273df1e010c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eff2b9-eccc-4f4c-a28c-3496478991af",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599cfb19-b7eb-45e9-aed9-58fa8d1b8453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2cecb3-6d5a-442d-a246-9645330193ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d218e4-911f-4790-8a81-4f4efd9ebfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa31180-ba14-4de3-abe5-271ad46e6343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549cc8cd-0cb6-4cef-ba4f-c991620a9368",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db4bb9-24be-41e6-a7a1-f244af21385d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfae23c5-6442-4543-a16f-cbe193ae01a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a605e0-2655-4307-be12-d7b9f44fd03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95a0a58-1f2e-48aa-b9d7-f879e50c53dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b61733f-5f63-448c-bf1f-ab1eb430dcf0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef424091-64e3-461b-8947-b03d93268d48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd9b980-a3aa-4f30-b458-759102883ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e514ef-f7ba-437b-b512-03345dd3d333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca777eef-4592-4b57-8c95-ec48d9dc9031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cdb249-73bf-4c34-b19e-4b9a0bb6f118",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f971762d-b7f6-492d-8d95-b49d085d3b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9f49d0d-a425-45a5-b27a-39b1e5b50a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab295a8-a6a8-4a25-a950-3fba6a5bbb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f2b89c8-46f6-47b5-b3af-3e7c56e2ffc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a767be1-1cdc-4eb0-8dad-58b9c500cb03",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffac33e6-0b5c-4156-a465-78dddbaa9130",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28cefbbc-c54b-45f5-bd19-ef2e52fed1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e30fa0-4cbd-46c2-95f5-aa5f0a70bc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18518ab3-1082-499e-90b9-5264d8ee53e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbeeef3c-708b-43fd-84cc-0ae84da4999c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc211047-9032-44c5-9e2a-486989785111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b778b2-b6fd-49ec-81b0-0b9387196c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0335a50-8e76-439a-b983-6e50122954fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef805fd4-6ec4-4ec2-b49c-28c9af4848ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f8d003-6339-4788-83f2-e8dfb9748b86",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2f827d-c050-43e4-a06e-77921126430a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecc2e4bd-4a03-4117-ac61-b36980c16969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3990cf78-056e-4105-90bd-3a7e642f0614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498354d6-8398-4381-be3c-591c296a0a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77951cf2-bafa-4a80-aa82-99d9a90fe829",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9764ec78-3ae9-4e2d-835b-2d6fb84cd2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82bd3f3a-30c2-4575-98e9-26126295a9a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2d355b-7252-48d5-a5b6-b93db6c17364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7956346-e5bf-46ac-a8d4-e6a8addb81b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8054103-98f8-4de6-aba2-2ffd4f7ad765",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85249e95-0729-4c43-8117-2b93e5af1149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d610385-4846-4d87-b10a-07b595a1c95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d81bf05-19fa-4543-b788-15dc301a33b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e71fa6b-2653-4ee8-be9c-5d447e3f6f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c13c30d-33da-47b4-bc45-4ad4f589e2f5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc652e7-0ff6-4148-a9be-e2fa8d0fc274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0783416b-c3b7-4270-bf8c-42b2d07a48eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca1fcb-69a5-4080-949d-c0e71aad8428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866626f2-6a9d-468e-9a2b-7c99e483bc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5168776-b72f-44c3-b6fb-14e25a09f0fa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be43451f-8098-414d-a0ce-9e3fda877579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af14ec55-cd33-44b9-9c02-2ea5490871ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3ac856-e538-4443-a3ad-06d60ea5281f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152c9d11-93da-46e7-8bd5-145a54ecc423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df319e9-d70f-4e08-b46f-dde37dbceb5c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcada6d-b709-42e9-9724-4b5d79915901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2fe8265-5f06-4157-866d-febba4f0a41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e950e496-59f2-4930-8353-1665eac716f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e7b829-33aa-4e27-9b4d-10ff6f96a85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317bfa5b-215c-4b36-9998-c2d5c6db757c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c5e794-acac-47bb-a331-831ac4fbd1f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd057ef3-b80b-40a3-81c3-605a0895521b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd682ba-208c-4379-9ffb-7d70550f0f45",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea4adef-6caf-4878-b693-d39b615ad850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3154c1e-7251-429d-86b4-922e2078c514",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d98ae45-e390-45ea-8782-20638a70a41b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6f4635-dc63-464b-889e-d8fdbf9d67b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd90aa73-9569-4ee5-953e-e10e9f69c15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3efb665-252a-4b6c-b6de-f8fd8c4d56d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b7c4b0-eda9-4164-b413-29e4c422fde8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5399159-9036-49b4-89a5-5f56af82cb35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51684828-3b57-496c-85b3-3ef3a6fa4de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ea96ae-d2f3-43e0-9738-ff1290f9d463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11769c0f-4731-4d01-8572-05655a200274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bed4650-d50f-4579-9a6c-cf38ca2d4a2c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac82968b-b08e-4f40-9231-736fe043fe0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf461cb-785d-4e41-8012-e63c7067463d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90f6ecd-120e-4013-89ba-7ab0ee99e547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b21c4c-e4c5-41a3-930a-336817aed475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f43a500-2083-493e-91de-ad502820d6c1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26758d1d-e1f3-4664-93b4-292ac246a3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "843f10e3-73dc-48ce-b2ee-a50b5ef27767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1235dc0a-0450-4d64-a998-535e4396f63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a8111a-49dc-4ba9-b80a-365e884025c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8fc624-4b60-48ab-a19b-5ad809f0a273",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3192950a-6824-42e5-8f14-fcf0e3cd2506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69fadf12-336b-451f-bb40-b36655dd961d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7033cd-b288-44e3-b538-c0f55db5b069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907e3f3b-d955-40a3-97d2-e178235b8760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b10274-1948-477b-a959-e76ee6f95076",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161b79d3-596f-48c1-beb6-c613118acad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "263ff62b-a11e-4863-a4f3-6683841fd2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e55e260-38b1-4e69-b271-5f4315ad6964",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cf388d-90e4-4066-b8ba-b7e828eede9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a09aa3-0688-416d-8674-a5a87992dc56",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee89fa6-da1c-4388-b9e5-af15d8351a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "392f702b-bc97-44de-8e25-9aea105241dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb87117-d0a2-456a-8c45-b1caec75476f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c4c17c-0fd2-4c6b-b4bd-e2ef8f78dcc3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "643b6bc4-aa45-4c37-a13a-fbef080bb1ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d193dcea-c347-42b7-bba2-ea00be4ad73d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56100a19-4ea7-4cb0-92e0-725ddc1db7a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40167892-a01e-43ba-b8e9-5b2fe920238a"
                    }
                  }
                ]
              },
              {
                "id": "eec7f801-b019-4515-8a3e-c33c298addc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a6dc127-3546-4435-86a1-64e7fb3ed2b5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812b5012-d69a-49de-866b-a71a17177ec2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "751a8542-1c04-45ff-aa56-09096864cd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8132b787-38ba-4332-855c-a122f480e913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e3a9f14-2782-4142-b8cb-2d88a72c2835"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8493984e-bb8a-4000-b769-698c953f29fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cad5477-caf1-4917-990f-5cd93ec2454a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bce96367-fdc0-4bed-af16-99a48c28f3e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17269ff8-d60f-4c9c-aa58-829101c92208"
                    }
                  }
                ]
              },
              {
                "id": "75f74af4-4b5f-44da-a8ba-55a80432a54d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2c2cbfcf-62f2-4c0f-84e9-fda4a504c29b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec2c229-abc4-4d8a-91d0-b961e62f5fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7b54367e-20a3-434f-93c3-9de49d13b6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b470f987-ef48-4569-8cca-4073b6c97bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae07f4d9-1e2a-4969-8aef-3f9041b47d71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ce500e36-9d7b-4542-8ec5-99b789d79dd1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1cf2c6d7-0d13-43f9-af28-628b4563f5af",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "037d6045-268b-48f7-b9b4-1fe091880b53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d2b816f-b4a3-40c4-a73f-136516d42221"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b46ba8f3-60d9-4380-8f8e-5e6d91781e37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d52a897f-3de1-4085-bf89-41dbaaeb1e6c"
                    }
                  }
                ]
              },
              {
                "id": "9c0439a5-e362-426a-bd20-ee09a8cf803b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74435c6c-7371-4c7c-9826-7e35dbfc4abf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ba5ea60-beb9-45e3-80c1-27c5beb11906"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e295fd93-4b8e-40c9-8be9-4493023bfacd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "074fe751-f10f-4ef5-82e9-cc66bf9022fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cee4fb53-81d7-4ed6-8144-2b4ce67c12a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7854c840-0500-48f4-b857-7a4fbfc71770"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb4e5b21-aa4c-4440-84af-77a80a7bfc72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d2992a9-94e5-49cc-8770-a66187116456"
            }
          }
        ]
      },
      {
        "id": "008eacf9-8160-404d-b47c-defe2d74207b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3445f1f6-b9d4-4bd6-b34c-b8d9ac62be46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c7ebf14-3e7c-4f0b-967c-0492601ce7de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03d40ef9-2ffd-4904-a319-7c82cbe3d332",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b697026-d2b3-4347-861a-2166d8fcbbc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2f0ffac-856e-4d20-b0cc-e260e76f5bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3a7198-cc07-4523-9142-03068cd6544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecf545ba-7165-4310-aedc-ffb3e89efaaf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5cbc9c9-c751-44a3-bd5b-de81413d256f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "119b101f-b944-41e1-80cf-427abbd5eff2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45f5c770-c629-4ce4-8867-7bad04871f82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "467a749c-e955-44c4-a884-a1891870c950"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d0828eb-a69b-471f-8ce4-3375db2b8dba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9215a4dd-cc2c-4a9f-af63-b12485a463a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f676cab-e972-4ca9-830a-ee1f2bf3d329",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c21e26f-2582-47d8-b187-4059881ab192"
            }
          }
        ]
      },
      {
        "id": "69427676-b40c-475f-bb8c-edffca7c795a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a17cd975-872e-4b9a-88be-9272b93f0e56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64ea8a6e-a2f0-432c-b9e6-cbd35dde6ef4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3d6049c-f4ac-4a37-ad22-ee67bc1555b5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb65e37-05f9-4869-b7a8-825a2722a831",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b070f492-28a7-45b8-b8d4-89b5bd044503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99bf07d-cdbf-4ef4-b44e-a10b5cbc27d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f84c3b-657c-4a89-8b14-d353a8636c32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f3afa2-3121-459a-9976-cc2abf6d53cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "925cd543-61ce-48c4-84f1-f3d3f58100cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "653e3dd4-7ec1-4563-aea1-f19d65f3dc7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a5f09a9-de13-437e-b8f7-bfb2c744a6b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d77c2e49-100f-447b-ba9c-1d7d57d01b65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c01c284-94ab-41a3-8f83-17bb69d5a9b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4982057-3b4a-42fb-a999-0ac877e384c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbdf826f-5c59-4139-a84c-ee7c75cd60b9"
            }
          }
        ]
      },
      {
        "id": "7335652d-5874-4977-af36-4a61cd1ee1ed",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6dc9607b-aac9-4fb3-9986-0d223ed7abb8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0831dbef-2850-4dec-add3-266bbb610ad4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47aa90a9-ec4b-4406-970d-7706c8eb4953",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e255358-b033-4ff6-8f72-f86fd7cbf3f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad4714b3-1d2a-49cf-b21e-a0520213521e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd260b24-358d-40cd-879f-fcbb3e561761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15ae975c-90a1-410a-9221-b26f57ca6c37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23649812-7a3d-4d5c-a935-89e0545a2b08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc0201bf-d796-4d54-a63c-e0ab0170a5c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93d80f6b-29af-44b7-9dc4-072e554d3122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fffa5d7-1c0d-47a4-a396-e20c7075d385"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b24dfe0-6515-4ab8-8d17-3dc9bac59a0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "51880313-7a7d-4673-bc41-dc665bccec54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1dd0b2f7-5089-49d4-893e-b5c4a9054b09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ad884a4-fe04-4d2a-91ca-2554ba2edf0d"
            }
          }
        ]
      },
      {
        "id": "67dcc736-ba53-489c-90a7-5084bb0655c8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "762ea85a-bb6b-43c4-83ed-dbd227bb1361",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32e48d65-0991-4a7b-9315-0235db0654a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "26618b15-0834-4cf6-bb81-b329ee664d6f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3f7013c-b8a2-449e-9ca7-93472d4dd001",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4289ee93-c77c-42a5-96e6-87963bf4388f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 318.1869918699186,
      "responseMin": 7,
      "responseMax": 14170,
      "responseSd": 1265.3250030755016,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687135319200,
      "completed": 1687135407926
    },
    "executions": [
      {
        "id": "87d5f38d-9015-4777-8631-0c609c2f2cef",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0c9f3b7c-9db9-4114-a2c9-ed7441c2929d",
          "httpRequestId": "5ff58051-fdef-444c-8855-383009f6020c"
        },
        "item": {
          "id": "87d5f38d-9015-4777-8631-0c609c2f2cef",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "98d4aad3-4e21-4f23-a3d1-2f3a7f64e89c",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "ae9f1439-653e-4212-a22d-83595350f2a8",
        "cursor": {
          "ref": "2ac20ab1-ff9d-44dc-8603-aac1d3e1097a",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6ff1aa4a-0bcf-4c93-94d4-2e6927b28a29"
        },
        "item": {
          "id": "ae9f1439-653e-4212-a22d-83595350f2a8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a4bf8b35-568f-42b4-84b3-319416f318b0",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "6d63bce9-6567-4b21-921c-13d4c67887eb",
        "cursor": {
          "ref": "2c771f6e-846c-46ba-a6c1-db2cb1740b12",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "96d497bc-4bf9-49c8-84e3-637080851b88"
        },
        "item": {
          "id": "6d63bce9-6567-4b21-921c-13d4c67887eb",
          "name": "did_json"
        },
        "response": {
          "id": "85bc676a-3d83-4afa-9eef-e9b391b6ec08",
          "status": "OK",
          "code": 200,
          "responseTime": 389,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfba7ec-f81f-4c50-b327-ab8b78516a02",
        "cursor": {
          "ref": "aa4141a4-fa9c-41b6-bb6f-8b8dafb3beb0",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbb38057-bea8-4e69-9d0a-ad9a0787659c"
        },
        "item": {
          "id": "ebfba7ec-f81f-4c50-b327-ab8b78516a02",
          "name": "did:invalid"
        },
        "response": {
          "id": "089da1f6-9542-480a-9eb9-477327808bc8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1036,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ebfba7ec-f81f-4c50-b327-ab8b78516a02",
        "cursor": {
          "ref": "aa4141a4-fa9c-41b6-bb6f-8b8dafb3beb0",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bbb38057-bea8-4e69-9d0a-ad9a0787659c"
        },
        "item": {
          "id": "ebfba7ec-f81f-4c50-b327-ab8b78516a02",
          "name": "did:invalid"
        },
        "response": {
          "id": "089da1f6-9542-480a-9eb9-477327808bc8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1036,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "66912c28-c0c3-473f-ba99-4cae26f24831",
        "cursor": {
          "ref": "913e9a66-42eb-4c1d-b1dc-e9a763978ce2",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b534de0f-9bb4-4afe-b4f9-f83fd3a9afd3"
        },
        "item": {
          "id": "66912c28-c0c3-473f-ba99-4cae26f24831",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "67ae4151-f4ea-43e8-89a0-781a36fba805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9180b180-1b36-4b6c-925b-435ad7ee86a8",
        "cursor": {
          "ref": "52ffd840-8111-4a6d-84f7-3e262c75f6e7",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "11a5ad78-574b-4b12-b3c5-61d669d30d5b"
        },
        "item": {
          "id": "9180b180-1b36-4b6c-925b-435ad7ee86a8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aa693112-9688-4f8e-ae81-aaef09a707c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed38f70-9750-4e75-9b6e-b6986441f3ed",
        "cursor": {
          "ref": "6d25a11d-bd41-41be-8f40-cdd3f3bdd9b8",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cc96a894-5541-4322-93c6-259c67fdbe28"
        },
        "item": {
          "id": "2ed38f70-9750-4e75-9b6e-b6986441f3ed",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ff3f1357-f04c-4d45-85e3-11aa8fcd011e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e175e4cf-c973-44b1-af4b-6721a5aade7b",
        "cursor": {
          "ref": "2129777d-d2a7-4557-9b41-f0ddc9b9793d",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e70ee406-c9cd-490d-9940-0ee470a59d6f"
        },
        "item": {
          "id": "e175e4cf-c973-44b1-af4b-6721a5aade7b",
          "name": "identifiers"
        },
        "response": {
          "id": "b41b70e2-8b8e-4bfe-918e-3b4e1a47c594",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8893eee-54f6-4f79-ae1c-8e215261e326",
        "cursor": {
          "ref": "934d2a7c-b852-49ea-ae99-dcfb358b85ed",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4ae3754c-d20f-4cac-a3dd-d012788bb7f7"
        },
        "item": {
          "id": "c8893eee-54f6-4f79-ae1c-8e215261e326",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b2a1980-d729-440b-bb60-36145213a37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6173d688-eed6-49ff-8f56-453dc29c6e7a",
        "cursor": {
          "ref": "c92b6a1d-0415-4a23-be66-c65bb059a352",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e2b63988-7e1c-4b17-851f-73adcfa505cf"
        },
        "item": {
          "id": "6173d688-eed6-49ff-8f56-453dc29c6e7a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2e9d86ce-40e6-422f-ad68-316476a21d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338e12e4-1372-4a16-8be7-e212d93d7318",
        "cursor": {
          "ref": "d0ec84de-7645-41d6-b399-fe98bb21fdbd",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "070e5f97-9a9d-449f-9ebc-2239c8c75267"
        },
        "item": {
          "id": "338e12e4-1372-4a16-8be7-e212d93d7318",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dd16ace1-3cbd-4167-aa1e-5e2ed86b5362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25ae613-e7e0-4220-84ed-53743d6f904d",
        "cursor": {
          "ref": "58946bab-dfaa-45a1-96ab-1703fe884c89",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c227b75b-d9fe-40b7-bde2-dbfa9b6434d2"
        },
        "item": {
          "id": "c25ae613-e7e0-4220-84ed-53743d6f904d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "917adc74-43e4-4998-8768-cafa774dd33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f03e00-1b52-4d58-9bb5-683d7971478b",
        "cursor": {
          "ref": "85040009-7266-443c-84be-0411d7b939e8",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7685c2c9-2ddf-4405-848f-190d734b2f44"
        },
        "item": {
          "id": "84f03e00-1b52-4d58-9bb5-683d7971478b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "da202b7a-81ce-4639-a2da-4ed29f988ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f686ef47-9eab-4448-ac94-602a7f20784a",
        "cursor": {
          "ref": "55f350e4-cbe1-4ca0-880d-5e9a77de6b1d",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c7047ca-fa9f-40a1-9b22-a9880062337a"
        },
        "item": {
          "id": "f686ef47-9eab-4448-ac94-602a7f20784a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e3479010-b5ea-44c5-aa93-2dad63a11c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4a7fa4-ff07-4ab5-b2d9-11dfb7809e0a",
        "cursor": {
          "ref": "8582d93b-198d-42a0-8f45-29e4834635f3",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a11403c7-e285-44d5-b523-81582da83c59"
        },
        "item": {
          "id": "4b4a7fa4-ff07-4ab5-b2d9-11dfb7809e0a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a9de5f6a-4e54-4a72-8435-c6cb9d665b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285dadb3-9063-4d63-bd27-e3b493c2e9df",
        "cursor": {
          "ref": "bb31149d-9ac1-4098-8ef0-4b6a8fbffa10",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d3f9ebc9-f429-438e-a1ed-04b3e9474ab3"
        },
        "item": {
          "id": "285dadb3-9063-4d63-bd27-e3b493c2e9df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9bdd8338-a16c-4fdb-bda6-6790b2768258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66b3459-2854-422b-b06d-2bce951ceb07",
        "cursor": {
          "ref": "779a4009-3221-48e3-b3aa-899dfbff9888",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4239719b-738d-42e8-9231-ac5fced767d9"
        },
        "item": {
          "id": "a66b3459-2854-422b-b06d-2bce951ceb07",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "13bb8a65-62ec-4768-9476-da5d449978a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87583d05-ad18-4e34-8fab-6def27186d79",
        "cursor": {
          "ref": "0143f72e-1ec3-4054-a5a9-8d2c9320090e",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4f5b168f-81aa-4cd6-b8eb-b9f038aae2fd"
        },
        "item": {
          "id": "87583d05-ad18-4e34-8fab-6def27186d79",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3628633d-e360-49bf-9602-b047ed746f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a76012-b34d-4722-8faa-7e70b8e046d0",
        "cursor": {
          "ref": "8de4c0fc-17c1-464d-9480-8fdbf6725307",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3a9fed97-1172-4ffa-9c0b-08dd27150900"
        },
        "item": {
          "id": "15a76012-b34d-4722-8faa-7e70b8e046d0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c4488988-95ff-4746-b4b6-cec7558c07f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d769add4-30ad-4732-82d9-14af0adb2d49",
        "cursor": {
          "ref": "d94e1f5b-5677-4a0f-9636-313fc9f1a963",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dea81314-7b31-4beb-a0c6-9a24c235b3bd"
        },
        "item": {
          "id": "d769add4-30ad-4732-82d9-14af0adb2d49",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1bb1f879-9974-4390-aa4c-749bb182cb86",
          "status": "Created",
          "code": 201,
          "responseTime": 1082,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8e5ad73e-2a8c-41a7-ac1b-2dd66757402d",
        "cursor": {
          "ref": "b5a80b7a-9a23-4eb5-bdb5-52ebb5c7adf7",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c3d4ac70-7e1a-4fb7-873f-1bdc676fd227"
        },
        "item": {
          "id": "8e5ad73e-2a8c-41a7-ac1b-2dd66757402d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a8b69add-1606-43c2-b6c7-674ae24d13dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155ed7c6-b332-4a3a-ba88-fc5219d7e619",
        "cursor": {
          "ref": "48c7f36e-7024-4ceb-80af-80273c16869e",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "78494d87-58a1-4c9c-a089-6c197806829b"
        },
        "item": {
          "id": "155ed7c6-b332-4a3a-ba88-fc5219d7e619",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2bcbcafb-ac5d-47f1-b32f-5b8f25677898",
          "status": "Created",
          "code": 201,
          "responseTime": 9162,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "75984bf8-3316-4172-8a6e-f8a58770ba8a",
        "cursor": {
          "ref": "987165b2-868a-40a0-bffb-fb3c8cc28b73",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "79279b09-01c6-428a-a38d-752e5621f63b"
        },
        "item": {
          "id": "75984bf8-3316-4172-8a6e-f8a58770ba8a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "99952533-9899-4ad9-aa9d-beda7c20af4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd50d73-db51-4c9e-8e82-f59cde234edc",
        "cursor": {
          "ref": "7ec49c7a-43e3-40c0-9940-ec47924e4b66",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c3672146-8b0b-413f-8adc-d9debbc2035f"
        },
        "item": {
          "id": "2dd50d73-db51-4c9e-8e82-f59cde234edc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1ed43f3a-1b09-472b-80f6-ffecda038c58",
          "status": "Created",
          "code": 201,
          "responseTime": 14170,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "45b95221-5004-43cc-90a9-117b99cadc27",
        "cursor": {
          "ref": "0c928cd4-7682-43c1-8319-29241480f740",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f352639c-d0a9-463c-bb0d-8d27d9cc60ba"
        },
        "item": {
          "id": "45b95221-5004-43cc-90a9-117b99cadc27",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a049b5a0-0bd0-4c80-a731-b06e99e999b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ade8a80-3c15-4e79-82ff-354b01541ecb",
        "cursor": {
          "ref": "2e71873d-1aef-4e0d-bc20-1a5c322a8940",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "675d4a7f-f53f-467e-8dc5-dbf8c2f1df82"
        },
        "item": {
          "id": "9ade8a80-3c15-4e79-82ff-354b01541ecb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d07004bd-2bb2-496f-85a0-e609647912f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83fb380-4b08-429a-b406-52f1cdb5b60e",
        "cursor": {
          "ref": "7c133222-2b3a-47b0-93fc-66e0dbd49333",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c549092c-f8d2-4cff-8ab7-4e284568c91b"
        },
        "item": {
          "id": "a83fb380-4b08-429a-b406-52f1cdb5b60e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4f3008b4-4e4b-447b-b9bd-1495b656c2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bafd96c-374b-4d3d-9743-d9838fee1bec",
        "cursor": {
          "ref": "54a2a3ca-1cee-46fd-9d7f-6e50b6137feb",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3d0fde8b-081a-41a3-9077-2a863989e95b"
        },
        "item": {
          "id": "5bafd96c-374b-4d3d-9743-d9838fee1bec",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5ba3f5f5-c55c-4e00-b39c-ac67f2a5940d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f093bfbb-26a5-4f8b-b40a-96ad0e2a05a2",
        "cursor": {
          "ref": "f134c385-943d-4f59-b254-30eece113306",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "15a41c51-77ef-47ae-9dbf-63459f349977"
        },
        "item": {
          "id": "f093bfbb-26a5-4f8b-b40a-96ad0e2a05a2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b1063022-8284-41ad-84c0-ff2fa682c616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caf9bc8-980f-47a3-801b-89fe9428db22",
        "cursor": {
          "ref": "bb29e2c3-3f77-4150-bd9e-ee33195ed051",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c118f95a-3989-41e9-b31d-0abddefe8607"
        },
        "item": {
          "id": "3caf9bc8-980f-47a3-801b-89fe9428db22",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a981f63e-45f9-45be-8adb-85c8be369615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e321b2f9-475c-4002-ba4b-e7573705c37a",
        "cursor": {
          "ref": "b53ac219-0d96-4cb7-95aa-08e1f07f3a8c",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "43f3de3a-a15c-4251-ae2c-d3bcf1ea3f73"
        },
        "item": {
          "id": "e321b2f9-475c-4002-ba4b-e7573705c37a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c09eb167-54cf-4b20-a985-1b06bc7ed17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034a37e4-8cdf-44e2-8309-a51d4e3111e5",
        "cursor": {
          "ref": "923441d3-4af4-4619-a81c-3384d06051fb",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5322285d-0b64-40a5-a06f-37c66b8696b0"
        },
        "item": {
          "id": "034a37e4-8cdf-44e2-8309-a51d4e3111e5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0a22a007-d3a2-4139-8a4b-c55bf101058b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b628bcf-1186-4ce5-a8a5-014536b18996",
        "cursor": {
          "ref": "c7bf3762-e66e-469e-81d4-08f4e16fa872",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "95b0af0c-4b26-4bd3-8a20-23a5fe4a0818"
        },
        "item": {
          "id": "5b628bcf-1186-4ce5-a8a5-014536b18996",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "034c5064-9ef8-449d-96c1-4c251eb02be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0197b3-c752-4dca-9654-812710b6906f",
        "cursor": {
          "ref": "278c866f-dff6-44ba-abef-ebc9786a685a",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d6c8bc5d-e27e-4d1b-be69-ae6a02ce9063"
        },
        "item": {
          "id": "cb0197b3-c752-4dca-9654-812710b6906f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cedd5ec2-b545-445a-96b1-56c87dafdc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf63fe1-4bfc-48ef-8cf9-401c6534da76",
        "cursor": {
          "ref": "d14f7c56-1b5d-4b83-ab63-a922df3c5585",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7c5d0182-c60f-46c7-b458-7c0c09d3f18e"
        },
        "item": {
          "id": "faf63fe1-4bfc-48ef-8cf9-401c6534da76",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "695fedf6-dadf-41e7-9fba-9273858d61ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c51c21-a30b-46a7-bb8d-06a77ca2ba4b",
        "cursor": {
          "ref": "232874ce-c028-492a-9e51-7767bf76ffc3",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e4ac67c4-baa9-43e9-b97e-ff3d18565fe7"
        },
        "item": {
          "id": "82c51c21-a30b-46a7-bb8d-06a77ca2ba4b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9f4f4888-a726-4247-9559-e9f8e7e19543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7c1685-51c7-4cf0-b6b3-972b26d8dd0e",
        "cursor": {
          "ref": "ab0b4464-4aac-45e9-80ed-b533ed0a2ac9",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "befc3302-4ff6-4e87-b3ed-5f4caba084fa"
        },
        "item": {
          "id": "5e7c1685-51c7-4cf0-b6b3-972b26d8dd0e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "36916a0a-80fa-4746-ba23-e0904c1bff93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651f4e3e-f346-49a1-afc2-5bdfed523e19",
        "cursor": {
          "ref": "c1db73a2-e32e-4f8e-9a08-b0f4c5f7c1f5",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "32051816-c83c-4cb5-9866-a287b292b305"
        },
        "item": {
          "id": "651f4e3e-f346-49a1-afc2-5bdfed523e19",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "36bb215f-0eeb-4050-9709-cb13d292814f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3f009c-bd21-40b2-b3b4-03b62d988c16",
        "cursor": {
          "ref": "5fe4a523-92e8-4cc2-a0b4-bc356d42c0f9",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7fe3d3cf-1013-4ff7-ab3f-abad8f5598bf"
        },
        "item": {
          "id": "0b3f009c-bd21-40b2-b3b4-03b62d988c16",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f2a13e05-f4dc-4a16-9d82-b40f5f69b8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d816c1a6-ab6a-4e01-afd3-c3b750d71097",
        "cursor": {
          "ref": "b525fbb5-1828-4a90-8a65-6aa22dd71887",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "50e9253f-79e8-4274-ad23-61e902070f2d"
        },
        "item": {
          "id": "d816c1a6-ab6a-4e01-afd3-c3b750d71097",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "011e4ca4-36e7-4c28-bb48-ccc68a4aee5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e207bd40-08ab-4ec8-b28e-9b91182d3a34",
        "cursor": {
          "ref": "121a135c-b714-48f8-95ea-ff4164ca4a24",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5f20b165-7b3e-4109-882c-4eefef9f6d86"
        },
        "item": {
          "id": "e207bd40-08ab-4ec8-b28e-9b91182d3a34",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "acc0145c-c4d3-44d6-ab38-730aa525aaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e2730c-249e-4011-868a-2b3e6dad535b",
        "cursor": {
          "ref": "860f0905-bcb1-47ca-afdf-982e37ccb979",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "32930a26-121c-48c9-8c2e-9eae78ac7de8"
        },
        "item": {
          "id": "84e2730c-249e-4011-868a-2b3e6dad535b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "294ecd26-200c-422f-b52e-d0031f50bb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d184df1b-aafa-4a13-a790-bd4506d2f937",
        "cursor": {
          "ref": "a627fb33-12ca-4c24-94c3-f2683eb88d2f",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9e3a535e-862e-46e1-ac3e-2b49e59b62de"
        },
        "item": {
          "id": "d184df1b-aafa-4a13-a790-bd4506d2f937",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cdc37a1d-aea7-4b03-849e-9f398d9f013a",
          "status": "Created",
          "code": 201,
          "responseTime": 3719,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "917db4fe-0dd4-4fff-88a9-94d46098e549",
        "cursor": {
          "ref": "56bbdb49-9831-4ba1-9ad3-87abb542f530",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "726c894b-ca65-4336-827f-3055f07e939c"
        },
        "item": {
          "id": "917db4fe-0dd4-4fff-88a9-94d46098e549",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6984cbd2-26c9-468e-85ec-70f722750270",
          "status": "Created",
          "code": 201,
          "responseTime": 3030,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "232706a8-3cd5-4032-ac12-8677c0606b2c",
        "cursor": {
          "ref": "b574057f-e3a8-407c-a5be-f1597ea654e9",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c9334376-ed37-4e7a-b07c-57fd8428cc13"
        },
        "item": {
          "id": "232706a8-3cd5-4032-ac12-8677c0606b2c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "465b9b47-78f8-428b-8ed4-df1cd647a3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3f2b86-eca4-4993-ba41-173c759a23cf",
        "cursor": {
          "ref": "d72ffb3a-5812-4d71-93d7-2d5a5757ed85",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "59569769-0c1f-40b8-93b2-33611146222f"
        },
        "item": {
          "id": "bb3f2b86-eca4-4993-ba41-173c759a23cf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "abb08268-b0f0-4415-8a54-1893629db88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55812b8d-0764-4225-bd7c-73d32bedac9b",
        "cursor": {
          "ref": "e54770a9-78f6-4cd6-b5b6-83a164126006",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5a894040-860e-4934-8180-cb0687d55f87"
        },
        "item": {
          "id": "55812b8d-0764-4225-bd7c-73d32bedac9b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a254e088-cddb-4730-9ed4-a1ac79863857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856f320d-5980-4086-a901-caf316069811",
        "cursor": {
          "ref": "667691db-8d3c-4c5b-9f4c-b2286c865580",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "93a48218-f69f-4343-af77-b0e65fbdc513"
        },
        "item": {
          "id": "856f320d-5980-4086-a901-caf316069811",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "14b986e3-3f2d-4974-b8b5-7fa84d8bd2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06f325f-af89-48d2-92aa-63350463bb14",
        "cursor": {
          "ref": "c68268d8-8318-4ecf-91aa-d07340108dd2",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "116e5a01-6edc-4c94-82c5-10b725ded627"
        },
        "item": {
          "id": "e06f325f-af89-48d2-92aa-63350463bb14",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ff96de64-0af2-47bb-9f63-3ba0f8da12e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e672e67f-38cc-481a-bef8-70f79c3c86d1",
        "cursor": {
          "ref": "8c3ea531-f38e-4b48-a73b-3cb66986ee2a",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9543bfc5-9e5b-4db9-aefa-aecbb6bb7ef9"
        },
        "item": {
          "id": "e672e67f-38cc-481a-bef8-70f79c3c86d1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9ffa3f35-960a-439e-9818-9d721486709b",
          "status": "Created",
          "code": 201,
          "responseTime": 2610,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "752c2f2e-a7a2-49be-858c-07b0c26c9c12",
        "cursor": {
          "ref": "0c09a4d8-c9a7-4a03-877a-ae5661530aed",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c0d23ea7-da9a-4cf3-9f66-08db5164b48f"
        },
        "item": {
          "id": "752c2f2e-a7a2-49be-858c-07b0c26c9c12",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bb54370a-06da-4b80-84b1-49a14102fa92",
          "status": "Created",
          "code": 201,
          "responseTime": 4723,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e8e89b49-dd48-4b46-89bc-7e1bf10ea117",
        "cursor": {
          "ref": "99922cb9-06e9-4915-b249-f931fa2d565b",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8a13c503-4209-4aa4-aee3-2c44bd4c1725"
        },
        "item": {
          "id": "e8e89b49-dd48-4b46-89bc-7e1bf10ea117",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a21ba080-1c75-4006-9437-8ff7694db496",
          "status": "Created",
          "code": 201,
          "responseTime": 2756,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "34325973-81e2-4ac2-bd76-7cae8f8f9868",
        "cursor": {
          "ref": "9468cd53-54cc-4c1a-9560-b353b2160bae",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e0366b08-3b83-4338-807c-8c62e3676881"
        },
        "item": {
          "id": "34325973-81e2-4ac2-bd76-7cae8f8f9868",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9d29b291-c8c7-463e-9bcc-ea4f0924a053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ada9c3-e5a0-4508-8368-ad5803b9c043",
        "cursor": {
          "ref": "387405e4-e3fc-4ae0-99a6-bcb95c99c02e",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ffa64010-7d59-48f4-9def-5509e50a5dd5"
        },
        "item": {
          "id": "21ada9c3-e5a0-4508-8368-ad5803b9c043",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3d490850-22d2-4af0-9c18-71d80c032683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5c05b1-255c-4332-8ce0-6c4d928ea0e0",
        "cursor": {
          "ref": "cb93af3f-8272-420e-8cb2-af58b33f9e18",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "49ecb800-ce07-44eb-857e-2cf3be7f2b91"
        },
        "item": {
          "id": "9e5c05b1-255c-4332-8ce0-6c4d928ea0e0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "adb00438-883d-4d2d-ac02-5b07b9b582d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046d46db-48e5-4123-a376-394b283d2524",
        "cursor": {
          "ref": "3785de6d-f2d5-4d0b-8877-e5e1e1636f90",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8d13ac37-d12c-4f75-9e93-3b9cd8fdb21c"
        },
        "item": {
          "id": "046d46db-48e5-4123-a376-394b283d2524",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "914c6ae8-f7d1-43c2-962c-7a619042426e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d5fc8-0d4f-4d48-8ed6-55fc4aa924b6",
        "cursor": {
          "ref": "c241921f-32be-468f-aad4-60167f70cc21",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1f99b2cf-fe7d-4fce-8e6a-c8f4851e0ebb"
        },
        "item": {
          "id": "4f1d5fc8-0d4f-4d48-8ed6-55fc4aa924b6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "782435b9-995f-4128-b007-fb354ce3e4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f9e7c6-1c48-4d8f-878f-3ac485493eed",
        "cursor": {
          "ref": "d8a1559e-ec2c-4bd2-93aa-1bdb08918aa1",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0a42f1e8-4d65-4c14-9c06-acf09d0fcc80"
        },
        "item": {
          "id": "d7f9e7c6-1c48-4d8f-878f-3ac485493eed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ffe87453-5288-4134-ab62-7a466bd47a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386a5e67-a3ae-4fea-a065-8128c5c8f088",
        "cursor": {
          "ref": "d58b0923-fb9b-4ec2-9e70-08a9bd758703",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3b87a883-8d5f-4099-b5f8-4645c34ff34b"
        },
        "item": {
          "id": "386a5e67-a3ae-4fea-a065-8128c5c8f088",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6edb1003-28af-457e-87c9-56b97395477c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72f1ac2-15ec-4fb3-89f4-b0880fd119fe",
        "cursor": {
          "ref": "ec631889-6a1a-4d2c-9c87-53192b1773ce",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96c089b4-9434-49d2-ade9-8bf3913daba7"
        },
        "item": {
          "id": "f72f1ac2-15ec-4fb3-89f4-b0880fd119fe",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9af369d2-f5d2-41ae-a433-15f1d5a46501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1f2424-69cb-452e-bfad-75df5afccf04",
        "cursor": {
          "ref": "db3eacba-ca8b-4b95-b77d-1836ee0ef38a",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1dd6a56e-a84a-442d-a4e3-a4128c986e4d"
        },
        "item": {
          "id": "de1f2424-69cb-452e-bfad-75df5afccf04",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "861779a1-898e-448b-8e3f-ee11146dfd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daf5d63-e25a-4e88-b8a7-feccea187078",
        "cursor": {
          "ref": "7e46d27f-510a-4fe3-8603-44066760c072",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "06ab1e71-8bbf-46f4-a322-b864fec1403d"
        },
        "item": {
          "id": "5daf5d63-e25a-4e88-b8a7-feccea187078",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "054caee0-0dd5-408e-a3c9-7c35ead57957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28857ee-5329-4cac-be85-c2a2bffe12a2",
        "cursor": {
          "ref": "bf534651-ec4b-4baf-842d-22be8d5ffe3f",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cce48450-ba16-4008-bec0-628271ac4eca"
        },
        "item": {
          "id": "b28857ee-5329-4cac-be85-c2a2bffe12a2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f6177fa2-ed53-4734-aff7-c3c1f0b71e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8405e3b3-7a08-4f8f-803a-bbc58e949e8c",
        "cursor": {
          "ref": "30a6be73-048c-4082-82c6-144f05df4897",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "84a3980c-b8d4-4a28-bfda-63f0ca7eadbd"
        },
        "item": {
          "id": "8405e3b3-7a08-4f8f-803a-bbc58e949e8c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f4193aae-a030-4e99-827b-66c8e9b96a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f63cafd-e352-451e-b754-e9da0678fd5e",
        "cursor": {
          "ref": "91fb248d-c3ee-4959-af7a-a3ee66c2f09a",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "609f42c0-7816-4e14-ba88-99363fae33cf"
        },
        "item": {
          "id": "3f63cafd-e352-451e-b754-e9da0678fd5e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "698692ae-f154-4d7c-97a1-34e3726937af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3221b3-41d4-4841-bf9f-f05a2848cf55",
        "cursor": {
          "ref": "b4edec03-c097-4772-af4d-502bafa1ed6d",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "40efef8d-596b-41e9-9e01-a96f939d0507"
        },
        "item": {
          "id": "bb3221b3-41d4-4841-bf9f-f05a2848cf55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "068f134b-ab50-4c27-a3ef-fe0b3dea4885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cd27bc-8194-4c9a-a376-8a93b16e9131",
        "cursor": {
          "ref": "fc245123-4bcf-4cc3-8d1f-c8b9b640825f",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0a1958bd-ac84-47f0-88ee-a5eda2af194c"
        },
        "item": {
          "id": "e2cd27bc-8194-4c9a-a376-8a93b16e9131",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6003564f-4d80-4641-bf22-684bd4a7a1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e232ed2-b289-406c-9f58-c5c17816e08f",
        "cursor": {
          "ref": "5d60954b-5666-40d6-96c4-d4e1ad5617ea",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b21028a8-bf48-4152-abe1-d7c1b308a2b2"
        },
        "item": {
          "id": "1e232ed2-b289-406c-9f58-c5c17816e08f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0fb9d194-b3ed-40a5-ac4f-edf1cb28c09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473be4f2-3f47-4fb8-bed4-c60c7af79a0c",
        "cursor": {
          "ref": "84d3bff9-a788-41a8-97bd-d4b1bd891213",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dd8799fa-abea-4579-8d9c-dc44de83eca5"
        },
        "item": {
          "id": "473be4f2-3f47-4fb8-bed4-c60c7af79a0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f3203e45-3a13-43d2-a5bc-35bf8d97b1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a453b2b5-2742-4bd0-a83e-866ecb4b9b3e",
        "cursor": {
          "ref": "381f130e-9683-40c8-a98d-67a0122d0e8a",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d1146358-1f15-4baa-901b-b34fccb44e30"
        },
        "item": {
          "id": "a453b2b5-2742-4bd0-a83e-866ecb4b9b3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "58fe673b-da4f-41f4-be28-50c093b224e6",
          "status": "Created",
          "code": 201,
          "responseTime": 2815,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "3780c440-b7f4-4091-a5b3-25c18cf9c983",
        "cursor": {
          "ref": "b6047b8d-4481-4336-9e07-be2422bb3dcd",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "28828876-cc30-45c0-a9d2-687beeb365df"
        },
        "item": {
          "id": "3780c440-b7f4-4091-a5b3-25c18cf9c983",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "be86778f-e93e-450d-9427-30f8aca6d664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d815ab11-3b78-401f-8ada-8681d2c0845c",
        "cursor": {
          "ref": "8a2dc297-4f73-4596-a581-e4a75d3b47e1",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4c3cd60f-2b7d-437c-b1e0-f85623474c0d"
        },
        "item": {
          "id": "d815ab11-3b78-401f-8ada-8681d2c0845c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4a4f364b-78be-4ad4-8af9-b6e26acc1489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3269077-f193-4d81-a6e9-453f1b508de0",
        "cursor": {
          "ref": "b5b60b4f-81d5-472c-a092-b2158cf56d74",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8f4013b0-5e47-4a7c-9b5b-27dffa4935bf"
        },
        "item": {
          "id": "a3269077-f193-4d81-a6e9-453f1b508de0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "262d6c2a-0c1c-4afb-a483-cfff6bb90579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a4e090-2a6f-4b49-8ee4-1e1cb7436ede",
        "cursor": {
          "ref": "2cb99831-4ed3-40ed-b402-c328e78fcbc1",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6643d17e-8dd7-4917-b5bb-e9f72eb58b80"
        },
        "item": {
          "id": "58a4e090-2a6f-4b49-8ee4-1e1cb7436ede",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "94b7d7ce-be20-46d5-9945-1122c0f19fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c38e79-593c-45c3-b8e9-a9e1aa391787",
        "cursor": {
          "ref": "f3ed3fc9-04f0-4f42-ba8d-47111e1e0800",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a8a9e494-ae23-4e43-9478-b1b36de13a09"
        },
        "item": {
          "id": "65c38e79-593c-45c3-b8e9-a9e1aa391787",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "534eae6b-a8ea-42a3-8b9b-a6b674ce4b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc9c35c-6330-4aed-a930-8fdc342d1d57",
        "cursor": {
          "ref": "acf76782-5db3-48a8-9132-025587e7d908",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "456e0148-03b8-4203-b95b-d1d831b8f66c"
        },
        "item": {
          "id": "dfc9c35c-6330-4aed-a930-8fdc342d1d57",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c96bf16-c76f-4059-8929-b1e451bb9c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3c1ef6-1f75-415a-897f-0b462e2c7da9",
        "cursor": {
          "ref": "6b0f4a44-405f-48d0-b202-eac27ee615f7",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "568df4da-0dcc-4d11-b6d7-37dda28cae85"
        },
        "item": {
          "id": "3e3c1ef6-1f75-415a-897f-0b462e2c7da9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "43220716-0a56-4a9f-abd2-d1dda42f6821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cd2daa-7fe7-45a3-87ca-b78e21dd7855",
        "cursor": {
          "ref": "d178567d-4dce-469d-9704-15864f2464b3",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "303762e0-600f-4355-ac1b-951ac720de0e"
        },
        "item": {
          "id": "75cd2daa-7fe7-45a3-87ca-b78e21dd7855",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "df832ccf-ac06-43b7-9fb2-d659156c06da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac74243-b2a9-4454-b4b2-94d09476446b",
        "cursor": {
          "ref": "266ca155-9adf-4b5d-a8fc-cfdacb6505a9",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "eac1b931-d4aa-466c-a269-47647dfb1122"
        },
        "item": {
          "id": "9ac74243-b2a9-4454-b4b2-94d09476446b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "038b93ce-3f66-45da-bf01-f65960f3f936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c382bc-6e89-4e12-b713-d34f14d51f31",
        "cursor": {
          "ref": "83d8a9f7-f4dd-495b-9da3-ff9f52ae9d62",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6eaee7bf-04c0-4f0e-a68f-fdaef9b8defc"
        },
        "item": {
          "id": "14c382bc-6e89-4e12-b713-d34f14d51f31",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fb4d4042-49f4-41bc-ba55-e640758218b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c391e514-a47e-48eb-aa43-c59b34e0beb5",
        "cursor": {
          "ref": "c57dfef1-dc62-4db7-8d3f-3b454ca19430",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "18ac1cf1-08b2-4cca-a856-5d08a1165642"
        },
        "item": {
          "id": "c391e514-a47e-48eb-aa43-c59b34e0beb5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c22aec6e-8e97-46ab-b00d-830a5e5f340e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4060cb-e237-4748-b1ee-30029ecf1a3b",
        "cursor": {
          "ref": "c7a9c3cf-351e-4700-aa62-ff8bb273d40e",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6279217b-ecd2-47bf-95b1-f27cadb9e711"
        },
        "item": {
          "id": "0d4060cb-e237-4748-b1ee-30029ecf1a3b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2772fe6a-2479-451c-9a17-d24dc7414c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b796017e-253d-47fe-9075-31e8ed69afe3",
        "cursor": {
          "ref": "7dd2d844-d109-4eaa-bf81-b980f0973282",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a6cc1a9c-fa91-4284-94bc-0103ea9b9200"
        },
        "item": {
          "id": "b796017e-253d-47fe-9075-31e8ed69afe3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "725bd011-c0c5-4109-a3c8-abf305792983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2aea38-04b9-47c3-b29a-b2453569ed17",
        "cursor": {
          "ref": "5c4bd591-57ae-4eb3-a63d-4262695c4833",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb87b896-b6ed-40db-abce-64f74fb8d768"
        },
        "item": {
          "id": "8e2aea38-04b9-47c3-b29a-b2453569ed17",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ec63c59a-bcb4-4d9b-b049-3c26b9e33afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068d987f-cb9c-4139-8cf3-2452525dec7d",
        "cursor": {
          "ref": "1d07fe28-b801-4074-85b9-00e8180beb73",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "881cba15-6132-4129-8796-ac11893f6622"
        },
        "item": {
          "id": "068d987f-cb9c-4139-8cf3-2452525dec7d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2044668b-5b23-49d0-8c78-49a99c8ac229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c54f5f-0cb1-4114-a076-8453cafdcdbd",
        "cursor": {
          "ref": "7fb1e430-3c82-43d4-94f6-733bdd763bcc",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d433fe7f-9a87-4f80-80ce-5c6e3191e108"
        },
        "item": {
          "id": "92c54f5f-0cb1-4114-a076-8453cafdcdbd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "74de1bb6-2fdf-40e9-8cb4-d6b5abff2611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957d3d80-6451-45fd-be31-cbd42b78bd2b",
        "cursor": {
          "ref": "701da40b-60ac-48ce-94a1-56674ce7bed6",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "387e212a-f2c2-420e-9e3b-daa26f7f3dc1"
        },
        "item": {
          "id": "957d3d80-6451-45fd-be31-cbd42b78bd2b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d2efcf94-c9a1-4b9f-a453-67f1f54c0403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b264fc1-2cd8-42f9-a60a-5d78392de231",
        "cursor": {
          "ref": "dc7509bc-15b0-4026-aa75-3d4f6443c84f",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cce020a9-0015-4116-8c2f-b5e6273e33c8"
        },
        "item": {
          "id": "2b264fc1-2cd8-42f9-a60a-5d78392de231",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4a6af62e-d123-47a2-b177-69409b2f9941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6d97b4-bcfc-4ead-8f25-2e40cb72bf3d",
        "cursor": {
          "ref": "38fcec68-8274-4e81-9c05-909d6637b946",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d3a6faf1-8342-4183-991f-e9f778a14702"
        },
        "item": {
          "id": "aa6d97b4-bcfc-4ead-8f25-2e40cb72bf3d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "996426e0-bb94-4e7b-97ff-0aa409ab6f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c2a7c9-bc44-4e07-be35-2d2984920b56",
        "cursor": {
          "ref": "2b862b23-5ab7-4e7d-91a6-49614ad2c6fc",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "373ac050-ff06-43f3-9420-dd13cc9cf500"
        },
        "item": {
          "id": "a6c2a7c9-bc44-4e07-be35-2d2984920b56",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7cc8730b-ad8b-412d-af36-eee8d6021532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c70e35b-df3f-413e-9882-b10f7209ebea",
        "cursor": {
          "ref": "e69684a7-99e8-4a0a-bd4e-ede730caa01e",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2ba5b484-5049-4136-b988-52ddf125db74"
        },
        "item": {
          "id": "9c70e35b-df3f-413e-9882-b10f7209ebea",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "74dff747-7e98-4931-9a3b-ad3ae0e7f2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa5f946-89c5-4908-9c49-8d500750efa5",
        "cursor": {
          "ref": "4be499e0-f50e-4c41-a491-7b47596f1b97",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "865bc73f-2d0a-465c-b5d1-2176f1652793"
        },
        "item": {
          "id": "3aa5f946-89c5-4908-9c49-8d500750efa5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "03d12c85-5c28-42a4-91e1-47e0a318f1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e90ce1c-6060-4ce6-b4c9-2778ebb1278c",
        "cursor": {
          "ref": "60556fbd-b4cc-400f-9175-47ae1ce1f976",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c575e9dd-289a-425f-9196-49774d2c0411"
        },
        "item": {
          "id": "5e90ce1c-6060-4ce6-b4c9-2778ebb1278c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a5af6582-f488-4de8-b5e8-2cb440944768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b508c7-9b68-47a0-b096-dfb4484b62b3",
        "cursor": {
          "ref": "fe0211d7-d62c-4613-b469-1ba196df3062",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "defe558f-4ba1-4943-819d-215d58eee846"
        },
        "item": {
          "id": "e8b508c7-9b68-47a0-b096-dfb4484b62b3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6a7c4bad-079e-4bb6-8219-333f003094f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731ef821-757e-4f82-89b9-4da08f677eec",
        "cursor": {
          "ref": "bf76d5c1-9ef6-4f09-bf7d-2b714238da96",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2f5c4d93-72cf-4d08-ab2a-2eba042b9ddb"
        },
        "item": {
          "id": "731ef821-757e-4f82-89b9-4da08f677eec",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bc59a7e2-de83-4e21-aa24-cb3ccd3abcc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f1b839-1308-4576-a7c9-59803970dcd8",
        "cursor": {
          "ref": "f64b8376-cf74-40d3-bc67-d8d628bc1475",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "aee07341-f8e8-470a-9d2f-c394c74ca21a"
        },
        "item": {
          "id": "98f1b839-1308-4576-a7c9-59803970dcd8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "419c3ae4-e11b-46f4-82e2-26714bef0f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954b83d2-a955-494b-b846-8df3c886f780",
        "cursor": {
          "ref": "03e77c2e-b4d8-4be5-95ee-9cd634965bb6",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4010a178-e754-4e59-980e-e2bec792a6c4"
        },
        "item": {
          "id": "954b83d2-a955-494b-b846-8df3c886f780",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5ea3e141-791e-4ff5-a3ee-b51934368f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01753d13-1fbb-4a36-9e6d-d323e519d855",
        "cursor": {
          "ref": "97a3429b-a7ec-47a7-beab-92bd1472f945",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6a60ce60-0edc-4a75-8efa-6a8a7dcf61a4"
        },
        "item": {
          "id": "01753d13-1fbb-4a36-9e6d-d323e519d855",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f9991acf-7ba0-4e93-b5e3-4fe60cc81f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba5df1a-aaeb-4ec2-a11b-0547833b0e92",
        "cursor": {
          "ref": "029908ef-151c-4628-918d-b7600e831511",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0a1d93b-7bab-4a51-849a-681e7a720b28"
        },
        "item": {
          "id": "aba5df1a-aaeb-4ec2-a11b-0547833b0e92",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9417cb3b-fdc0-41d3-a82c-94556aa04a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec64c85-2312-48cf-8e24-238617bdcd35",
        "cursor": {
          "ref": "d106b1b3-a91b-4638-b351-09c83b485ac0",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c9d08a02-4537-46d6-b015-ed977447b99d"
        },
        "item": {
          "id": "6ec64c85-2312-48cf-8e24-238617bdcd35",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fcb83743-9129-4cac-bd31-465bd1cbece7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b33e49-20b7-414c-8ac2-8f5035004e66",
        "cursor": {
          "ref": "187ef46e-30a1-491e-9966-f051d23dbbec",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a4294f03-e0c9-4baa-8e55-52759d4253f1"
        },
        "item": {
          "id": "28b33e49-20b7-414c-8ac2-8f5035004e66",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e3455dab-877d-497b-a3cd-a14e7fd51c14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "7e3cc635-139d-4d15-b337-9aec6c4e695b",
        "cursor": {
          "ref": "5766a9b6-1d33-42dc-b5e4-bff7e5d31264",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b9b78370-5eed-4552-9511-fb3cc3268393"
        },
        "item": {
          "id": "7e3cc635-139d-4d15-b337-9aec6c4e695b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "62c4d9b6-2032-4b34-be33-d90bdc8a5f5f",
          "status": "Created",
          "code": 201,
          "responseTime": 2086,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df00a71-e986-4a68-9675-4e320bba7dc1",
        "cursor": {
          "ref": "585b307f-b942-4595-a432-d53078f6443a",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "38a7e9fb-f31d-442d-9492-c10494a38fdc"
        },
        "item": {
          "id": "0df00a71-e986-4a68-9675-4e320bba7dc1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca528c52-239a-445a-b67d-3d31ce29c927",
          "status": "Created",
          "code": 201,
          "responseTime": 2728,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d6fc4b-209c-4523-8e65-ba9c78f45a80",
        "cursor": {
          "ref": "59e7a2fb-2142-4d76-9212-31a308b14b58",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c7777472-0eab-4746-afcc-008cb9e702f3"
        },
        "item": {
          "id": "23d6fc4b-209c-4523-8e65-ba9c78f45a80",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "23f46a73-d01b-43e4-8a21-055849bcd469",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d6370a-4c84-4f80-8c64-24556b1b0ca3",
        "cursor": {
          "ref": "9d465311-79df-4ed3-9f8b-f0ccee8521d3",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f045b111-c658-4aad-810b-97d65ce4222a"
        },
        "item": {
          "id": "66d6370a-4c84-4f80-8c64-24556b1b0ca3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d4feb3dc-61b5-41c6-aa4f-87b19e308809",
          "status": "Created",
          "code": 201,
          "responseTime": 2760,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "959c465b-77cf-4bfe-86ed-dbaa92e45fd4",
        "cursor": {
          "ref": "cc227282-ebb4-4c00-9afd-2c775f92c873",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e51377b3-6c06-4cbd-a526-746f3319d343"
        },
        "item": {
          "id": "959c465b-77cf-4bfe-86ed-dbaa92e45fd4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56e6fe6d-1f56-4ba8-bc40-d08849aba420",
          "status": "Created",
          "code": 201,
          "responseTime": 3705,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-19T00:43:06Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-19T00:43:06Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4bc55943-d50e-4801-a7e7-6325630a2152",
        "cursor": {
          "ref": "59e96c66-5a9a-4029-8a3e-6ad54332a8db",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8dc0e899-4d07-437a-8e4f-08281680677c"
        },
        "item": {
          "id": "4bc55943-d50e-4801-a7e7-6325630a2152",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0686b375-ef19-418b-ac5e-8589121834d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2397,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fdf148-801c-4cf4-9047-2a94253b204c",
        "cursor": {
          "ref": "a1eb8cca-6e7b-40aa-801f-aa14e0fd25d5",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9b335873-e3a8-40ed-ad77-e1a8c30162dd"
        },
        "item": {
          "id": "78fdf148-801c-4cf4-9047-2a94253b204c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1fe9af50-9ffc-4e8c-9d76-e38df21956e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7060c6e-14a9-468b-b180-4e6c25d319a5",
        "cursor": {
          "ref": "fff05421-1029-4d56-866f-ee8c287b5c84",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7b0711cb-3749-4781-9253-54672bf9985a"
        },
        "item": {
          "id": "f7060c6e-14a9-468b-b180-4e6c25d319a5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4f9bd42b-82e0-4290-a414-0bff03426874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d788ba8-a853-42e4-99e3-09e359aa1c53",
        "cursor": {
          "ref": "11a5e1c8-6c8e-483f-9e1a-158e54225a1a",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c3df02c5-9600-4b7f-944e-8a33cc100fc7"
        },
        "item": {
          "id": "1d788ba8-a853-42e4-99e3-09e359aa1c53",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2aa9439-9927-472f-874a-09550483aeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1960419f-47a5-4e62-8863-bcbd64550673",
        "cursor": {
          "ref": "9d50ea3a-e44f-43b2-bf21-2b7fdebccb68",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "35e289a9-8c3b-42bd-8ad5-c9d085ef8494"
        },
        "item": {
          "id": "1960419f-47a5-4e62-8863-bcbd64550673",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2daa56bd-d2b1-4ee9-a6c3-f144cc2bcb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10b4488-2b8c-4227-ba9d-5402d8609af6",
        "cursor": {
          "ref": "d3ff96fa-2e8b-492b-85a4-fee6dedfe266",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "670777a1-4d1e-49dd-a494-e891b0fda9a1"
        },
        "item": {
          "id": "a10b4488-2b8c-4227-ba9d-5402d8609af6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "acce3c30-ded4-4293-96df-9afd41af8560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286af9b5-0949-4a8a-aa21-e350b2685f43",
        "cursor": {
          "ref": "7ed06588-2187-434d-beaf-38e7703aaad0",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1808558-485c-4922-b6f4-559f40a80368"
        },
        "item": {
          "id": "286af9b5-0949-4a8a-aa21-e350b2685f43",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0d031423-30f0-42ec-912d-5bb2cdafe1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc731db-3338-417f-b0d7-1a52904190e0",
        "cursor": {
          "ref": "279dd7dd-342e-40bb-84fd-5e5b69a5dc92",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "14c77e3d-773f-4b1d-9aef-954d0e5e51ce"
        },
        "item": {
          "id": "7bc731db-3338-417f-b0d7-1a52904190e0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3917e5fc-a6bd-4d31-8aea-e98ef57c5051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298ee46e-c5dd-4d09-8754-957263b8b61b",
        "cursor": {
          "ref": "594da5b5-015f-42f2-8bcd-a6c233612b39",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a53fe5c-46a7-4d5b-8caa-47a5d45540dc"
        },
        "item": {
          "id": "298ee46e-c5dd-4d09-8754-957263b8b61b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ec2cdff-08c9-4d2e-8444-780e8b18aaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d8cf65-ad02-4a36-b980-619d5e8ff040",
        "cursor": {
          "ref": "ed25bead-f3be-48ff-9f88-bf742534a2e9",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ac1a3edc-ae65-4a53-8376-0e0e684550b6"
        },
        "item": {
          "id": "e8d8cf65-ad02-4a36-b980-619d5e8ff040",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "83f23e7f-28ef-4f9a-9e33-b436077d1497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5734b6e-fcec-490e-bfbf-841f65641ba9",
        "cursor": {
          "ref": "c869c953-6744-4e71-8603-6b29d3185160",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88a08251-856a-43cf-8f15-c04a8317d459"
        },
        "item": {
          "id": "d5734b6e-fcec-490e-bfbf-841f65641ba9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ba9b048d-eef8-4747-8a1b-114c039ffca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22018e3d-ba79-430b-a951-e1652c3b2aba",
        "cursor": {
          "ref": "2f601589-6f46-4003-beb2-f0596b6d675a",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1c00c242-bcb1-4a89-975d-956f49351523"
        },
        "item": {
          "id": "22018e3d-ba79-430b-a951-e1652c3b2aba",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "20520fea-2e57-471c-8902-af55c2500680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba15c48-2f09-4d76-a4b6-ebf4171d5e46",
        "cursor": {
          "ref": "6359a011-e6b7-4f09-8a4f-2863666732e2",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "044312c4-5743-4e1f-815b-85597fa40d37"
        },
        "item": {
          "id": "8ba15c48-2f09-4d76-a4b6-ebf4171d5e46",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2cc0fec3-fb6f-422c-bc16-a04ee3472837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964fcc2d-4071-4849-9971-50cc87cd9d9f",
        "cursor": {
          "ref": "1bd3388e-26c1-443a-adfb-39a897c147fb",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4d0a0fd9-46af-4f3c-a084-2993896da1ee"
        },
        "item": {
          "id": "964fcc2d-4071-4849-9971-50cc87cd9d9f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8d83154b-a6b9-4d3b-a903-63a7440638a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d0f4a0-24fd-4857-895d-ab04c68f4a08",
        "cursor": {
          "ref": "e75e858a-dbdd-40d5-b05f-838da5304dc3",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "36271660-7505-446d-9604-0fa913bb111d"
        },
        "item": {
          "id": "56d0f4a0-24fd-4857-895d-ab04c68f4a08",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1cb5f394-5afe-4878-a8f5-14a12748b26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5dd37e-309b-489e-a21a-16a3864c9498",
        "cursor": {
          "ref": "f6d03e24-74fb-47c0-a629-4820696455cc",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2f91ca0b-2f11-4f14-856f-b4ab84bb3ed0"
        },
        "item": {
          "id": "2c5dd37e-309b-489e-a21a-16a3864c9498",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0fbcdb3-15de-413b-ab63-c64a68a1c9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d6cf9a-1312-4b27-8436-88fc42a69889",
        "cursor": {
          "ref": "daf8a596-f3d4-4972-b2cb-3f5435438894",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "27cbdbd9-7831-4e86-950b-2cd01b9775ba"
        },
        "item": {
          "id": "99d6cf9a-1312-4b27-8436-88fc42a69889",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eca28567-19c2-4952-b1c2-716093059013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c077ae-1dd5-4ba6-b62e-84696ad963f2",
        "cursor": {
          "ref": "f629fc33-aabb-4a2a-814e-faab8de48e17",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0791d9ab-a82d-4eb4-beea-f06f93cb95b6"
        },
        "item": {
          "id": "55c077ae-1dd5-4ba6-b62e-84696ad963f2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b3c2d96-b521-411f-a0a1-6d33113a8774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b640ccd4-497c-4403-9d31-9e54670f343e",
        "cursor": {
          "ref": "8a531718-71b4-4562-a8ea-5dcb920d30f7",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bc419aa0-1de5-4c39-816e-7357d362d85b"
        },
        "item": {
          "id": "b640ccd4-497c-4403-9d31-9e54670f343e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "17a64a61-0683-4a51-ba3e-bc5097efaac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959d3f61-5315-40fd-9eb9-47b9986d8337",
        "cursor": {
          "ref": "9b078c5d-4262-473a-b695-10e855b3a505",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "985f4597-e01a-4c0f-9957-1ef2aaaa9488"
        },
        "item": {
          "id": "959d3f61-5315-40fd-9eb9-47b9986d8337",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d31a6cef-5040-4b36-bfff-6c8c616a9dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a6f838-ed80-4d40-ac5a-80d5f4c51d25",
        "cursor": {
          "ref": "360a5f01-8bac-4d30-86ea-d81dbb912495",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ad7880a6-bcee-4b52-93b2-6acca86d6b6e"
        },
        "item": {
          "id": "29a6f838-ed80-4d40-ac5a-80d5f4c51d25",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8953542f-c871-416a-9aa8-25bb431960b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5c91b5-106d-4917-b184-6ffd6bb9b225",
        "cursor": {
          "ref": "61b06f3d-0fe9-40a6-9dbc-bbb8478fd358",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6c6f9236-36d3-4dca-a7db-5d0bfe8af9d4"
        },
        "item": {
          "id": "9f5c91b5-106d-4917-b184-6ffd6bb9b225",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "743ed9a5-dd98-4b19-961a-b7b182626791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd9939b-7021-47c7-a0c7-95d1a7dffa0b",
        "cursor": {
          "ref": "e400b4a1-2836-4506-9490-85fcebaf4e48",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "191cb19c-cbf4-4a58-94c5-a7d719a16f01"
        },
        "item": {
          "id": "3bd9939b-7021-47c7-a0c7-95d1a7dffa0b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "16c1c8fd-2420-4820-8064-5d72dd87f190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77293c27-ff88-4bfe-be16-cd646aefccc6",
        "cursor": {
          "ref": "27af3859-75b0-4063-96e7-a74f8bcf752e",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2d1c3285-c761-4535-8a7a-c598851e97d2"
        },
        "item": {
          "id": "77293c27-ff88-4bfe-be16-cd646aefccc6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "93b7d932-4cc2-48a3-bbfb-cf89eeff9fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f30d4ea-260c-450d-8a8f-f0b04214e5dd",
        "cursor": {
          "ref": "d69a4466-4c6c-4010-b6af-39432df87dcc",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b2bb221b-c3b7-4894-9ecf-6dd4caae81e6"
        },
        "item": {
          "id": "5f30d4ea-260c-450d-8a8f-f0b04214e5dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e2af705e-509d-4fd5-bde0-ebaaf7e1d72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36105d37-5bae-4aa4-a805-5c45f20dc783",
        "cursor": {
          "ref": "61399eb5-83bd-4299-86a2-6ce4eaaf14b1",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2efa5cf1-cfa2-470f-ab6e-0917b6f80dc6"
        },
        "item": {
          "id": "36105d37-5bae-4aa4-a805-5c45f20dc783",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2d66fb5a-3171-4884-9b03-0f3b721517a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee967537-693a-440f-93e4-e9ccac30b336",
        "cursor": {
          "ref": "55b592e9-9759-4e73-b48a-2b324dc8dea0",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b8dcc93e-dc1c-4a4f-8c65-63dd3995e560"
        },
        "item": {
          "id": "ee967537-693a-440f-93e4-e9ccac30b336",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "32fe9c5d-e2e2-439a-8225-97eef66eb969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae4d28-3c58-477b-a0a5-3927a3af320b",
        "cursor": {
          "ref": "df6a8acd-6a91-4757-b052-351c66e871f1",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "746b3be0-3df4-49b2-bb45-42ebdb112ecf"
        },
        "item": {
          "id": "e3ae4d28-3c58-477b-a0a5-3927a3af320b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c376fd20-3edc-407e-91f7-1fc7df2a1602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba9cc5f-66ac-42ae-a64a-acb7f951ce77",
        "cursor": {
          "ref": "be72a718-de3d-4a1f-91fc-0e5205546565",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a4669a0-705b-4ebb-a1cd-985d8b51ed47"
        },
        "item": {
          "id": "dba9cc5f-66ac-42ae-a64a-acb7f951ce77",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "67ab8249-f8e8-42e6-b794-50409156de74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2ee77a-5deb-4a81-b0f6-92979e4c8247",
        "cursor": {
          "ref": "d9cc3841-65e8-4a1c-9a07-4b7a1835ca94",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b9d12190-e68d-4e9b-9df1-21f1dfe2993e"
        },
        "item": {
          "id": "eb2ee77a-5deb-4a81-b0f6-92979e4c8247",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e23bc264-0510-4460-8d17-085a993ae1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a63902e-5016-4b8b-853c-6c20acd3f568",
        "cursor": {
          "ref": "82d9e934-ec21-48d8-bd62-3376125f0c40",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fb455946-5c4b-4e71-afb2-03d2302b1add"
        },
        "item": {
          "id": "9a63902e-5016-4b8b-853c-6c20acd3f568",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "067c151a-3218-434e-8cf0-cae5547aa4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22554dd-0e49-43a1-b1cb-723b06f4ffdf",
        "cursor": {
          "ref": "b89a3cb1-b6cc-4078-b887-0da635af2dae",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "90a360d1-c692-451d-9b27-3ae1da033eec"
        },
        "item": {
          "id": "a22554dd-0e49-43a1-b1cb-723b06f4ffdf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5f204bce-0f5c-4997-b0b1-4297f7f022fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2228c990-3443-423c-8dbc-2cff94a989bf",
        "cursor": {
          "ref": "5157db64-5cea-4c3f-8f40-5f02a4a7d39c",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "649453ba-d5ce-4675-9f35-ea62f557168c"
        },
        "item": {
          "id": "2228c990-3443-423c-8dbc-2cff94a989bf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a5979d79-370b-4338-a597-d6cc86f692f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c41352-cd11-440e-ac4d-c53282ae3d7e",
        "cursor": {
          "ref": "762e6604-ce9f-4237-904c-6b4b3fe63765",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d3d48bed-b4d8-4b43-86d5-b851aef99393"
        },
        "item": {
          "id": "a2c41352-cd11-440e-ac4d-c53282ae3d7e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1eef7136-7b8f-48b7-bb89-f213717d4ac3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "edaeb410-bdc9-4e19-8ee0-89637e451a77",
        "cursor": {
          "ref": "98f18229-313b-4e27-abb6-38a465dc747a",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9e92614c-48cb-4e09-9ab3-b7eb4610ffaf"
        },
        "item": {
          "id": "edaeb410-bdc9-4e19-8ee0-89637e451a77",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08d5928f-a72d-45fa-8465-40f83c55054b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f597b46e-3b94-496f-9edc-bf4077c2c442",
        "cursor": {
          "ref": "149ad63a-fcb2-40ec-9c9f-6d675e24c0ea",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7c01f1bb-859f-43ed-93a3-7acbf95fc12a"
        },
        "item": {
          "id": "f597b46e-3b94-496f-9edc-bf4077c2c442",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ae5d94f0-463c-4365-a140-fcb09b95b71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d8a49a-ba8f-4201-8ad4-9c21388d8543",
        "cursor": {
          "ref": "c0aa161c-c135-4ada-876e-fc69c7e5ff2c",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c58662f3-dde4-41b3-80ec-4fa5cd7900cf"
        },
        "item": {
          "id": "67d8a49a-ba8f-4201-8ad4-9c21388d8543",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "41856ca0-62b7-4547-b8c1-9976718cfd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d754795-97fa-4647-9c1f-50015db6dcb3",
        "cursor": {
          "ref": "f97dbfba-7079-4dfe-9a52-68d66a142562",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "39715759-ba24-4244-ba7e-5d7ee4c0c9ff"
        },
        "item": {
          "id": "1d754795-97fa-4647-9c1f-50015db6dcb3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d94fd1ba-ef46-4495-bf25-d117014fc5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1e6f10-c08d-42c3-af9f-232ef0440c94",
        "cursor": {
          "ref": "fc17a376-ce6d-46ff-a9ba-a94e07a144da",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "719785f2-908c-4cd6-acad-163fff3cc506"
        },
        "item": {
          "id": "0e1e6f10-c08d-42c3-af9f-232ef0440c94",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cf93cd97-fbe9-4b14-b671-c1f45ed294e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ad0e1e-2371-4d47-9369-a1fcc76c5db1",
        "cursor": {
          "ref": "7a850db6-98a6-443a-aad0-c3deeafe6597",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e1bf2d9b-c57d-4ce7-b0b0-85534278a98e"
        },
        "item": {
          "id": "65ad0e1e-2371-4d47-9369-a1fcc76c5db1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8c182330-1df2-4863-930f-64e515fbd9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7118a42-e424-4b6c-91b9-8f9c0d8a8e21",
        "cursor": {
          "ref": "c2c19123-3f2f-496a-a25f-5dafb145115d",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "869eb12c-8b63-4048-a3d5-fc3489f66f8c"
        },
        "item": {
          "id": "d7118a42-e424-4b6c-91b9-8f9c0d8a8e21",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "639b4b5e-0514-410e-829f-bf0a834f078a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb7ae28-93d9-49ea-8637-3c3ffacd81ce",
        "cursor": {
          "ref": "2caef562-8d0c-4cfd-b0e4-db44263da910",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d71f3ec8-4ebd-46dc-b47d-30199087341d"
        },
        "item": {
          "id": "ffb7ae28-93d9-49ea-8637-3c3ffacd81ce",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ea558b95-118a-42aa-96eb-6eae96f03aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613c8221-8154-4e00-ab1c-c171fe437e64",
        "cursor": {
          "ref": "0b183f29-2738-459f-bfc8-f50f3a1d4577",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "318e0e78-3183-4fc4-aa96-ad16016a5837"
        },
        "item": {
          "id": "613c8221-8154-4e00-ab1c-c171fe437e64",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "77d903c7-7c87-44d1-9b41-3a008a086a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57ba96f-5798-4c04-a254-465b76734e5d",
        "cursor": {
          "ref": "56bbaaa5-137f-4096-af08-2019ffbf1f0d",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a9edb9f0-13cb-441e-9613-97dceef0bc2b"
        },
        "item": {
          "id": "b57ba96f-5798-4c04-a254-465b76734e5d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "22f09104-6de9-479e-8352-c50c47e1f23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c12dd0-18b7-417b-9971-fc223a1797a0",
        "cursor": {
          "ref": "039bfc8f-8efa-44d1-9288-f14358c097a8",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "52f88520-0487-4bc7-b9a4-c0604dcffc20"
        },
        "item": {
          "id": "40c12dd0-18b7-417b-9971-fc223a1797a0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bd060787-5881-4d7e-9db4-94e4b62d184c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21037781-f586-4b12-bc1c-6509550aaacf",
        "cursor": {
          "ref": "91278017-3e34-4029-b6a5-2705bb42eff3",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3ab7b08b-088a-4d53-bf52-a566f65aa83a"
        },
        "item": {
          "id": "21037781-f586-4b12-bc1c-6509550aaacf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a7c65766-1d61-4ad0-be78-d8fe6420c9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364aaacf-e691-4ec0-a9de-92d01c08bf8d",
        "cursor": {
          "ref": "e26e3bf4-d9d6-47e0-8771-3f648e3c4e95",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f4d886ca-a0e4-4064-9be0-48e24ab9135a"
        },
        "item": {
          "id": "364aaacf-e691-4ec0-a9de-92d01c08bf8d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "46913489-ced5-450f-9bdc-22037f91fb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5f77ea-9dde-44a1-82fb-8c80d767b0e6",
        "cursor": {
          "ref": "6d390900-4faa-4af0-9cde-3b9e6c38d549",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "929d8abe-dc17-4166-9884-f02eb5383c51"
        },
        "item": {
          "id": "4b5f77ea-9dde-44a1-82fb-8c80d767b0e6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3c3e3048-39ae-4092-b713-9d60bd9ce3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7bbb60-874e-47fe-bc79-19aa8afc79b3",
        "cursor": {
          "ref": "b7e61c60-385e-4508-925d-31e6694b1eb9",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "39ea75b5-6f66-4959-9d1d-5561f46988b3"
        },
        "item": {
          "id": "bf7bbb60-874e-47fe-bc79-19aa8afc79b3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "de7b2a67-ed8b-4657-9686-928c16d4b112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2118de-de00-4ac6-bc8e-748cb6cc6d6c",
        "cursor": {
          "ref": "179e9276-059f-4b71-ab85-3e34c8af6164",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f0d252cb-fe05-4adc-9ff2-c18bb9f1fa82"
        },
        "item": {
          "id": "ba2118de-de00-4ac6-bc8e-748cb6cc6d6c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4e9f8481-a586-4fd2-9dd2-bd5af2785f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9929629b-0014-43b0-8aba-b18bda490ab2",
        "cursor": {
          "ref": "5909ee3d-0a30-4c8f-afd5-d8d3308d147c",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9386a49c-27e3-4ec2-afe6-00417088b11a"
        },
        "item": {
          "id": "9929629b-0014-43b0-8aba-b18bda490ab2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7c6d4cb0-4d4b-4f6b-b35c-88de03fc0383",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ef948673-23bf-431f-a49a-1fa625ca2dd6",
        "cursor": {
          "ref": "8ade7b58-b364-4b2a-a974-935f0b70f860",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8e0930bb-0aa2-45d8-b771-820914394f57"
        },
        "item": {
          "id": "ef948673-23bf-431f-a49a-1fa625ca2dd6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "70f6de30-e0cb-4d53-8f0d-1ae4d34120fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d46c43-f246-41b9-814c-521d5d95383b",
        "cursor": {
          "ref": "7b2b84a4-7803-4abc-adab-b7043bf14eac",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "af774c67-60e6-40b0-9638-74c0544b1836"
        },
        "item": {
          "id": "53d46c43-f246-41b9-814c-521d5d95383b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "63593802-d3c7-4091-bfcd-72ee31546cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc2372e-8b96-4124-8d54-ca5b54310b00",
        "cursor": {
          "ref": "ec06065a-2a41-468c-8543-625474264bf8",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c0099c71-592e-4761-8548-9b7c37ee3444"
        },
        "item": {
          "id": "cdc2372e-8b96-4124-8d54-ca5b54310b00",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f41160ad-3c6e-4082-8c5b-dac37d5f569d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b858e2d-ae89-4cb4-b146-dbe6b5ce7f6a",
        "cursor": {
          "ref": "3e8b51d8-6edd-4540-859d-915444f1d341",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0dee3e4a-e769-4b4d-b492-201f3cbc8aae"
        },
        "item": {
          "id": "7b858e2d-ae89-4cb4-b146-dbe6b5ce7f6a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e04831ae-e748-4a6c-8e7b-f730140ada65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0a9dc5-0994-43c8-9630-4123d3a32850",
        "cursor": {
          "ref": "bfdf093e-4f2b-4627-b048-ff5a13f8d091",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40f99b19-595d-46f8-9a7c-2d608322f915"
        },
        "item": {
          "id": "fb0a9dc5-0994-43c8-9630-4123d3a32850",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "da401b17-cb00-44d8-8b7f-586ccee356fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f97bc08-e13f-49d7-88e6-4f75ef3a9ae5",
        "cursor": {
          "ref": "61531037-148b-46af-b104-d19daeeb6197",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8a3ebbfd-d22c-4a25-b937-e4225102b209"
        },
        "item": {
          "id": "6f97bc08-e13f-49d7-88e6-4f75ef3a9ae5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e6e44b20-0db3-40f4-ab9e-63846972ce7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd87b2b5-33b1-4ee2-af33-3f4378df25e2",
        "cursor": {
          "ref": "08924595-300d-450f-83e1-86c18dd84df0",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "26dc7daa-b186-4c93-8b34-0e8b7150ced8"
        },
        "item": {
          "id": "dd87b2b5-33b1-4ee2-af33-3f4378df25e2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6a7980e1-a2e7-4938-afe9-b7b96f860a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7ee4b8-c9a9-421f-b35a-29375d05037a",
        "cursor": {
          "ref": "3cbca062-a6bf-4681-9042-f43d4377dbff",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ed7d1593-4268-4b50-91fa-aa075c44f5d3"
        },
        "item": {
          "id": "ff7ee4b8-c9a9-421f-b35a-29375d05037a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c24ab4d5-ee27-4daa-9e3d-347aa3591253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cae0f41-ea93-4f72-b744-542bd6ec9bcf",
        "cursor": {
          "ref": "81c4b62e-4d82-4e7b-aae2-baf36c8b0c70",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0d52924e-e624-4e79-bfc2-96f717f545ef"
        },
        "item": {
          "id": "1cae0f41-ea93-4f72-b744-542bd6ec9bcf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dfccffc6-a070-431a-b4e0-317b6d91eeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf79cce-f246-43c7-9213-81ef835072a2",
        "cursor": {
          "ref": "803bde74-586f-4843-9b66-a5928cea199c",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "37f1fa94-bf1a-4160-8957-cbe8ee552b64"
        },
        "item": {
          "id": "4bf79cce-f246-43c7-9213-81ef835072a2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "86d70e4d-2449-4d40-ab29-97dd442c1d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3093b1-1fae-4fc1-84c7-5241bade7ea2",
        "cursor": {
          "ref": "c6ef4ba0-bba4-4809-8c38-5392de36cf67",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d273c90b-e0f3-4d9c-add7-24a8c07d2625"
        },
        "item": {
          "id": "5b3093b1-1fae-4fc1-84c7-5241bade7ea2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "96933fb5-5acb-4b41-ab92-cf71aded97e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed622ea-25f7-4867-b32f-28d7f5b83cff",
        "cursor": {
          "ref": "9426963f-6f7e-4016-90cf-a0c04ba96821",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "febd6d7e-1ef6-4498-9bf4-f4abf703bed0"
        },
        "item": {
          "id": "6ed622ea-25f7-4867-b32f-28d7f5b83cff",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "04f97412-27f7-4368-a26a-4ef31d9ae674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400f6054-89e5-4b02-87d2-c0add6e1244a",
        "cursor": {
          "ref": "c251588d-3b39-4e51-9e07-ee365bc2d4ce",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e01d805e-a9da-4c23-b0bc-8ed5959fd3c2"
        },
        "item": {
          "id": "400f6054-89e5-4b02-87d2-c0add6e1244a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e079543e-ec7e-4709-9875-06340c0a03db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ab28a7-c1f3-402e-a191-e2ae8465ff67",
        "cursor": {
          "ref": "76c7968e-f748-4bd4-8894-a79d24892094",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3db7b191-ac59-4a90-ac41-98539fe40b79"
        },
        "item": {
          "id": "a3ab28a7-c1f3-402e-a191-e2ae8465ff67",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b74d689b-4e31-4b57-ad93-0c1d0bc67cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6099652-3a8c-4432-945d-05ca730767b3",
        "cursor": {
          "ref": "6a6bc07f-df16-46eb-a540-daa0de3f35a8",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f5880ae4-fd74-4adc-bcd3-20cdf4f1834c"
        },
        "item": {
          "id": "b6099652-3a8c-4432-945d-05ca730767b3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a2f57de8-d719-4932-bacd-717b99c9a2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcb8c41-b044-479b-8791-0e343d850e8d",
        "cursor": {
          "ref": "b1610a2f-acdc-47c9-acfb-c7fbb741942d",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8ff6a83c-5d6c-408a-8d15-907261cfae24"
        },
        "item": {
          "id": "5bcb8c41-b044-479b-8791-0e343d850e8d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e54d470a-631e-4101-bdd8-c2d7ca15756b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f1e072-de1f-4961-b29a-9275d40fa756",
        "cursor": {
          "ref": "77f6e3d1-ec10-4d25-ac74-f44de7bf0564",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "411e4846-c9ff-4339-96ab-03529fabf851"
        },
        "item": {
          "id": "74f1e072-de1f-4961-b29a-9275d40fa756",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d0ea0465-e855-40f5-8ef5-d259edcf1f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a28940b-14b5-4b58-bd50-53e77dd15cb1",
        "cursor": {
          "ref": "7d177274-69ce-4e3a-abbb-80f323c62053",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a40c33d3-27f4-4100-afcb-623a4938d41d"
        },
        "item": {
          "id": "7a28940b-14b5-4b58-bd50-53e77dd15cb1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9ab2cb8-b20d-4a26-a73a-08b50ff7bc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c84ac2-e46d-4157-8b78-4f4f497b7719",
        "cursor": {
          "ref": "e503168c-42ef-4ddc-a0ca-06ebafc0fa4f",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dcdde973-1da6-4b17-b0d3-5952c902ab86"
        },
        "item": {
          "id": "05c84ac2-e46d-4157-8b78-4f4f497b7719",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8cfc5f67-b7b4-4ffd-bce7-5726289c0f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68856cf-9df4-4163-9cf4-dcd5b53457e9",
        "cursor": {
          "ref": "a1638cb9-2e83-4130-aae2-a9bb17483483",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4568f967-a2ca-40be-9dc3-f82d728aa6ff"
        },
        "item": {
          "id": "c68856cf-9df4-4163-9cf4-dcd5b53457e9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "256eddb2-a700-4d2c-bfcd-be659bf0e1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91eca83-bbab-41a8-9004-1b51b87f3b82",
        "cursor": {
          "ref": "4e150740-10bd-45e8-b1b6-0656df2152c4",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ec17ddce-3cea-43a1-9a0f-67fd0f72e9b2"
        },
        "item": {
          "id": "f91eca83-bbab-41a8-9004-1b51b87f3b82",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "407a20d5-9580-488f-a1a4-9b742c38fa6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae4af38-6939-4bb4-b5c2-2cf7eeab910c",
        "cursor": {
          "ref": "a980274e-f24b-433a-b0b0-c1820703cb98",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1a3bfd24-a663-4f77-abf2-136e4a1f8b93"
        },
        "item": {
          "id": "7ae4af38-6939-4bb4-b5c2-2cf7eeab910c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2e81f454-305d-4106-8bbd-a843a0a0105c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4ddd95-e4d7-43fe-9777-63c34804b02e",
        "cursor": {
          "ref": "88967ff2-e3bd-443e-8791-237c15d97d1a",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "649359aa-cc02-4db0-9923-098ab16711a6"
        },
        "item": {
          "id": "9c4ddd95-e4d7-43fe-9777-63c34804b02e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5b1bb1e8-ac47-4d42-ba16-dbb2d89568b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f069aaf6-6003-46a2-a9d6-5bf5e03e442f",
        "cursor": {
          "ref": "32a4ba80-ef54-4af5-97e8-08a19cdae88f",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "08512a1a-d1a6-43d6-8729-b95a0e973b06"
        },
        "item": {
          "id": "f069aaf6-6003-46a2-a9d6-5bf5e03e442f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a3da7d85-93cf-4fc6-ad40-60c4d4b4c3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbecffdb-bef2-41d4-a30c-531354142d26",
        "cursor": {
          "ref": "04baccdb-b714-441a-9af9-a2c4c445f0cf",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "97ebba1b-60a3-4921-963b-d38a670b253d"
        },
        "item": {
          "id": "fbecffdb-bef2-41d4-a30c-531354142d26",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e4bd8e49-002c-4838-a1aa-6d8d4eb4ded7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a83aeea-5807-48ff-97f0-f3a9c523ce03",
        "cursor": {
          "ref": "45e410b4-e3cd-4888-b4d8-c4e8e68de4c4",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c3239304-0e17-4d57-b648-7c44314cc5a7"
        },
        "item": {
          "id": "5a83aeea-5807-48ff-97f0-f3a9c523ce03",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3318352c-755f-4eb6-be8d-2fc2c4eeb32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2cc6e4-aae5-4ec0-9290-549b927c486f",
        "cursor": {
          "ref": "04074666-d141-4fd7-a44f-c9244358e52e",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5cd0838f-654a-455b-959f-56dabb5dccc9"
        },
        "item": {
          "id": "2b2cc6e4-aae5-4ec0-9290-549b927c486f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4109cee0-c325-481d-9771-6f5d91e69f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b09543-fa74-417e-9a97-b23635bd8b6b",
        "cursor": {
          "ref": "2961b620-64d4-4e6c-ab37-6088924b0cff",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "69e3c360-4b09-42b5-8be1-d39a07633cdd"
        },
        "item": {
          "id": "53b09543-fa74-417e-9a97-b23635bd8b6b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "89c13928-3984-4638-9af3-ada7f77047bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c2cbc7-27d0-4795-a52e-214d99f3ecbb",
        "cursor": {
          "ref": "1775d939-98e4-4c6c-835d-c37f5c1b444e",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "34d465cd-4a1f-4303-b753-ce708d05412f"
        },
        "item": {
          "id": "b7c2cbc7-27d0-4795-a52e-214d99f3ecbb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "13f35cbe-833f-4a0d-9fc7-7fe4a5660579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ec225b-ee40-4d79-ad01-2dd473dad372",
        "cursor": {
          "ref": "6fe6424d-c29c-4e43-bc85-69ba62f9aa9b",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d0558b05-6750-4a55-bf3e-ae349bdabae5"
        },
        "item": {
          "id": "41ec225b-ee40-4d79-ad01-2dd473dad372",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8dcf1e17-079f-4906-99bb-abf974fb403a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2675f0f5-229f-4fae-bb96-eb3b536aa246",
        "cursor": {
          "ref": "00d25fba-cc16-45a7-a154-b53e8eacf8e8",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "343b2255-bd5a-489b-81f3-1ed9975846c7"
        },
        "item": {
          "id": "2675f0f5-229f-4fae-bb96-eb3b536aa246",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4c603e44-af69-42f2-a1ce-3223b4d95d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535d74a5-e8e3-4b10-9c40-e757de3198fa",
        "cursor": {
          "ref": "d35752ac-9b92-4e13-9590-9a94823baf15",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "443eca72-024d-4edd-acd1-886ec3303676"
        },
        "item": {
          "id": "535d74a5-e8e3-4b10-9c40-e757de3198fa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "93d96b87-0c2b-4be6-909b-287987f64c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d649069e-8680-498e-a3d8-d6b3ecd4bef8",
        "cursor": {
          "ref": "50a0328e-f1d0-4b68-95af-eed73550a005",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cda7e787-11bd-4be7-b6e2-ce7693e3697d"
        },
        "item": {
          "id": "d649069e-8680-498e-a3d8-d6b3ecd4bef8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "06f3996b-7042-4caf-91bd-5255467fa834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a85713-8e46-47c9-9b1d-02bf7205f948",
        "cursor": {
          "ref": "ec1e4e49-451e-4c8f-a32b-4152dce7e93d",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7b47fd6d-99d1-4a5f-b6d2-c8bcf4d0c78e"
        },
        "item": {
          "id": "c5a85713-8e46-47c9-9b1d-02bf7205f948",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "746c047f-fc29-4b1d-8ab7-af1f67c56a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3562afb2-80fc-4315-b005-5ded4c47dc45",
        "cursor": {
          "ref": "9a16b9b9-39db-441b-a37e-bb96b45aae99",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "91c95098-0c43-47b3-87ff-fb18ced67bc1"
        },
        "item": {
          "id": "3562afb2-80fc-4315-b005-5ded4c47dc45",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0284fba3-5df0-419c-800b-f60e4506b109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb200f4-2305-4005-94dc-646a0cd826b4",
        "cursor": {
          "ref": "14010f61-e5cc-4aa4-bc86-1153cbf32f0a",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "188e88a9-236c-4eee-8c76-5d8bcdd95530"
        },
        "item": {
          "id": "feb200f4-2305-4005-94dc-646a0cd826b4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2ae2d678-8c11-4291-8137-a6fe900b9a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd50f881-57c9-4c57-b07f-57fdbf8b4a12",
        "cursor": {
          "ref": "eea95a08-d2b0-4b87-83a5-bf109f4667a7",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5dd08d47-cd11-412e-a28e-255b98f5ca8f"
        },
        "item": {
          "id": "bd50f881-57c9-4c57-b07f-57fdbf8b4a12",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ea1ff980-28fc-43a6-882d-f05c9a75681f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e3ea5b-4507-4cd7-8a6c-42b19fdb9c84",
        "cursor": {
          "ref": "56c9a1a9-86b4-4317-a040-6c3e38e7a875",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d8505dbd-ba85-4ab0-9e7f-09cbca8a9aff"
        },
        "item": {
          "id": "f5e3ea5b-4507-4cd7-8a6c-42b19fdb9c84",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9dbff9af-b32c-4a15-8fe8-dab52925f5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d70e611-024c-464a-a6ad-a425e7a3616a",
        "cursor": {
          "ref": "5a0d53d4-a282-4b80-9883-213e2cc26768",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e3cbf4c5-32cf-4251-baef-c29f7e8c17e3"
        },
        "item": {
          "id": "6d70e611-024c-464a-a6ad-a425e7a3616a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52f13433-5d1b-4986-8453-ccf1d6b49114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f617b-921c-472e-ac76-618f3f8db4ae",
        "cursor": {
          "ref": "a89d1e3e-cb60-418b-8e88-a9f9dcc15e0f",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "47854aae-bc6b-4f7d-a42b-38f732e7be96"
        },
        "item": {
          "id": "a09f617b-921c-472e-ac76-618f3f8db4ae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "49d88561-4bb1-4ade-a9f3-d541de46d951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13e19cd-8b0b-4195-afd7-b705520c2a5e",
        "cursor": {
          "ref": "07d414c9-52d9-45a5-93ad-39c2bd9e4163",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "341b0a9e-3cec-4c11-9105-6b0bdcd4fd40"
        },
        "item": {
          "id": "e13e19cd-8b0b-4195-afd7-b705520c2a5e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d73cf6d3-aa04-4fed-a79d-e53d5a60d2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bcb85d-22f2-4d92-8f70-e833279fd653",
        "cursor": {
          "ref": "dbab1bca-ddec-43ff-be02-802eb3bbfb6f",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1e4be15d-82fe-4fdc-b945-076ef0ca6622"
        },
        "item": {
          "id": "27bcb85d-22f2-4d92-8f70-e833279fd653",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bfb3142c-a8a0-4993-9952-0f3d37c5b982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f382ff02-9420-458d-bb16-e0cb3729b606",
        "cursor": {
          "ref": "1543d170-2b7d-4ec7-9402-e764459350b5",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "094339a3-c678-4f14-a635-87e0c8a9678a"
        },
        "item": {
          "id": "f382ff02-9420-458d-bb16-e0cb3729b606",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fd99f19d-80cb-48af-9f4d-9e9724458abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964a5f81-07a9-4e22-b0c1-78985248a852",
        "cursor": {
          "ref": "a7d5f6a1-ec74-4f8d-a06b-605951118d51",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f577e0fe-e691-4d1e-8cfd-d6a45a06ec51"
        },
        "item": {
          "id": "964a5f81-07a9-4e22-b0c1-78985248a852",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fdf55469-92ec-4910-971a-47339e4a0254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88e162c-7ce4-4f71-b5eb-95ae7bef8905",
        "cursor": {
          "ref": "7943234c-db3a-4e03-a565-f6c27e5e51bc",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0abb98f8-4613-412e-a094-2ec27ba32cef"
        },
        "item": {
          "id": "c88e162c-7ce4-4f71-b5eb-95ae7bef8905",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "27a2f3b3-9f1d-4df7-b242-468fb6b65e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f75a8e9-130d-4df0-ae4c-11aa8d779d86",
        "cursor": {
          "ref": "3ee7d3b4-d967-48f4-a46b-629da8c61492",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "958d0a35-63e0-4fe4-a848-4fdfddf9d8a4"
        },
        "item": {
          "id": "4f75a8e9-130d-4df0-ae4c-11aa8d779d86",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "66c7d41c-fedf-4b20-92d4-6839e107223c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e977d15-9a76-4828-8d9f-40cc1d9c3a77",
        "cursor": {
          "ref": "49df9ce4-197c-499c-9457-b8fd90975579",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "48d8838e-9632-42fa-b625-fff7a8fd72d3"
        },
        "item": {
          "id": "4e977d15-9a76-4828-8d9f-40cc1d9c3a77",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f93e83bf-bc61-4203-b13c-cd735c06fe3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d80157-2279-4915-a76a-ee291a49811c",
        "cursor": {
          "ref": "9382a790-0b1e-45a7-8b29-82a779c57fa6",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cc3c1b75-ae2e-42ec-b630-abbd19789917"
        },
        "item": {
          "id": "07d80157-2279-4915-a76a-ee291a49811c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6d16cae5-a1db-4eeb-9bd1-cce68a8cd87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3586f3-43c3-4b70-a1af-3be64718d584",
        "cursor": {
          "ref": "462cce96-f155-482d-a30f-52c281f18a20",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5b0083eb-1885-46b3-9537-d2dead509e09"
        },
        "item": {
          "id": "4d3586f3-43c3-4b70-a1af-3be64718d584",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b4d5d96e-36dc-4a19-8c27-dd8f45ceee8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ec7649-97a7-47a1-8a99-321ae50dd3e6",
        "cursor": {
          "ref": "755b1ff3-d884-45c2-b733-ca28ff8ebfc9",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bb4ccdcc-18d8-4984-81ab-54a9d974472c"
        },
        "item": {
          "id": "32ec7649-97a7-47a1-8a99-321ae50dd3e6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "571f1123-b07c-4388-b8df-80b3df23fa60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc0f80d-f230-44e7-858a-877cb420d202",
        "cursor": {
          "ref": "91656439-9272-473a-a445-559dc12e149a",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3f13abec-ce67-4972-aa46-f659bcd3b67b"
        },
        "item": {
          "id": "0dc0f80d-f230-44e7-858a-877cb420d202",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7b36a30d-ef9c-4403-ab07-f5b33b489bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0548d39-78a9-4114-86de-a6c3055392e1",
        "cursor": {
          "ref": "61f1f3cf-4b50-4d14-8d1f-8ca7fa79839b",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4c20a4f7-3087-49c2-acb4-25f73393372a"
        },
        "item": {
          "id": "a0548d39-78a9-4114-86de-a6c3055392e1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cc925bee-590e-4544-b62c-12eaad398df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c6951c-42fc-42ff-89d3-c385eec941e5",
        "cursor": {
          "ref": "2be36192-59bb-417a-8179-f03efd7fff9b",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d149b327-d245-4f5a-9d4a-325682c44d88"
        },
        "item": {
          "id": "d9c6951c-42fc-42ff-89d3-c385eec941e5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c1cc6372-62ff-4f34-b94a-c58e9ad021d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae8e9f5-3306-4525-b422-b09042cfe956",
        "cursor": {
          "ref": "9dadc382-5bc1-4d88-bf43-94133c9309f0",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cc53c103-51fc-4e1a-81bc-76fc9dcc3d0f"
        },
        "item": {
          "id": "4ae8e9f5-3306-4525-b422-b09042cfe956",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7d656f77-fe26-4be4-9a53-dd17546f5a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5bf7ec-01ed-4118-8811-94fe0a4d2469",
        "cursor": {
          "ref": "a963c4c5-c799-4ee6-a2f2-8528b1d2cb2b",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c301600d-f30b-4e92-b16b-aa6adf715a54"
        },
        "item": {
          "id": "4c5bf7ec-01ed-4118-8811-94fe0a4d2469",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ee3d7a8b-2b24-48c6-a06d-31e773c1afba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40508f06-734f-41a9-a325-c83dd98e4145",
        "cursor": {
          "ref": "0c29fc5d-d622-4ce5-9bd7-e96f89cf15dc",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1a8a1511-6d24-47ef-bc8b-5d92e54e473e"
        },
        "item": {
          "id": "40508f06-734f-41a9-a325-c83dd98e4145",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "77cce2a9-6bf3-4984-9973-7859199b5d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdd01ba-b17e-4356-bea4-04a0824a11e3",
        "cursor": {
          "ref": "bc63cc2d-3b9c-40ca-97b5-10f145e0a30d",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "45949bab-b583-4231-8130-a6e397e6a6f2"
        },
        "item": {
          "id": "4cdd01ba-b17e-4356-bea4-04a0824a11e3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "04a9009e-0fbc-4a7f-acea-7b262b4eaf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357548c9-a2f4-4f5c-92bb-f1faf85282cc",
        "cursor": {
          "ref": "2d2737ad-bbdf-4342-821f-7d4840de78c5",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a7459a7b-0921-46e8-a628-9ca257649b23"
        },
        "item": {
          "id": "357548c9-a2f4-4f5c-92bb-f1faf85282cc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c16e4213-6972-4e84-906c-d2a98692b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55300a5e-96aa-414b-a1eb-468f314f4069",
        "cursor": {
          "ref": "7c1f5955-e786-412d-a4b7-ff50a1b9c01c",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8d9e0d65-6254-4851-8f9f-97acdb25a896"
        },
        "item": {
          "id": "55300a5e-96aa-414b-a1eb-468f314f4069",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "574bc8fd-3f9c-4f1a-8e25-233f798ce385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94bc347-726b-452f-a348-47f1b04e9cbb",
        "cursor": {
          "ref": "638cd405-9525-4144-b509-86e0908e3286",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "54c737dc-0c74-4f1b-aee2-24fa2e9bfca5"
        },
        "item": {
          "id": "c94bc347-726b-452f-a348-47f1b04e9cbb",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50ea05a4-0a31-4939-b8ab-fe30fc1b2833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eff2b9-eccc-4f4c-a28c-3496478991af",
        "cursor": {
          "ref": "57fb98ef-c323-431d-9c26-43198c46548e",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a61ac5f8-f45a-4328-a520-5ae187fea3e4"
        },
        "item": {
          "id": "86eff2b9-eccc-4f4c-a28c-3496478991af",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b3e2bcfe-9ae3-4ef7-8d2b-06f6d07085c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549cc8cd-0cb6-4cef-ba4f-c991620a9368",
        "cursor": {
          "ref": "d5053b6b-a139-4c53-bc49-794b65e17162",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00f6fc1f-443b-4c07-b401-b275aa7fda70"
        },
        "item": {
          "id": "549cc8cd-0cb6-4cef-ba4f-c991620a9368",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "22e1fc75-c16e-4695-b54b-9b1b4f547558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b61733f-5f63-448c-bf1f-ab1eb430dcf0",
        "cursor": {
          "ref": "0314f457-f06d-4f69-89dd-3941520350b5",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "130faa5d-a533-4db6-aed9-ebe2a4f02ba7"
        },
        "item": {
          "id": "1b61733f-5f63-448c-bf1f-ab1eb430dcf0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1ca9db10-a5b4-4252-9204-719d5de2017b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cdb249-73bf-4c34-b19e-4b9a0bb6f118",
        "cursor": {
          "ref": "fd8a0ce6-6caf-4d51-bc01-4d9a96563fa5",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c981a757-bfcb-4a0e-978e-b8c71de72241"
        },
        "item": {
          "id": "f5cdb249-73bf-4c34-b19e-4b9a0bb6f118",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "97d8035c-7444-4ec2-9677-a19617b998ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a767be1-1cdc-4eb0-8dad-58b9c500cb03",
        "cursor": {
          "ref": "ef061f0d-35b8-410a-b31a-83c9fbf3773b",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2b55190b-009a-4b69-95df-30584b5cab20"
        },
        "item": {
          "id": "5a767be1-1cdc-4eb0-8dad-58b9c500cb03",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c72b0855-ef65-460c-a564-ed36f4f688ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbeeef3c-708b-43fd-84cc-0ae84da4999c",
        "cursor": {
          "ref": "9381a847-9bca-4896-9952-ec8f1280a379",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "03e2f22e-7719-4cb7-a4cb-bd82019131dd"
        },
        "item": {
          "id": "cbeeef3c-708b-43fd-84cc-0ae84da4999c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "48ddaa02-284a-49d1-89c2-632b249117f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f8d003-6339-4788-83f2-e8dfb9748b86",
        "cursor": {
          "ref": "b60be956-1a78-499b-a717-1dea4b7a4cb8",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ff9954e-2f77-4f7b-9c9a-13c87d64d0a7"
        },
        "item": {
          "id": "d7f8d003-6339-4788-83f2-e8dfb9748b86",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "06688d56-16a5-49bb-bb75-fe1d96414ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77951cf2-bafa-4a80-aa82-99d9a90fe829",
        "cursor": {
          "ref": "5f117d0a-031e-4ece-a130-10a926fc5597",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "71775e68-aa46-47c1-a398-4451910fd557"
        },
        "item": {
          "id": "77951cf2-bafa-4a80-aa82-99d9a90fe829",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c4a13935-5885-4ac0-b8bd-880da0b898ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8054103-98f8-4de6-aba2-2ffd4f7ad765",
        "cursor": {
          "ref": "d8ee0721-4446-4b1a-906d-73bdefcaa3c3",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "52d06919-7dae-404c-8f68-934c08cccfc0"
        },
        "item": {
          "id": "d8054103-98f8-4de6-aba2-2ffd4f7ad765",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "39190749-cafd-46d7-9f56-627962496b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c13c30d-33da-47b4-bc45-4ad4f589e2f5",
        "cursor": {
          "ref": "e7a54bd6-b1d3-4b28-9a14-323b172a6cec",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a1b4b12e-34aa-42e8-b742-063ed1b17320"
        },
        "item": {
          "id": "7c13c30d-33da-47b4-bc45-4ad4f589e2f5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "47b63f32-c3ac-41e8-8853-011aeaa02331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5168776-b72f-44c3-b6fb-14e25a09f0fa",
        "cursor": {
          "ref": "df7e2969-d862-46fe-a12d-6d133690844b",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7151d661-9536-4feb-8e5d-99d21739c2ec"
        },
        "item": {
          "id": "a5168776-b72f-44c3-b6fb-14e25a09f0fa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "81f26197-dd71-4ac2-9a8c-bd041f58bdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df319e9-d70f-4e08-b46f-dde37dbceb5c",
        "cursor": {
          "ref": "d356ef26-d82d-47db-b557-071b517d6c6b",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e5263e4d-9760-43e1-a193-67d4313d1c98"
        },
        "item": {
          "id": "8df319e9-d70f-4e08-b46f-dde37dbceb5c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7a2b6968-659c-4763-924b-f0e188222557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317bfa5b-215c-4b36-9998-c2d5c6db757c",
        "cursor": {
          "ref": "a6bc0e60-4932-43f3-8fad-151da88a4fcd",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "73ee2920-2da8-46fc-9039-8aacc87b45d2"
        },
        "item": {
          "id": "317bfa5b-215c-4b36-9998-c2d5c6db757c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "21d6d3ae-763d-480b-b206-d4b2074e58fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3154c1e-7251-429d-86b4-922e2078c514",
        "cursor": {
          "ref": "58c1555b-5dbd-4c56-afcf-4bcff92a7218",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "21dc2ae1-b747-4013-aff6-a626b4d6735c"
        },
        "item": {
          "id": "d3154c1e-7251-429d-86b4-922e2078c514",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3864a9a3-0838-4944-81f8-14e2b885a007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b7c4b0-eda9-4164-b413-29e4c422fde8",
        "cursor": {
          "ref": "c849dde0-e5c1-4c08-ad66-43882738d6d9",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "275a1af1-35a9-40a9-90fc-dd530c58e601"
        },
        "item": {
          "id": "b9b7c4b0-eda9-4164-b413-29e4c422fde8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "072b4681-4470-47a6-b1e4-330d476b3897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bed4650-d50f-4579-9a6c-cf38ca2d4a2c",
        "cursor": {
          "ref": "ab2e7b20-f743-4665-b124-0357c7fc8001",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5995cdfc-8025-43aa-b64a-3ff0cc8d238c"
        },
        "item": {
          "id": "2bed4650-d50f-4579-9a6c-cf38ca2d4a2c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fa20d6a6-1b7e-4878-a4f2-03a4fa004cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f43a500-2083-493e-91de-ad502820d6c1",
        "cursor": {
          "ref": "bc91c91a-2edc-4a3d-a12a-eab4a335d5ad",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b1366226-0b69-441f-92b6-f4d34517c81f"
        },
        "item": {
          "id": "4f43a500-2083-493e-91de-ad502820d6c1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bfa38810-1ac9-4c5c-9664-804670069bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8fc624-4b60-48ab-a19b-5ad809f0a273",
        "cursor": {
          "ref": "3447519c-34a2-4550-a6e2-7a40df624d3c",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0666f036-03c8-4b4f-8551-8bef5cd8b38e"
        },
        "item": {
          "id": "ea8fc624-4b60-48ab-a19b-5ad809f0a273",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "42dc7ea7-6855-425b-90c2-3b58b850b3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b10274-1948-477b-a959-e76ee6f95076",
        "cursor": {
          "ref": "53891e5c-7188-4118-a261-ffb40a12c553",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bf7b03d8-fd7a-4007-9db6-f17dd094d3e1"
        },
        "item": {
          "id": "15b10274-1948-477b-a959-e76ee6f95076",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "05ff6dc3-52fc-4b1a-9c48-8abfd49515ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a09aa3-0688-416d-8674-a5a87992dc56",
        "cursor": {
          "ref": "3bbe6f4a-ccd6-437d-973b-65e07ba11de8",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69ad26f4-9bb1-4b33-8e69-efe81d745bee"
        },
        "item": {
          "id": "39a09aa3-0688-416d-8674-a5a87992dc56",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "af542415-d53e-4077-b1db-60f7125b56b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6dc127-3546-4435-86a1-64e7fb3ed2b5",
        "cursor": {
          "ref": "08dde68f-2b4b-4b0a-9a7b-cf86d778bd5d",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "376aec17-8d34-4a73-8670-dc3c2246cc45"
        },
        "item": {
          "id": "8a6dc127-3546-4435-86a1-64e7fb3ed2b5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e54d5ba2-7506-48d4-b979-de23fb5afbd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2c2cbfcf-62f2-4c0f-84e9-fda4a504c29b",
        "cursor": {
          "ref": "2cdb6c5e-6fb1-4b68-8ef4-857e5efa9a0a",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b3a6a436-b35f-42dd-8978-a0eb62d1bf1e"
        },
        "item": {
          "id": "2c2cbfcf-62f2-4c0f-84e9-fda4a504c29b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1ba26d68-9e95-46d1-af7a-445352e4ddfc",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf2c6d7-0d13-43f9-af28-628b4563f5af",
        "cursor": {
          "ref": "4290c548-d516-4f92-beca-4ff594bbdc92",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "87c1e46e-1469-4df6-81d5-2f2d8ccf27b0"
        },
        "item": {
          "id": "1cf2c6d7-0d13-43f9-af28-628b4563f5af",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fb5032fc-9b9d-4e12-b7ae-d2fd5a29791b",
          "status": "OK",
          "code": 200,
          "responseTime": 2051,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0439a5-e362-426a-bd20-ee09a8cf803b",
        "cursor": {
          "ref": "205578eb-c7da-4d9d-bee5-63b3b4c91e70",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "91d0d167-9e8b-4cac-a115-3736984d1b29"
        },
        "item": {
          "id": "9c0439a5-e362-426a-bd20-ee09a8cf803b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a5490800-9ab1-42e9-99f7-f4747ae56731",
          "status": "OK",
          "code": 200,
          "responseTime": 2836,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d40ef9-2ffd-4904-a319-7c82cbe3d332",
        "cursor": {
          "ref": "36b11829-cb75-4393-b256-44cd3f2bc838",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1f2ccee2-30fd-4529-b9b0-b4a245edd054"
        },
        "item": {
          "id": "03d40ef9-2ffd-4904-a319-7c82cbe3d332",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "681930a9-60e9-47b9-a8f9-9cfada38d962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "03d40ef9-2ffd-4904-a319-7c82cbe3d332",
        "cursor": {
          "ref": "36b11829-cb75-4393-b256-44cd3f2bc838",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1f2ccee2-30fd-4529-b9b0-b4a245edd054"
        },
        "item": {
          "id": "03d40ef9-2ffd-4904-a319-7c82cbe3d332",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "681930a9-60e9-47b9-a8f9-9cfada38d962",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d3d6049c-f4ac-4a37-ad22-ee67bc1555b5",
        "cursor": {
          "ref": "d60a850d-2e37-46f6-b235-50592ceaf95d",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "35070bd9-b194-40bf-b86a-156a7ad3d63d"
        },
        "item": {
          "id": "d3d6049c-f4ac-4a37-ad22-ee67bc1555b5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b4aca2da-4f70-4e71-9142-b08362dd869e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "47aa90a9-ec4b-4406-970d-7706c8eb4953",
        "cursor": {
          "ref": "0b1813ec-6f1a-473a-b488-b16a0c1e1089",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0c065fac-e159-4fee-90c3-69fb8027ba89"
        },
        "item": {
          "id": "47aa90a9-ec4b-4406-970d-7706c8eb4953",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f21631bc-73e2-4f58-8a64-5d1824af34a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}