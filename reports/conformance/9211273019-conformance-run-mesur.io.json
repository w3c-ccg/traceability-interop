{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "729e5a55-0a56-4054-ba26-6491bfbd8b7a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "41672861-c9e6-4823-9a11-8c2e590cac15",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92925c59-a44f-4732-976f-83e80fd34e97",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aebe371b-8342-4266-bf8d-cc1e62a1d431"
                }
              }
            ]
          },
          {
            "id": "a4ccd401-3bfe-4c26-809b-3996733cc8bd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30f992bb-ce1c-40ca-bdb4-d9351331e4d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d7412be8-8cb0-4b18-9b36-fd266ec1f425"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "786f2930-b335-4bb1-b86a-0e3d32f6011e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "02dd5748-7dc3-4049-bc42-d885ab9f7a18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "34158199-eb31-4e36-9cca-ef783e68f2c1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c1ffcf3-5d20-4fe1-ab4f-08d349d06cec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97648631-9d2b-4226-9726-1639e8f0eb1d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2399443d-b4f8-4176-bac5-c2a3cc2edef4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66942661-b3d2-4bb4-ac69-1e81d89b1782"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d257d410-4e64-43f0-99e3-f68bcc3ba964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc0e4c18-03b8-42a4-9bb3-e608d6c5a72c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47ddf0f3-b014-40bf-9794-50dbf2007c21",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1e24c643-535e-46a7-8cef-a6b20dc047d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26b843e1-575e-434d-93ce-1a7c5826ca44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3741f1a8-bead-4451-b571-524ad08471dc"
            }
          }
        ]
      },
      {
        "id": "99b9ebeb-d77d-4c0d-80cf-e5461f20fde7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2f81a916-33e3-44da-8486-f9030a187a29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c2c9262-e4fe-48e9-8b62-67f6b2b35a12",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79c423d9-d094-4bbf-8d84-5a8bf9e1f96b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba396c6-05eb-42a0-b874-a617acbed680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27b6f87c-b884-4c14-b8e4-dff3088afd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b23aa9-a454-4f86-b8cb-9e48f72414c0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe38c075-773d-4402-99b2-6deb00a6d5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d81473d-771d-47f7-bfd5-55afa22ed9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a7ff96-28f8-40bd-a88b-0308ae498927",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572232d1-1e4b-40ce-ba4e-b5bccd1ef541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a575002-f859-4592-9f48-6086e14669e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ecf0323-44cc-434d-82f2-daf28b52f39e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47d9c3b9-12af-458d-96ed-344f5e569067",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe97a2f0-db46-4eb7-93e0-60d6e51b564c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33188afe-64a6-4648-9a05-2c95ec605d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c846c2b-b846-4c1a-970b-d56da3b9861b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f7d693-6eef-4e85-8097-3bbffee4dc2e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e652b0b7-ebe4-460b-8df2-2f29e587a2f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f228b92a-4128-44a5-9716-7aa15f21b577",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8c1c747-7f82-4181-8721-e2ff871d7379",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4d4acb32-58df-461a-86a5-0373c7bf4925"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d4a8c27-bcaa-4b29-8466-b7ed22bbf94f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "59876834-c5d9-4b60-8b0d-1ccc657a6181"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbfd627e-bc72-4836-8bf9-f5dd85e8cfdb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52891e35-050d-4c54-87b7-72063731dfa7"
            }
          }
        ]
      },
      {
        "id": "a56f44f1-fdb0-491f-ac67-f9fa65229fd8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ecb90827-8768-46c2-abe6-7f06e8a159db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56086bd9-10ae-4c29-ad41-9372539b9897",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c34baf67-b5c8-4254-aeb2-9daefd1243b1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6909fa25-1a65-4e74-a0d6-fe18a3e552eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f92cb47-bb99-4f86-9569-c5de64bc464f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a23117b-01de-4293-b7f1-688521629d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66fd5fdd-2e10-41ed-9f03-49fde8994133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a24dc1-2f73-4e8f-8ffe-7878686ef340",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d730d7a-88ad-4c85-bf9a-08fdc77c9082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88af7340-f2c2-41ea-a19e-90b495502d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8691f356-d25b-4292-927c-3d294d806c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ecb15b7-27ac-44e8-aff1-cb25878f30a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997c8734-0dfc-41b6-addd-805c9c685470",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35a0338-7047-40dc-b0ef-16ebf2b53d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb15c95d-2590-485f-91ec-7994fbc8aa55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa3051a-7738-4f88-aa1f-15f10f1bf8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c83cf1f-1097-49f1-968e-e604088fc86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf2312a-97a3-4422-8a47-d59a66fd5ab4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d919462a-df2a-43c1-b5cb-4e599da79f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17d80607-fa38-4d1e-8d53-757bdfa7b9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5f653a-6ba8-4fd7-bd70-d6084f0697d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60dc8add-6863-4767-9ec8-0318f4a47d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d493dcc-247b-46a1-b74e-23df464e6a17",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0051a33-4f8d-4646-a521-bec6613cee7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a16878a-b166-492f-851e-3d66c03cdbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0a3b0e-d142-4869-8f10-4fcf3237c5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9eabee9-b847-4367-b126-0cc6c25a1a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210f50e6-fb9e-4cc2-ba4b-5d78b7a5b138",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde24b69-6876-4064-9b81-ea091f388b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762faa19-0a03-4a14-a36b-f4f28e08e8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148644a5-b69c-4f7f-aad0-2e5d2f93143d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "161b50d7-f21f-4f41-b140-ece81d4186e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d66c368-3326-48ea-a7d5-ef53264ead03",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd473dc-f22b-4e45-8199-299f8fdc45f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f40034-1f26-484a-bc42-4b5b41c5827a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97d2b86-541b-4de4-8180-7cfe3a2abbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3100735-1b3f-4b13-bd95-863dc7f2e714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3823c51b-3a40-428b-a76d-0a9ddddf6a68",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847c1c4f-1218-490b-b4df-5245ad086112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc886dff-7e2c-4d70-b255-27e8c41c18f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06268000-6de1-45b9-ac21-d31eaabeda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29a20394-1302-4e2d-80e7-e2dbd2b1c48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ccd92f-496b-4fad-a80a-b33ea1927b28",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5358781a-48a3-4b91-9ff7-fe3c86f6ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2027f6db-46bf-4e1b-a971-945d908fd774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3a606d-6156-4d95-a24f-46e2cb1e5625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dc7fd4b-9b74-4874-af82-accc921b4a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fea79aa-a4d6-46c4-b1f1-9de8842e489c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab914185-433b-4567-a99c-d79afd2a51a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e655dcc-bb0f-44df-87b5-9a108db27c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5a064b-6d3a-4311-bbda-e3cd1bfea180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05ba755e-2c5c-4f2f-95ae-1c6d0ec511c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6657a549-f7f2-4fdb-b407-cc5d172f7a6e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd59f21d-72fb-446c-bb61-10736d1848f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6199758b-9217-48c3-b20a-32f0e46d990f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2e993c-393c-4d7e-a191-c51e2e635a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dcbb769-82ae-48a6-8bc2-b740955c85e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4fcff7-845d-425c-ae5a-a05211bb44d8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908cbb08-c362-4cf2-aa74-5945e5349ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf3cf51-d379-4e8f-aae1-dd04d0b88d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56c6029-27c8-438a-85da-b8db35170c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "016dd22b-5ebf-41d9-bf06-40d539004082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15828707-d1df-4b4f-beaf-0ec22ca21a47",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0540e37-4cec-41d0-83e6-457ff49946f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d2b832-053f-49f6-ba47-1c3a9ec96a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093239e0-d398-43f7-9c69-ce3cc747dd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74f070f4-56ad-4d46-af2f-86d4c60b65d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5dfb1e-c15f-4ff3-bb3f-a47a0e66fc81",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb76c35-bee7-41e4-be10-e04b1d2843ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2bb1cb-dbac-4f72-8fc6-7d49d4c23143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d69606-21e6-44b1-8d1d-04c8fb3d66e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdd216d4-1cf3-467a-889f-e2d47a6e4c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3a5a86-ad12-408e-98e9-52b7ef0d8ec2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53acf1ac-f5e0-4983-8a79-bda1790dd6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2bab5a-8673-4d6f-bfa4-41dee5f4e989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a0cc44-93b7-47fa-ae33-029752e12abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f8d765c-b9d2-4215-b735-df81d3a2db7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d57fbd-8d00-442b-9062-a4f31690c657",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8e851d-a20c-4160-942e-40a8f1c35461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb28e0d-a2dc-490b-96da-d227ed1e9894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1e86c3-2198-404d-b5c9-f2f1f1dc44b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7956255a-c158-44cb-a0de-8bfa48dbb45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3783939b-98bd-4a65-b7bc-40bd2979a93f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4a8695-948d-419e-8b6b-727a099ff23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b572cc2d-ca52-4a8d-9782-fa9f4a791570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2055ccb6-2448-449c-a000-52c2e309f603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5571ba2b-d6bc-4bc6-a305-c2d06252c4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71f4c93-c931-45ac-87c3-89bbef867fda",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60663e20-ceec-44bd-81e0-076de3769ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73c4783-b879-4262-92d3-bbb2a11c9c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdae4926-4028-4577-bc0d-7ea9d51d39ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b66ef86f-b64e-4e4f-a991-c0c8a1bb54ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d0f51f-87a0-40eb-9ebc-c84800d3df9f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7bbc08-aeef-4911-9bb2-2409a00f5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a073b7-5ef1-4654-acdd-87a33b6a7f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eef5fac-46cb-4e99-9c9e-7d4518a069cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "713d4e0a-50ca-411a-a0fd-9cdb1011e9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b9431e-d57e-4d6e-b6ec-ef87aec4553e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51159d40-09a8-41f4-a2a2-200b0466af33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a954e0-707c-4182-beeb-0cb5108b76a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993435e0-a922-4baa-b5dd-1d8cfb8e6286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb2c835-602c-4039-bc6d-c4f7119122f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebd9ed4-56aa-4b27-99e3-60288426d214",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07273a78-b01e-43c6-a8f2-86ef2f6071d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba5cf97-b6d2-4f08-abbf-4c688fc2e934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2b72e9-cfb0-4c0d-b998-550979fe081d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b576b29d-be63-4158-a3b8-c95fd0155f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32c5c4e-0c82-4d26-9c15-57e6790152fb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3df81d-b685-4383-8f8f-6b1739ff024b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286966fc-fed7-44e9-acd7-7e6254116d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a5b94d-d83f-4123-adb9-4101f857b5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "497df078-053b-4e5f-acbf-2f7a4ae72121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db002245-6a06-4a77-8700-c792b050b185",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bcf4c4-beab-42c0-9183-f8ba14541c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995419e2-2a4a-4779-a5c0-527319afa732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e25c0a-369d-41cc-862d-5ba7202088f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e29eb9-2246-41c0-90cc-294d6895dd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e09f802-3ac5-43dd-abbb-a349397ec398",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef9d17c-6b7d-45f7-b2a9-649a7ae405cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ed2647-23d0-4ae3-b27e-3e59baaeebc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14795607-6f08-43ab-909c-6f403f7565a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "991aa156-7630-4523-9489-acef56acedbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a28437-1505-4143-9527-d5670460778c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819e8f4d-3beb-4412-9b14-7fd6c769fd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dac09c-7cc6-462a-8ba4-894e30a4770b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69261fb-f6e4-42fa-8374-de99a0c5a93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b235647-36ca-4c70-bfa5-de9319a0a39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ce6775-c3f4-455d-9c3f-9a5717716c6d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7570281-9c52-4e3c-91be-bc92025456e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5ef8f9-b251-467a-bd01-169a1446d845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf2f306-7d13-4688-ae61-47fb01b3b09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8893ddae-a2fc-48fa-a376-405fefaf586d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffdcbb5-02d4-4365-a533-c12281fc5ace",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea8912-e84a-4457-9c42-fd2b1beed56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7ae980-304c-41ff-a141-7133c39e03aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3c971a-0bc3-4d29-a945-b7a6877d373b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b834700-e7a3-4702-b177-983e0ccee0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300853a9-6608-4daf-a353-ad4fc7a2ee26",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839a6a79-a3ad-4ca8-8491-ddab897e19df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8fc6ae-3d02-4c5a-8a63-354d1aa155e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1d54b-ab0e-4fce-8a36-b29f93c704f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5655953f-47fe-41cd-a391-8aba4cc9ff21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a20d60-a554-4db1-9d4e-63b6a8ce39fc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8a1890-4789-489b-ac13-ec72b79294af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aa35d5-e056-4bf0-bd8f-81e6ad81c11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04574ce2-298d-4df8-9532-6523c2c82f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51bb2b6c-dcdb-4162-bd1c-dcdfe75ea437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51a9e8e-9954-461b-8780-d7a69a7b50ad",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1634ddd0-35aa-44c4-82ea-d67865122966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc70b6fa-60f7-4366-971e-12943b5ae229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397ea554-2548-4e9b-bd09-64459535d1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c511430-a447-4cfa-bd36-68698c07974e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cba29fe-5c53-4501-8b8a-40b93983c5b3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d4cd8a-a736-45d4-b800-9d6fef42f656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1eb0359-3e9e-4994-9750-a2ebda544808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d0361c-eb3a-438e-a599-8aa62c915b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1e1966-34d9-40a6-9d65-0282ffe1165d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2135b100-1cc6-412c-8a05-99296ec31f1a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fe3d1d-02d4-4f2b-9cf5-294aac4ecbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386d664f-0f7f-4fa4-b1b7-889c6be375d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e52d63-79b9-4f93-8ad6-f7215b143e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afc74d18-c868-4a9f-9ca0-c44c1f2d1232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812977cc-a9c0-4c00-aaf6-1ef64b6a9de8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e80d70-35d3-44f6-844e-8f3f0cf7712f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e29d8ae-fe88-4957-b5ab-0cc81b86825d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f38791f-b9a6-4981-a6df-a8f67d9dd279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae258fb3-bbd1-4ed9-b579-48cb1c7c215e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc4d296-5e4f-494b-9adc-ce2e8c253c7d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd049076-5e6f-4994-9e11-b46c024ff22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c13a77b-7810-4104-aa56-64a097b513ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5985cc49-f0cb-4dca-ba64-274757f8dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73ca3600-7a68-4d5a-85bd-f84381e5ec46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a102724-2563-4fcf-8617-20f9ee54eeef",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677823ba-2b66-4190-8ad1-04ce1d466e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49467709-1465-4d27-87ef-c8b525fde676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9602fda9-e475-47b8-8f48-6cc35d101403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2762e8-b4ef-4913-ab51-6dd0591e08f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a858d0-d44e-4061-b792-b005ec9bd1da",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d44cd3-1f11-4382-b875-cf4883aa6365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e07b691-8ed5-4571-9157-76de521f1250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a80134-beec-4a57-8fa5-63bc98b9ea8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9bb6831-c649-4480-991c-b5c9120f146f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc67eccc-d076-4acb-91e4-9941c31e3253",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e766e0-a1da-4d7c-8ec0-c9cf1c4a0ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4223bba-2a5f-4075-a247-f6330cb6fe51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70baaea9-b416-463d-93b0-9cc83f2896c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e0234f-bf97-4f2d-959a-9cc4c1839790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6ddb68-50cd-4774-9986-47538e5de4fd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783a7f16-3818-4470-a934-0e2ebd8338a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7148bde3-bc51-4796-9327-1d28aabecc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b919f23-b0cd-4229-a6ba-20bff19d75a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54671c90-e52b-4c72-b839-73c3108a93db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7f41b8-5862-4503-8588-63a3bb528091",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b68b84-8d86-4ce6-bf31-cdd6e71964e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a663b5-c432-49a2-ad53-018d338c353a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf165a09-3bd6-4019-808b-edebd0c283de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e214b01b-90ae-4e0e-b424-99237a9b8a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1293254c-b3d1-4533-8b67-df02b644d1e2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded0a2e1-feaf-4843-9861-1e05414e6538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a42214-b8cc-4b12-86f4-70afe12a77ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3730ba-1a5f-4971-9791-f236732618b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "872019bf-10f8-4dbe-9575-ab0e53d0ffe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f786f54c-8d77-4cfb-b9e3-571e2f5f9951",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470fbbad-1d3b-4556-b873-a0b0cdc2992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1e9ef9-1e60-43b7-9057-87b5bfcd1c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d235f728-f2a8-41f6-94f6-29fa38e1192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "073c84f9-68b2-4de3-80e2-5ff785a3972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30edcad1-f836-4924-b612-6a953abbfeb0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6974ec4a-f3c7-4e0a-a5d9-c4448dd8f346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1124563-00d0-4965-9564-774bdf2bc70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a69111-7521-4380-916f-531d8cf64974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "86fb05dd-fbb0-49d4-8b4c-ffbed466efaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e25a1b-94b3-4611-913d-157f86ddb007",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e951d6-aff7-4381-b496-7ab654cc6897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5525e309-4156-41e4-9ce6-efd9b3459f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4f879f-f1d0-4460-9152-48166ba64df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f26918-935b-4482-b21f-aad78658c9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef12ef0d-b994-42a9-8f97-008279502caf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4245dbb-2c49-49d6-982b-0f4c2034996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb32c24d-a0cb-4cc0-9abb-8c26440c2997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81953c18-9c36-4ed0-b3da-eae35bcaa095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "960fea5d-6e30-46d6-86d6-77ba9ad95d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dde6a6-2f57-4c58-85d6-d6e65a020eb3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60436b85-0c2e-4637-801a-b7ffae0e3f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12c703b-50b5-417e-94a9-df2ac8cbbf33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92398632-8849-4eac-b5f6-c474894ec4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbe0b02-9141-43e4-b0f7-3b5fdc3056a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085b747e-60e4-4ee6-bb96-cba32af197ab",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83b748a-e1b4-4f32-afd7-276b0cd9e429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38616abe-6cd9-47d8-bdef-12be70c26e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5b2457-8402-4b22-8a83-b374c58a2b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf4a7d2-049c-4cbc-a66e-e0b6ce36a9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca24612-3480-4bc5-91f2-82cc73536415",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c954e2-db40-41b7-809e-35b0e4a4c227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8aac473-42a5-48ad-8c0a-693124df2fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189cd5f3-b0b1-4ae6-bd80-c3a00d9194cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af836b92-09c4-44d3-9731-361661333e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71355395-7a3d-4eee-92bb-3c5078233280",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4c8d9f-0f9b-4691-8a8f-36a8b7e5390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea9a43b-8fbf-4a61-a4f3-70a4add9cf43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0308e7-bb0e-4e95-a016-e0ab2ca6343a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc73f14e-bef0-4a9a-a980-640c498df2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf66788-cd0e-4d0b-9adf-cfa5ded6ef65",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1affc8-7e43-4cdd-99af-fbcee710e490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c0fb42-6c3f-424a-b59f-fbfc89f129d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52f8bc8-2256-425b-9154-884415651dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28b458d9-0d37-47cb-83e1-a2b1348b205b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198231cd-837e-4187-aad7-45089e3962c2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db9ce5f-7003-4adc-a28a-18ade132e5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9afd6e1f-8ffa-46fd-a26e-3682074256d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21a85b9-3d87-4a0f-907e-ea45649ef34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0e3b51-de6b-47aa-9752-f55469daa74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c8839e-e45d-4a05-ba30-4b7e5aa59a7e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c5860b-c794-48e6-b5cf-a80ec0dc0fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3059f9e-4c44-48f5-b464-942a03be0287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3e2784-1c48-4ae9-8218-22bd0536193e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e11d214-c377-47df-bafc-8e84abc2a39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fef2e0-486b-4c3e-b42e-f4efabe5e8e0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2091ec6-777f-4ce7-93c2-6083acd15766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9b2812-93d8-4218-8036-5c30f9463fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704f8ea0-8c4a-469b-affc-5f7eb7ad42d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "345b2405-dad2-422c-a60a-733d280bc380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dce221f-3e90-4bd4-9981-5c41c9f032a8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ee8fa1-52d7-460a-8ecc-bacd35a02da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbb8d46-fecc-41b5-b616-d96a316cff76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154d39b9-d1ed-46c0-8b26-e3bb72768e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb254dac-f616-4c98-87b3-1a91b142905c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1dbbad-f332-4e6e-8335-230b4191b58c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ecdca1-97a7-41da-a46f-92311d24ae68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a16ee0a-e000-41b3-b41a-b80f6ab77cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73785eb6-4e93-44fb-816a-e94af7aa5e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee9c128-20a6-442a-b57d-004ac5da0c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e12935e-b952-495c-93c3-89764601427d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60958701-b579-4cb3-8d4d-15aa3b648c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c866be4f-3213-4f29-b531-3837985eca3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce60072-8256-4664-806c-0cf18081a27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff4b35d-ff7e-47b2-b14f-c51b58f34f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2165ed85-4131-43e9-927a-a4f07116160f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa97203b-82d0-4323-b4cd-337d22f94c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a5d309-2a33-4273-828e-72cbdcc4e945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c74f856-52a6-40b7-9bd1-c25b58a87f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a59dd9a0-9020-419c-a218-42e7db400b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ab68d5-6297-4990-bf1b-8e881d13b877",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d398619c-8953-4066-b4d5-d6ce38ee1ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40012643-0fad-4697-912e-eb02a75c0162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594bd2d3-73ed-4182-b1b0-dae7520d6575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b52f146f-8ade-4fdf-b4ba-1ba1ae3322eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cecc639-a139-40fa-a1a1-5846324bae80",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8ca873-b46a-4306-8811-467fcf9ed23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45db4a7f-4bce-4ae1-893a-db308a48e977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561ac208-cf80-48bf-9013-b17f1ec5185e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa69034-7859-41e3-9e26-0eb05b285beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4353ae0-08f0-4e45-926f-2a78a9a2583e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57cdec4-15f5-43fc-b100-596e29cf23a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72ffbc0-e607-4630-984d-d4d820df8294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfca08d8-172d-40a0-a24d-4e1b02c7b725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad4fe64-8f7d-4f39-9f79-f45cef1b627b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20049d7-45fe-4b92-8e10-f3a3b6ac63ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea0c89d-a798-4a83-a9b1-e59e8936f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0fcded1-044e-4992-92bc-415ad73c4f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1279eb83-3ee9-4afa-af3b-e729ea4d127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c639ed0-c6e6-4740-b527-403353f355c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc8beab-94df-41a3-88e1-2ccdefca1073",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327cd20d-9b42-40b1-a49e-62abb92cd83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9444bc-8a9d-4f27-893c-df4686b33cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1abcb9d-6582-427e-9bfc-2fc8501720f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "20f0f802-6dd0-4387-aa6a-758773b2fe04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6624809b-4774-49ce-af84-45f2dc24e6af",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55588d4a-441a-41df-84fa-cdd3f4dcabe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14860cf5-1064-4ccb-b3dc-80dccbd72249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c3f79d-dc32-4411-944d-fa91198f273e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1f0f60-2d94-4216-a8db-40c5c31220ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784d4874-9c6e-4384-a019-6f8a58969db5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b51cfe-9aeb-48f5-b442-822fdc71ee59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010a26c4-fc82-40a8-b2e1-3a77ccbba579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0fc9a7-a657-474b-9f5e-fc0ee4818786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "167b2a6b-8983-44ae-84e4-e8659b21fac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566ff161-aaac-4120-80c3-8b8c8d4513d3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e66a547-a5fb-4017-95ae-02e564f93d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa0860b-52f3-42fa-9796-d8edb1f2f271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b165578d-7a43-4467-b3f4-bc992dcd7bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34d07b2-44d8-497f-ab3e-7dabc43448f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de09c2f-7e4a-4d6a-80eb-1fbcb3d554eb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ada600-f8af-476e-b46c-a7fb880d2501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08a9b5f-9cc1-4a85-a4a6-07cd066ccfd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d836762-406d-4d1a-be5b-73d93a4f8378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae76706-ea34-49a7-97fd-92de7b928ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea7177-257d-44a9-9cf4-57c9d2d2ac50",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cffe01-0f28-486d-bd2c-fc71999fc24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90af3a45-1b05-4dbd-9350-b17ce0fcf93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66278091-768c-4974-ae75-7a994ca40d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bacad01-4134-4345-86b4-16f5589da889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb6ccf9-2876-4b40-abee-95b2b5adf96e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73973ff5-2f0d-4b2f-9b33-5857adb8bfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb75740b-971c-4b94-ab55-1cfef50fecc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268b5c4-9414-49bc-b9d0-bf1f55068d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07d855a7-1903-440a-81ab-399013a586f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d0d5da-4ff3-4b49-894c-f2d31306e7f7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da421645-d29a-4f54-8488-627d5ef9e978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a11be4e-4f43-4b3a-9b89-98174d972689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0085cc-584a-44c1-a0c4-c264f658e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e06720b5-b408-48c0-8fcf-d9a9e6e3a593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b48042-ec52-46ed-a486-38d5f51a5e77",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b8ec70-c446-47d3-8d0d-6c133cd393a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e731f377-5bc0-41b6-8681-2f3ead325f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9364e7b7-7828-46ef-8cd9-9746b71de2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ddcf42-5882-409e-9407-28edfcb9174b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72c86d9-b6f5-41c5-ab13-5bb176f7b2ea",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5b0b8c-a34c-4039-bbd0-0eddb2941290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4de3eb2-95a8-41e0-abd2-a86a61d728db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c1b333-2270-44ce-b585-6401430f4a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6ae564-e7fb-45e5-baab-db1cf8be9078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86208a2a-df2d-4c69-808d-005bf1eaa53c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cc4ba1-caa1-42e3-b3c4-e1e3ab495031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74db417-9e7c-435c-815e-c550eb33d1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91019e62-e015-4c40-a6fc-592e5d37e965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12bc7d41-b572-4233-944f-a4e4b7f5e5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e246430-de8b-4d55-8985-0da3971e63b4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dedb70-11f7-4327-a035-18302e54ac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd75d672-e47a-4ca0-aeb3-916b73d45eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f55617-52e6-4264-b9be-0645b354c16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8437a64-4bbf-42b1-ad61-62362a15819d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ea6ac8-10e5-465e-b127-0be17ec2da1d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f766cf8b-4b63-4c30-865b-c71309e984d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cffa56-ed62-4d18-9adb-c3bef4fb60ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a761c12a-77d7-4127-921c-5ea2208eae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ae2303-b95a-466e-8844-fd703809188d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1c5ee7-11e6-496c-ba0a-4a13c77de32b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c96b9f8-29f4-4176-9285-3ee2a87fc6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb90cc5-5d9a-4ece-bb73-b4e74f66fbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a991a4c-a123-40ac-9aa0-1ddc2ea7a6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc12a75-4247-4293-9939-8d6755aa7b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd2947c-6b37-4c4f-a8d1-c24a3c2faa88",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0dd65e-a21f-4463-b03b-28c41a4c8398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90816422-dec8-4501-98c2-c684c51e5c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621edd28-1959-4879-abe8-2a2058685674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b273c7d-04ca-4ee5-b0b1-b8d8f8a43958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5139c9d-8ef8-4f7c-9ee8-378ff27a5b0b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949fc202-54cc-4f9c-8608-773dac2b65f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098db224-4a36-44ad-a459-e2b87544a7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c25058f-aa98-411c-95f0-a2c577c8d9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4864685-d1f2-461e-9494-2d1d79de2656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbffd07-a0f3-4485-b79c-bcbad779b40a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f276cf3-b3df-4ad8-944c-588bfb20fd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ba0555-1ef3-4d34-a07a-56c01b3aa884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a83cba-e05f-478b-a123-ed1d4c3b21eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "099e4603-7dd7-407d-ad6c-1ccec520c0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0403054-959f-4412-aa11-64bbf52b83b9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e840f0c-71f9-4046-9975-b6f1543e0aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0817f5d-7736-4ffa-9d40-309c3aca9527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275f1a22-8552-4810-9573-86c377676cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ccd349-341a-4a78-bc2a-3b536f4d5bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aaee63-f620-4178-929e-959a754a95fe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632a0c91-196d-4fce-8579-ba1d94d00f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86dd751-2457-4e5b-b417-fe69adbf06ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3112dbb5-84e9-4d26-8dca-909ae2996065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d6ec16-77cf-414d-b312-601ae50b54bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f3097b-46c2-41b2-b4bc-6fa5bfc82940",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ec34f6-19e0-4b69-a6f5-4335f952a638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d008c73-9a1d-4310-873a-3e825060bcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a430fc-0e64-46a4-a1b9-d851b3a41cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80a88c6f-a664-40fb-99d7-9951fc6cff1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572699b4-a4d8-4cdd-9529-fd37d81f354b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d5ae7e-129e-4427-b2e5-40d35b526530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c1c06c-ebe8-49b3-950f-108bfc5afe10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fa90d5-4202-45bd-a5a1-530b4f074f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6071e8-07bb-4f31-8be9-5c49d171575d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92b75c0-56b5-470d-83c2-a57eed6614a4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12086b6-3a14-44f0-af6b-d63a627c038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8376e16e-6259-4b01-8473-edd2974cf1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8f0da3-cf10-417a-8e0b-d115efe8de42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0322c7f5-229f-424c-8935-e18788f01768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3872acb5-a42e-4f4c-bfee-d138e1799c47",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ce67c6-411a-4f35-9e20-6e33e505c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b45fba-0229-427f-9925-a91d5887885d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0336c5d2-2f6f-43ea-8da7-080532c6ff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bee1195-7320-4945-a155-d49cb985ec10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dbd32b-71ff-41ae-b972-559ab0388946",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36abb92c-47ed-4500-974f-e603b4fd3cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c413ec4d-432e-4257-8608-68fe2e1d3573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dced89-50ed-4d95-a1a2-0fc3b816aeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa568c09-c473-4926-926a-fe1fbad68781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b3d60b-be14-4195-861a-1d1170a954c5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c892871-23fe-4b1e-83dd-2ad2c73da962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f08e2e4-7fe7-42a7-b367-9ef42ddb60c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14067bfd-93c2-4885-bedb-d18c62e89d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6f5502-12af-4875-b2cd-52408da398a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229420cd-7161-45d2-8e6c-031d01105912",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d32f449-1a5e-4a5a-b69b-5f84da8c99be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215b1067-9ef2-4ce7-8162-05d63d2fc94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af295bbe-a075-4682-9070-52c4c2552b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9626e43-d382-4d3c-bf04-80a3d5875d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8928a5a-f716-4054-b95f-399c7719a965",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf6d868-a941-45a5-b4b5-9778367d2d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b81be5-b2ea-41ea-81bb-07413c2ad89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1e1201-0bd4-4a6e-ab8e-2984286a8e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44556863-aacd-48a5-8c77-aac742a6e3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901eea40-7e71-4123-8c35-b402b41f2cd8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d02df5-30db-4749-8f23-e24817f9f6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2ba777-1434-4021-b2be-24ae182dff1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426f4322-0a5e-4261-ba22-88bf3b7e8fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbd400c-7e08-40a3-b027-fa5022909d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d3e8b1-448e-4051-8fe4-ca4a4469810a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d8a059-3f89-4899-9c98-ca1a0334fb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37aadd0a-c1f8-49c2-9bfd-4bdb9ef1c7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b10799e-e9b9-4812-b25e-49998094f192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8416a5ab-9c49-4bed-8b7d-2b970d009f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6062063d-b477-43cd-b140-d754e05e1db7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627e76a3-dfc4-4610-b384-607d72e2d41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45742d35-0670-4595-b2ad-71a668256a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189c24ed-c04d-428c-9539-7d149df91387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92a1db3f-9f09-4779-bb60-5c4711bf560f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb85c56b-5173-495e-8aaa-a29ced4c491b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251aff6f-340e-43ac-a76d-b2b2ee4daf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c46fa7-1353-4240-b929-569688bff591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0d46e4-30a2-4db9-95e0-2329f420436a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f26a20f-5263-439d-a7ff-01bbd14fff90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cad8f65-f955-4d16-8215-5b5d73ab5342",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b95f11-b952-43db-a863-e75f7734a747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "065e9984-5b90-499b-85a3-ef8892377d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd1eb64-d232-4c52-bfd6-9bcd648f7032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d35e9834-51fc-4110-8697-7f4f152ea510"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15c2d0ed-71c4-4419-8f07-d3dba15b6837",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e643862-9a6f-4b2f-8533-39d7acfe9b3f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b54946-7bb3-4c32-9e4b-a0a4043b0c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "994b500c-6ee1-4ef5-b4b8-d772dc50c48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a7246e-9e34-444f-99d5-f55aec2da45c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2165852-b512-4b3e-b6ee-2efdcbaee644"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "430ae59d-2be0-4740-b24c-5891fe620efb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a47d8279-ec34-47c0-916c-2edc1a905e14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f2a18e5-da47-4503-8d77-89e4cb733d6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ffaf56b-2daa-4ca6-97d4-44e955a7f70e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6a5131f-d030-487c-8804-5deb9deaa0c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61ecdd22-1c39-4930-b1c1-b99c6a501b50"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "706912fc-300b-469e-aa60-9e6b22a4d2cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e76866d4-0218-45b1-bac6-9af50d4ebf27"
                }
              }
            ]
          },
          {
            "id": "63e3b1b7-c5fb-42cb-bbbb-0a3bcdc8a24d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ad67277-2a11-46f0-a661-ac050f8286dc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "76795814-d906-446b-8895-04787dc80423",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbea37b-93d6-4a49-b8eb-596786a0156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8b7a08a8-58d4-4e78-b294-92c1b08c8805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a7cca7-1494-4d7f-b5fe-7598b0f7be74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d247e8e2-3e3d-4baf-a5b8-d2f6e34d28a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8de65cbf-c65b-4c54-9e15-582d5107cd22",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad48ae73-e31a-4b08-9033-5b1e5f1bad62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0711cb90-6a91-4489-99f8-185fa98ad2e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d354781-5ce0-4019-9de2-4ca23ca6cf47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "844ea44b-f4a9-4902-8737-743d86a125d8"
                    }
                  }
                ]
              },
              {
                "id": "e9ef4c15-8d91-4544-b83a-c792ffc30597",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94f7ebfd-5652-4deb-ad24-a474918c0705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bca1c6a2-e383-4d0d-a078-7fc0e89bb6ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1ecba83-accd-41b8-aaf0-40b84d20dc4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "91eb8892-3d57-4df2-8916-1a874dc9668c"
                    }
                  }
                ]
              },
              {
                "id": "f38c855e-3537-4fa8-8c14-5b9b8de9e1f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00ee5f30-e8a8-45dd-a131-edf4a2d1d9a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0225f62e-46cf-4769-90eb-d01d8498a170"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fa5d965-4c5d-44dd-996a-8f955b5ffa78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d16677f-a936-4603-8110-2ddc4818cc6b"
                    }
                  }
                ]
              },
              {
                "id": "17ca68b3-5ca0-4f70-9d20-c61e306188b5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea2ee81e-b611-4aaf-8092-dbe1ecc5bb13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d69ec09c-c994-47e1-a03e-94682cf17e8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c9cf2f-52d5-4fde-afee-8289dd50a6e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "03112a39-f612-4dcb-8526-d2280c7e2acb"
                    }
                  }
                ]
              },
              {
                "id": "88b8fdbf-8cdd-4c29-b843-a4e106efc414",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5122df57-c137-48ec-993d-def7d3979a89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aadcad06-7978-4bdb-829e-2488b200281b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0532d74b-8269-4c3f-a4bd-6a4442229449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "378864e4-ba9e-4ae9-8826-4051a4257ad4"
                    }
                  }
                ]
              },
              {
                "id": "eca26635-74e9-4bd3-a043-8c8f790a30a0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6549e186-65c0-4eef-9095-233aa4b2cda5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eadfc075-732a-4b15-a65c-aa95b1a09345"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b413c45f-7a25-4665-a90d-025d0ed459ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3fa9e1c5-0004-4a67-899a-034f51953d0d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "724de013-8aef-4fef-8b15-c1b4913cb393",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4fcfecc-a5ad-4566-9496-682e62d81918"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "17f72039-f8b3-420e-95e4-edc4918fd34b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05b0ed2a-ac99-4b4c-9990-a21a7448270a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "465e4878-690e-4c20-93be-503bceb9593a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fd6e0c16-3ff5-4c9f-873d-61f59694896d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36e2dc21-b926-4049-86a8-45e379dabce1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf72ffca-598e-4ab2-9eaa-9bc7e8e23994"
            }
          }
        ]
      },
      {
        "id": "23148694-57ed-4234-a749-bf27f7e39d37",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3930f22d-08ca-4682-a252-8cd2f7de0387",
            "name": "Negative Testing",
            "item": [
              {
                "id": "921ca77c-f723-4987-95c3-d1ac4921449f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74b77ab8-fd26-4b0d-8154-b924185f7186",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07e62f8-fe9b-468a-bde1-af9fb2f2476d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7462177-77b7-43c8-bbfc-a07166d88a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b785c768-9317-4ce4-8c75-31778dfca9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1bf94a-b0fb-409c-a523-fbb4e0ff406e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7396308-12ae-4a9e-a65b-141b67ebc93f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a384d0d2-3103-4108-8eb4-998092a0bcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674856d4-03b3-4dce-ab3c-2876421b214b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ace762-2259-45b8-a5c2-13cee4e299f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1589156-0eec-422d-9e3d-43d3234c2770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41cabe5-d4af-44cc-9f44-aedb59804ef1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b64218-2f2a-48bc-b840-174850c8a346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7925cc-a73d-4574-ade1-505c5f82b6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb26eb76-ba2a-462d-8a57-0c96f4225955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fe13b1-45fd-49e1-9ca0-344dc825a393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc320b2-c1cf-48c9-97b3-a51304916c33",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b3fa25-a801-421c-896b-a57e8b98ddd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95862c0-b889-4927-8aff-da1242ed5556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e8b3b6-5110-4734-9121-28467cd19a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a24f13-dbb4-4195-bcef-589e5a8d560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b76569c-25e3-46b5-b13b-c495b2e49659",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a1c475-a292-4ac8-80b3-2cf23cf6c9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a9227d-6f39-4371-8106-860fe6a5fe0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f300de-9e2d-4e11-86ae-6a9109c79849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "792b9011-dfcf-4bea-8bd0-909f21c2d0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ea2393-35fb-4d9d-8721-2e024b3b5d77",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833ebeaa-f90d-4dd6-870b-cd136b903f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78aae9de-01dc-47e3-a9ca-72709b6ba539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81207296-1083-4813-96c7-7ea9079a3dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a16e3056-fd5c-453f-a5e5-eb8e737b57d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ef1409-5c33-46e6-9785-edb5583fc061",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16f6d4f-79ef-46fb-9a03-7afb292cf8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c928305b-8c5f-460b-9b04-758bc60060d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29d2613-9b78-4564-9d6b-7739606d2cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "356e425b-3580-4f3d-9eb9-61c3af7fcfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11695e43-94a3-4523-8170-e60ff117e64e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22571e6d-fd05-48f4-8c47-a105a29968f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361649a7-1811-4650-bb82-a4da900601f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c21501-c697-4935-a2c3-a6114d9a1bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e165c6c6-20ed-4e0c-8135-e6fa2426d10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d58bfe4-c696-44bc-a9ae-1d963713997e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f4dee0-4874-4d51-bc44-7fd35a63785a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74dd255d-2860-454a-80cc-cb2fe39d29f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a297b1-1aa2-48f0-8557-3ef6854753c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41636592-cb99-4207-82cd-fba5ee9bf24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deafbcec-6508-488d-a763-388a8d8492ef",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48afcb1-0185-4a33-b2a1-ce9e44faaf90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d480db9-ebbb-4854-825c-1b8ece3a56e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce713cd-48e9-42bf-8e7a-c3254f99f61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a49aac67-5e40-4af1-977d-7c2ff47b41e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bfaeb2-8f28-434f-9001-c7931396f585",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c6be86-d561-4e32-a195-3483fcaf33c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac66ca13-d632-4fb1-9c55-66204662b35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d715a410-d210-411e-b93a-0243cce59b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfd474e-8350-4bb6-8ca5-ddaf3ba63a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de88094-e050-4891-b1ad-c9ff199a1ab7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac04ea24-5ea8-48ee-8230-f6e33f999ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7640e012-1dd9-476d-aa1a-cf4c86f0a276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef3db1d-6ed4-4402-9b93-c9f6efa2c986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63c66922-21b9-402a-865c-0c6678501bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36ddcea-8825-4a7d-a283-83379ea95192",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0716a0-9c20-441a-8225-c15315322e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fe3707-34d2-4e42-9455-81fc09ec32ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d023c58f-cd9b-42b0-bd40-7e6dceb9af20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "031807ea-de0f-45ec-89f0-136d58ee76ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f7984c-a6df-4db8-832e-b946cb4db03f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d457f2-87ed-4d12-b4cd-4a42d9107284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63247d8d-fc1b-4b35-bb15-2ee500b55008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4e2b73-8fa4-4c25-8dd0-28724c357e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "51da90fd-e288-4187-b280-1d0acb1c6041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b615c71c-346b-419e-bc1e-5cba577e8b68",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbb19be-a48f-4a88-a433-ab0e6e7442ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58765f0f-dcba-4ab7-bd16-3a7acf381f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900bf61e-65db-4f2d-8847-8f8914e6173b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c80687ca-623f-4c4b-825a-e635601fa74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab521869-969c-4c39-a48a-86e7d7fce83c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee827d5-a467-4de6-a2b1-07efbfa4f271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef652f5c-86e8-47be-acb0-a6dfecb3e6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b92d532-e8fa-4084-813b-c7725934f8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d23412-c361-4983-b5ad-61aa2446cba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad34188-50fc-40d2-ba38-7212173af14c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a1b401-3fef-4a81-b2a8-88c0d962fda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8ba207-b0c9-4f14-9a4d-ebdb43886e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12e8586-8d48-4cde-91cd-746ae34f0809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "74915f5e-f22e-47da-a009-51e5025d6617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdf79ca-e4e3-4ee6-9ca6-8557297d041f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3947b35b-ed8b-4223-82ab-ec19645e00e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89b359d-55ee-46ee-aee7-9553f853ef5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc51ba97-f6d9-4463-8495-12444b7ea8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "603eefaa-ddff-4bc7-b8bc-27af30661510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c938b909-2b3d-481d-b458-b03db413984b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b919324-82c6-4a57-87a7-d162be62f0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1021b12-2f1e-4b01-be36-747981528752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22db7622-c140-4b8f-9fa1-ef28c45d7177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eee1a9b2-81a7-4722-bce7-954729ea1468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c52714-5a53-48c4-9d34-3003a8cfbb64",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebf28b6-d45b-43b3-8a46-4081f76746c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ba9d29-9056-40d5-88bc-99a10de0e822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de1bcfe-757b-4ae7-b917-e504c8d9893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "371303fb-f33a-454b-9dda-11ea11591d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a09257a-c47a-4188-83a4-149ef88a88a0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f59d7f-2b32-4f97-9ded-71613516449b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae839ac5-fb4d-4083-9bf0-7a809d24ba11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a454662b-a325-45f8-b86c-e84b5387e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa27174-74c9-4e63-9397-9a8fc65b0a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a713674-8e7c-4abe-9829-058a8f075647",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c0cd1b-c062-4341-89b2-ba1e536bb878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b065ef61-23e5-4a3a-84ea-ae8a4c1f673f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff59d29-014c-46c0-9fb8-60cbdccfc3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1aa2a3d-64fa-43f9-9409-c30055c2b672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e3b061-5744-4b3e-baee-5669aadbf328",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4f1d0a-0b3c-41c0-9344-7e8f914bd3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c700410-0b0d-4dce-8ac9-4ffb88e8f757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09f9783-24ba-417f-ba3f-ef77d3b814c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12433da7-a4ae-4ee9-9d2a-4c2862c4adda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19612921-d02c-4676-ba7a-3ac948be5ea0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f29a2e-a9bd-4b6f-b54e-cd320d7919b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a565cda4-ef22-4d04-9e5f-f2c6678d9a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b480daa5-4d1c-46b7-aaab-10879039242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c15a605-3fd9-43f2-acca-3198d6711a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b300225a-7daa-484c-8759-de085940b2aa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af676a0b-5a10-4d7c-95ce-79df5093287d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41eeaf6-c50e-428d-9850-896f8081a13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453edc41-14f6-4e32-b555-bd0694d27098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d775d41-d685-45c3-9330-b4448911c267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431d9163-9cef-46e3-afce-cbc97d17b4ed",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a5aa8a-3f12-427c-9616-fa6791675ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b860fc-ecba-4266-bdc3-d67fdf007bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdc7595-5cc6-4fa0-aee8-b4a329190a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a15e726-f048-4293-88b2-76f413f07f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdacf259-b20c-4214-bc08-b6dc6c26be98",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75c8981-59b3-46aa-8f55-cb579fd044fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6778db91-1d17-4833-9bcf-873d782ce019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc1ebd0-25ef-4f67-8765-8b473daae5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ebfa99-ac5c-46d6-90e4-8d257318d78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bc93eb-3e18-4fc0-9166-effcc6122b76",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e143711-c4ec-40e9-9652-fdb3061f59a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd99dde-0841-42d8-bddd-76085d700a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c0502b-5eb5-4a65-b0c4-c12edca21905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a559cd18-1771-40e2-8884-4dadeecf2dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa04055d-22f4-40cb-8b8e-e335af95a3dd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087ffbdd-e105-4ad0-847f-e32f4afdbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108115ce-5a1e-4987-83ea-2045ea616609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6665c7-8498-4761-b84d-6a48a0880ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef680f45-4625-4c7e-ac30-4e84699b9eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2e07ca-6231-42a4-adb1-e212e4eee081",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d05b3d-b430-4d47-acd0-2820c6ca8b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f402d53-e06f-4907-8262-c49a70679e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45525a80-08ef-47d2-9df1-3c812f2f1d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8956d9b-4a5e-4e00-ae78-4737dc44f9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc39534-ee71-478b-a27a-2fd2d90bf9ab",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4086b6-3761-43b5-a029-df8c0111ddb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e9a201-03fb-4d27-8728-e43e8cd63bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6702702-8a08-47b6-814b-aebe139e0f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4fb4c2-ee23-49de-abcb-89470daa4ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d3dc3-84e1-42f8-b285-e0c7ece3bd10",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c00311b-f34b-4ead-8dae-09c6a39b0fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9fe64c-3b80-4c0f-926b-ac7e7c63aee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5929352-72ce-4f8d-afee-88d3f01f89a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac910b3-99e7-4219-a236-f9a838206b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a8ed45-4bdb-4dee-a03d-a48c64d4cb33",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1d7da1-ebaf-4ccf-b393-4a73db33a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c665b78-6566-48c6-bb15-38d75f49340c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70979463-135e-4262-a6e3-69b2dae02a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e877923a-8068-4be2-9c6b-398469ac5eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda1d419-70bc-4016-9220-c14892efe5af",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0278b80f-5f43-4247-b43b-5d2c11eb7cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb551c7-4f48-4827-9961-2cb662b360ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4d30b1-cb80-4294-8110-37a5520ac7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cebdc3d-7c1a-40a3-af6f-48a75d85c54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f060249b-8438-4f0a-bd50-9b39d7f82a89",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16f9720-3260-4e37-960a-f5d13bfffff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea237a5a-b402-438b-bd10-20895d92471e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff3ea85-0ebf-4ffd-a734-9c82083440ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b69dd6-40e7-445e-880f-8501c0f18e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b34cdd1-a72c-4ec0-91e5-781e59389046",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9b042-454c-4dac-b83e-2c9b034985bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b11eb52-426c-4d93-8433-126dd66afc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc57053-48e5-4bad-afcb-3a9b6e4a00a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "441402d2-ef7a-475a-ad32-ad7e7d7315b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101d9d1a-6466-4276-b8a0-9920233a37e0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4cdfa8-dd8f-4f96-9b3e-e27cd7a0a347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d61ceb0-0f2e-4b87-a2a9-592059dbeebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71089bb-9345-4038-9472-ba7e7d21b89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b95d0c7-ae49-47ca-b523-82fc41a845c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9261657-aa59-4490-9916-556762bd2e17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3d8eb04-220d-495a-b05b-3a9c36f18cfe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3b46c1-37a0-4c24-a593-56710a5d96ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "196a942a-de65-4f20-97e3-e69a4eb94da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169851dc-8038-4d0a-8375-34204e7504a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afeae85e-5f75-492c-8ba0-5280d03f6e35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "763db818-c26f-4bcc-90f6-c0151f5d69f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9d649e8-c412-47f8-9e5b-84016a258089"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dff26c8-10d3-4927-9c90-c6aab29e5e55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df919d52-9784-422e-bca2-7362821e9b2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27c0cd4c-0d53-4c3f-b056-b81814ea2de6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74b230ec-ef9f-4f3d-8b81-c884b4d3872a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b072bbea-2892-4db9-b9ba-422e8cc74022",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "622617c5-50dd-4777-98ab-5025ffaa7859"
            }
          }
        ]
      },
      {
        "id": "f6533ffc-30c7-48b5-87d3-adf28de111fc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b35a9282-2546-4225-9c05-8c7affe3fcf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "280db126-8cbc-4bc7-8187-917c2feb9755",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "22870a81-d02e-479e-a175-03de759c6647",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3a52dc-1107-455c-96b5-1841479cfa5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7ec6d0-3fea-4c6a-9a29-98dff7658713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e530aa-7545-43b0-8ab9-384d4c87d775",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8ea509-ed4c-4d89-8c07-9a49c61056db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5694f1e-de86-48b6-9dd4-8f4e1a10f8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f44470-d7fb-47e4-a038-241b66b03273",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62695c26-1f65-4500-8ec9-5b1e9147f588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767cc46d-e228-418a-a0b6-79bcc669bf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738ea76c-b514-4ebc-abf3-ecef2d9ac01b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c283f6b7-ec40-4f7c-96b4-4a6a792474c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec58c0f2-5aaf-42a1-817c-1f716e9d4008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35db45cc-b0f0-4b29-99fc-b781d82a6147",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93a4092-d159-4a89-8359-b0fd09697da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8b1706-5997-4007-ad1c-16deac22629c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e234ae-08ed-4eb9-8d2f-40c3c8a9954d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b50b56-7357-4a94-9183-1a6a412cb438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c53831-2c33-46f0-91cd-37e289cc33d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c184ebe5-7d20-4c3c-ba8c-9fbbc511764d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bb819c-a6de-4a47-83fd-2252d15666cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184bd3dc-a3f3-4ed2-9377-6c502fad66e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e0820f-1fd8-43af-bec4-c6d9bd52ce87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e717c6-dcdd-4af9-9f7e-8cb20ed39ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b25c83-2e50-43b6-a919-dd985ceabd0e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3956ae01-390d-4afe-9ddb-e25177322174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd41bc47-9f1d-49e2-953c-9bc271c59dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8233144-9884-4ff4-9708-15d937ba48d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c495601-9df5-4a02-94be-1235ba99975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315f92b3-c13e-4554-8191-1d68319c55e8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0029942-b12c-4e0a-8a01-e949938ece93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1585879b-7e91-45eb-8dcb-bbdd7e74ce64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdb07f5-5bbe-4630-9e92-88d6e9417044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ffe621-8fad-40cc-86e5-e909838ad46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e02db9-0ebb-4923-a60f-8484d992a17e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc6022b-c701-4f07-9499-743c21fcac69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ee5cf62-0dd0-475a-b781-f8a7ca12222e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2cf188-b591-4736-8d4e-5d618f625132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6be1de-6246-4ad5-a565-6bf17ca371a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ff0139-c918-4837-ab0f-c769d8dc8f4a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cda98e-7376-4ad4-9b42-fa16771e54e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69942ce2-e26f-45ef-a724-4641bd2a33d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f589899a-d9bd-4ab6-ac80-4ae0d9b3c7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca1654d-09f3-4d71-ab09-3d7eecd24dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1104368-e5c9-432e-bc9c-9332b46088a1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1383ff8-60b5-4128-a63f-f9555b5c308e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0f989b-9163-4abc-9d48-af67a17df49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9194dfcb-6989-4e01-9539-a8ee84bbfc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dcdfdd-6e1c-411d-9ebf-41dd5a56058c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84a66ca-c01e-46e3-a82b-aa77082ae164",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be84c7b9-0745-4fae-9b61-213e13fd1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e1434c2-6a9a-4090-9288-f84813884e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd864c4-3edf-48c8-95bd-1ea138c79166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec041284-5084-409a-a609-6a0dd25489f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6d7fd0-8d3d-4fe4-aec5-aa24fafa31b5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a10ef57-1564-4543-89f6-2b9559dae96f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a26308b-9cbd-4230-9bf3-601502773566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c20e3d6-1cea-48ad-840e-d71871848bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16959c0e-60fd-46b0-82ed-40849bb53ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0cd332-25d7-49c2-85bb-230fb889a474",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7065aa3f-8428-4339-a91b-10fb4ec2d2aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9192dc97-0042-49b4-90c5-97048739fcba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96df2433-0d8e-4036-acc5-81bbc59fe119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1087f8a-4786-4172-bba4-a161597d8756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2d55a3-7f2f-478b-b333-9d7d973de129",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ddd8c1-ff5a-4fd9-9d0b-98dddd26ae90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d29cef29-ba08-4674-ae5e-4e328deb6bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a05f0db-65a4-49a5-8c46-dad218e5b4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b47aa0-4ce0-4cba-9a9e-b1e5621c43f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc47d7d-cbfd-4d60-ac27-fad7a40d8456",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5963c96b-cff6-4bfb-bcf9-e0c7d3459080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d70d86-269e-4960-bebf-f3f490bded80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffa18e1-bd69-41bf-9687-2623b7b66772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2ea402-2ece-4960-8bce-acca75697952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fccb119-26a2-420c-8716-d39311822c3c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b5319-d954-470c-9237-5110e206dbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b2145e5-0eec-4363-9832-fe94ecaa9781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd588ead-a007-4385-8b3c-3665294d134a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc87bcc-ef7c-495e-932d-d5b1df1823dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc30263d-8e33-4f9f-9235-c057d1f73b61",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa501d93-fbc7-4234-8a42-0f434b9b922e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1760d9f3-5394-4854-ad9b-fc8511ffb82e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34abfc56-63c8-4aca-9c14-404b1b0dc1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ef824b-57e3-47ce-af4b-27a19ead80b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fa8c02-fe53-4a67-952d-5fd2cf587dac",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119a266f-9f34-45bb-8464-68b15d03f000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768c55d1-624b-4666-bdf3-c018d0d0df6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54e501e-cc67-40c8-9a9b-0f792284001b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1459d53-9124-49d8-b889-8f6de0d7a0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc2de6b-212c-4e93-99e5-b13fc9ae5dde",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafc2c81-3d93-4536-b7d0-e7b5fe7b60d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03b0db4-6161-408c-87f2-01bfa3d0c9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85baf34b-861b-4446-98da-dd02d843f7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f4fe62-bc89-452b-9018-c7a6d92c80f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c524a8c1-9fad-44b2-9ace-e84babda6c95",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f81803d-b163-4d62-b9b7-1b4ab3ed72b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5897e0a-22c0-4b44-82a2-5872f62f13ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b970d9b5-d76f-4c4b-8c2b-fc4e87cfa828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dddec5d6-3402-4440-ad4d-e6a835078217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7067858-341e-4024-b73b-991a38e484e9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161167f7-2f94-44f3-ae9e-6629c0ac1729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b272f73-6583-4779-96e4-8f0fe3a62b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21ad9d9-23f9-47b9-9175-d381a652fe94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02abb53-7722-4d7e-939b-bd918dbf2763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881b5da4-fdb9-4f27-8dab-a4c5b639a292",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40477bd0-13d7-4641-985a-7095b9695e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53750546-cce1-4bad-ad59-2fc2dea99b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86ecf9-3920-4fff-8341-36751bd5ab06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b2e64d-ec28-48df-9822-f4d5f966c0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88962796-aceb-481d-862f-689835283e68",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733da2be-8a90-4563-b772-b4bb5e0f863b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f8c847-89db-4370-a33e-0ecbf76e3ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a435e9-5a2e-4c22-8563-4ef336051ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589fc989-8808-45b2-8425-aeab8e65fdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfad486d-a27e-4d80-9a87-fb63824b4a24",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9207c440-7055-42b6-8688-566b3f104026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc008e8-0f04-4b94-8913-2af26d007dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dab142c-e9e4-4512-a6da-525fba8e269d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd23034-15fb-40ec-a671-4c7e214bbc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cee44a4-f833-44e9-a673-053836766f38",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cde7d6-c1d8-4936-9693-7d1a5d54ec36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dae34f0-e7b9-4488-b39b-59d16f019268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22e0841-71bf-4fa9-938f-8771cc385ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bca8a0-7ca5-4d05-972c-7b33f2044bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97700248-ae0d-458d-84f6-d941071f5144",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff254e75-4909-4499-bbe1-ed6fafccbf3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f338081-d940-4a2f-badc-e535d1c090a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fd8cb9-d5df-41d2-af02-f18b687453a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b88d99-52e7-416f-b252-4153c6567188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7d786f-fef1-4364-a1d2-437666beffd8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a7521d-7b25-4247-bbfc-de72b7b2783e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "536dc637-caa7-4f2d-bd86-afaebd4d56db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527667ae-96c4-4432-b701-ad16d22f9d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfa8611-2b2b-4baa-aead-6188d837810c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fd44a0-57d7-43c5-8812-1683ba565874",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e890bd-c1ea-4b20-81f7-e331ec8d5ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b4dedd3-2038-489c-a4b2-ef4dd2bf9fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d178e3-9cde-4c02-a983-d75331083beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1829b6-6995-4339-9bc4-ace61d8abf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf2d7c7-7d8a-4af3-9086-967a72fd7094",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7845344d-9d60-4db9-adc0-566ca860a306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c00b422f-b766-4b3d-ac64-4289b5c1439c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60eba8f5-d54a-445e-931a-59c6a293b52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ceadf6-ea03-4869-b778-53e1086e747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d8e0ea-ac6d-477d-a3a5-9fdfb4a60e20",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6a5f35-603e-4df2-80a7-9d4757a395e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffed7e58-0c6d-48ce-a5d1-86faa17b02b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa651125-b714-4259-b9a7-06e28fd8a30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b3daf5-78c4-456c-866b-3f6f86bd768d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db9c685-34af-46de-a377-f4ea0313efe3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb5d6b1-d398-4d15-a302-5c60261ab4a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc76e2df-78a0-42fb-97af-9f142142ba91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eece4770-3a85-437c-a597-55fa0328bd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6f21e9-4c73-4489-86ad-7f855daf0965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738730d2-7aa3-4761-a2a3-b472aa9380e0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589054bd-1954-4bc7-b892-15c4644d4114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d604c610-7419-41e3-a4b4-313fa641c7e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea48ddf-86ba-47cb-a3c8-d6d1481da941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40fc03af-7ad6-49d9-8a5b-0116e31ac5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190750db-fdcf-4f0b-9a55-c008f14f85a7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d49188-ca81-48ae-86c2-858c6762a091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913e7e04-2e06-4f9e-a2ec-9a909d3468e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b675d7f-0283-45c3-9c38-5b137c1a1186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6818943-e108-4eb4-89a6-a91b9227c37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1037885b-0aae-4d60-8c92-c8ceaccf9836",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e27858c-79d7-4a8d-83b7-d1d1a9afb294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f72198b-1635-47c7-9c23-ada203a3031f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94d6cfe-01bc-4f1a-a44e-eacea712c5d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c5cca2-0890-4c54-bddf-134610de14dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db13a11-3e74-4470-945f-2a72d5425854",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b20944-0dca-4873-9853-3517a02def52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb80e8a1-cc6f-4c72-bc3c-e2496cedb897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e19508e-7e7f-4b24-b6ae-4e3b9feb410c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "353fca63-c4bd-4c1d-a4dc-3ddaa1ab859b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3130c1e4-4ab6-48f9-9875-63969cedff6f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8730297a-2199-46a6-8fdc-717c740b9b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cef7e3e-3436-497e-8207-5176bed793bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03595d60-7293-431f-877f-f88ae25f01b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e037db84-9090-45cd-b564-ace5c07a21b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81179a2-faf4-4c17-a797-d0ccc29db340",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad87b07-0e78-4aa2-b6ce-ae7d8e0b5cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d61205-008c-4ba5-b78d-201cb54f6094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6dbe1b-2230-4cf6-b96c-5d01ce1bf2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e6e34f-e702-4ac7-94ee-7160dae0bce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9253bb-db88-4bba-a498-1fb3bbb95311",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53313f38-e8e5-4890-ab89-da749e8b4fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90028250-acc8-46ad-98ab-b9af8631e5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e37a65-4ccc-49b6-8cf3-ebb37c5742d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a44b887-7506-4912-9231-ba590913e113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5005ee8e-cc1b-429b-b1f7-05edea3f7064",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c86ad0-a960-4662-b9f5-d803bb817628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4170ee-85f0-48cc-a84b-2779bca16e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0fb46b-6481-490c-a2a5-373064221e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504ac083-2db0-4f87-a756-f959fb3738d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd22d01-3d7d-494d-a8d7-55a74f57bb4c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07a10ab-8313-4d60-b7d1-e4e33a9d3dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f372c68-45cb-492e-bb50-dc8f528c73c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edc06be-a150-4352-8785-3a392259d01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c0ef2b-b95e-4978-9f51-80fbddfa09c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1c3d0b-91b1-4756-982a-d7d5009f01cb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed69a3e-1c1c-435b-b857-e82aea3d14c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7080ad6f-2652-46d8-ab3d-453611c3135f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e7894d-fbd2-4445-9235-47ae11041716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078b7887-e222-44e9-af65-d31c70abd599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9be29e5-5ef2-4ac7-bd18-97de21dc415b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b45b51a-923b-4b9f-9481-753703f90483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e50a68d-4269-4593-bde7-01204406d7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d07e680-8905-4931-a157-da0b8c9421cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7607e5-c7ff-457d-b494-9461ad93fc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed4fd08-b2a5-4a44-bb57-b9c6e4f79373",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c8fd88-5cb2-46cd-a92c-4a99f3922584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620370d5-c5d8-48a0-bb13-8872aa487d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf2240e-503c-4fb3-b2b2-760c512ec5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad63066-3e77-4446-b560-ac5b63d26db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c79578-adf9-460e-964b-1921e5dcf341",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d90a4f-4726-4ae9-8da9-b78e627c02e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfad22c-a216-43b8-a667-ec784c11f824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b922b73d-8bf1-4816-b5cc-372442fe76c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bb9d4a-c15d-407a-b148-c246e862821d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cda1c2-f6fa-4d60-bab8-1e7eeb6ecd5e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d2e9ec-bdb1-43e0-98fa-fb45beb16129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb17fea-3ecc-485f-a6c7-53540afff8b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb5aee2-861d-4aad-83bd-d339d6aa6b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b8a561-934b-4230-a4df-fc010cceaea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6d78e2-cba7-49c3-b777-914a2efcb546",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deda858-3cfb-40d9-9df7-9831e5b79685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54900230-3b1c-47d8-9556-67e3c17486f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f76df9-d76e-464f-9e51-9bf4f7b92395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333384b1-38ab-4533-8050-d1de9163eead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba8bf07-22b2-48f6-a636-577a000ba4aa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba6326d-8456-4866-97b7-4a7289befc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ab8be0-e6e3-43e9-8907-85817efcacb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcdbeee-9faa-4b12-be68-628f7dad00c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289ffa04-50ae-41af-896e-2abf1ee93b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935a544a-7179-4982-9f84-238c2b3fecd7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d599d857-d2f9-4ee6-b084-addd63b82bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1af302d-abf6-4ee3-85f2-7449b0fde486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240b289a-699d-4cd8-ae11-b08d58036fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11872e2e-addb-4607-a27e-4fd353000a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4882ddd2-74ea-4d7b-935f-07ac15fc99e3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac9ea4a-50b2-43fe-90c7-9335b52328d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8409f3-5f84-41d6-b86f-fd78bada1324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcced9b0-f1a6-4812-8479-c2fe29131935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eda475f-756e-4a09-96fc-3e740d37e5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9461e6f-129f-4ce4-89ad-fafae34c9571",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff2e22d-c5b0-4a0d-8f34-c9c87a4d802b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bfec174-eda3-47a7-94ff-b562cc7e60bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d40321-d536-4453-a139-f8673b3b2240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187fb505-da73-4790-a75f-d69ff1adabc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaca8ef-dcc3-4d54-8742-b57d6bdd9da9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e4e8f-ae3f-4ca7-895b-61c97129edb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316e4246-e648-46fe-9d27-87c5fb467eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8577e26-fc59-4232-98bd-a982678c7716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c95c2d-e7d6-43c9-ae2d-d1dc685bf0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abaaff1-c09a-46e2-bd8a-49553e6ef4f8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21813379-f086-41a7-99f7-4a40c35c2704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad88c6f6-8fd8-4f2b-afab-b90601f63f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee987a5-cd0a-4c35-828a-1f89a87cd3e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1546aa47-8304-4f56-bb55-2d2c200c4012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806dc5a3-8718-4067-a241-4a85ec34f3df",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ca8599-57c4-49a6-bfb9-f227eeda6948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5dc8234-c36c-41ce-8705-e98b045206ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6db185-81be-4216-a2ca-5777f3a22ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5938e2-7c71-44c7-8b55-fedef4a333c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96b00ea-1cdf-438e-9dfc-76bf4d8ff203",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f41f69-f55a-4ba5-872a-a19b714711a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9493c4-e4db-48ab-87b6-48b0959418d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13342e2-0a6f-4cff-8569-74600774b4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832b84e5-1a7f-4965-b47b-735091320660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c535f9e1-9756-4b40-ae29-ae7620a569d3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d4ef7d-3815-414f-bea3-d4c72e409caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc76fb39-8873-46e7-8f0a-d5b8a6ae4573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8823a44b-9f82-4ead-b217-a201eff71a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c4c1c8-0242-49f2-8623-ffcdb1e21959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311e65cd-4a5a-4a1a-be9e-ad23ed0876d3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cebfaa-18c2-4936-b405-025468b83adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b88cb21-c6a0-472f-a1d0-3f7ed2216f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45366a4c-90b3-43c8-a150-0e9e33db9499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1308d0d8-b221-4a01-a3ed-2828cf084b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8303d5e0-d8c7-455a-9d3c-301b227a7fc5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63d3f4e-5a72-4ca2-96ab-f6cadd76cf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e828fa-f860-4f23-898d-6fd966213bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fbe27e-f1fa-424d-b225-0bbd7fbefece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2045a84e-830f-417d-8bb1-0e681a20be71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1879a18-49c2-4a2c-ba66-50f1b8302e32",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f8dafc-bda9-4e49-94f5-44fa07089ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768d017e-b492-4a4b-b088-c17c4e75c114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a373a1f-4b95-4185-88f5-4c03942b4715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd614b8-1031-449b-a73c-7ca0124c89a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fb443b-9cb7-41f2-90ca-69a9b7e961f0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dee0660-9bce-4c32-9274-3ccb8ba603dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a17769-7ba9-4b7b-b8cc-801ce4324dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3b8db6-e7ea-42cb-83be-5a0a727db70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b154cf-5cee-4d1c-8ddf-8f7570b02bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2088248d-8339-4bbe-a29c-cd52525c8eb9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d733a4-7cd7-40dc-a00e-e05260295b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30bdf1c-ad79-400e-b909-6136ed9fa83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88723251-e1e5-4ccf-b294-93a208bea346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d988561-d629-4b64-8649-99bfe44bcc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c7d9bb-7649-4e1e-a349-aec8a226d4a2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b450447-4ec3-4efe-a226-8e696d94af74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fe7fad-6fd2-4119-940d-b3a1f072915f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65827f14-d744-4ae0-9391-576c1773c48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a86c21-d34c-4157-b3c3-7fd50967d5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f7f8ba-b6a4-4ffa-95ae-157aaa4bdf1c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a4da23-8213-4d32-aae1-ebeb99c36821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9990db0e-a4e2-470d-b2ec-092e3a777e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e70e1e-e1f5-4ccd-83da-5c6a16f89830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a3f977-c5dd-4401-ad4f-b4b8fdbe0be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7294ddff-c123-4742-9266-3b5e28fcfab8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf77fcb-7c2b-4de5-8da4-88df9c67c9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427e30ab-d925-46bd-a1de-6e02636c27b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32e7b0d-100c-494c-a466-e22aaa47aae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3eea56d-5e07-4af4-b848-479d0b4f0cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0196fb-58e7-4dd5-80a2-5327cd34d20a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1e7e7b-a5f2-411b-8ec0-fc56cf2bdb56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a4c332-ff41-4836-975d-4705d52897b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ceb5b7-f003-49ef-905e-de7c7bf52bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b2dd31-db10-4237-8aa8-123ec263d6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b7395e-e213-4875-9e00-4b665ca5f6d4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49201722-398a-4120-b8a4-d20af06d1ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208f9c30-7f85-4935-84c6-231d36ddb6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8d000d-8369-4b86-8671-b9d9a06fc9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9db20e-89c7-4314-9a07-d29788f4a77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3994a92-0a63-427c-9787-c3e368932de6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53355b59-0163-4269-bcb6-e3d12826dc38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144d2aec-173b-4609-a96b-f24baf632809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b099e940-fac0-4f5b-8848-c5d7752220f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74a1e60-0dc5-43a9-9ac1-8210940e07e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477303b9-3dc6-4505-be99-55ed1ddca31d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3ef5f9-0738-4ea2-a832-a61679b42214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4491d7-30c6-4563-81a1-5fa5eca60ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24507e9f-2c7d-46b9-8622-682037e91da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a798b076-e474-44f5-a766-04fbb84d9ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a1e533-ff13-48be-b087-7e17cf36c588",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf823eb-979a-4310-ba63-b441f503a3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad98079-06c8-436c-b636-8f546def0564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33aee612-5ea5-4960-afac-b3016d18d220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d1fdf7b-f44e-440b-801c-1f00dfb089cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eef91c0-276b-420c-8f60-0ea25da69a52",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89a01a6-ba95-489c-91ec-c86e552a5740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b02efe72-2468-46c4-895c-59f39ed9654d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77598165-f8a3-4f1b-804b-47dab890e6da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50ecdd1-8f77-4b0c-ae6e-a23721982088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835c64c7-6e07-480c-aa37-9d160a979235",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a426cb30-8b6d-488f-9375-28e8e4789843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4628b5b5-1838-46ff-bbff-ab8844f8af4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed0cb1e-af5d-4e66-91ce-bdbc0128fc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f70c305-fe0b-4948-ade7-75e9841f265a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f1bd1a-90f1-4eee-82bb-102b3f2f7cd0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3ab256-b24b-42d5-ba56-967fd506d6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a224d20c-ba95-476b-a97a-488a67ff9a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4117a4d-d1d8-42d6-98f3-9e3423db0bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fb3126-a256-4a85-88a9-b4c7875d8019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3563c8-82c5-4c92-ad97-b93d1f929d89",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9e39a2-ae13-495c-ba2f-0b7608f8edb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ff5073-3cea-42db-a27e-2c5bbac27496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "031928f3-57d1-49aa-a74b-183091fbe115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11f3bda-b1ed-44fd-94ab-510ca7bc2459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583ffb02-f9cf-422a-85d3-8f27a49244a2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f624ce-03a2-47ef-8197-9824e419acff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12681df3-3d0d-4d1e-85da-b348fb06bebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2624c588-afc5-4b0e-93d3-1f8ea4e10235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f9a79c-c137-443f-9b9f-4890c65f5bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14122d4c-982f-4ef0-806f-2b38c07d734f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ac01d-3cc4-45a4-b70e-b7ff0a3a54ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43dc4bd4-57f0-4b73-81f2-59ddda1b0a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "211011db-f888-4b17-a146-6897788a283c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adff3022-ec4a-43df-be55-9423ae79ecb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a058def-68fe-4884-9da3-285f295cfcd1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab93e40-732c-47a5-af94-1182ef536c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1984e312-0fb6-4c01-a786-50fcd2c90fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26e2ea2-c236-4118-8959-d6b9f50e6017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cb78fd-1062-487f-93ac-00a7e94f43cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24846bb2-f353-4f24-af09-21d1c9655c69",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cdd5d1-4d63-40a0-97a1-f56e50eb1bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78edd735-641f-41f4-bef7-0fa8c1314fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d27267-ee27-4071-9d85-04ff70eff054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afbd4d8-f09c-42f1-9f78-cd7951ebdeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92217ce-03f5-4d73-9457-b83445cbad0c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f47bbe2-7255-4f83-a4ec-47379242c321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4cbbe26-ab61-4319-b288-62fdd31299cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa3d8bf-a033-4035-a95e-a4f26d254b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52acc37a-9e23-4f7d-a975-e4570a8a552d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dec6355-0fef-4cf9-9831-59c1486066b8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1348460-fe8f-44fb-b5eb-f98a2f75be09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60056786-4e13-478c-9c3c-cbfb0e87884f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5236ab-238f-49f7-8cdb-9502b7b436dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6d4c8c-d06f-44b9-ba44-d9c452701ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e252b5-4d26-4e58-ac29-2bd42ec65818",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d02a6c8-3bbe-460a-a61d-0bfcbc6d5e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ace7461d-67e6-4397-a192-8c55e50736f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daec5eda-190e-4cb3-87bc-d63e5976b28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4f0212-7c46-4c56-8caa-a43fcf319f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37526352-b2cb-483d-8acc-1d9641ad7a21",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f09072-942e-480a-961d-8ca47783a5b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "725b3bf9-fc97-4c49-b51a-afd78a1837a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab6fa3-f740-4bf2-a228-62aa08ba1def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209f3731-3d0b-4f74-af87-75990f18eab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d79291-6e38-4a9d-bc36-0d1660e0da40",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44d9980-8b67-4c2b-b452-5e296d789f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c3499eb-b09b-4e04-8606-904b794a96dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a071c6a-dc84-41d4-b6a0-5647765b7a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526be76d-b403-4366-b155-32782dae2b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ed3b53-7f0a-403b-857f-42028ef4219a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4df581-66cc-4dbe-820c-a9cfa28a92bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df95e176-2e66-44ef-aa40-f2aaa868e0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f1da72-1ab7-438f-ba3c-3e02ca12ffdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50b9759-de6e-426f-ba7e-8950c6abe0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f627be15-f815-4446-9020-cc2fb131bb44",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b9aa3d-1d78-42ea-9cbf-287a8d639620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1550ef3b-2853-440e-acc3-8f187b58eddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b58d366-bae0-4e3b-ad40-a54fd680827a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57581ef8-206e-4809-bbe0-18d7d0efb50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43bed0c-487d-432f-afbf-586cb2cb2da5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945b7031-81e7-4404-92e7-b2e21b69413b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf2ef0d-3ade-4617-b114-bca31d74c630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccb6b0c-8766-4bb9-8483-1837a3968c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd844dc-372c-4eae-a48e-ac5a84a2f45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8714f8-3b0e-4571-8ac0-de99c0e1ddf0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ebb632-0022-40dc-ad0b-278ebccea44e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e271d1e-e1c5-40bb-9275-77f401c1c7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2874496-8561-4ce9-a915-3ededa5d3ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd67d5f-61e7-439b-b03a-7fa18add86ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b0313-cfeb-49ee-ab10-5d6f0cf3e469",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f413c3d5-65b1-4a75-82df-4dee2133788b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965ad4d6-9028-4cc4-9f06-11c92b109040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7512edd-e8fe-4a29-81a1-5bf433a7e066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33596eb1-8769-4b6f-8072-73b41be34722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4640c0d9-f3ad-4e4f-b143-cd7c8cc43824",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ab40a-ac24-4593-963d-49f031d540c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d5e1dcd-99e3-4332-a088-bd7be1dbaa04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26fec21-33d1-4722-8184-257e15769ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77c1b31-c9fc-4903-8810-322d76f8d0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f3f727-e5b4-4c2b-be59-7beb358e797d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408bff3b-1b64-49a4-9bdd-f33235061c09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855161a9-7bcf-4b81-8cae-32bb986b8038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fd5e08-5ab7-4794-81bc-56293fb28871",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0331e97a-0c06-4d58-bec7-2994ae2d3165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e0e038-f4a7-443f-b818-2fa4277c063a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c217744e-e8a0-4623-83a2-67444b179041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f444c26c-f5a6-4497-8f3f-167568e8dce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5387b14b-3f03-4818-ace1-abc68c0d654b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afb9cb8-0dd7-4d1a-9558-6ebe433a2606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e827c03-20a6-41ba-9ef3-5ee63f698d98",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8cc4b5-3100-452b-ba9e-4f1abfabecbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe9a343-8969-40fe-ba56-fc96056b3544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98aab46c-dadf-4e7c-aa6a-873a57149b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c23cb4-cb59-4e40-aa75-83aa7a959a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaeaf2d3-e6e1-404c-912b-a41a90778ca6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe49cc77-aafb-4b26-beba-761a9bd5205b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cdeb02b-38af-4bb5-b59a-157c39b70291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a02b595-3597-464d-92a5-238cfccaa187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7744d1-28fd-4782-98e4-7b3726fcf210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c68e61-dfa0-4f10-8aec-a0e30b9cd65e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f3db20-0a24-4585-b3d0-01288291a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d8cf1b-bf7c-44f8-825b-22492c7930f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc47c20d-e552-4d87-b471-670d56774c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eac9fff-445b-4ac2-8fce-000f44f803fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523beea4-d375-465e-a82c-725de07877e4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42733509-9df8-46be-885e-df664f8e53a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1133ab1-3724-4b12-8398-a1e515841ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d0698f-cf2d-4e87-a53d-255e5f5a1276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add0470c-143a-41ca-bcba-2f6dc01d1d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaa189c-a13e-4bb7-937f-bf1ec7985993",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33336f57-20a6-42af-aae2-2d058acd4f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab11284-d12b-4757-9350-eac53acaebcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb8b366-cf0e-417c-8cbf-0158b0d3079f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0ef6d4-efb5-4d3b-8ad0-fd1d7376e327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f0366-4613-46c3-a371-b9b4f6b03eab",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdecc14-4f14-4b81-93c2-f7e8b5a689c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b389e2-fae3-4eb7-82a1-4dc7280216f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1aa13c-b130-4282-8252-2fb7a5e6c9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f63d59a-62c8-4187-99c4-7f17fa435b30"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a486d0ac-ffe3-4085-bf4f-150815f7cd68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c81b61cc-a7dc-439e-82c6-5a1268a14ca9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96decd8e-a30e-4ea5-9de4-74b39ed7eaa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38df72dc-3cf2-4b46-a2a8-4ea77eeb79fb"
                    }
                  }
                ]
              },
              {
                "id": "6bc0d340-902b-4d96-b77e-f2ccb7e7a9b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dab82da-f6c9-484a-93ad-0564803e98ac",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a4321e-3a6e-4a4d-84d4-c10e9643f082",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1262f13-dfa1-49c6-acff-ad6901ad7b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "022b8181-c693-477c-a47d-76792461fcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8b928d6-bbdd-4e24-aeed-5806d2a30089"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4d8b894-97f2-49a3-87d4-99e6cf43c4ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f283501-6cc5-471a-bff5-384583fd97aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99ad534d-8342-4c73-9fc5-0f84b6c4ac99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58deea45-631b-482d-aecf-899e69893b5f"
                    }
                  }
                ]
              },
              {
                "id": "b7716889-176e-4754-9ae6-010e1167f3a0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "47970f46-5a05-4e78-a652-e03f6d89ee69",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3c7bf9-1ad4-4916-af4f-19abb7439776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "76dcf88d-ea6e-41f2-b1be-d545efa5bf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a289a745-2b6f-4ec5-8b29-8b931ba6d514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b227d10-c56c-4ba3-a5b7-7220025a00a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "03be34b1-dffe-42d3-bd0d-ec02dd39700c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c3a4a0c-4fe4-440d-8a29-47cfb6785759",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39d8c34d-d88e-42f6-b9d6-900354ca50c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6755a13e-6035-4f13-b0c4-28c7209cd56b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e11be7ad-9983-4619-8303-4b4ac9bbb669",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb89a6a9-facc-4bb2-864d-e4f3c5c8d486"
                    }
                  }
                ]
              },
              {
                "id": "73cf5f06-b23b-452b-84f3-c6d4c5e15625",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93dcb18e-0464-4cab-98b1-04696cd1f1de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "34908a93-6af3-44bc-a23c-31ca95f82e52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f8b7c02-a3e8-4581-9c62-9bfd005e1694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8c1c126-bce8-4004-8ac7-d7aa3b86edd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ece50fe9-191c-41c2-90f0-1ce8c19b8f3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "072526b5-243c-46c8-9777-6b0870b65942"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc9ed1fa-2a87-4972-a302-35b7c05ca9b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25a5760f-e542-410e-a6b5-58191535de2d"
            }
          }
        ]
      },
      {
        "id": "e669d732-f852-4c6a-98e4-c6ef78c11d6b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9eb7d0cb-5b4f-4367-a9b6-54473086b07d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d515ba2a-c57c-42de-8385-edbf6ae4021b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55f2318d-1397-49a0-8abb-ddbb7b7d1441",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4f25fb-d6c2-47f9-a451-19da9b906595",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d4f15482-0b74-4c35-b3fa-2cfb518834a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc54a9ce-4b5a-4697-8cfd-a7b85ac3a8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c69a564e-09bd-41cb-87e9-dc0c023ae7bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4108371d-bc35-4577-a8b8-f3b5c7802845",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef7c2e51-1d7d-43b8-b686-069de4ccd0d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29813f60-5373-454c-82a0-321131abbf34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efb4502d-1746-4508-a636-b980b1fce066"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04a4a621-e72f-445f-8bcb-752e16c48610",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e5a579d8-53da-48fb-b8cb-adabd7e44d36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a716cc3f-56bf-42ca-a3a7-8f25f5f5dcd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6174199-d230-485b-89d7-f01e6a07d52e"
            }
          }
        ]
      },
      {
        "id": "797e362d-4f81-44d8-ba45-df47004b1a2d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "855281a4-781a-4e18-a540-1eedfdf41106",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f773e673-e978-4daf-87de-b8f866859cff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e7fbe62-8abe-4120-b314-1918dbb90ba8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e66d73e-0923-4031-9345-7f000e33a226",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c622d71-62f2-4050-b9f4-f2dd4e8e1c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7dd5a2-c84a-490c-84d4-35371d722c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3cdc4be-f881-4b80-aa6f-25cc06550459"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9155a547-8bf3-4ab0-b963-0fdbd593868b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ba74f2-7b7e-481e-b6dc-99739f0ba206"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85828c55-cb4f-4825-87c2-fb6421543bfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1abc6b27-72af-4051-b34e-c9cbf41f2977"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11a90d8a-3f3a-46a1-b4eb-78986af53106",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d245412e-df97-4e03-a099-ef68b4da69cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d89ec30c-53e4-4701-9674-d8a511bb003e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acb8331e-f9dc-41b2-86ba-a43682781b34"
            }
          }
        ]
      },
      {
        "id": "cc2f9a52-ebfa-4335-8947-ec5b060a36f6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f62aa70b-c252-45db-82ce-00faf0545f16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c12e00a8-6ad1-4d08-935b-335b634a2da9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20771bb6-cc0b-4fbe-83f1-4c9208f0d836",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f77ee0-062e-4609-878a-ef6a663b80fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f4bc2a9-ed2f-41f9-8eff-6b17d5a1d59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91532dc-b860-4aaf-9ee5-bd038a3c19e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb94b3ce-53c1-4c70-b596-3b82fba97890"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a864ac1d-4cfc-4ff2-9df3-a8eb0e33f235",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1b50932-8efc-4f24-bd4d-18a1bc4cff84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8585bb21-13bb-457e-8ccc-99b96d7c0b54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "784780db-3f1f-4330-9f23-734c92c34edf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09fe6996-d04c-49eb-97df-50e369102006",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c6520c97-8d24-4a43-a34f-b9ec1e0c3665"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebc049d1-ebf3-4962-b0b7-81dca5a7ed42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fad5b0b0-b7b4-4bca-99f7-620634c87e5a"
            }
          }
        ]
      },
      {
        "id": "29baf7c4-aed7-4e5e-9a74-46b2493bed75",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5875ad4-8fcd-4e0f-b5c7-fc4db2e7c50e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f74e44f6-cb7c-445d-8ac3-f557a08195a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0876fcc8-a429-4b0b-8790-17863eb99ad7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1138089-7df0-4407-9568-3a607b936388",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5897baaa-384d-4990-bea6-f64076f4ad05",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.88095238095238,
      "responseMin": 6,
      "responseMax": 435,
      "responseSd": 31.608118090954118,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716480327803,
      "completed": 1716480354272
    },
    "executions": [
      {
        "id": "41672861-c9e6-4823-9a11-8c2e590cac15",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bfc3622d-8e23-4f95-8554-e7b6f0ac5b7f",
          "httpRequestId": "816dcaac-4948-4985-9316-9635020097f4"
        },
        "item": {
          "id": "41672861-c9e6-4823-9a11-8c2e590cac15",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dbfd8ce5-fd49-43fb-919b-9a6d5ab74aa5",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "a4ccd401-3bfe-4c26-809b-3996733cc8bd",
        "cursor": {
          "ref": "05f8653e-1032-4d60-8e25-b236cdb2dbe8",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac2c106e-177a-4580-8978-064531df517f"
        },
        "item": {
          "id": "a4ccd401-3bfe-4c26-809b-3996733cc8bd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7a25ce83-22ea-4be2-9651-26d5e083c15b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "34158199-eb31-4e36-9cca-ef783e68f2c1",
        "cursor": {
          "ref": "06ec85ab-1726-4e59-a77e-d2d933b4d296",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ae2a0d33-4172-4437-a4e0-e7382a1c6345"
        },
        "item": {
          "id": "34158199-eb31-4e36-9cca-ef783e68f2c1",
          "name": "did_json"
        },
        "response": {
          "id": "2e39bfcf-6f27-48ba-b15d-4f993efd17e2",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c423d9-d094-4bbf-8d84-5a8bf9e1f96b",
        "cursor": {
          "ref": "9faf03d2-f158-44e4-aa7d-895e8fde2a1a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c838a0b-3e5d-4a26-9ce6-8a036d8bf1cf"
        },
        "item": {
          "id": "79c423d9-d094-4bbf-8d84-5a8bf9e1f96b",
          "name": "did:invalid"
        },
        "response": {
          "id": "03206953-86e5-4bf4-88f7-e045443af9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c423d9-d094-4bbf-8d84-5a8bf9e1f96b",
        "cursor": {
          "ref": "9faf03d2-f158-44e4-aa7d-895e8fde2a1a",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c838a0b-3e5d-4a26-9ce6-8a036d8bf1cf"
        },
        "item": {
          "id": "79c423d9-d094-4bbf-8d84-5a8bf9e1f96b",
          "name": "did:invalid"
        },
        "response": {
          "id": "03206953-86e5-4bf4-88f7-e045443af9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b23aa9-a454-4f86-b8cb-9e48f72414c0",
        "cursor": {
          "ref": "914aa92d-2d3c-4466-a68b-c2b904a63006",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6b3d9567-09b6-44c3-b987-04a2b6734254"
        },
        "item": {
          "id": "25b23aa9-a454-4f86-b8cb-9e48f72414c0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9e171bf2-8339-4156-9c90-d32a67fbdb2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a7ff96-28f8-40bd-a88b-0308ae498927",
        "cursor": {
          "ref": "e9820ef4-5933-4fa0-8e80-9e3561276006",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "402439dd-8e3a-41b4-ad64-106a691beb50"
        },
        "item": {
          "id": "76a7ff96-28f8-40bd-a88b-0308ae498927",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0d1813fa-0867-4f80-9489-e3e2f44e64b6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d9c3b9-12af-458d-96ed-344f5e569067",
        "cursor": {
          "ref": "dec735d3-9caf-4c0c-b650-02acfff629c3",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "01c2a644-6d4b-493d-bf25-89470c581d48"
        },
        "item": {
          "id": "47d9c3b9-12af-458d-96ed-344f5e569067",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9790333a-8073-4707-8a7c-340813b8ee4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f228b92a-4128-44a5-9716-7aa15f21b577",
        "cursor": {
          "ref": "177d4563-1517-4cd1-b8c1-8e6b103536d1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8c2c3086-9232-4884-bbcb-ef8b71e4b198"
        },
        "item": {
          "id": "f228b92a-4128-44a5-9716-7aa15f21b577",
          "name": "identifiers"
        },
        "response": {
          "id": "c45b4192-43ee-49f2-9ee3-322f5ea14f20",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34baf67-b5c8-4254-aeb2-9daefd1243b1",
        "cursor": {
          "ref": "3bb1ab80-0b0d-4edb-94f0-0d6bf959e5c9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20dccb63-75dc-491e-9823-051f088e8c92"
        },
        "item": {
          "id": "c34baf67-b5c8-4254-aeb2-9daefd1243b1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4cebe2b9-f8c7-442e-aaf2-b593f109f881",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a24dc1-2f73-4e8f-8ffe-7878686ef340",
        "cursor": {
          "ref": "0fbdd1a9-f066-49ed-b0d0-5f1e747b517c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e637e0ee-a757-4be5-98ef-b61d376890e1"
        },
        "item": {
          "id": "e4a24dc1-2f73-4e8f-8ffe-7878686ef340",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "13700bd8-7719-4513-a90f-85a0fea3f561",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997c8734-0dfc-41b6-addd-805c9c685470",
        "cursor": {
          "ref": "b7c6e380-ba01-4572-8350-202c7e31d254",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f70ec661-8597-4e97-98d3-3173a5513d99"
        },
        "item": {
          "id": "997c8734-0dfc-41b6-addd-805c9c685470",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "14094714-7bb4-428b-8043-b5b482767715",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf2312a-97a3-4422-8a47-d59a66fd5ab4",
        "cursor": {
          "ref": "282f48b0-ccec-49ce-ba3a-0bf8c3e094d5",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "af153911-1774-4d24-ac60-31ee2689ab89"
        },
        "item": {
          "id": "ddf2312a-97a3-4422-8a47-d59a66fd5ab4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a2d4e386-1264-4325-a284-487893da0228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d493dcc-247b-46a1-b74e-23df464e6a17",
        "cursor": {
          "ref": "4c8c515c-b78a-4636-b24c-c5df8a28d2c7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b2e0d443-e404-4e27-8e09-e74cfaa541f4"
        },
        "item": {
          "id": "4d493dcc-247b-46a1-b74e-23df464e6a17",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1405be44-d5d8-48a7-bbc5-b24462fc1540",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210f50e6-fb9e-4cc2-ba4b-5d78b7a5b138",
        "cursor": {
          "ref": "a895e405-f345-49a4-97da-34797ccedf9f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dae418fd-3095-4f79-bae6-4115a57d2f7d"
        },
        "item": {
          "id": "210f50e6-fb9e-4cc2-ba4b-5d78b7a5b138",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b3a6ab5a-10ea-4cc7-8d41-d07773f7a61f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d66c368-3326-48ea-a7d5-ef53264ead03",
        "cursor": {
          "ref": "45c85227-9bb6-42de-9f9c-1fde5f7f1169",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f84001d7-4118-4c50-ae69-316a280d32b5"
        },
        "item": {
          "id": "5d66c368-3326-48ea-a7d5-ef53264ead03",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6926fa22-201d-49da-ba78-c8f4d3dc8ebc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3823c51b-3a40-428b-a76d-0a9ddddf6a68",
        "cursor": {
          "ref": "e752058a-35c9-4ddd-a7fa-4f18a4c1bee1",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e2492013-af90-445e-a9e4-fcfb036f611b"
        },
        "item": {
          "id": "3823c51b-3a40-428b-a76d-0a9ddddf6a68",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "54a68bef-3114-4702-ac18-3b22606863ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ccd92f-496b-4fad-a80a-b33ea1927b28",
        "cursor": {
          "ref": "aa944360-95bb-4016-9e9d-2c74ed161ae4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3f169e83-5f9e-4d7d-8a59-000c0d365841"
        },
        "item": {
          "id": "e3ccd92f-496b-4fad-a80a-b33ea1927b28",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4dcc212a-7a18-4bac-83d4-39d6bce7866d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fea79aa-a4d6-46c4-b1f1-9de8842e489c",
        "cursor": {
          "ref": "b7cf8d9a-cb20-4da6-b0bd-e60d3b26935a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a7e21628-410c-4e5c-8339-8eb09835d134"
        },
        "item": {
          "id": "7fea79aa-a4d6-46c4-b1f1-9de8842e489c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2274fa0b-a457-40f5-b4ab-87674683b221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6657a549-f7f2-4fdb-b407-cc5d172f7a6e",
        "cursor": {
          "ref": "8d2c1135-283d-45d4-b38f-019d5dbe3ef2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8e40160c-2113-4eb0-8adb-072510935264"
        },
        "item": {
          "id": "6657a549-f7f2-4fdb-b407-cc5d172f7a6e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f8ec5cb1-5f7d-488e-80fa-75c4440f5389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4fcff7-845d-425c-ae5a-a05211bb44d8",
        "cursor": {
          "ref": "7d55b4c3-afd0-46d1-b5a1-bc51e5927d86",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "141c7055-b671-4732-9fec-17bc160cac5e"
        },
        "item": {
          "id": "1d4fcff7-845d-425c-ae5a-a05211bb44d8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1dd8ea6d-572c-442b-ac87-e3371ee15293",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15828707-d1df-4b4f-beaf-0ec22ca21a47",
        "cursor": {
          "ref": "f82fa0e0-fe4c-456c-882d-73243a8c53fb",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4543f5e5-dd7b-4626-aa87-5d9df244048b"
        },
        "item": {
          "id": "15828707-d1df-4b4f-beaf-0ec22ca21a47",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ead613d8-7aca-4eb5-b28b-d8f6ccc391c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5dfb1e-c15f-4ff3-bb3f-a47a0e66fc81",
        "cursor": {
          "ref": "a9ab760a-7aa2-4d5c-a883-624995c05cf3",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2ca95b4e-eccf-4462-95e8-7d573cf63c96"
        },
        "item": {
          "id": "8f5dfb1e-c15f-4ff3-bb3f-a47a0e66fc81",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d3725a15-fa9c-40b4-906c-d2be2b7af3b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3a5a86-ad12-408e-98e9-52b7ef0d8ec2",
        "cursor": {
          "ref": "330411d8-a9a4-4bc2-9653-98afb38ff548",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "819361cf-8190-4f8e-9819-afbb343006d4"
        },
        "item": {
          "id": "cc3a5a86-ad12-408e-98e9-52b7ef0d8ec2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "00ca3c5d-3194-4d96-a14a-5b6942ec80cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d57fbd-8d00-442b-9062-a4f31690c657",
        "cursor": {
          "ref": "14722ebf-9f59-44f7-ae0b-d64ac0bb7f1d",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d295d16b-5543-405f-bbe6-dd23ab00dfe1"
        },
        "item": {
          "id": "98d57fbd-8d00-442b-9062-a4f31690c657",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "088789ab-5138-4a34-9a9d-e10a3541760f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3783939b-98bd-4a65-b7bc-40bd2979a93f",
        "cursor": {
          "ref": "5da98d4f-9987-43a5-8f07-84dad1da4ef3",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "712ed601-9429-4ed1-9146-a5f532db980d"
        },
        "item": {
          "id": "3783939b-98bd-4a65-b7bc-40bd2979a93f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3cf64e84-0a5f-4ef0-af68-9497b470c509",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71f4c93-c931-45ac-87c3-89bbef867fda",
        "cursor": {
          "ref": "ccdf3c88-350a-43ef-9d00-97ddbdbf6f65",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c52b295a-f8f8-440d-9675-90d7e99e0a57"
        },
        "item": {
          "id": "a71f4c93-c931-45ac-87c3-89bbef867fda",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e48bdb52-80f0-4686-90c7-beb87c9ff529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d0f51f-87a0-40eb-9ebc-c84800d3df9f",
        "cursor": {
          "ref": "75fd4be8-c1c4-455e-bc6e-13c3416263d2",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e2fb2643-ff27-4ade-bdc6-12cb1fd41fc7"
        },
        "item": {
          "id": "a2d0f51f-87a0-40eb-9ebc-c84800d3df9f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ef90da21-500a-4be4-997e-580941b78156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b9431e-d57e-4d6e-b6ec-ef87aec4553e",
        "cursor": {
          "ref": "e3d0dd7c-82c2-4a01-a077-ce4451604f11",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a2fb95d4-96e8-4bf6-bbe9-1c8e4071b8bb"
        },
        "item": {
          "id": "43b9431e-d57e-4d6e-b6ec-ef87aec4553e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b612c5c-5051-42a1-95cd-0eec8c37fbd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebd9ed4-56aa-4b27-99e3-60288426d214",
        "cursor": {
          "ref": "8f9d5cfa-a411-45ca-addc-310f001f0e6d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "28601a71-2250-43cd-90e7-5f8a0dab05bc"
        },
        "item": {
          "id": "7ebd9ed4-56aa-4b27-99e3-60288426d214",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bc66cfe5-4287-46b5-aac0-1f232cdd8257",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32c5c4e-0c82-4d26-9c15-57e6790152fb",
        "cursor": {
          "ref": "d820d8c9-6f9c-451a-9a70-eb2fdd603741",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "66ffd83a-f017-4a13-b995-37d6f029e33a"
        },
        "item": {
          "id": "b32c5c4e-0c82-4d26-9c15-57e6790152fb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ff5e6d22-532b-4260-8e3c-62a4ca6f1b54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db002245-6a06-4a77-8700-c792b050b185",
        "cursor": {
          "ref": "3a0f96fb-23ad-43fe-86b7-25fd5f86c80a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9c017aa-efca-49cd-a9e4-b5835d299ca4"
        },
        "item": {
          "id": "db002245-6a06-4a77-8700-c792b050b185",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "236e9860-fd67-4c88-afad-aebaa0317d16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e09f802-3ac5-43dd-abbb-a349397ec398",
        "cursor": {
          "ref": "67cbe3b9-f902-454d-83f8-29cb222da203",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "67652772-109e-4a06-8d47-bd7e68cdfe5f"
        },
        "item": {
          "id": "8e09f802-3ac5-43dd-abbb-a349397ec398",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9dad7c50-e56b-4389-92cc-d92091de76e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a28437-1505-4143-9527-d5670460778c",
        "cursor": {
          "ref": "7834edaf-648d-480a-bdc7-4b5ab4eb463c",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d58902bf-c963-4543-bb8f-35ce81a9714c"
        },
        "item": {
          "id": "63a28437-1505-4143-9527-d5670460778c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fa25ed47-0971-44e7-a75a-a9d9b07e79f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ce6775-c3f4-455d-9c3f-9a5717716c6d",
        "cursor": {
          "ref": "c72843c7-988b-4780-99cc-88b38c048555",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "76ca07a3-65f9-45c0-93cc-51517964c296"
        },
        "item": {
          "id": "65ce6775-c3f4-455d-9c3f-9a5717716c6d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e0815b2d-16df-476a-bd82-d098227bf7e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffdcbb5-02d4-4365-a533-c12281fc5ace",
        "cursor": {
          "ref": "03712fde-3a30-42e7-8342-05e3acca6ef7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "dd44d32c-d526-415c-89cf-5d92ca07bcae"
        },
        "item": {
          "id": "dffdcbb5-02d4-4365-a533-c12281fc5ace",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7b655b71-8bb3-4666-a84c-6bfb77a32cde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300853a9-6608-4daf-a353-ad4fc7a2ee26",
        "cursor": {
          "ref": "fe8fa53f-74b9-4312-95e6-e1528c1907aa",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4113fba0-79f9-44de-8be6-b8635497bfa1"
        },
        "item": {
          "id": "300853a9-6608-4daf-a353-ad4fc7a2ee26",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e98659c3-10b3-42ff-89a8-ca1c3d506492",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a20d60-a554-4db1-9d4e-63b6a8ce39fc",
        "cursor": {
          "ref": "ce1fa197-0f13-4730-9db0-7d94d7ea6cad",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cbb0079c-a869-4f5e-9b55-d41a1fd56409"
        },
        "item": {
          "id": "72a20d60-a554-4db1-9d4e-63b6a8ce39fc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "06e9ffa5-5a75-42db-af8e-de42d081f74f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51a9e8e-9954-461b-8780-d7a69a7b50ad",
        "cursor": {
          "ref": "4684b704-7749-48d7-83c1-5e1597519302",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7c65fe2f-7a80-4374-a411-d5f74adc5ca1"
        },
        "item": {
          "id": "c51a9e8e-9954-461b-8780-d7a69a7b50ad",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c6d0cb3d-56c5-4ec2-b637-bb04c8614eab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cba29fe-5c53-4501-8b8a-40b93983c5b3",
        "cursor": {
          "ref": "f987b32c-3329-4896-8b60-c8333c8f6df4",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7daa1e8b-1a1c-48c6-898d-4aebadf711f3"
        },
        "item": {
          "id": "8cba29fe-5c53-4501-8b8a-40b93983c5b3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7f2153e9-47d0-4078-8ac5-76f9159857fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2135b100-1cc6-412c-8a05-99296ec31f1a",
        "cursor": {
          "ref": "b1790cf9-85c2-46a1-90e3-8cdc9389164d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a9201f8d-c8d9-4725-b9da-a4ad5911d671"
        },
        "item": {
          "id": "2135b100-1cc6-412c-8a05-99296ec31f1a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8e6dd547-096a-4349-9bfc-9f8786efa524",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812977cc-a9c0-4c00-aaf6-1ef64b6a9de8",
        "cursor": {
          "ref": "1d2bfc13-5e82-4570-b6ab-5fa368013cbf",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "82f2cddc-43eb-4fc2-9000-fae317ff4ab2"
        },
        "item": {
          "id": "812977cc-a9c0-4c00-aaf6-1ef64b6a9de8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f1c79798-6f38-4719-b26c-cbf7adb20b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc4d296-5e4f-494b-9adc-ce2e8c253c7d",
        "cursor": {
          "ref": "a5a9b351-4935-46d3-93ec-882388ad8a3a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1f869649-3b11-467e-a54c-b93d1de47ed0"
        },
        "item": {
          "id": "1dc4d296-5e4f-494b-9adc-ce2e8c253c7d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e6a1c8fb-d167-4fea-ab20-f959f14d6228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a102724-2563-4fcf-8617-20f9ee54eeef",
        "cursor": {
          "ref": "c4b31efd-77de-4f34-9e17-b1f934937989",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6c8a7863-b27c-4b56-8653-5f9a88d7cfa8"
        },
        "item": {
          "id": "7a102724-2563-4fcf-8617-20f9ee54eeef",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "739c5f7b-85cd-43df-babf-5636426df810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a858d0-d44e-4061-b792-b005ec9bd1da",
        "cursor": {
          "ref": "d16a2079-2dda-4904-a280-98c6242a0bc5",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b5299c1-55ea-4559-b437-180a8031d14c"
        },
        "item": {
          "id": "64a858d0-d44e-4061-b792-b005ec9bd1da",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dec39dc5-4669-4fb8-bda5-32749bb10788",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc67eccc-d076-4acb-91e4-9941c31e3253",
        "cursor": {
          "ref": "e9462ade-db1a-4e96-b40d-14247a4c0eef",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1fa3f2c1-99fa-4620-919d-90bec74da901"
        },
        "item": {
          "id": "fc67eccc-d076-4acb-91e4-9941c31e3253",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2e310adf-dbe9-4d74-8af0-aa43c3db0f23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6ddb68-50cd-4774-9986-47538e5de4fd",
        "cursor": {
          "ref": "4e319150-09a2-49f8-bd6a-6e8f3cabeb8e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cdd6dede-f1f9-4b49-9427-5de82a9e4b40"
        },
        "item": {
          "id": "0b6ddb68-50cd-4774-9986-47538e5de4fd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "39cf7d05-b56a-4730-8813-8558c85f9c7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7f41b8-5862-4503-8588-63a3bb528091",
        "cursor": {
          "ref": "84f7d8d4-a5a4-4499-baf0-102c0dcaee86",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e65cf4f4-dafc-4bf9-9b18-2c1277de3b57"
        },
        "item": {
          "id": "9a7f41b8-5862-4503-8588-63a3bb528091",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f9b7c096-f1e2-4f9d-846d-6ebd2115b4a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1293254c-b3d1-4533-8b67-df02b644d1e2",
        "cursor": {
          "ref": "a60da297-4220-46de-a044-33cda16af42b",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "300ed6d8-9434-4b19-8cb7-f046f1eec768"
        },
        "item": {
          "id": "1293254c-b3d1-4533-8b67-df02b644d1e2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c9f687bd-b9df-404c-9ea7-d5a2584bbdba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f786f54c-8d77-4cfb-b9e3-571e2f5f9951",
        "cursor": {
          "ref": "d8efa03c-bfc9-4d59-b3eb-5039e1392751",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "10919197-47ee-4da6-b22f-fe1ed5cba0fe"
        },
        "item": {
          "id": "f786f54c-8d77-4cfb-b9e3-571e2f5f9951",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b8ba8f75-3d9a-4af4-9fc7-a3a9300e3c6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30edcad1-f836-4924-b612-6a953abbfeb0",
        "cursor": {
          "ref": "07794e56-9872-4825-bbab-95c72c73eb8b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "402f88ef-339a-4622-9aa3-c3b9e3c79dbe"
        },
        "item": {
          "id": "30edcad1-f836-4924-b612-6a953abbfeb0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "920a7eda-ee11-4607-8d7f-4125c0e8bc96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e25a1b-94b3-4611-913d-157f86ddb007",
        "cursor": {
          "ref": "93c683c6-4975-4431-9600-5e6bea23a89d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0a0db05b-9f11-48ee-91ac-ac2a09616a4c"
        },
        "item": {
          "id": "60e25a1b-94b3-4611-913d-157f86ddb007",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ff40685d-e5e9-4a1f-bb4d-90fd8e0024aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef12ef0d-b994-42a9-8f97-008279502caf",
        "cursor": {
          "ref": "a7689f42-90b8-4af3-b044-4efc96ffd8f1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b2aa9a7c-bfc0-4293-8fbf-9f003a121027"
        },
        "item": {
          "id": "ef12ef0d-b994-42a9-8f97-008279502caf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9560265a-6c85-4d1a-8823-db108fac993e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dde6a6-2f57-4c58-85d6-d6e65a020eb3",
        "cursor": {
          "ref": "bcd5f981-c793-483c-8085-525da1c2cc2e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e9dcaaa8-a26d-40ea-818f-b5a039f90cdd"
        },
        "item": {
          "id": "09dde6a6-2f57-4c58-85d6-d6e65a020eb3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "50675db8-2bc7-4a87-86a2-5017b9a813b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085b747e-60e4-4ee6-bb96-cba32af197ab",
        "cursor": {
          "ref": "22a8533a-fb48-4a9f-81d9-2ea5e765bdcd",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d7e27cc7-6305-49ea-b12d-b30cc66f5ae5"
        },
        "item": {
          "id": "085b747e-60e4-4ee6-bb96-cba32af197ab",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "00c9f590-0876-43e9-a545-7b0cef3d41ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca24612-3480-4bc5-91f2-82cc73536415",
        "cursor": {
          "ref": "39bc00f9-54bd-47f2-bb58-5dbbe2ef9b9b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3ed2b098-0845-42dd-9dd5-3832b1ea87f9"
        },
        "item": {
          "id": "3ca24612-3480-4bc5-91f2-82cc73536415",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fb69efe4-badf-408f-9bb2-6c571b91ace1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71355395-7a3d-4eee-92bb-3c5078233280",
        "cursor": {
          "ref": "76841e36-e48c-4f7f-bdb3-a67286069639",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "363850fb-5d5e-4ee6-8f0d-3e7d3e807ba3"
        },
        "item": {
          "id": "71355395-7a3d-4eee-92bb-3c5078233280",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fa533524-414f-4deb-8563-71dd34de25ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf66788-cd0e-4d0b-9adf-cfa5ded6ef65",
        "cursor": {
          "ref": "7a3b1cd6-47a8-4ea8-9bb4-08f41559f99c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b1aaae48-c898-4e04-8471-b0a2bba69e90"
        },
        "item": {
          "id": "8bf66788-cd0e-4d0b-9adf-cfa5ded6ef65",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "84f0708a-bff6-4e8e-b08e-cae13ad214a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198231cd-837e-4187-aad7-45089e3962c2",
        "cursor": {
          "ref": "5891ab96-1e17-47a8-af12-79ec8d68c5f6",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f22a0b9b-bafa-4f47-924e-fa955fdcd66c"
        },
        "item": {
          "id": "198231cd-837e-4187-aad7-45089e3962c2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8795c186-2845-4294-bcd0-c4727ff02e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c8839e-e45d-4a05-ba30-4b7e5aa59a7e",
        "cursor": {
          "ref": "af077d3d-662b-4c3f-aa24-2b0b6b17d1e4",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "beda6696-0738-4b87-a369-c33722061d70"
        },
        "item": {
          "id": "e3c8839e-e45d-4a05-ba30-4b7e5aa59a7e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c70ce583-e468-47d2-9355-12a380d55c28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fef2e0-486b-4c3e-b42e-f4efabe5e8e0",
        "cursor": {
          "ref": "210d25d2-640f-48c9-925e-6f942640941d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9142d9b8-aa3c-45ce-b216-d4608974a73b"
        },
        "item": {
          "id": "a7fef2e0-486b-4c3e-b42e-f4efabe5e8e0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ddbf554f-9459-4ada-8635-65f672821503",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dce221f-3e90-4bd4-9981-5c41c9f032a8",
        "cursor": {
          "ref": "d9e8d751-2911-4e2e-bd74-7de0c5508977",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5642b74b-aab6-4552-bc2d-ec58095b1a20"
        },
        "item": {
          "id": "2dce221f-3e90-4bd4-9981-5c41c9f032a8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0a5d7eb8-d7aa-4c05-b647-0343fc7479f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1dbbad-f332-4e6e-8335-230b4191b58c",
        "cursor": {
          "ref": "c881c7f5-0113-4b9e-94fc-11d055cd24a3",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2d25a374-4d04-451d-84f0-29ed96cb6d60"
        },
        "item": {
          "id": "9e1dbbad-f332-4e6e-8335-230b4191b58c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f7a89178-ca50-4c46-970e-00fcdc53fa30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e12935e-b952-495c-93c3-89764601427d",
        "cursor": {
          "ref": "b3de4b2b-fad1-415b-8396-a682b4a36f24",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c3e98ede-1d56-4874-9c31-dea4bad303ae"
        },
        "item": {
          "id": "5e12935e-b952-495c-93c3-89764601427d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "32c19501-984f-4669-b26e-db5bc9032664",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2165ed85-4131-43e9-927a-a4f07116160f",
        "cursor": {
          "ref": "78b07435-e544-46e5-b435-c0fbd6b8c693",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e29f9fb4-ffb0-4a43-bc7b-fdeee710152b"
        },
        "item": {
          "id": "2165ed85-4131-43e9-927a-a4f07116160f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0a8101a6-5f35-4b0e-852d-46515018ced7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ab68d5-6297-4990-bf1b-8e881d13b877",
        "cursor": {
          "ref": "3b9d322e-e394-4670-b975-37a5feafc697",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7da67e2e-0de8-4abb-b2de-7ca85d7c2d33"
        },
        "item": {
          "id": "56ab68d5-6297-4990-bf1b-8e881d13b877",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "835fa8e4-6d9c-4bce-acc3-1349f472c4cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cecc639-a139-40fa-a1a1-5846324bae80",
        "cursor": {
          "ref": "507e814d-0e20-4615-9eef-95104f6068a3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "753fe7a4-de46-4473-a648-88cbb973b073"
        },
        "item": {
          "id": "7cecc639-a139-40fa-a1a1-5846324bae80",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1c1c4fa7-16d8-4e88-8081-e46be0800a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4353ae0-08f0-4e45-926f-2a78a9a2583e",
        "cursor": {
          "ref": "498b5979-8f03-4c36-873f-8de5c77bba40",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76ea28c1-48ff-47b5-9dee-e5faa94e5e84"
        },
        "item": {
          "id": "f4353ae0-08f0-4e45-926f-2a78a9a2583e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "24ed22bd-8f1d-4f37-89ee-ae084a039a14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20049d7-45fe-4b92-8e10-f3a3b6ac63ff",
        "cursor": {
          "ref": "307e4374-85b5-4ff8-9a73-4c9e314fc046",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6eaaf563-5922-4d22-b417-3d00efe99b48"
        },
        "item": {
          "id": "d20049d7-45fe-4b92-8e10-f3a3b6ac63ff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1acd32f7-f106-4a41-9b05-567e05f4d1ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc8beab-94df-41a3-88e1-2ccdefca1073",
        "cursor": {
          "ref": "3d44d5e4-218a-41aa-a4db-5c9babc0e48b",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3be3533b-c047-4402-9549-cbf2731735b5"
        },
        "item": {
          "id": "fcc8beab-94df-41a3-88e1-2ccdefca1073",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4663b2e7-349a-4c18-923f-2a52e2ef0500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6624809b-4774-49ce-af84-45f2dc24e6af",
        "cursor": {
          "ref": "c15cf3d2-acba-40b8-b559-89abecbb6fee",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d340c576-080e-48fd-b576-633b6fcc49b1"
        },
        "item": {
          "id": "6624809b-4774-49ce-af84-45f2dc24e6af",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "30b425f0-bbce-4348-a9f3-74d8f092f5e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784d4874-9c6e-4384-a019-6f8a58969db5",
        "cursor": {
          "ref": "c70968db-85ad-4359-91c1-0b4333b2364c",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fc812ee8-13f1-441d-a4cd-2503d5a8f33c"
        },
        "item": {
          "id": "784d4874-9c6e-4384-a019-6f8a58969db5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "13de12f9-4fb3-4e4b-813a-386a9c3d877e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566ff161-aaac-4120-80c3-8b8c8d4513d3",
        "cursor": {
          "ref": "4f6b10b1-e5f9-4bc8-bf33-205bd971c2ec",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3399ded3-b8e4-4354-adcb-9c7f0247861e"
        },
        "item": {
          "id": "566ff161-aaac-4120-80c3-8b8c8d4513d3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2d2f81cb-c9cc-4640-98eb-fedbe88f735f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de09c2f-7e4a-4d6a-80eb-1fbcb3d554eb",
        "cursor": {
          "ref": "2234cf92-273c-43a7-83d0-6cf8e1dd1fcd",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a8471794-35db-4a02-a51e-1883781fbb63"
        },
        "item": {
          "id": "8de09c2f-7e4a-4d6a-80eb-1fbcb3d554eb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "262cff7e-d402-4c19-9718-ce4cd3d0223e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cea7177-257d-44a9-9cf4-57c9d2d2ac50",
        "cursor": {
          "ref": "d98de3f0-0618-4806-a964-25e72f0dcaa3",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "90948cfb-4a23-4baf-9431-305e5e2211cb"
        },
        "item": {
          "id": "7cea7177-257d-44a9-9cf4-57c9d2d2ac50",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e88556e8-33f1-4e94-88a1-0a988fd34d0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb6ccf9-2876-4b40-abee-95b2b5adf96e",
        "cursor": {
          "ref": "4a11f73b-3dec-4eb0-8829-4f96b1124026",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5449c7e5-b0f5-4da0-ba16-bc1e405ad166"
        },
        "item": {
          "id": "2cb6ccf9-2876-4b40-abee-95b2b5adf96e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4cc4a72c-d063-430d-8757-98e3c15ff1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d0d5da-4ff3-4b49-894c-f2d31306e7f7",
        "cursor": {
          "ref": "ddf136dd-3d32-4c01-82e8-27d0f71e8d84",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "217aca3a-c939-4c51-8359-bf83b970d89d"
        },
        "item": {
          "id": "82d0d5da-4ff3-4b49-894c-f2d31306e7f7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1412a2fc-8edd-41f0-840b-7ff9527b1323",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b48042-ec52-46ed-a486-38d5f51a5e77",
        "cursor": {
          "ref": "ac66d774-baf5-4e70-baa6-c1c735a493c5",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6b676d92-fefc-4a9f-a0bf-2be7a59b115c"
        },
        "item": {
          "id": "33b48042-ec52-46ed-a486-38d5f51a5e77",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9dc58d13-8f1a-4ab3-95cf-240476d3b4c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72c86d9-b6f5-41c5-ab13-5bb176f7b2ea",
        "cursor": {
          "ref": "925b45af-918e-413a-bd19-49f259c3cdff",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "121536d5-9165-482c-9589-e07f6478b151"
        },
        "item": {
          "id": "b72c86d9-b6f5-41c5-ab13-5bb176f7b2ea",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e184767f-6646-4a57-b4d2-867321f4e325",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86208a2a-df2d-4c69-808d-005bf1eaa53c",
        "cursor": {
          "ref": "305cafa1-8206-475f-9664-5f3a06f2d988",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2e3497e4-8eba-4048-a9b8-afccd3899a96"
        },
        "item": {
          "id": "86208a2a-df2d-4c69-808d-005bf1eaa53c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "28cf4596-9b31-495a-962d-74764c4842a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e246430-de8b-4d55-8985-0da3971e63b4",
        "cursor": {
          "ref": "c9e5dadf-7d3b-499d-a0bf-5bceeee65bf7",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a4093ce6-1998-4745-9346-1135bad8bc50"
        },
        "item": {
          "id": "6e246430-de8b-4d55-8985-0da3971e63b4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6780e933-dd6f-4b90-b00b-c28aff0049ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ea6ac8-10e5-465e-b127-0be17ec2da1d",
        "cursor": {
          "ref": "e8f0fffc-2f5b-4dd0-81b8-1683a34711ce",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "94826684-f232-4525-a78a-3dad8a9e3172"
        },
        "item": {
          "id": "24ea6ac8-10e5-465e-b127-0be17ec2da1d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "66101eca-6ead-4b66-98b5-39080560cb07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1c5ee7-11e6-496c-ba0a-4a13c77de32b",
        "cursor": {
          "ref": "0dd8abb5-1c41-4e2d-8ccb-812c1f28c405",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "aeeb08f3-884c-417c-9f4f-e753638dfad8"
        },
        "item": {
          "id": "9c1c5ee7-11e6-496c-ba0a-4a13c77de32b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3cc71e97-ba30-4178-8fea-8a46c6e03189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd2947c-6b37-4c4f-a8d1-c24a3c2faa88",
        "cursor": {
          "ref": "c3516021-0f16-46fc-bffb-655fcfedc64b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bdbacdb2-46f3-49e6-a80f-71b929bbcc1e"
        },
        "item": {
          "id": "0dd2947c-6b37-4c4f-a8d1-c24a3c2faa88",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bfdf31a-2e4e-4c8e-970c-57866ca17b24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5139c9d-8ef8-4f7c-9ee8-378ff27a5b0b",
        "cursor": {
          "ref": "10bbe8e6-07ed-42b8-b997-870f8744d3ea",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "47f02e3a-9532-4a8e-8748-fb9c60b4f493"
        },
        "item": {
          "id": "f5139c9d-8ef8-4f7c-9ee8-378ff27a5b0b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dde85de7-ab96-4ea8-b530-80b7a21e24fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbffd07-a0f3-4485-b79c-bcbad779b40a",
        "cursor": {
          "ref": "68e8d29a-bd30-40b5-bc3d-64e7acd712d3",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4d92d2f4-3faf-45fb-9fff-34c233bf8d62"
        },
        "item": {
          "id": "bcbffd07-a0f3-4485-b79c-bcbad779b40a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9d98a661-0417-4055-ae8a-4e76ca086303",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0403054-959f-4412-aa11-64bbf52b83b9",
        "cursor": {
          "ref": "2e641e3f-3ed2-4699-b16a-fcb90780a17a",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "515d2ca2-ba79-42bf-a944-806c8de27904"
        },
        "item": {
          "id": "a0403054-959f-4412-aa11-64bbf52b83b9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "debfd6f4-1a38-4771-9f61-856e3d040cda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07aaee63-f620-4178-929e-959a754a95fe",
        "cursor": {
          "ref": "540f1e92-e89c-4811-82d4-fe3517479035",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "07240da7-e90c-446f-bc30-110d64e59017"
        },
        "item": {
          "id": "07aaee63-f620-4178-929e-959a754a95fe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cb536965-cd25-425d-97b3-0c83a27040b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f3097b-46c2-41b2-b4bc-6fa5bfc82940",
        "cursor": {
          "ref": "7fbfbdd9-9557-4ba2-8f11-b69e62a8648c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "07413549-e1bc-4b78-a2cc-825a37a2e6b6"
        },
        "item": {
          "id": "65f3097b-46c2-41b2-b4bc-6fa5bfc82940",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3ba83293-18d5-4123-ae0d-d55eeb26f5f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572699b4-a4d8-4cdd-9529-fd37d81f354b",
        "cursor": {
          "ref": "dee8482e-e5c1-4c67-a62c-52c03a561963",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7e3df32b-1057-439b-afe8-82c2a38c4af4"
        },
        "item": {
          "id": "572699b4-a4d8-4cdd-9529-fd37d81f354b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c9feebfe-c8d8-413c-b46b-218da5dc37d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92b75c0-56b5-470d-83c2-a57eed6614a4",
        "cursor": {
          "ref": "cdbe37be-9af2-431f-bd79-8a2f0c6ef619",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "edef43a8-7b76-4028-9c5c-37d4f50d0d46"
        },
        "item": {
          "id": "b92b75c0-56b5-470d-83c2-a57eed6614a4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e14674c4-cfe0-4638-a9c0-1c0a25d9b364",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3872acb5-a42e-4f4c-bfee-d138e1799c47",
        "cursor": {
          "ref": "788bba17-db74-4c69-8e2f-a829a9c3fc28",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ef7447aa-5f9f-424d-97e4-44ee57cb35fa"
        },
        "item": {
          "id": "3872acb5-a42e-4f4c-bfee-d138e1799c47",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3661917a-72a4-46f7-b13b-dcd7aa5b5fb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6dbd32b-71ff-41ae-b972-559ab0388946",
        "cursor": {
          "ref": "ba891fde-2501-449a-ae76-18c0d72f4bb7",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a50f55d5-5bfa-4b6d-b5b9-dae79b1249b6"
        },
        "item": {
          "id": "f6dbd32b-71ff-41ae-b972-559ab0388946",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0ccdce69-1a92-455b-a03f-538bdf22b0b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b3d60b-be14-4195-861a-1d1170a954c5",
        "cursor": {
          "ref": "bb75ee36-f260-4690-8200-23e734391953",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "75387bb9-31bb-4bc8-848d-32ec639b3784"
        },
        "item": {
          "id": "09b3d60b-be14-4195-861a-1d1170a954c5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2a0c2da8-336a-4568-9613-63863ffdb517",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229420cd-7161-45d2-8e6c-031d01105912",
        "cursor": {
          "ref": "553275ac-0a72-493a-a3ae-2eada305a4d8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0c97af10-f377-493a-8d89-c73fa42bb0e0"
        },
        "item": {
          "id": "229420cd-7161-45d2-8e6c-031d01105912",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11c06399-d405-4c68-bb7f-1c9d72a7a1f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8928a5a-f716-4054-b95f-399c7719a965",
        "cursor": {
          "ref": "88d05dbb-b116-463e-8a76-e3113b89f030",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f67d64f5-c0a3-4f94-b489-ef331943edbc"
        },
        "item": {
          "id": "b8928a5a-f716-4054-b95f-399c7719a965",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f691fa81-55c1-475e-a903-5da0dd587e57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901eea40-7e71-4123-8c35-b402b41f2cd8",
        "cursor": {
          "ref": "708d4aa1-4b4b-45bb-a3af-39904d2d062e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7b59096e-200b-4bfe-81c8-dfea9788a20f"
        },
        "item": {
          "id": "901eea40-7e71-4123-8c35-b402b41f2cd8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1deba38c-e75e-44ee-86d0-c2d398f7b1f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d3e8b1-448e-4051-8fe4-ca4a4469810a",
        "cursor": {
          "ref": "d7f4ca50-9ae7-494f-a389-d239b26e546d",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "290708e5-e923-407a-99d6-aa9394ecfd1a"
        },
        "item": {
          "id": "78d3e8b1-448e-4051-8fe4-ca4a4469810a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fa076fb3-a6b3-4a72-8a40-e59949d68863",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6062063d-b477-43cd-b140-d754e05e1db7",
        "cursor": {
          "ref": "96f82401-10d9-4e34-8502-4c36ec814f94",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cfe60b2d-bde0-4597-8356-258e11a8dbc8"
        },
        "item": {
          "id": "6062063d-b477-43cd-b140-d754e05e1db7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2afcf53a-69dc-4b1f-ade9-25b262a0af31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb85c56b-5173-495e-8aaa-a29ced4c491b",
        "cursor": {
          "ref": "65d85a53-9723-442c-8daf-e22479098d07",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "548412b3-146b-43d1-8a4c-6b89899b4144"
        },
        "item": {
          "id": "cb85c56b-5173-495e-8aaa-a29ced4c491b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ae947e2e-4db4-4cf8-9a26-1afd5604f259",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cad8f65-f955-4d16-8215-5b5d73ab5342",
        "cursor": {
          "ref": "fa5d49d8-9e0d-4a08-822e-77c9bad8a11c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "945a4f21-5ae8-43dc-a29e-cf7252a026f4"
        },
        "item": {
          "id": "8cad8f65-f955-4d16-8215-5b5d73ab5342",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "63be6050-8db0-40cd-8266-1a15f4fdde15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e643862-9a6f-4b2f-8533-39d7acfe9b3f",
        "cursor": {
          "ref": "2baa49ed-058e-4827-8a85-988b3948a0ee",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "38836eaf-ad8d-4124-8648-4d77c94b81b0"
        },
        "item": {
          "id": "5e643862-9a6f-4b2f-8533-39d7acfe9b3f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "907801d0-b4e0-4da3-804a-a394a484d8f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76795814-d906-446b-8895-04787dc80423",
        "cursor": {
          "ref": "b4892b93-19af-466f-9539-dcd10bf9487d",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "adcb3a3f-aa59-46be-bfd4-a4dbe4338653"
        },
        "item": {
          "id": "76795814-d906-446b-8895-04787dc80423",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f412644b-02e0-4f0a-a159-f8bceb3d2c34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8de65cbf-c65b-4c54-9e15-582d5107cd22",
        "cursor": {
          "ref": "731be948-6aee-41c6-8951-176988975459",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a34b6596-5d1b-406e-8efe-c31c295ee999"
        },
        "item": {
          "id": "8de65cbf-c65b-4c54-9e15-582d5107cd22",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9d61231f-09a4-4a03-b1e5-6ba084e9a91d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "e9ef4c15-8d91-4544-b83a-c792ffc30597",
        "cursor": {
          "ref": "f171b054-ecaa-4e2e-b887-1bc5a3701a27",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b42d4f19-828e-491e-92eb-62026e11044d"
        },
        "item": {
          "id": "e9ef4c15-8d91-4544-b83a-c792ffc30597",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "29d8856f-4b9f-40d3-9e23-feab70ebda4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f38c855e-3537-4fa8-8c14-5b9b8de9e1f1",
        "cursor": {
          "ref": "a8c42afc-5c2f-45e5-a4dc-07e0bcefeeef",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fd6e25cf-5a4f-4b29-a362-c1fd042f1139"
        },
        "item": {
          "id": "f38c855e-3537-4fa8-8c14-5b9b8de9e1f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1a185588-f720-4e7e-b630-169408fef8a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "17ca68b3-5ca0-4f70-9d20-c61e306188b5",
        "cursor": {
          "ref": "9265b49e-b4b5-4988-95b1-73b8f47fb849",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4575df6a-0bf2-436f-be63-2c82812d4e8d"
        },
        "item": {
          "id": "17ca68b3-5ca0-4f70-9d20-c61e306188b5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8a4cc467-e283-48a9-9222-550d447ece0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "88b8fdbf-8cdd-4c29-b843-a4e106efc414",
        "cursor": {
          "ref": "74004d8b-287c-466f-bd66-90130f28e68c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e6d11555-d75e-4082-9af1-9357d3669254"
        },
        "item": {
          "id": "88b8fdbf-8cdd-4c29-b843-a4e106efc414",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4736f93a-76dc-4e0b-97c2-3aac82765ac0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "eca26635-74e9-4bd3-a043-8c8f790a30a0",
        "cursor": {
          "ref": "80fe5215-18c0-4403-86a3-d39ed150ffa0",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "128273d0-b275-49f0-acad-aa5d26e479e1"
        },
        "item": {
          "id": "eca26635-74e9-4bd3-a043-8c8f790a30a0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "400836ed-81ec-47be-af5c-28e49a0f29a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "74b77ab8-fd26-4b0d-8154-b924185f7186",
        "cursor": {
          "ref": "d34bb0f2-348c-429c-9584-b2d177b90c8e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6b6cc4b6-0773-43a7-9251-1d77c66f7bea"
        },
        "item": {
          "id": "74b77ab8-fd26-4b0d-8154-b924185f7186",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "34175e4f-1bed-41e1-9993-abad27294692",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7396308-12ae-4a9e-a65b-141b67ebc93f",
        "cursor": {
          "ref": "d95556ac-3100-4c76-a4aa-d15dd3a1b183",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ffb81d7-15d1-4969-8a39-6f94eb817a15"
        },
        "item": {
          "id": "b7396308-12ae-4a9e-a65b-141b67ebc93f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "14045057-d8d0-4b0a-8edf-b75eaefdff0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41cabe5-d4af-44cc-9f44-aedb59804ef1",
        "cursor": {
          "ref": "075e1215-a45d-486c-85bc-1d647bac43cc",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "038a5e41-39e1-4aef-8cb8-a1b31e6d9be1"
        },
        "item": {
          "id": "d41cabe5-d4af-44cc-9f44-aedb59804ef1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c54cf8c6-8a7d-4677-b78a-edfdb97b6c3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc320b2-c1cf-48c9-97b3-a51304916c33",
        "cursor": {
          "ref": "d6ad8002-ee52-4a1a-b528-2bec78d3cb4b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "21c0ef89-b0a9-4b85-beb5-f615b32d70f5"
        },
        "item": {
          "id": "bbc320b2-c1cf-48c9-97b3-a51304916c33",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9f83bf30-7145-4d8d-807e-e2f666746651",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b76569c-25e3-46b5-b13b-c495b2e49659",
        "cursor": {
          "ref": "d2665792-191e-48b4-9542-8a4a9e02c143",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4eb5537-69d1-4107-b681-44e8de9dde69"
        },
        "item": {
          "id": "2b76569c-25e3-46b5-b13b-c495b2e49659",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "03d8b704-81d2-4141-8fff-2395df9432d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ea2393-35fb-4d9d-8721-2e024b3b5d77",
        "cursor": {
          "ref": "ff16b88d-e253-4b5f-a7ed-2616d8af9584",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cd75a631-e3c9-48a7-b4b7-64b5a0b2d49b"
        },
        "item": {
          "id": "15ea2393-35fb-4d9d-8721-2e024b3b5d77",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd0880b0-df78-4d66-9474-78490df10918",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ef1409-5c33-46e6-9785-edb5583fc061",
        "cursor": {
          "ref": "8cf1864e-8374-4177-ba96-ebdb64c9071e",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "02a75349-2e63-4516-8cda-5d0c493e6deb"
        },
        "item": {
          "id": "33ef1409-5c33-46e6-9785-edb5583fc061",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b1574fea-eee2-40dd-8203-fac447079363",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11695e43-94a3-4523-8170-e60ff117e64e",
        "cursor": {
          "ref": "e4d3cf62-5722-47be-a689-031ebcc84199",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "27c87621-09e2-46ce-957a-1d1f0003f490"
        },
        "item": {
          "id": "11695e43-94a3-4523-8170-e60ff117e64e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "750e7a69-4092-401e-894c-b00d473500b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d58bfe4-c696-44bc-a9ae-1d963713997e",
        "cursor": {
          "ref": "aa9de28a-56d6-4f14-a15c-520c23cfa4bb",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "77c6bad6-3acc-48a5-954a-7d4a7c1f4ce9"
        },
        "item": {
          "id": "9d58bfe4-c696-44bc-a9ae-1d963713997e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1a73c93d-e7a2-426b-ae0a-edb5b2cd9450",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deafbcec-6508-488d-a763-388a8d8492ef",
        "cursor": {
          "ref": "7a28c205-2a86-4e12-b09e-fbca90664279",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c6005309-4860-455b-a32f-01dc04bf90b7"
        },
        "item": {
          "id": "deafbcec-6508-488d-a763-388a8d8492ef",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9a7493cf-06c7-4c24-b37d-7c5e7cf16fe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bfaeb2-8f28-434f-9001-c7931396f585",
        "cursor": {
          "ref": "8b2c3931-b3a1-405d-9f6d-2d02fe29f0c6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "036e44db-021d-43a5-b712-0691d5a6c21c"
        },
        "item": {
          "id": "28bfaeb2-8f28-434f-9001-c7931396f585",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "59e423be-91dd-4636-b15e-e499d5a1b641",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de88094-e050-4891-b1ad-c9ff199a1ab7",
        "cursor": {
          "ref": "b72bca99-96dc-47f3-aab7-d4163608d915",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "54680af5-cdcd-4f57-a2a8-bbc0139ad9e9"
        },
        "item": {
          "id": "3de88094-e050-4891-b1ad-c9ff199a1ab7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f93edfd1-c267-4365-ab8a-68a266716c3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36ddcea-8825-4a7d-a283-83379ea95192",
        "cursor": {
          "ref": "5fb702da-18ef-43d8-b3be-3439e1f98517",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "862652b1-ca55-4aed-941e-28107cd15f81"
        },
        "item": {
          "id": "d36ddcea-8825-4a7d-a283-83379ea95192",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4403961f-0c7a-49d7-829f-00c542f2d1d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f7984c-a6df-4db8-832e-b946cb4db03f",
        "cursor": {
          "ref": "51542113-6e1f-46e0-9171-981fb5bc03e8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eed6c30b-5b00-47a1-b7a3-46f2faecf1c1"
        },
        "item": {
          "id": "92f7984c-a6df-4db8-832e-b946cb4db03f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "14a319f5-b9f3-4460-807d-2b095e54f945",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b615c71c-346b-419e-bc1e-5cba577e8b68",
        "cursor": {
          "ref": "0c1bc473-cdbb-4c9f-805e-6b6034a2912a",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7896991c-3250-4db1-aba4-1135220bbd68"
        },
        "item": {
          "id": "b615c71c-346b-419e-bc1e-5cba577e8b68",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "12f8ca5e-1c68-4d09-bbff-ec7c5cae6452",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab521869-969c-4c39-a48a-86e7d7fce83c",
        "cursor": {
          "ref": "cd3c2f2e-2296-4b92-9d87-7f98fb691f24",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7767b101-b6af-4e5c-be4f-aa8e97598a92"
        },
        "item": {
          "id": "ab521869-969c-4c39-a48a-86e7d7fce83c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "388558e6-23ff-4e18-851c-f09ae2cbaf5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad34188-50fc-40d2-ba38-7212173af14c",
        "cursor": {
          "ref": "4291cab5-128c-470a-8940-3a28cff21943",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5f434efa-5874-4535-b9c2-bacd916cff8c"
        },
        "item": {
          "id": "2ad34188-50fc-40d2-ba38-7212173af14c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9c81a2f0-c338-4df2-940e-f0e0bd677423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdf79ca-e4e3-4ee6-9ca6-8557297d041f",
        "cursor": {
          "ref": "8ef029e5-ca18-49ce-9e9d-2c185dd51036",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1864de72-a80b-4aa9-9086-580a2300faa9"
        },
        "item": {
          "id": "3fdf79ca-e4e3-4ee6-9ca6-8557297d041f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "98852001-57b5-4b58-8dd2-aaf902dd14b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c938b909-2b3d-481d-b458-b03db413984b",
        "cursor": {
          "ref": "7c933b0d-885c-49e1-b502-1bc544346609",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c06f4852-677e-4141-aea2-d1a87123d57d"
        },
        "item": {
          "id": "c938b909-2b3d-481d-b458-b03db413984b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7111512b-4a22-4716-8e49-852a75a7c870",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c52714-5a53-48c4-9d34-3003a8cfbb64",
        "cursor": {
          "ref": "3b524989-4e71-4b09-95d7-c40fc7765be4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "51f3e180-e761-4e6d-8a8b-14ec0651c714"
        },
        "item": {
          "id": "64c52714-5a53-48c4-9d34-3003a8cfbb64",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8ac85d7f-fb6e-4679-9158-967ad21392bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a09257a-c47a-4188-83a4-149ef88a88a0",
        "cursor": {
          "ref": "48c1dd4b-1700-42cc-99eb-3e55b5479e14",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9eb46d5b-27f4-416c-a6fe-2bce9cc2ad7f"
        },
        "item": {
          "id": "3a09257a-c47a-4188-83a4-149ef88a88a0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b44269aa-3e50-4087-8390-c26e8c43e3ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a713674-8e7c-4abe-9829-058a8f075647",
        "cursor": {
          "ref": "4fe6e778-de75-4aaf-8552-fbf28a9f23be",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "308622e3-4068-4dd9-afa9-8703018d68dc"
        },
        "item": {
          "id": "7a713674-8e7c-4abe-9829-058a8f075647",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "781fd11e-0ef4-4f4c-a9ac-12b3efe6d54d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e3b061-5744-4b3e-baee-5669aadbf328",
        "cursor": {
          "ref": "87bfdf32-a9b5-47b6-8913-6d4a1022dfd2",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8fd81b94-38de-4f32-8bc6-5964d8071c6d"
        },
        "item": {
          "id": "c2e3b061-5744-4b3e-baee-5669aadbf328",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0f71668b-673c-48da-a151-552443ebaec1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19612921-d02c-4676-ba7a-3ac948be5ea0",
        "cursor": {
          "ref": "232adcd6-944c-4367-b004-91081f5409a3",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e333bbf2-4bfe-4fd6-92c5-ab7e99649422"
        },
        "item": {
          "id": "19612921-d02c-4676-ba7a-3ac948be5ea0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "44d8add0-b2f6-4346-9eea-61e850de9782",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b300225a-7daa-484c-8759-de085940b2aa",
        "cursor": {
          "ref": "b8962433-11fb-43a4-9729-b0e6e7f0550d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "83180919-b729-423c-b7c2-4ab50b6a1a61"
        },
        "item": {
          "id": "b300225a-7daa-484c-8759-de085940b2aa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "48cf0fb5-dec8-4f28-8a94-017e43e595de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431d9163-9cef-46e3-afce-cbc97d17b4ed",
        "cursor": {
          "ref": "f3712562-9efd-47ca-b08e-346371f586bf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c3596c72-8078-4132-a1b1-703c7a13cd56"
        },
        "item": {
          "id": "431d9163-9cef-46e3-afce-cbc97d17b4ed",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "04cd118f-3c95-4f86-aced-71b95e2bca93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdacf259-b20c-4214-bc08-b6dc6c26be98",
        "cursor": {
          "ref": "a1543ce4-f459-43a6-97ca-aee42d21f332",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7b537d9e-de57-4dfd-9d3e-86ef092dca39"
        },
        "item": {
          "id": "bdacf259-b20c-4214-bc08-b6dc6c26be98",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d3ed746-a004-496b-a85c-05c045c83ea1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bc93eb-3e18-4fc0-9166-effcc6122b76",
        "cursor": {
          "ref": "a60ae2d3-3ad5-47ad-863a-c1ab8c347b1a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b69b40a4-ae70-4bbd-9dc2-736ada961378"
        },
        "item": {
          "id": "47bc93eb-3e18-4fc0-9166-effcc6122b76",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "06b1558f-5e66-46cc-b465-b7fd68f0379b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa04055d-22f4-40cb-8b8e-e335af95a3dd",
        "cursor": {
          "ref": "c8efe426-fff9-4497-b8bc-ce37f29b97e4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "de9b535d-f27b-4953-a558-12b41f3c5074"
        },
        "item": {
          "id": "aa04055d-22f4-40cb-8b8e-e335af95a3dd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5adaa830-e602-4457-800d-52e2032c522c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2e07ca-6231-42a4-adb1-e212e4eee081",
        "cursor": {
          "ref": "ed6d1451-ae1e-4dc9-81a8-1f0cfda2873d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "dd1f9864-2769-4aea-8d6c-d0ceaafac0aa"
        },
        "item": {
          "id": "6d2e07ca-6231-42a4-adb1-e212e4eee081",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b09bf758-b564-4328-876b-ced03be5c288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc39534-ee71-478b-a27a-2fd2d90bf9ab",
        "cursor": {
          "ref": "be6b9001-caca-45e5-b544-c8e01aaaa6d5",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b96ab384-58d4-428d-8c3c-382efbb0d632"
        },
        "item": {
          "id": "ffc39534-ee71-478b-a27a-2fd2d90bf9ab",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6e050add-e4db-4699-9012-08a26e234f09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842d3dc3-84e1-42f8-b285-e0c7ece3bd10",
        "cursor": {
          "ref": "1639baef-d040-4588-8be4-08a328085a78",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "61e496d9-c6ac-489d-93d1-205a4722da42"
        },
        "item": {
          "id": "842d3dc3-84e1-42f8-b285-e0c7ece3bd10",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "56a233ec-536f-4ae0-97aa-00d50ffab84c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a8ed45-4bdb-4dee-a03d-a48c64d4cb33",
        "cursor": {
          "ref": "c960813f-ca69-44f6-9f74-3a3c3f263628",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1cb56a5-1b9e-4dac-910c-03de317011a8"
        },
        "item": {
          "id": "b2a8ed45-4bdb-4dee-a03d-a48c64d4cb33",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5037feb4-2120-48d0-878a-caa7072e0444",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda1d419-70bc-4016-9220-c14892efe5af",
        "cursor": {
          "ref": "1bb495d9-a31a-4d58-a992-a87cd2cdf10d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5426ee8e-19d2-4099-9f60-3fc14ba73196"
        },
        "item": {
          "id": "fda1d419-70bc-4016-9220-c14892efe5af",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "dad41809-3f49-4c6c-abec-65ec6b236de0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f060249b-8438-4f0a-bd50-9b39d7f82a89",
        "cursor": {
          "ref": "7d7a7d70-5fb2-4ced-b2d8-b4f70233cac8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1d369c7b-c7ac-4859-a0e7-22c78ae2206c"
        },
        "item": {
          "id": "f060249b-8438-4f0a-bd50-9b39d7f82a89",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7e0b5d90-498e-4c88-ab19-ecdffd78de95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b34cdd1-a72c-4ec0-91e5-781e59389046",
        "cursor": {
          "ref": "0016c931-0995-4a75-90ff-c4d0384ac28e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "65bf8d0d-17c6-4b5a-85fd-ca2f2ed08b39"
        },
        "item": {
          "id": "1b34cdd1-a72c-4ec0-91e5-781e59389046",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "785854b9-1e4a-4228-8fad-3a02908a4f12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101d9d1a-6466-4276-b8a0-9920233a37e0",
        "cursor": {
          "ref": "aa2e13d5-1a46-4e2f-8cdd-859434ce31ae",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a4615266-7efc-4f45-81a5-f283843cc9f8"
        },
        "item": {
          "id": "101d9d1a-6466-4276-b8a0-9920233a37e0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ee4b0a79-edec-4157-9645-216754919946",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d8eb04-220d-495a-b05b-3a9c36f18cfe",
        "cursor": {
          "ref": "5d7f4567-d897-4e1a-813e-6cfe0d21f158",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4059c8ea-594c-4d2a-83a7-2b472b6f16dc"
        },
        "item": {
          "id": "b3d8eb04-220d-495a-b05b-3a9c36f18cfe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c732696d-caf6-4d38-9bf6-050069476777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22870a81-d02e-479e-a175-03de759c6647",
        "cursor": {
          "ref": "ed84abd8-51f7-492c-a3e3-a366b37fc238",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1333f83d-c85f-43c0-a2f2-2834dff54a24"
        },
        "item": {
          "id": "22870a81-d02e-479e-a175-03de759c6647",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f3fddb58-1ba1-4502-98fe-dc08e5795775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e530aa-7545-43b0-8ab9-384d4c87d775",
        "cursor": {
          "ref": "04d9e266-cdb0-4c0d-b02e-d09bffab9bcb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b8d3704c-77ae-404a-a787-6e7d2589a2b7"
        },
        "item": {
          "id": "c5e530aa-7545-43b0-8ab9-384d4c87d775",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ba4a82e1-dac6-4a61-ab3b-ef9faf08e057",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f44470-d7fb-47e4-a038-241b66b03273",
        "cursor": {
          "ref": "fd94ffcd-13ef-46a1-815d-721f0d482f5f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "41334ff3-0320-4fd3-b4a5-d72ae86749b6"
        },
        "item": {
          "id": "f9f44470-d7fb-47e4-a038-241b66b03273",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b3e38c9d-b521-436f-840c-ffd368ab2756",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738ea76c-b514-4ebc-abf3-ecef2d9ac01b",
        "cursor": {
          "ref": "49ce63a7-c052-4244-a0d1-642f956193bd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6190215-5976-452f-9bbc-845aea864fe7"
        },
        "item": {
          "id": "738ea76c-b514-4ebc-abf3-ecef2d9ac01b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d8462cac-cb54-4187-a7e7-680539b987b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35db45cc-b0f0-4b29-99fc-b781d82a6147",
        "cursor": {
          "ref": "89a8e58b-8278-47cf-a464-dc548afbddbd",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "15fa895a-5c53-4580-a562-898774f4361b"
        },
        "item": {
          "id": "35db45cc-b0f0-4b29-99fc-b781d82a6147",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e1e4745d-8971-4a82-be5d-e0ea795c423d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e234ae-08ed-4eb9-8d2f-40c3c8a9954d",
        "cursor": {
          "ref": "8b14c7fd-5f71-4cc3-9241-3c3d94d4672e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3bc877d4-31cc-484f-b8c5-6dfd87a1b078"
        },
        "item": {
          "id": "53e234ae-08ed-4eb9-8d2f-40c3c8a9954d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0a1b7428-f216-415f-9801-851bf1e73590",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c184ebe5-7d20-4c3c-ba8c-9fbbc511764d",
        "cursor": {
          "ref": "353db778-968d-4275-b33a-810e20778311",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fc0ab221-66a5-4641-a9fb-acaffc8b0c4d"
        },
        "item": {
          "id": "c184ebe5-7d20-4c3c-ba8c-9fbbc511764d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d6140a0-d9a1-4e68-9529-a720b205503d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b25c83-2e50-43b6-a919-dd985ceabd0e",
        "cursor": {
          "ref": "dec5ef16-0917-4247-9a8d-19e8590017e3",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "43229dce-62df-4b5b-8e01-7fe018d4001e"
        },
        "item": {
          "id": "02b25c83-2e50-43b6-a919-dd985ceabd0e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d5536097-91bb-4041-b8ea-3e61d6a5ecc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315f92b3-c13e-4554-8191-1d68319c55e8",
        "cursor": {
          "ref": "58aa86e9-dd53-4a2f-aa62-f3600b0caddd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "81732419-2681-4d0f-89a2-fac783868cb1"
        },
        "item": {
          "id": "315f92b3-c13e-4554-8191-1d68319c55e8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6b548d61-a0c8-4671-805f-1ec1a0488581",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e02db9-0ebb-4923-a60f-8484d992a17e",
        "cursor": {
          "ref": "5ce10d16-c222-49f1-a5bb-53fed41aedac",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c0e948ab-f090-471b-bc17-cdeb05da6e5e"
        },
        "item": {
          "id": "d7e02db9-0ebb-4923-a60f-8484d992a17e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c7b6e44a-458d-457d-b321-41060ecccd5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ff0139-c918-4837-ab0f-c769d8dc8f4a",
        "cursor": {
          "ref": "fcc82fb7-c0eb-4608-a758-377ba7ff1f7d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9e2b2f7e-dd24-435d-98c7-94613c63609d"
        },
        "item": {
          "id": "01ff0139-c918-4837-ab0f-c769d8dc8f4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "09723c5e-a6f0-41c2-96e2-4b9b72a84a52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1104368-e5c9-432e-bc9c-9332b46088a1",
        "cursor": {
          "ref": "8bd5dc49-916d-4c82-960d-b709b7bd383b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9dd3a63c-3886-4c53-a979-dd18a3291cbd"
        },
        "item": {
          "id": "a1104368-e5c9-432e-bc9c-9332b46088a1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a5ca7975-a953-4ce7-8b23-cb56355ff5d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84a66ca-c01e-46e3-a82b-aa77082ae164",
        "cursor": {
          "ref": "cd226aab-ffc3-4a15-8fa7-2df75022c56b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a9714e8e-2403-4681-a8bb-89a1b0569394"
        },
        "item": {
          "id": "c84a66ca-c01e-46e3-a82b-aa77082ae164",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c1f9af31-b563-4a90-b85b-11405d436123",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6d7fd0-8d3d-4fe4-aec5-aa24fafa31b5",
        "cursor": {
          "ref": "949064cf-d754-4e34-a5ef-905c99ac419b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ba376bfb-b089-417f-99be-ddf92cb8f191"
        },
        "item": {
          "id": "ed6d7fd0-8d3d-4fe4-aec5-aa24fafa31b5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "03917cd7-ab91-453a-a1aa-80e9bbc4b771",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0cd332-25d7-49c2-85bb-230fb889a474",
        "cursor": {
          "ref": "db1fb08c-6d5d-4e2e-9879-b3883f2b12b3",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "00290771-c675-4365-a40c-56927bc937b3"
        },
        "item": {
          "id": "de0cd332-25d7-49c2-85bb-230fb889a474",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "32f4fb64-d0e3-428b-93e7-2eb62aec8f39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2d55a3-7f2f-478b-b333-9d7d973de129",
        "cursor": {
          "ref": "daed5633-dbc5-432c-bbfc-3d1010fc2fa3",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3c1537e8-78eb-4b33-a021-6a6a1d5d4a6d"
        },
        "item": {
          "id": "fc2d55a3-7f2f-478b-b333-9d7d973de129",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e4c1da63-38fc-4325-a503-bb269d6c79e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc47d7d-cbfd-4d60-ac27-fad7a40d8456",
        "cursor": {
          "ref": "55d403a3-7135-4ea8-b1b6-c48bbd9b2ea4",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "47c36d99-8f48-498f-a41c-667ccfcd26f8"
        },
        "item": {
          "id": "abc47d7d-cbfd-4d60-ac27-fad7a40d8456",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "366d662d-36ba-4345-9046-8d06041fb616",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fccb119-26a2-420c-8716-d39311822c3c",
        "cursor": {
          "ref": "01ffed9b-78fc-4d1c-94e4-f5f0693d12f9",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "77622c8b-469e-4055-8de5-86639b73e5a3"
        },
        "item": {
          "id": "1fccb119-26a2-420c-8716-d39311822c3c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1119f589-805c-4ee0-932f-d66e915c5bae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc30263d-8e33-4f9f-9235-c057d1f73b61",
        "cursor": {
          "ref": "32e476c4-b357-494b-b7c2-929647e48ba8",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3add9038-f158-4487-83f1-281fd20e9b6f"
        },
        "item": {
          "id": "cc30263d-8e33-4f9f-9235-c057d1f73b61",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1fedcfbb-37d2-4406-b672-6b75765c38a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fa8c02-fe53-4a67-952d-5fd2cf587dac",
        "cursor": {
          "ref": "67742437-b9f0-46ec-a220-4da80b6b5cc9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dab19d47-01b9-4205-9041-59d06ba3a8d8"
        },
        "item": {
          "id": "86fa8c02-fe53-4a67-952d-5fd2cf587dac",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "52373da4-bbcc-4d7c-8c5a-e634e61db391",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc2de6b-212c-4e93-99e5-b13fc9ae5dde",
        "cursor": {
          "ref": "7f99b0e2-f1ce-483a-b6b5-9beaf6b8ca20",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "42825dd1-03f6-474e-b3eb-593225090d53"
        },
        "item": {
          "id": "ffc2de6b-212c-4e93-99e5-b13fc9ae5dde",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "11f843a5-76ed-41b1-83ef-c71706707554",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c524a8c1-9fad-44b2-9ace-e84babda6c95",
        "cursor": {
          "ref": "461bc851-e2c8-4b8c-8e6f-b1628657277e",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "20adedfb-f7e4-46c8-8b4d-968ccf6f99dd"
        },
        "item": {
          "id": "c524a8c1-9fad-44b2-9ace-e84babda6c95",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "561c8957-5aa7-490e-8d14-23d4160db468",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7067858-341e-4024-b73b-991a38e484e9",
        "cursor": {
          "ref": "9bea4750-1bbc-4206-b60a-4eeddd66becb",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "618a6a17-8cf4-4017-9d5c-0e9d4777976a"
        },
        "item": {
          "id": "b7067858-341e-4024-b73b-991a38e484e9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "48c0a266-9fe0-49a0-b0fd-6b69bb7e0120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881b5da4-fdb9-4f27-8dab-a4c5b639a292",
        "cursor": {
          "ref": "f5a19e81-a857-4cca-a76c-27ec9bc38d76",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "13ec8793-ddb7-40a9-b8b4-67e2224afe04"
        },
        "item": {
          "id": "881b5da4-fdb9-4f27-8dab-a4c5b639a292",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b258ce2b-2cbe-40c2-8adf-1d6aca94bda3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88962796-aceb-481d-862f-689835283e68",
        "cursor": {
          "ref": "de4d9e25-577d-41ed-919f-24971c90d61a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4d51e641-7ae7-47e0-a3b9-e2da69ede836"
        },
        "item": {
          "id": "88962796-aceb-481d-862f-689835283e68",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6804443d-ddf1-41fb-9883-c2add9a80717",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfad486d-a27e-4d80-9a87-fb63824b4a24",
        "cursor": {
          "ref": "b563a217-9568-4faf-9424-8a9809e2a82f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b6977645-d4ea-4517-b6b0-a76faa1814dc"
        },
        "item": {
          "id": "bfad486d-a27e-4d80-9a87-fb63824b4a24",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b94c2e61-60d0-49f2-b543-af4bcb9b0211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cee44a4-f833-44e9-a673-053836766f38",
        "cursor": {
          "ref": "b2b3feb1-f4b7-49e3-85d4-ca52ee95d526",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "57b6841a-c8f7-42ed-bfa7-17b8c748819f"
        },
        "item": {
          "id": "9cee44a4-f833-44e9-a673-053836766f38",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "69a12700-1be7-4525-920a-e5518a4c9aa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97700248-ae0d-458d-84f6-d941071f5144",
        "cursor": {
          "ref": "08dd6884-f7e4-4c08-96a5-a7cca7811d72",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "810f919e-be72-478c-8c8a-03a03f20820b"
        },
        "item": {
          "id": "97700248-ae0d-458d-84f6-d941071f5144",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a2a4e87e-e5ea-433c-9e9e-3ae7073294e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7d786f-fef1-4364-a1d2-437666beffd8",
        "cursor": {
          "ref": "31c8bb7f-eccd-4f05-a81e-c6cd0ad590d6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "28fc51f7-d6f3-4f7f-924c-3b1a95ace79d"
        },
        "item": {
          "id": "ec7d786f-fef1-4364-a1d2-437666beffd8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b14a15e0-89c4-4bdc-828a-fbfcaa753a22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fd44a0-57d7-43c5-8812-1683ba565874",
        "cursor": {
          "ref": "bb00cd66-5e1e-4cc9-b2df-83319baf62b2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "33ad96c3-00df-4664-9695-3dc06e3c67bb"
        },
        "item": {
          "id": "19fd44a0-57d7-43c5-8812-1683ba565874",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a59abf75-8e6f-49bf-9e64-1281001db145",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf2d7c7-7d8a-4af3-9086-967a72fd7094",
        "cursor": {
          "ref": "1257a2af-c56c-40a5-9559-d0eeab26eed2",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d8d61d60-c554-44e0-9fc5-60a49a1797c8"
        },
        "item": {
          "id": "bdf2d7c7-7d8a-4af3-9086-967a72fd7094",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "503ad357-78e3-43fd-9c21-a19f97868920",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d8e0ea-ac6d-477d-a3a5-9fdfb4a60e20",
        "cursor": {
          "ref": "6058643e-fe7e-48bc-8210-e25c26238e81",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fb86f357-f46d-457b-bf27-4598a53a17d4"
        },
        "item": {
          "id": "e7d8e0ea-ac6d-477d-a3a5-9fdfb4a60e20",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5b8e7dc7-9131-4006-b48f-435002f9580e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db9c685-34af-46de-a377-f4ea0313efe3",
        "cursor": {
          "ref": "ca0c3e42-4d75-4903-8b22-e05c92c1d0e7",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "edc38c8c-d603-413d-ba12-46f2a29f030a"
        },
        "item": {
          "id": "0db9c685-34af-46de-a377-f4ea0313efe3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f08850b0-7619-4525-b4ec-9982bad2ec1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738730d2-7aa3-4761-a2a3-b472aa9380e0",
        "cursor": {
          "ref": "0d494b1d-5a7c-4336-976c-20acafe4e316",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "33f93c02-9e21-48cc-b281-6cac3365da2f"
        },
        "item": {
          "id": "738730d2-7aa3-4761-a2a3-b472aa9380e0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3de217a7-dfcf-4b82-b61f-7593654178f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190750db-fdcf-4f0b-9a55-c008f14f85a7",
        "cursor": {
          "ref": "a6c72b9c-607c-4778-8f30-81deddcf2591",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f6693d6f-d82e-4965-82ca-b5a7749a08e1"
        },
        "item": {
          "id": "190750db-fdcf-4f0b-9a55-c008f14f85a7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8897aef1-b447-4ca6-b972-a3ebcbe64999",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1037885b-0aae-4d60-8c92-c8ceaccf9836",
        "cursor": {
          "ref": "e5e389ac-2bd1-4dd9-bd67-26b1fe903e88",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "27d52fe0-b8ab-435a-bb9b-329b42de538c"
        },
        "item": {
          "id": "1037885b-0aae-4d60-8c92-c8ceaccf9836",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "80d8bcf8-f9dd-4401-8dc6-7069062e8211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db13a11-3e74-4470-945f-2a72d5425854",
        "cursor": {
          "ref": "f885dd79-1fd6-4b63-882b-e59aed3892a9",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ff0faa26-5d5a-4df2-ade5-7a9ba53a630f"
        },
        "item": {
          "id": "9db13a11-3e74-4470-945f-2a72d5425854",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fd2946af-5f09-4e03-9b56-76a6c7d355bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3130c1e4-4ab6-48f9-9875-63969cedff6f",
        "cursor": {
          "ref": "835774c0-eef7-42fd-86e4-adbdbdad51ce",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d4eb159c-e99f-439b-8e57-b60f292e1ea9"
        },
        "item": {
          "id": "3130c1e4-4ab6-48f9-9875-63969cedff6f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a10a061f-1a10-4eab-9f79-dcdb8eb5ae31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81179a2-faf4-4c17-a797-d0ccc29db340",
        "cursor": {
          "ref": "4861dbb7-faf2-4792-b33e-dc51386078e7",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8c4c33fb-9516-425d-9b40-74c93a2a7bd7"
        },
        "item": {
          "id": "f81179a2-faf4-4c17-a797-d0ccc29db340",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "948bd4ed-8533-42aa-a865-c3411ac55d5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9253bb-db88-4bba-a498-1fb3bbb95311",
        "cursor": {
          "ref": "99415250-02f9-43a7-af6b-dcbb41476df0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ef68eacb-600b-4a7e-87ff-512eb6abb6d0"
        },
        "item": {
          "id": "eb9253bb-db88-4bba-a498-1fb3bbb95311",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "67384037-4b10-4c21-9567-456c285db82e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5005ee8e-cc1b-429b-b1f7-05edea3f7064",
        "cursor": {
          "ref": "21b6255d-04e2-4f2b-b8de-c7c401a94bd8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a44d474b-3721-4f29-bf46-5b70f5851fea"
        },
        "item": {
          "id": "5005ee8e-cc1b-429b-b1f7-05edea3f7064",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "550837df-1f19-4372-8716-2ba7c63c5bbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd22d01-3d7d-494d-a8d7-55a74f57bb4c",
        "cursor": {
          "ref": "88fe8e58-f076-4e09-82ac-750a2e5237fb",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a1de7ad0-a82d-45ee-ae5d-3fc2e08fc684"
        },
        "item": {
          "id": "bcd22d01-3d7d-494d-a8d7-55a74f57bb4c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "552e5c40-9b12-40fe-96f1-a0da61a25a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1c3d0b-91b1-4756-982a-d7d5009f01cb",
        "cursor": {
          "ref": "9d2407ad-ad65-45aa-9fc0-c44d86b51cc0",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f2477199-f4cc-470a-a9de-dd0ab1033b3b"
        },
        "item": {
          "id": "ee1c3d0b-91b1-4756-982a-d7d5009f01cb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "23f74a6d-7db8-4660-8e32-bc8d7856c3b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9be29e5-5ef2-4ac7-bd18-97de21dc415b",
        "cursor": {
          "ref": "44a0bc55-cb97-43ca-a9a5-bb77401c84ee",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8c7c6d39-5458-4d8d-bfbc-b04830d67d9b"
        },
        "item": {
          "id": "a9be29e5-5ef2-4ac7-bd18-97de21dc415b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3fc58da6-2bdd-4227-8dc9-e14d69b629c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed4fd08-b2a5-4a44-bb57-b9c6e4f79373",
        "cursor": {
          "ref": "c80894ad-ecd1-41a6-b2d4-21442a433b1e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d8fc05eb-402f-49ea-b03d-8bc19d7e6a90"
        },
        "item": {
          "id": "5ed4fd08-b2a5-4a44-bb57-b9c6e4f79373",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f44f6a2d-9198-4ec9-bb0f-91c1f30a0f36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c79578-adf9-460e-964b-1921e5dcf341",
        "cursor": {
          "ref": "376aae9a-c9aa-4dc6-a487-bb156160cb62",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "06b039d9-eee0-440f-89ac-72627bdaf9aa"
        },
        "item": {
          "id": "09c79578-adf9-460e-964b-1921e5dcf341",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3476cabe-43b2-4d47-ac2e-123a20b79167",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cda1c2-f6fa-4d60-bab8-1e7eeb6ecd5e",
        "cursor": {
          "ref": "5841e7da-0046-49d6-8cd1-889dd5a7c43f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "edb71d6c-5124-436d-b6ba-a92153a94d35"
        },
        "item": {
          "id": "39cda1c2-f6fa-4d60-bab8-1e7eeb6ecd5e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "48ad82ff-80b2-40f1-ba72-55b8b1dfe5fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6d78e2-cba7-49c3-b777-914a2efcb546",
        "cursor": {
          "ref": "e0bade14-8406-4854-b8a2-2c6a8274a728",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "95674684-eb0d-43b3-a577-acc371fbc82d"
        },
        "item": {
          "id": "0e6d78e2-cba7-49c3-b777-914a2efcb546",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d35f7037-cdf5-472a-a88f-b6e8fa61229f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba8bf07-22b2-48f6-a636-577a000ba4aa",
        "cursor": {
          "ref": "624c8728-6c81-4308-8480-df8a71c87f49",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a422d0b1-20f1-4856-8d2e-02f02d70aa89"
        },
        "item": {
          "id": "aba8bf07-22b2-48f6-a636-577a000ba4aa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "30f0aabf-d478-44d6-83ff-dcac4b3f4eb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935a544a-7179-4982-9f84-238c2b3fecd7",
        "cursor": {
          "ref": "c152aeb8-3298-4e94-b754-2f40237fa969",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7eeccb73-fe44-4cc1-9ef4-34798d5dc025"
        },
        "item": {
          "id": "935a544a-7179-4982-9f84-238c2b3fecd7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "92ca1f5c-7102-4afb-8be9-28db318a3a42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4882ddd2-74ea-4d7b-935f-07ac15fc99e3",
        "cursor": {
          "ref": "3c79a8b9-0368-4ee7-aafe-7bb882c542b9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d2ac924e-dd51-42f1-af9b-e3a4a667646e"
        },
        "item": {
          "id": "4882ddd2-74ea-4d7b-935f-07ac15fc99e3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5ccae747-4143-4cfb-8283-e1f252bb10bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9461e6f-129f-4ce4-89ad-fafae34c9571",
        "cursor": {
          "ref": "590decf4-d648-4616-b6b9-7d7fefe287cd",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f64989d4-703d-4c3b-a987-0db985d5a0f6"
        },
        "item": {
          "id": "d9461e6f-129f-4ce4-89ad-fafae34c9571",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "134c991c-08ce-4dfb-a86a-04632c0a8b1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaca8ef-dcc3-4d54-8742-b57d6bdd9da9",
        "cursor": {
          "ref": "58ee1809-7052-4fb4-bbf5-e433a88e9e8c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "614ea28b-ae21-4750-a66c-cac33298c350"
        },
        "item": {
          "id": "fdaca8ef-dcc3-4d54-8742-b57d6bdd9da9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1c887b86-bf73-4051-9731-8786f3c67657",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abaaff1-c09a-46e2-bd8a-49553e6ef4f8",
        "cursor": {
          "ref": "6057edac-9d0c-470d-8bd0-2270560c0432",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "63cd6934-5f11-4ce0-b1c4-09b48140105d"
        },
        "item": {
          "id": "2abaaff1-c09a-46e2-bd8a-49553e6ef4f8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4a743adf-319a-452c-a3fc-3fa5f7f9aae8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806dc5a3-8718-4067-a241-4a85ec34f3df",
        "cursor": {
          "ref": "9e1c319c-9aab-4353-8c0a-ffd4f9aafec4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9fde0852-0d1b-45af-a7f1-8fc365b50ef6"
        },
        "item": {
          "id": "806dc5a3-8718-4067-a241-4a85ec34f3df",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fed89b9d-4e88-4d8a-a917-5194d1d1ac3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96b00ea-1cdf-438e-9dfc-76bf4d8ff203",
        "cursor": {
          "ref": "d2f0217b-4a3e-4843-92fc-fa5d809bc754",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fb5a817f-e1fa-41de-b1e3-b9139fc67a04"
        },
        "item": {
          "id": "c96b00ea-1cdf-438e-9dfc-76bf4d8ff203",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5668ce9e-32f0-4e3f-a4dc-73fda785ecc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c535f9e1-9756-4b40-ae29-ae7620a569d3",
        "cursor": {
          "ref": "4759460e-cea8-494b-a692-1b090f4ee071",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "53379de8-2f38-4a7d-8be0-db9952b207f9"
        },
        "item": {
          "id": "c535f9e1-9756-4b40-ae29-ae7620a569d3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d4a058b8-9162-4b76-8576-cf73f1a78652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 235,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311e65cd-4a5a-4a1a-be9e-ad23ed0876d3",
        "cursor": {
          "ref": "b630b204-bfd6-4341-b017-29500bc93c60",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0e718a24-bf5c-4883-a718-8d9250a2c829"
        },
        "item": {
          "id": "311e65cd-4a5a-4a1a-be9e-ad23ed0876d3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "124249c2-2e8a-4ea1-b773-297c76a2d856",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8303d5e0-d8c7-455a-9d3c-301b227a7fc5",
        "cursor": {
          "ref": "cc8c3d99-c4b4-4300-a964-81a7c110e712",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "014c536d-d328-45d6-b48e-aeb5e91d2eca"
        },
        "item": {
          "id": "8303d5e0-d8c7-455a-9d3c-301b227a7fc5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "924789b9-3498-452b-ba5f-d7095cb8d221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1879a18-49c2-4a2c-ba66-50f1b8302e32",
        "cursor": {
          "ref": "21f9fd5c-ea9f-4919-b986-0b9262c6ed5b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "70c98b05-faea-4b91-81ee-2beb9faa67cb"
        },
        "item": {
          "id": "a1879a18-49c2-4a2c-ba66-50f1b8302e32",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4a82499d-4312-4c62-be3f-65803be831d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fb443b-9cb7-41f2-90ca-69a9b7e961f0",
        "cursor": {
          "ref": "fe2a6728-c48f-47a7-b059-bab4df5078ad",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3ca49435-0bc7-4468-b7e5-4150ea513c68"
        },
        "item": {
          "id": "53fb443b-9cb7-41f2-90ca-69a9b7e961f0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fe30dbff-6a0b-42b1-9aea-fd04d10a874e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2088248d-8339-4bbe-a29c-cd52525c8eb9",
        "cursor": {
          "ref": "512641c0-f55b-4e17-ae22-c1dd45a02ae4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "87000912-3399-459f-8566-15aaf91625e6"
        },
        "item": {
          "id": "2088248d-8339-4bbe-a29c-cd52525c8eb9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f9879e62-a716-4ea4-8b39-f3449c3e045e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c7d9bb-7649-4e1e-a349-aec8a226d4a2",
        "cursor": {
          "ref": "1311b208-6c01-49b5-9b2f-4e705920b8ab",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "674d4407-43c8-4e26-9af0-6e3fd221052c"
        },
        "item": {
          "id": "d7c7d9bb-7649-4e1e-a349-aec8a226d4a2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ac086c21-d2f1-43db-8989-3e79934ac430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f7f8ba-b6a4-4ffa-95ae-157aaa4bdf1c",
        "cursor": {
          "ref": "75d01e80-1d08-4ee8-b08e-fb47c8e6e33e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "559c00df-1cdf-402b-a670-f7a3467bf9d9"
        },
        "item": {
          "id": "34f7f8ba-b6a4-4ffa-95ae-157aaa4bdf1c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e69f219f-aadc-4a9e-be83-8ec26062e1a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7294ddff-c123-4742-9266-3b5e28fcfab8",
        "cursor": {
          "ref": "9123a271-983d-43d5-9ccc-b88016fef752",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "811c85f3-baac-4c5d-9f1d-337c19ea9e59"
        },
        "item": {
          "id": "7294ddff-c123-4742-9266-3b5e28fcfab8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "55c21913-dfa9-4619-af4a-a136afb49cfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0196fb-58e7-4dd5-80a2-5327cd34d20a",
        "cursor": {
          "ref": "a0a36cfb-25c8-4c39-9555-d081986b4918",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aa79913e-454b-451f-b0d2-2b3d30df1441"
        },
        "item": {
          "id": "2a0196fb-58e7-4dd5-80a2-5327cd34d20a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "84f3670e-3e1b-4889-88cd-846db25913bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b7395e-e213-4875-9e00-4b665ca5f6d4",
        "cursor": {
          "ref": "30a099b6-452b-415b-a3dd-432bae934994",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d9173429-54e1-42e4-98c9-4102635d1413"
        },
        "item": {
          "id": "81b7395e-e213-4875-9e00-4b665ca5f6d4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "17b10252-b18d-495e-b98f-aba392ace350",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3994a92-0a63-427c-9787-c3e368932de6",
        "cursor": {
          "ref": "c9cd2f13-2598-49e2-8989-d7ec2cdc55cd",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "81629e7e-096d-4788-a6c2-6381152cc1d3"
        },
        "item": {
          "id": "d3994a92-0a63-427c-9787-c3e368932de6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5aec9e88-153b-4766-9712-1b661c26c69a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477303b9-3dc6-4505-be99-55ed1ddca31d",
        "cursor": {
          "ref": "bad41192-011d-4f51-818a-d9d45dbd6c6e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6c7f6f6e-3847-4dfd-b52e-5ddc7078a5b9"
        },
        "item": {
          "id": "477303b9-3dc6-4505-be99-55ed1ddca31d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6fd36a97-58f9-4cde-b6e8-bc2acc010593",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a1e533-ff13-48be-b087-7e17cf36c588",
        "cursor": {
          "ref": "7a1b49c6-8852-43e4-a194-b29ac88fc774",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ae0708fc-303b-451a-b53d-978426563f94"
        },
        "item": {
          "id": "d7a1e533-ff13-48be-b087-7e17cf36c588",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7d0ff830-ffff-45c3-b54f-200ddc56a5ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eef91c0-276b-420c-8f60-0ea25da69a52",
        "cursor": {
          "ref": "d2b4930b-7ca5-4421-b9fe-8010004d9fd3",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "23a16446-d7a1-4799-a6b2-46418b212b03"
        },
        "item": {
          "id": "9eef91c0-276b-420c-8f60-0ea25da69a52",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3c9c1336-abdb-495f-9553-04357ea4822e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835c64c7-6e07-480c-aa37-9d160a979235",
        "cursor": {
          "ref": "91acd410-beb6-421f-8ed8-07282c373c4a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b74be921-09b2-44e0-a68d-775ee4921a10"
        },
        "item": {
          "id": "835c64c7-6e07-480c-aa37-9d160a979235",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3e306f9d-5cb3-40b8-913b-f5184b6628c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f1bd1a-90f1-4eee-82bb-102b3f2f7cd0",
        "cursor": {
          "ref": "c4d4965e-1430-4185-ac7b-6f54939c689b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8995bc95-38f2-4ee4-a97f-9b9049c2b873"
        },
        "item": {
          "id": "14f1bd1a-90f1-4eee-82bb-102b3f2f7cd0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e2441f76-e0a5-4c52-b373-a8d586d17417",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3563c8-82c5-4c92-ad97-b93d1f929d89",
        "cursor": {
          "ref": "dcc0d519-6e5d-4d12-9b7d-3853178d6197",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3154fbe0-88c7-4124-a6f8-a56dfb37a7e3"
        },
        "item": {
          "id": "5e3563c8-82c5-4c92-ad97-b93d1f929d89",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "556a01bc-4d55-44a2-a155-55924c85fb92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583ffb02-f9cf-422a-85d3-8f27a49244a2",
        "cursor": {
          "ref": "9211b1fc-7f4d-41d0-b189-6f0f9bc1943e",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dc3e6af8-a0ab-4b8e-a0e6-91d3d747e14d"
        },
        "item": {
          "id": "583ffb02-f9cf-422a-85d3-8f27a49244a2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "395dac79-15d6-4928-a1b2-fd3458013763",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14122d4c-982f-4ef0-806f-2b38c07d734f",
        "cursor": {
          "ref": "1c2b170e-3193-4a93-9650-81364eb120cb",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c890e62e-d3ce-4112-8141-0c009b6c4e3b"
        },
        "item": {
          "id": "14122d4c-982f-4ef0-806f-2b38c07d734f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cf367f46-bdd2-4277-bf9e-e5e4102018ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a058def-68fe-4884-9da3-285f295cfcd1",
        "cursor": {
          "ref": "d049c1a1-de81-446d-933d-1cb4221fb48f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "010f865a-0473-4922-a62a-3c0c510f6611"
        },
        "item": {
          "id": "0a058def-68fe-4884-9da3-285f295cfcd1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0d7d5726-187e-44e5-882a-aa2da15e2de1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24846bb2-f353-4f24-af09-21d1c9655c69",
        "cursor": {
          "ref": "3474b048-9d9b-4d69-85be-684f9952a3aa",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a399a05d-0b3d-4836-84d6-fc620208cd82"
        },
        "item": {
          "id": "24846bb2-f353-4f24-af09-21d1c9655c69",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "64421db8-d18e-47a9-ab29-2a241ce8b9bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92217ce-03f5-4d73-9457-b83445cbad0c",
        "cursor": {
          "ref": "064c3e06-ea82-49e0-a3f9-8e9399ed7621",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2ac0ed2d-cbba-4d3b-9ae7-250c2fd027e8"
        },
        "item": {
          "id": "c92217ce-03f5-4d73-9457-b83445cbad0c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e77c14e4-1c6e-4c4d-a1fe-8747791b267e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dec6355-0fef-4cf9-9831-59c1486066b8",
        "cursor": {
          "ref": "fb114c75-8c0d-405f-b063-c3d3154d0d18",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1877f2fb-30d4-45a9-9304-8bea67a1327e"
        },
        "item": {
          "id": "1dec6355-0fef-4cf9-9831-59c1486066b8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fff4e1e3-6633-4280-be1b-adc42a5932c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e252b5-4d26-4e58-ac29-2bd42ec65818",
        "cursor": {
          "ref": "f50aa907-bd9f-4ef6-b2a6-0c33b8192801",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cb80546d-8696-4cb0-b391-a284c175a27b"
        },
        "item": {
          "id": "46e252b5-4d26-4e58-ac29-2bd42ec65818",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7695527b-9ca5-4681-b1f9-d4fcf26c55f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37526352-b2cb-483d-8acc-1d9641ad7a21",
        "cursor": {
          "ref": "29f0bd96-2939-4ed1-897c-cb1c60a3144f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "70aa7c49-74e4-4b1b-9e3d-4fa3d2d85382"
        },
        "item": {
          "id": "37526352-b2cb-483d-8acc-1d9641ad7a21",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e0bae2ca-1657-48b6-8e84-4f51a7d84fff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d79291-6e38-4a9d-bc36-0d1660e0da40",
        "cursor": {
          "ref": "6947372b-725f-45e6-a53a-9f22abe5989f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "68b1c30c-7d14-4bb2-82fe-0b88309bd3aa"
        },
        "item": {
          "id": "77d79291-6e38-4a9d-bc36-0d1660e0da40",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9d513a1e-e608-491a-8e0e-000bd4e6a033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ed3b53-7f0a-403b-857f-42028ef4219a",
        "cursor": {
          "ref": "15c54d78-5b3d-4ac7-a8fe-7010e0e5d6d4",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5dbcccc2-38d3-473f-af91-2be7a57a17f3"
        },
        "item": {
          "id": "b2ed3b53-7f0a-403b-857f-42028ef4219a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7185d862-5cd0-4501-b625-e01966f54d33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f627be15-f815-4446-9020-cc2fb131bb44",
        "cursor": {
          "ref": "704cfd42-8fd4-40b6-83bf-df68b4fcf3d2",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "56b52343-becc-4bb1-9fb8-142bcb80a5ad"
        },
        "item": {
          "id": "f627be15-f815-4446-9020-cc2fb131bb44",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f7ac6401-ee96-4e8e-b0bf-454971538120",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43bed0c-487d-432f-afbf-586cb2cb2da5",
        "cursor": {
          "ref": "51a947a5-ea19-49f9-b490-9d858f624820",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d65ba0a0-4468-4c40-abe9-035b7d976a9c"
        },
        "item": {
          "id": "b43bed0c-487d-432f-afbf-586cb2cb2da5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "95cabcb3-87ef-4888-9d98-c66ac54c0757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8714f8-3b0e-4571-8ac0-de99c0e1ddf0",
        "cursor": {
          "ref": "d36c9296-f153-4a67-8817-08f2f055427f",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4bdcee8f-ff9b-4cb4-974e-f2b8534a26e9"
        },
        "item": {
          "id": "8b8714f8-3b0e-4571-8ac0-de99c0e1ddf0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b1c030a9-f4b1-4093-8b52-07bf1cc4308b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b0313-cfeb-49ee-ab10-5d6f0cf3e469",
        "cursor": {
          "ref": "3609d859-2571-41bb-8028-f64990d24b7a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "cc95764b-547d-4aa7-a45f-4ddf1e0ef352"
        },
        "item": {
          "id": "c69b0313-cfeb-49ee-ab10-5d6f0cf3e469",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "199630d6-b662-4041-9ef9-2e5b8db94ea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4640c0d9-f3ad-4e4f-b143-cd7c8cc43824",
        "cursor": {
          "ref": "88e81b68-a438-4500-a87e-6a29a10588e4",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3056a65d-0159-4825-85cf-43d9c71bd44b"
        },
        "item": {
          "id": "4640c0d9-f3ad-4e4f-b143-cd7c8cc43824",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a51017a4-9ee5-4a8d-af89-041892308dfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f3f727-e5b4-4c2b-be59-7beb358e797d",
        "cursor": {
          "ref": "0b9929d8-4668-42dc-828a-3de46c608a8a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9b10d96d-2719-4ce8-90fe-262e6893414e"
        },
        "item": {
          "id": "f0f3f727-e5b4-4c2b-be59-7beb358e797d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a825b817-3106-4d30-bc70-3c61c645870b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e0e038-f4a7-443f-b818-2fa4277c063a",
        "cursor": {
          "ref": "aa146e38-d712-4789-9a80-d2419dc96efd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3d8f3bf1-7dd5-4186-b79c-18f648d38057"
        },
        "item": {
          "id": "d7e0e038-f4a7-443f-b818-2fa4277c063a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "744d2eb2-86b3-417f-9f48-e521f2141857",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e827c03-20a6-41ba-9ef3-5ee63f698d98",
        "cursor": {
          "ref": "95cc8ff7-6f45-47f9-9e30-2a7fb2a97b73",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "88ed8e25-390d-4f41-9236-42a0038cc557"
        },
        "item": {
          "id": "8e827c03-20a6-41ba-9ef3-5ee63f698d98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "76b02528-eb88-4f69-98c4-5d24776a883c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaeaf2d3-e6e1-404c-912b-a41a90778ca6",
        "cursor": {
          "ref": "75756fe9-0c9d-4e38-99f8-8c67ef494cc1",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4c3b8164-5d73-4d57-bd7b-51f1d1274970"
        },
        "item": {
          "id": "aaeaf2d3-e6e1-404c-912b-a41a90778ca6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d978303d-a496-4c32-b7f5-6fb69df57936",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c68e61-dfa0-4f10-8aec-a0e30b9cd65e",
        "cursor": {
          "ref": "0be7b970-d4e1-426c-af06-dac9b8ed448e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "50168ead-4caf-4d21-a4cd-23efed1d2690"
        },
        "item": {
          "id": "c1c68e61-dfa0-4f10-8aec-a0e30b9cd65e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "25826afc-4c10-454d-ac6c-e993802f09e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523beea4-d375-465e-a82c-725de07877e4",
        "cursor": {
          "ref": "b7ad5442-5d00-4bb6-94f2-602af2b619a2",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c101241-82ae-49be-9dda-448c6fc51ee7"
        },
        "item": {
          "id": "523beea4-d375-465e-a82c-725de07877e4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "994ff033-3644-4bca-98f7-2296e7b51930",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eaa189c-a13e-4bb7-937f-bf1ec7985993",
        "cursor": {
          "ref": "c99f1f19-1a7e-406b-b485-0ff59bb71aac",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7040a3bf-0daf-4eb6-bd42-a43e3cf9bfed"
        },
        "item": {
          "id": "3eaa189c-a13e-4bb7-937f-bf1ec7985993",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "093bedf2-a625-4cbb-bde1-a39f8e224672",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f0366-4613-46c3-a371-b9b4f6b03eab",
        "cursor": {
          "ref": "ffa0ee38-f913-41c0-bd06-57e64a8acaa2",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7de51a0c-a885-4a7d-b296-9d5f60a8afcc"
        },
        "item": {
          "id": "516f0366-4613-46c3-a371-b9b4f6b03eab",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "923e843a-ea30-458e-8d65-772fa51a1821",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dab82da-f6c9-484a-93ad-0564803e98ac",
        "cursor": {
          "ref": "408d9a9c-1b76-48fa-818b-69469179171b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "351a72b9-38af-4db0-a9d7-39a23d499dfb"
        },
        "item": {
          "id": "8dab82da-f6c9-484a-93ad-0564803e98ac",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fddf439a-b798-4551-9139-a5e161d2ffa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47970f46-5a05-4e78-a652-e03f6d89ee69",
        "cursor": {
          "ref": "3bbdc5cb-b516-4106-81f5-a19e11057c11",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7767d228-7b76-4657-a582-08e8b735272a"
        },
        "item": {
          "id": "47970f46-5a05-4e78-a652-e03f6d89ee69",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "21da7782-b275-4a9a-8841-c7931b28e372",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1c3a4a0c-4fe4-440d-8a29-47cfb6785759",
        "cursor": {
          "ref": "95a698e4-9903-4093-821b-e1cae44ad139",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bca85942-dac1-4eb4-b04a-4e4abd887ff9"
        },
        "item": {
          "id": "1c3a4a0c-4fe4-440d-8a29-47cfb6785759",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1345ae03-2419-42b0-ae76-07e2c1fe07d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "73cf5f06-b23b-452b-84f3-c6d4c5e15625",
        "cursor": {
          "ref": "7ee7477a-efe3-40dc-bc44-89663d520453",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "29919412-06a4-47a4-abe2-a42612caca36"
        },
        "item": {
          "id": "73cf5f06-b23b-452b-84f3-c6d4c5e15625",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1d392f60-8c31-4c2d-b4d7-78eff4cd31e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "55f2318d-1397-49a0-8abb-ddbb7b7d1441",
        "cursor": {
          "ref": "4dee9f1c-38bc-40d6-8c22-0e5300880d1a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8066f3a8-6b75-427c-a30a-987be5231d8f"
        },
        "item": {
          "id": "55f2318d-1397-49a0-8abb-ddbb7b7d1441",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "04935feb-e350-42d1-abd9-2d676b96e6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f2318d-1397-49a0-8abb-ddbb7b7d1441",
        "cursor": {
          "ref": "4dee9f1c-38bc-40d6-8c22-0e5300880d1a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8066f3a8-6b75-427c-a30a-987be5231d8f"
        },
        "item": {
          "id": "55f2318d-1397-49a0-8abb-ddbb7b7d1441",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "04935feb-e350-42d1-abd9-2d676b96e6c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7fbe62-8abe-4120-b314-1918dbb90ba8",
        "cursor": {
          "ref": "37a2ff27-0c2d-4c64-8778-ca0a9fac27ed",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b4a71226-7aca-4124-8902-8d4de7ce9274"
        },
        "item": {
          "id": "5e7fbe62-8abe-4120-b314-1918dbb90ba8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "395bd9a7-97df-4896-b792-7168dced1918",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20771bb6-cc0b-4fbe-83f1-4c9208f0d836",
        "cursor": {
          "ref": "60664080-ddfa-46a2-8698-e90334816389",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5de32cc9-e0f1-454d-85d8-c3e816b16484"
        },
        "item": {
          "id": "20771bb6-cc0b-4fbe-83f1-4c9208f0d836",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4ccaa46b-b45a-4465-b9c1-3b24fe548971",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}